<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8">
<link rel="icon" href="https://tc39.github.io/ecma262/img/favicon.ico">
<link href="ECMAScript%C2%AE%202017%20Language%20Specification_files/ecmarkup.css" rel="stylesheet">
<link rel="stylesheet" href="ECMAScript%C2%AE%202017%20Language%20Specification_files/github.css">
<script src="ECMAScript%C2%AE%202017%20Language%20Specification_files/ecmarkup.js"></script>
<script>
  if (location.hostname === 'tc39.github.io' && location.protocol !== 'https:') {
    location.protocol = 'https:';
  }
</script>
<title>ECMAScriptÂ® 2017 Language Specification</title><script type="application/json" id="menu-search-biblio">[{"type":"clause","id":"sec-intro","aoid":null,"title":"Introduction","titleHTML":"Introduction","number":"","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Introduction"},{"type":"clause","id":"sec-scope","aoid":null,"title":"Scope","titleHTML":"Scope","number":"1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Scope"},{"type":"clause","id":"sec-conformance","aoid":null,"title":"Conformance","titleHTML":"Conformance","number":"2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Conformance"},{"type":"clause","id":"sec-normative-references","aoid":null,"title":"Normative References","titleHTML":"Normative References","number":"3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Normative References"},{"type":"clause","id":"sec-web-scripting","aoid":null,"title":"Web Scripting","titleHTML":"Web Scripting","number":"4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Web Scripting"},{"type":"figure","id":"figure-1","number":1,"caption":"Figure 1: Object/Prototype Relationships","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Figure 1: Object/Prototype Relationships"},{"type":"clause","id":"sec-objects","aoid":null,"title":"Objects","titleHTML":"Objects","number":"4.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Objects"},{"type":"clause","id":"sec-strict-variant-of-ecmascript","aoid":null,"title":"The Strict Variant of ECMAScript","titleHTML":"The Strict Variant of ECMAScript","number":"4.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Strict Variant of ECMAScript"},{"type":"clause","id":"sec-ecmascript-overview","aoid":null,"title":"ECMAScript Overview","titleHTML":"ECMAScript Overview","number":"4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Overview"},{"type":"clause","id":"sec-type","aoid":null,"title":"type","titleHTML":"type","number":"4.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"type"},{"type":"clause","id":"sec-primitive-value","aoid":null,"title":"primitive value","titleHTML":"primitive value","number":"4.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"primitive value"},{"type":"clause","id":"sec-terms-and-definitions-object","aoid":null,"title":"object","titleHTML":"object","number":"4.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"object"},{"type":"clause","id":"sec-constructor","aoid":null,"title":"constructor","titleHTML":"constructor","number":"4.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"constructor"},{"type":"clause","id":"sec-terms-and-definitions-prototype","aoid":null,"title":"prototype","titleHTML":"prototype","number":"4.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"prototype"},{"type":"clause","id":"sec-ordinary-object","aoid":null,"title":"ordinary object","titleHTML":"ordinary object","number":"4.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ordinary object"},{"type":"clause","id":"sec-exotic-object","aoid":null,"title":"exotic object","titleHTML":"exotic object","number":"4.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"exotic object"},{"type":"clause","id":"sec-standard-object","aoid":null,"title":"standard object","titleHTML":"standard object","number":"4.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"standard object"},{"type":"clause","id":"sec-built-in-object","aoid":null,"title":"built-in object","titleHTML":"built-in object","number":"4.3.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"built-in object"},{"type":"clause","id":"sec-undefined-value","aoid":null,"title":"undefined value","titleHTML":"undefined value","number":"4.3.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"undefined value"},{"type":"clause","id":"sec-terms-and-definitions-undefined-type","aoid":null,"title":"Undefined type","titleHTML":"Undefined type","number":"4.3.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Undefined type"},{"type":"clause","id":"sec-null-value","aoid":null,"title":"null value","titleHTML":"null value","number":"4.3.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"null value"},{"type":"clause","id":"sec-terms-and-definitions-null-type","aoid":null,"title":"Null type","titleHTML":"Null type","number":"4.3.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Null type"},{"type":"clause","id":"sec-terms-and-definitions-boolean-value","aoid":null,"title":"Boolean value","titleHTML":"Boolean value","number":"4.3.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean value"},{"type":"clause","id":"sec-terms-and-definitions-boolean-type","aoid":null,"title":"Boolean type","titleHTML":"Boolean type","number":"4.3.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean type"},{"type":"clause","id":"sec-boolean-object","aoid":null,"title":"Boolean object","titleHTML":"Boolean object","number":"4.3.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean object"},{"type":"clause","id":"sec-terms-and-definitions-string-value","aoid":null,"title":"String value","titleHTML":"String value","number":"4.3.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String value"},{"type":"clause","id":"sec-terms-and-definitions-string-type","aoid":null,"title":"String type","titleHTML":"String type","number":"4.3.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String type"},{"type":"clause","id":"sec-string-object","aoid":null,"title":"String object","titleHTML":"String object","number":"4.3.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String object"},{"type":"clause","id":"sec-terms-and-definitions-number-value","aoid":null,"title":"Number value","titleHTML":"Number value","number":"4.3.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number value"},{"type":"clause","id":"sec-terms-and-definitions-number-type","aoid":null,"title":"Number type","titleHTML":"Number type","number":"4.3.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number type"},{"type":"clause","id":"sec-number-object","aoid":null,"title":"Number object","titleHTML":"Number object","number":"4.3.22","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number object"},{"type":"clause","id":"sec-terms-and-definitions-infinity","aoid":null,"title":"Infinity","titleHTML":"Infinity","number":"4.3.23","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Infinity"},{"type":"clause","id":"sec-terms-and-definitions-nan","aoid":null,"title":"NaN","titleHTML":"NaN","number":"4.3.24","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NaN"},{"type":"clause","id":"sec-symbol-value","aoid":null,"title":"Symbol value","titleHTML":"Symbol value","number":"4.3.25","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol value"},{"type":"clause","id":"sec-terms-and-definitions-symbol-type","aoid":null,"title":"Symbol type","titleHTML":"Symbol type","number":"4.3.26","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol type"},{"type":"clause","id":"sec-symbol-object","aoid":null,"title":"Symbol object","titleHTML":"Symbol object","number":"4.3.27","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol object"},{"type":"clause","id":"sec-terms-and-definitions-function","aoid":null,"title":"function","titleHTML":"function","number":"4.3.28","namespace":"https://tc39.github.io/ecma262/","location":"","key":"function"},{"type":"clause","id":"sec-built-in-function","aoid":null,"title":"built-in function","titleHTML":"built-in function","number":"4.3.29","namespace":"https://tc39.github.io/ecma262/","location":"","key":"built-in function"},{"type":"clause","id":"sec-property","aoid":null,"title":"property","titleHTML":"property","number":"4.3.30","namespace":"https://tc39.github.io/ecma262/","location":"","key":"property"},{"type":"clause","id":"sec-method","aoid":null,"title":"method","titleHTML":"method","number":"4.3.31","namespace":"https://tc39.github.io/ecma262/","location":"","key":"method"},{"type":"clause","id":"sec-built-in-method","aoid":null,"title":"built-in method","titleHTML":"built-in method","number":"4.3.32","namespace":"https://tc39.github.io/ecma262/","location":"","key":"built-in method"},{"type":"clause","id":"sec-attribute","aoid":null,"title":"attribute","titleHTML":"attribute","number":"4.3.33","namespace":"https://tc39.github.io/ecma262/","location":"","key":"attribute"},{"type":"clause","id":"sec-own-property","aoid":null,"title":"own property","titleHTML":"own property","number":"4.3.34","namespace":"https://tc39.github.io/ecma262/","location":"","key":"own property"},{"type":"clause","id":"sec-inherited-property","aoid":null,"title":"inherited property","titleHTML":"inherited property","number":"4.3.35","namespace":"https://tc39.github.io/ecma262/","location":"","key":"inherited property"},{"type":"clause","id":"sec-terms-and-definitions","aoid":null,"title":"Terms and Definitions","titleHTML":"Terms and Definitions","number":"4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Terms and Definitions"},{"type":"clause","id":"sec-organization-of-this-specification","aoid":null,"title":"Organization of This Specification","titleHTML":"Organization of This Specification","number":"4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Organization of This Specification"},{"type":"clause","id":"sec-overview","aoid":null,"title":"Overview","titleHTML":"Overview","number":"4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Overview"},{"type":"term","term":"chain production","refId":"sec-context-free-grammars","namespace":"https://tc39.github.io/ecma262/","location":"","key":"chain production"},{"type":"term","term":"goal symbol","refId":"sec-context-free-grammars","namespace":"https://tc39.github.io/ecma262/","location":"","key":"goal symbol"},{"type":"clause","id":"sec-context-free-grammars","aoid":null,"title":"Context-Free Grammars","titleHTML":"Context-Free Grammars","number":"5.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Context-Free Grammars"},{"type":"clause","id":"sec-lexical-and-regexp-grammars","aoid":null,"title":"The Lexical and RegExp Grammars","titleHTML":"The Lexical and RegExp Grammars","number":"5.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Lexical and RegExp Grammars"},{"type":"clause","id":"sec-numeric-string-grammar","aoid":null,"title":"The Numeric String Grammar","titleHTML":"The Numeric String Grammar","number":"5.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Numeric String Grammar"},{"type":"clause","id":"sec-syntactic-grammar","aoid":null,"title":"The Syntactic Grammar","titleHTML":"The Syntactic Grammar","number":"5.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Syntactic Grammar"},{"type":"clause","id":"sec-grammar-notation","aoid":null,"title":"Grammar Notation","titleHTML":"Grammar Notation","number":"5.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Grammar Notation"},{"type":"clause","id":"sec-syntactic-and-lexical-grammars","aoid":null,"title":"Syntactic and Lexical Grammars","titleHTML":"Syntactic and Lexical Grammars","number":"5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Syntactic and Lexical Grammars"},{"type":"op","aoid":"abs","refId":"sec-algorithm-conventions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"abs"},{"type":"op","aoid":"min","refId":"sec-algorithm-conventions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"min"},{"type":"op","aoid":"max","refId":"sec-algorithm-conventions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"max"},{"type":"op","aoid":"modulo","refId":"sec-algorithm-conventions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"modulo"},{"type":"op","aoid":"floor","refId":"sec-algorithm-conventions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"floor"},{"type":"clause","id":"sec-algorithm-conventions","aoid":null,"title":"Algorithm Conventions","titleHTML":"Algorithm Conventions","number":"5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Algorithm Conventions"},{"type":"term","term":"Early Error Rule","refId":"sec-static-semantic-rules","id":"early-error-rule","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Early Error Rule"},{"type":"clause","id":"sec-static-semantic-rules","aoid":null,"title":"Static Semantic Rules","titleHTML":"Static Semantic Rules","number":"5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantic Rules"},{"type":"clause","id":"sec-notational-conventions","aoid":null,"title":"Notational Conventions","titleHTML":"Notational Conventions","number":"5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Notational Conventions"},{"type":"term","term":"type","refId":"sec-ecmascript-data-types-and-values","id":"type","namespace":"https://tc39.github.io/ecma262/","location":"","key":"type"},{"type":"term","term":"ECMAScript language type","refId":"sec-ecmascript-language-types","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript language type"},{"type":"term","term":"ECMAScript language value","refId":"sec-ecmascript-language-types","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript language value"},{"type":"clause","id":"sec-ecmascript-language-types-undefined-type","aoid":null,"title":"The Undefined Type","titleHTML":"The Undefined Type","number":"6.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Undefined Type"},{"type":"clause","id":"sec-ecmascript-language-types-null-type","aoid":null,"title":"The Null Type","titleHTML":"The Null Type","number":"6.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Null Type"},{"type":"clause","id":"sec-ecmascript-language-types-boolean-type","aoid":null,"title":"The Boolean Type","titleHTML":"The Boolean Type","number":"6.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Boolean Type"},{"type":"clause","id":"sec-ecmascript-language-types-string-type","aoid":null,"title":"The String Type","titleHTML":"The String Type","number":"6.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The String Type"},{"type":"table","id":"table-1","number":1,"caption":"Table 1: Well-known Symbols","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 1: Well-known Symbols"},{"type":"clause","id":"sec-well-known-symbols","aoid":null,"title":"Well-Known Symbols","titleHTML":"Well-Known Symbols","number":"6.1.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Well-Known Symbols"},{"type":"clause","id":"sec-ecmascript-language-types-symbol-type","aoid":null,"title":"The Symbol Type","titleHTML":"The Symbol Type","number":"6.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Symbol Type"},{"type":"clause","id":"sec-ecmascript-language-types-number-type","aoid":null,"title":"The Number Type","titleHTML":"The Number Type","number":"6.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Number Type"},{"type":"table","id":"table-2","number":2,"caption":"Table 2: Attributes of a Data Property","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 2: Attributes of a Data Property"},{"type":"table","id":"table-3","number":3,"caption":"Table 3: Attributes of an Accessor Property","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 3: Attributes of an Accessor Property"},{"type":"table","id":"table-4","number":4,"caption":"Table 4: Default Attribute Values","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 4: Default Attribute Values"},{"type":"clause","id":"sec-property-attributes","aoid":null,"title":"Property Attributes","titleHTML":"Property Attributes","number":"6.1.7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Property Attributes"},{"type":"table","id":"table-5","number":5,"caption":"Table 5: Essential Internal Methods","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 5: Essential Internal Methods"},{"type":"table","id":"table-6","number":6,"caption":"Table 6: Additional Essential Internal Methods of Function Objects","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 6: Additional Essential Internal Methods of Function Objects"},{"type":"clause","id":"sec-object-internal-methods-and-internal-slots","aoid":null,"title":"Object Internal Methods and Internal Slots","titleHTML":"Object Internal Methods and Internal Slots","number":"6.1.7.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object Internal Methods and Internal Slots"},{"type":"clause","id":"sec-invariants-of-the-essential-internal-methods","aoid":null,"title":"Invariants of the Essential Internal Methods","titleHTML":"Invariants of the Essential Internal Methods","number":"6.1.7.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Invariants of the Essential Internal Methods"},{"type":"table","id":"table-7","number":7,"caption":"Table 7: Well-known Intrinsic Objects","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 7: Well-known Intrinsic Objects"},{"type":"clause","id":"sec-well-known-intrinsic-objects","aoid":null,"title":"Well-Known Intrinsic Objects","titleHTML":"Well-Known Intrinsic Objects","number":"6.1.7.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Well-Known Intrinsic Objects"},{"type":"clause","id":"sec-object-type","aoid":null,"title":"The Object Type","titleHTML":"The Object Type","number":"6.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Object Type"},{"type":"clause","id":"sec-ecmascript-language-types","aoid":null,"title":"ECMAScript Language Types","titleHTML":"ECMAScript Language Types","number":"6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Language Types"},{"type":"term","term":"List","refId":"sec-list-and-record-specification-type","namespace":"https://tc39.github.io/ecma262/","location":"","key":"List"},{"type":"term","term":"Record","refId":"sec-list-and-record-specification-type","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Record"},{"type":"clause","id":"sec-list-and-record-specification-type","aoid":null,"title":"The List and Record Specification Types","titleHTML":"The List and Record Specification Types","number":"6.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The List and Record Specification Types"},{"type":"term","term":"Completion Record","refId":"sec-completion-record-specification-type","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Completion Record"},{"type":"table","id":"table-8","number":8,"caption":"Table 8: Completion Record Fields","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 8: Completion Record Fields"},{"type":"term","term":"abrupt completion","refId":"sec-completion-record-specification-type","namespace":"https://tc39.github.io/ecma262/","location":"","key":"abrupt completion"},{"type":"op","aoid":"NormalCompletion","refId":"sec-normalcompletion","location":"","key":"NormalCompletion"},{"type":"clause","id":"sec-normalcompletion","aoid":"NormalCompletion","title":"NormalCompletion","titleHTML":"NormalCompletion","number":"6.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NormalCompletion"},{"type":"clause","id":"sec-implicit-completion-values","aoid":null,"title":"Implicit Completion Values","titleHTML":"Implicit Completion Values","number":"6.2.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Implicit Completion Values"},{"type":"clause","id":"sec-throw-an-exception","aoid":null,"title":"Throw an Exception","titleHTML":"Throw an Exception","number":"6.2.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Throw an Exception"},{"type":"op","aoid":"ReturnIfAbrupt","refId":"sec-returnifabrupt","location":"","key":"ReturnIfAbrupt"},{"type":"clause","id":"sec-returnifabrupt","aoid":"ReturnIfAbrupt","title":"ReturnIfAbrupt","titleHTML":"ReturnIfAbrupt","number":"6.2.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ReturnIfAbrupt"},{"type":"op","aoid":"UpdateEmpty","refId":"sec-updateempty","location":"","key":"UpdateEmpty"},{"type":"clause","id":"sec-updateempty","aoid":"UpdateEmpty","title":"UpdateEmpty ( completionRecord, value)","titleHTML":"UpdateEmpty ( <var>completionRecord</var>, <var>value</var>)","number":"6.2.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"UpdateEmpty ( completionRecord, value)"},{"type":"op","aoid":"Completion","refId":"sec-completion-record-specification-type","location":"","key":"Completion"},{"type":"clause","id":"sec-completion-record-specification-type","aoid":"Completion","title":"The Completion Record Specification Type","titleHTML":"The Completion Record Specification Type","number":"6.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Completion Record Specification Type"},{"type":"term","term":"Reference","refId":"sec-reference-specification-type","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reference"},{"type":"term","term":"Super Reference","refId":"sec-reference-specification-type","id":"super-reference","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Super Reference"},{"type":"term","term":"GetBase","refId":"sec-reference-specification-type","id":"ao-getbase","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetBase"},{"type":"term","term":"GetReferencedName","refId":"sec-reference-specification-type","id":"ao-getreferencedname","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetReferencedName"},{"type":"term","term":"IsStrictReference","refId":"sec-reference-specification-type","id":"ao-isstrictreference","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsStrictReference"},{"type":"term","term":"HasPrimitiveBase","refId":"sec-reference-specification-type","id":"ao-hasprimitivebase","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasPrimitiveBase"},{"type":"term","term":"IsPropertyReference","refId":"sec-reference-specification-type","id":"ao-ispropertyreference","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsPropertyReference"},{"type":"term","term":"IsUnresolvableReference","refId":"sec-reference-specification-type","id":"ao-isunresolvablereference","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsUnresolvableReference"},{"type":"term","term":"IsSuperReference","refId":"sec-reference-specification-type","id":"ao-issuperreference","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsSuperReference"},{"type":"op","aoid":"GetValue","refId":"sec-getvalue","location":"","key":"GetValue"},{"type":"clause","id":"sec-getvalue","aoid":"GetValue","title":"GetValue (V)","titleHTML":"GetValue (<var>V</var>)","number":"6.2.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetValue (V)"},{"type":"op","aoid":"PutValue","refId":"sec-putvalue","location":"","key":"PutValue"},{"type":"clause","id":"sec-putvalue","aoid":"PutValue","title":"PutValue (V, W)","titleHTML":"PutValue (<var>V</var>, <var>W</var>)","number":"6.2.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PutValue (V, W)"},{"type":"op","aoid":"GetThisValue","refId":"sec-getthisvalue","location":"","key":"GetThisValue"},{"type":"clause","id":"sec-getthisvalue","aoid":"GetThisValue","title":"GetThisValue (V)","titleHTML":"GetThisValue (<var>V</var>)","number":"6.2.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetThisValue (V)"},{"type":"op","aoid":"InitializeReferencedBinding","refId":"sec-initializereferencedbinding","location":"","key":"InitializeReferencedBinding"},{"type":"clause","id":"sec-initializereferencedbinding","aoid":"InitializeReferencedBinding","title":"InitializeReferencedBinding (V, W)","titleHTML":"InitializeReferencedBinding (<var>V</var>, <var>W</var>)","number":"6.2.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"InitializeReferencedBinding (V, W)"},{"type":"clause","id":"sec-reference-specification-type","aoid":null,"title":"The Reference Specification Type","titleHTML":"The Reference Specification Type","number":"6.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Reference Specification Type"},{"type":"term","term":"Property Descriptor","refId":"sec-property-descriptor-specification-type","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Property Descriptor"},{"type":"op","aoid":"IsAccessorDescriptor","refId":"sec-isaccessordescriptor","location":"","key":"IsAccessorDescriptor"},{"type":"clause","id":"sec-isaccessordescriptor","aoid":"IsAccessorDescriptor","title":"IsAccessorDescriptor ( Desc )","titleHTML":"IsAccessorDescriptor ( <var>Desc</var> )","number":"6.2.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsAccessorDescriptor ( Desc )"},{"type":"op","aoid":"IsDataDescriptor","refId":"sec-isdatadescriptor","location":"","key":"IsDataDescriptor"},{"type":"clause","id":"sec-isdatadescriptor","aoid":"IsDataDescriptor","title":"IsDataDescriptor ( Desc )","titleHTML":"IsDataDescriptor ( <var>Desc</var> )","number":"6.2.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsDataDescriptor ( Desc )"},{"type":"op","aoid":"IsGenericDescriptor","refId":"sec-isgenericdescriptor","location":"","key":"IsGenericDescriptor"},{"type":"clause","id":"sec-isgenericdescriptor","aoid":"IsGenericDescriptor","title":"IsGenericDescriptor ( Desc )","titleHTML":"IsGenericDescriptor ( <var>Desc</var> )","number":"6.2.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsGenericDescriptor ( Desc )"},{"type":"op","aoid":"FromPropertyDescriptor","refId":"sec-frompropertydescriptor","location":"","key":"FromPropertyDescriptor"},{"type":"clause","id":"sec-frompropertydescriptor","aoid":"FromPropertyDescriptor","title":"FromPropertyDescriptor ( Desc )","titleHTML":"FromPropertyDescriptor ( <var>Desc</var> )","number":"6.2.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FromPropertyDescriptor ( Desc )"},{"type":"op","aoid":"ToPropertyDescriptor","refId":"sec-topropertydescriptor","location":"","key":"ToPropertyDescriptor"},{"type":"clause","id":"sec-topropertydescriptor","aoid":"ToPropertyDescriptor","title":"ToPropertyDescriptor ( Obj )","titleHTML":"ToPropertyDescriptor ( <var>Obj</var> )","number":"6.2.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToPropertyDescriptor ( Obj )"},{"type":"op","aoid":"CompletePropertyDescriptor","refId":"sec-completepropertydescriptor","location":"","key":"CompletePropertyDescriptor"},{"type":"clause","id":"sec-completepropertydescriptor","aoid":"CompletePropertyDescriptor","title":"CompletePropertyDescriptor ( Desc )","titleHTML":"CompletePropertyDescriptor ( <var>Desc</var> )","number":"6.2.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CompletePropertyDescriptor ( Desc )"},{"type":"clause","id":"sec-property-descriptor-specification-type","aoid":null,"title":"The Property Descriptor Specification Type","titleHTML":"The Property Descriptor Specification Type","number":"6.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Property Descriptor Specification Type"},{"type":"clause","id":"sec-lexical-environment-and-environment-record-specification-types","aoid":null,"title":"The Lexical Environment and Environment Record Specification Types","titleHTML":"The Lexical Environment and Environment Record Specification Types","number":"6.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Lexical Environment and Environment Record Specification Types"},{"type":"term","term":"Data Block","refId":"sec-data-blocks","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Data Block"},{"type":"op","aoid":"CreateByteDataBlock","refId":"sec-createbytedatablock","location":"","key":"CreateByteDataBlock"},{"type":"clause","id":"sec-createbytedatablock","aoid":"CreateByteDataBlock","title":"CreateByteDataBlock (size)","titleHTML":"CreateByteDataBlock (<var>size</var>)","number":"6.2.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateByteDataBlock (size)"},{"type":"op","aoid":"CopyDataBlockBytes","refId":"sec-copydatablockbytes","location":"","key":"CopyDataBlockBytes"},{"type":"clause","id":"sec-copydatablockbytes","aoid":"CopyDataBlockBytes","title":"CopyDataBlockBytes (toBlock, toIndex, fromBlock, fromIndex, count)","titleHTML":"CopyDataBlockBytes (<var>toBlock</var>, <var>toIndex</var>, <var>fromBlock</var>, <var>fromIndex</var>, <var>count</var>)","number":"6.2.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CopyDataBlockBytes (toBlock, toIndex, fromBlock, fromIndex, count)"},{"type":"clause","id":"sec-data-blocks","aoid":null,"title":"Data Blocks","titleHTML":"Data Blocks","number":"6.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Data Blocks"},{"type":"clause","id":"sec-ecmascript-specification-types","aoid":null,"title":"ECMAScript Specification Types","titleHTML":"ECMAScript Specification Types","number":"6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Specification Types"},{"type":"op","aoid":"Type","refId":"sec-ecmascript-data-types-and-values","location":"","key":"Type"},{"type":"clause","id":"sec-ecmascript-data-types-and-values","aoid":"Type","title":"ECMAScript Data Types and Values","titleHTML":"ECMAScript Data Types and Values","number":"6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Data Types and Values"},{"type":"table","id":"table-9","number":9,"caption":"Table 9: ToPrimitive Conversions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 9: ToPrimitive Conversions"},{"type":"op","aoid":"OrdinaryToPrimitive","refId":"sec-ordinarytoprimitive","location":"","key":"OrdinaryToPrimitive"},{"type":"clause","id":"sec-ordinarytoprimitive","aoid":"OrdinaryToPrimitive","title":"OrdinaryToPrimitive ( O, hint )","titleHTML":"OrdinaryToPrimitive ( <var>O</var>, <var>hint</var> )","number":"7.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryToPrimitive ( O, hint )"},{"type":"op","aoid":"ToPrimitive","refId":"sec-toprimitive","location":"","key":"ToPrimitive"},{"type":"clause","id":"sec-toprimitive","aoid":"ToPrimitive","title":"ToPrimitive ( input [ , PreferredType ] )","titleHTML":"ToPrimitive ( <var>input</var> [ , <var>PreferredType</var> ] )","number":"7.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToPrimitive ( input [ , PreferredType ] )"},{"type":"table","id":"table-10","number":10,"caption":"Table 10: ToBoolean Conversions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 10: ToBoolean Conversions"},{"type":"op","aoid":"ToBoolean","refId":"sec-toboolean","location":"","key":"ToBoolean"},{"type":"clause","id":"sec-toboolean","aoid":"ToBoolean","title":"ToBoolean ( argument )","titleHTML":"ToBoolean ( <var>argument</var> )","number":"7.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToBoolean ( argument )"},{"type":"table","id":"table-11","number":11,"caption":"Table 11: ToNumber Conversions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 11: ToNumber Conversions"},{"type":"production","id":"prod-StringNumericLiteral","name":"StringNumericLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"StringNumericLiteral"},{"type":"production","id":"prod-StrWhiteSpace","name":"StrWhiteSpace","namespace":"https://tc39.github.io/ecma262/","location":"","key":"StrWhiteSpace"},{"type":"production","id":"prod-StrWhiteSpaceChar","name":"StrWhiteSpaceChar","namespace":"https://tc39.github.io/ecma262/","location":"","key":"StrWhiteSpaceChar"},{"type":"production","id":"prod-StrNumericLiteral","name":"StrNumericLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"StrNumericLiteral"},{"type":"production","id":"prod-StrDecimalLiteral","name":"StrDecimalLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"StrDecimalLiteral"},{"type":"production","id":"prod-StrUnsignedDecimalLiteral","name":"StrUnsignedDecimalLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"StrUnsignedDecimalLiteral"},{"type":"clause","id":"sec-runtime-semantics-mv-s","aoid":null,"title":"Runtime Semantics: MV","titleHTML":"Runtime Semantics: MV","number":"7.1.3.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: MV"},{"type":"clause","id":"sec-tonumber-applied-to-the-string-type","aoid":null,"title":"ToNumber Applied to the String Type","titleHTML":"ToNumber Applied to the String Type","number":"7.1.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToNumber Applied to the String Type"},{"type":"op","aoid":"ToNumber","refId":"sec-tonumber","location":"","key":"ToNumber"},{"type":"clause","id":"sec-tonumber","aoid":"ToNumber","title":"ToNumber ( argument )","titleHTML":"ToNumber ( <var>argument</var> )","number":"7.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToNumber ( argument )"},{"type":"op","aoid":"ToInteger","refId":"sec-tointeger","location":"","key":"ToInteger"},{"type":"clause","id":"sec-tointeger","aoid":"ToInteger","title":"ToInteger ( argument )","titleHTML":"ToInteger ( <var>argument</var> )","number":"7.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToInteger ( argument )"},{"type":"op","aoid":"ToInt32","refId":"sec-toint32","location":"","key":"ToInt32"},{"type":"clause","id":"sec-toint32","aoid":"ToInt32","title":"ToInt32 ( argument )","titleHTML":"ToInt32 ( <var>argument</var> )","number":"7.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToInt32 ( argument )"},{"type":"op","aoid":"ToUint32","refId":"sec-touint32","location":"","key":"ToUint32"},{"type":"clause","id":"sec-touint32","aoid":"ToUint32","title":"ToUint32 ( argument )","titleHTML":"ToUint32 ( <var>argument</var> )","number":"7.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToUint32 ( argument )"},{"type":"op","aoid":"ToInt16","refId":"sec-toint16","location":"","key":"ToInt16"},{"type":"clause","id":"sec-toint16","aoid":"ToInt16","title":"ToInt16 ( argument )","titleHTML":"ToInt16 ( <var>argument</var> )","number":"7.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToInt16 ( argument )"},{"type":"op","aoid":"ToUint16","refId":"sec-touint16","location":"","key":"ToUint16"},{"type":"clause","id":"sec-touint16","aoid":"ToUint16","title":"ToUint16 ( argument )","titleHTML":"ToUint16 ( <var>argument</var> )","number":"7.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToUint16 ( argument )"},{"type":"op","aoid":"ToInt8","refId":"sec-toint8","location":"","key":"ToInt8"},{"type":"clause","id":"sec-toint8","aoid":"ToInt8","title":"ToInt8 ( argument )","titleHTML":"ToInt8 ( <var>argument</var> )","number":"7.1.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToInt8 ( argument )"},{"type":"op","aoid":"ToUint8","refId":"sec-touint8","location":"","key":"ToUint8"},{"type":"clause","id":"sec-touint8","aoid":"ToUint8","title":"ToUint8 ( argument )","titleHTML":"ToUint8 ( <var>argument</var> )","number":"7.1.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToUint8 ( argument )"},{"type":"op","aoid":"ToUint8Clamp","refId":"sec-touint8clamp","location":"","key":"ToUint8Clamp"},{"type":"clause","id":"sec-touint8clamp","aoid":"ToUint8Clamp","title":"ToUint8Clamp ( argument )","titleHTML":"ToUint8Clamp ( <var>argument</var> )","number":"7.1.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToUint8Clamp ( argument )"},{"type":"table","id":"table-12","number":12,"caption":"Table 12: ToString Conversions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 12: ToString Conversions"},{"type":"op","aoid":"ToString Applied to the Number Type","refId":"sec-tostring-applied-to-the-number-type","location":"","key":"ToString Applied to the Number Type"},{"type":"clause","id":"sec-tostring-applied-to-the-number-type","aoid":"ToString Applied to the Number Type","title":"ToString Applied to the Number Type","titleHTML":"ToString Applied to the Number Type","number":"7.1.12.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToString Applied to the Number Type"},{"type":"op","aoid":"ToString","refId":"sec-tostring","location":"","key":"ToString"},{"type":"clause","id":"sec-tostring","aoid":"ToString","title":"ToString ( argument )","titleHTML":"ToString ( <var>argument</var> )","number":"7.1.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToString ( argument )"},{"type":"table","id":"table-13","number":13,"caption":"Table 13: ToObject Conversions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 13: ToObject Conversions"},{"type":"op","aoid":"ToObject","refId":"sec-toobject","location":"","key":"ToObject"},{"type":"clause","id":"sec-toobject","aoid":"ToObject","title":"ToObject ( argument )","titleHTML":"ToObject ( <var>argument</var> )","number":"7.1.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToObject ( argument )"},{"type":"op","aoid":"ToPropertyKey","refId":"sec-topropertykey","location":"","key":"ToPropertyKey"},{"type":"clause","id":"sec-topropertykey","aoid":"ToPropertyKey","title":"ToPropertyKey ( argument )","titleHTML":"ToPropertyKey ( <var>argument</var> )","number":"7.1.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToPropertyKey ( argument )"},{"type":"op","aoid":"ToLength","refId":"sec-tolength","location":"","key":"ToLength"},{"type":"clause","id":"sec-tolength","aoid":"ToLength","title":"ToLength ( argument )","titleHTML":"ToLength ( <var>argument</var> )","number":"7.1.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToLength ( argument )"},{"type":"op","aoid":"CanonicalNumericIndexString","refId":"sec-canonicalnumericindexstring","location":"","key":"CanonicalNumericIndexString"},{"type":"clause","id":"sec-canonicalnumericindexstring","aoid":"CanonicalNumericIndexString","title":"CanonicalNumericIndexString ( argument )","titleHTML":"CanonicalNumericIndexString ( <var>argument</var> )","number":"7.1.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CanonicalNumericIndexString ( argument )"},{"type":"op","aoid":"ToIndex","refId":"sec-toindex","location":"","key":"ToIndex"},{"type":"clause","id":"sec-toindex","aoid":"ToIndex","title":"ToIndex ( value )","titleHTML":"ToIndex ( <var>value</var> )","number":"7.1.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ToIndex ( value )"},{"type":"clause","id":"sec-type-conversion","aoid":null,"title":"Type Conversion","titleHTML":"Type Conversion","number":"7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Type Conversion"},{"type":"table","id":"table-14","number":14,"caption":"Table 14: RequireObjectCoercible Results","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 14: RequireObjectCoercible Results"},{"type":"op","aoid":"RequireObjectCoercible","refId":"sec-requireobjectcoercible","location":"","key":"RequireObjectCoercible"},{"type":"clause","id":"sec-requireobjectcoercible","aoid":"RequireObjectCoercible","title":"RequireObjectCoercible ( argument )","titleHTML":"RequireObjectCoercible ( <var>argument</var> )","number":"7.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RequireObjectCoercible ( argument )"},{"type":"op","aoid":"IsArray","refId":"sec-isarray","location":"","key":"IsArray"},{"type":"clause","id":"sec-isarray","aoid":"IsArray","title":"IsArray ( argument )","titleHTML":"IsArray ( <var>argument</var> )","number":"7.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsArray ( argument )"},{"type":"op","aoid":"IsCallable","refId":"sec-iscallable","location":"","key":"IsCallable"},{"type":"clause","id":"sec-iscallable","aoid":"IsCallable","title":"IsCallable ( argument )","titleHTML":"IsCallable ( <var>argument</var> )","number":"7.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsCallable ( argument )"},{"type":"op","aoid":"IsConstructor","refId":"sec-isconstructor","location":"","key":"IsConstructor"},{"type":"clause","id":"sec-isconstructor","aoid":"IsConstructor","title":"IsConstructor ( argument )","titleHTML":"IsConstructor ( <var>argument</var> )","number":"7.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsConstructor ( argument )"},{"type":"op","aoid":"IsExtensible","refId":"sec-isextensible-o","location":"","key":"IsExtensible"},{"type":"clause","id":"sec-isextensible-o","aoid":"IsExtensible","title":"IsExtensible (O)","titleHTML":"IsExtensible (<var>O</var>)","number":"7.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsExtensible (O)"},{"type":"op","aoid":"IsInteger","refId":"sec-isinteger","location":"","key":"IsInteger"},{"type":"clause","id":"sec-isinteger","aoid":"IsInteger","title":"IsInteger ( argument )","titleHTML":"IsInteger ( <var>argument</var> )","number":"7.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsInteger ( argument )"},{"type":"op","aoid":"IsPropertyKey","refId":"sec-ispropertykey","location":"","key":"IsPropertyKey"},{"type":"clause","id":"sec-ispropertykey","aoid":"IsPropertyKey","title":"IsPropertyKey ( argument )","titleHTML":"IsPropertyKey ( <var>argument</var> )","number":"7.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsPropertyKey ( argument )"},{"type":"op","aoid":"IsRegExp","refId":"sec-isregexp","location":"","key":"IsRegExp"},{"type":"clause","id":"sec-isregexp","aoid":"IsRegExp","title":"IsRegExp ( argument )","titleHTML":"IsRegExp ( <var>argument</var> )","number":"7.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsRegExp ( argument )"},{"type":"op","aoid":"SameValue","refId":"sec-samevalue","location":"","key":"SameValue"},{"type":"clause","id":"sec-samevalue","aoid":"SameValue","title":"SameValue (x, y)","titleHTML":"SameValue (<var>x</var>, <var>y</var>)","number":"7.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SameValue (x, y)"},{"type":"op","aoid":"SameValueZero","refId":"sec-samevaluezero","location":"","key":"SameValueZero"},{"type":"clause","id":"sec-samevaluezero","aoid":"SameValueZero","title":"SameValueZero (x, y)","titleHTML":"SameValueZero (<var>x</var>, <var>y</var>)","number":"7.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SameValueZero (x, y)"},{"type":"op","aoid":"SameValueNonNumber","refId":"sec-samevaluenonnumber","location":"","key":"SameValueNonNumber"},{"type":"clause","id":"sec-samevaluenonnumber","aoid":"SameValueNonNumber","title":"SameValueNonNumber (x, y)","titleHTML":"SameValueNonNumber (<var>x</var>, <var>y</var>)","number":"7.2.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SameValueNonNumber (x, y)"},{"type":"op","aoid":"Abstract Relational Comparison","refId":"sec-abstract-relational-comparison","location":"","key":"Abstract Relational Comparison"},{"type":"clause","id":"sec-abstract-relational-comparison","aoid":"Abstract Relational Comparison","title":"Abstract Relational Comparison","titleHTML":"Abstract Relational Comparison","number":"7.2.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Abstract Relational Comparison"},{"type":"op","aoid":"Abstract Equality Comparison","refId":"sec-abstract-equality-comparison","location":"","key":"Abstract Equality Comparison"},{"type":"clause","id":"sec-abstract-equality-comparison","aoid":"Abstract Equality Comparison","title":"Abstract Equality Comparison","titleHTML":"Abstract Equality Comparison","number":"7.2.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Abstract Equality Comparison"},{"type":"op","aoid":"Strict Equality Comparison","refId":"sec-strict-equality-comparison","location":"","key":"Strict Equality Comparison"},{"type":"clause","id":"sec-strict-equality-comparison","aoid":"Strict Equality Comparison","title":"Strict Equality Comparison","titleHTML":"Strict Equality Comparison","number":"7.2.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Strict Equality Comparison"},{"type":"clause","id":"sec-testing-and-comparison-operations","aoid":null,"title":"Testing and Comparison Operations","titleHTML":"Testing and Comparison Operations","number":"7.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Testing and Comparison Operations"},{"type":"op","aoid":"Get","refId":"sec-get-o-p","location":"","key":"Get"},{"type":"clause","id":"sec-get-o-p","aoid":"Get","title":"Get (O, P)","titleHTML":"Get (<var>O</var>, <var>P</var>)","number":"7.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Get (O, P)"},{"type":"op","aoid":"GetV","refId":"sec-getv","location":"","key":"GetV"},{"type":"clause","id":"sec-getv","aoid":"GetV","title":"GetV (V, P)","titleHTML":"GetV (<var>V</var>, <var>P</var>)","number":"7.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetV (V, P)"},{"type":"op","aoid":"Set","refId":"sec-set-o-p-v-throw","location":"","key":"Set"},{"type":"clause","id":"sec-set-o-p-v-throw","aoid":"Set","title":"Set (O, P, V, Throw)","titleHTML":"Set (<var>O</var>, <var>P</var>, <var>V</var>, <var>Throw</var>)","number":"7.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set (O, P, V, Throw)"},{"type":"op","aoid":"CreateDataProperty","refId":"sec-createdataproperty","location":"","key":"CreateDataProperty"},{"type":"clause","id":"sec-createdataproperty","aoid":"CreateDataProperty","title":"CreateDataProperty (O, P, V)","titleHTML":"CreateDataProperty (<var>O</var>, <var>P</var>, <var>V</var>)","number":"7.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateDataProperty (O, P, V)"},{"type":"op","aoid":"CreateMethodProperty","refId":"sec-createmethodproperty","location":"","key":"CreateMethodProperty"},{"type":"clause","id":"sec-createmethodproperty","aoid":"CreateMethodProperty","title":"CreateMethodProperty (O, P, V)","titleHTML":"CreateMethodProperty (<var>O</var>, <var>P</var>, <var>V</var>)","number":"7.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateMethodProperty (O, P, V)"},{"type":"op","aoid":"CreateDataPropertyOrThrow","refId":"sec-createdatapropertyorthrow","location":"","key":"CreateDataPropertyOrThrow"},{"type":"clause","id":"sec-createdatapropertyorthrow","aoid":"CreateDataPropertyOrThrow","title":"CreateDataPropertyOrThrow (O, P, V)","titleHTML":"CreateDataPropertyOrThrow (<var>O</var>, <var>P</var>, <var>V</var>)","number":"7.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateDataPropertyOrThrow (O, P, V)"},{"type":"op","aoid":"DefinePropertyOrThrow","refId":"sec-definepropertyorthrow","location":"","key":"DefinePropertyOrThrow"},{"type":"clause","id":"sec-definepropertyorthrow","aoid":"DefinePropertyOrThrow","title":"DefinePropertyOrThrow (O, P, desc)","titleHTML":"DefinePropertyOrThrow (<var>O</var>, <var>P</var>, <var>desc</var>)","number":"7.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DefinePropertyOrThrow (O, P, desc)"},{"type":"op","aoid":"DeletePropertyOrThrow","refId":"sec-deletepropertyorthrow","location":"","key":"DeletePropertyOrThrow"},{"type":"clause","id":"sec-deletepropertyorthrow","aoid":"DeletePropertyOrThrow","title":"DeletePropertyOrThrow (O, P)","titleHTML":"DeletePropertyOrThrow (<var>O</var>, <var>P</var>)","number":"7.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DeletePropertyOrThrow (O, P)"},{"type":"op","aoid":"GetMethod","refId":"sec-getmethod","location":"","key":"GetMethod"},{"type":"clause","id":"sec-getmethod","aoid":"GetMethod","title":"GetMethod (V, P)","titleHTML":"GetMethod (<var>V</var>, <var>P</var>)","number":"7.3.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetMethod (V, P)"},{"type":"op","aoid":"HasProperty","refId":"sec-hasproperty","location":"","key":"HasProperty"},{"type":"clause","id":"sec-hasproperty","aoid":"HasProperty","title":"HasProperty (O, P)","titleHTML":"HasProperty (<var>O</var>, <var>P</var>)","number":"7.3.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasProperty (O, P)"},{"type":"op","aoid":"HasOwnProperty","refId":"sec-hasownproperty","location":"","key":"HasOwnProperty"},{"type":"clause","id":"sec-hasownproperty","aoid":"HasOwnProperty","title":"HasOwnProperty (O, P)","titleHTML":"HasOwnProperty (<var>O</var>, <var>P</var>)","number":"7.3.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasOwnProperty (O, P)"},{"type":"op","aoid":"Call","refId":"sec-call","location":"","key":"Call"},{"type":"clause","id":"sec-call","aoid":"Call","title":"Call (F, V [ , argumentsList ])","titleHTML":"Call (<var>F</var>, <var>V</var> [ , <var>argumentsList</var> ])","number":"7.3.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Call (F, V [ , argumentsList ])"},{"type":"op","aoid":"Construct","refId":"sec-construct","location":"","key":"Construct"},{"type":"clause","id":"sec-construct","aoid":"Construct","title":"Construct (F [ , argumentsList [ , newTarget ]])","titleHTML":"Construct (<var>F</var> [ , <var>argumentsList</var> [ , <var>newTarget</var> ]])","number":"7.3.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Construct (F [ , argumentsList [ , newTarget ]])"},{"type":"op","aoid":"SetIntegrityLevel","refId":"sec-setintegritylevel","location":"","key":"SetIntegrityLevel"},{"type":"clause","id":"sec-setintegritylevel","aoid":"SetIntegrityLevel","title":"SetIntegrityLevel (O, level)","titleHTML":"SetIntegrityLevel (<var>O</var>, <var>level</var>)","number":"7.3.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SetIntegrityLevel (O, level)"},{"type":"op","aoid":"TestIntegrityLevel","refId":"sec-testintegritylevel","location":"","key":"TestIntegrityLevel"},{"type":"clause","id":"sec-testintegritylevel","aoid":"TestIntegrityLevel","title":"TestIntegrityLevel (O, level)","titleHTML":"TestIntegrityLevel (<var>O</var>, <var>level</var>)","number":"7.3.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TestIntegrityLevel (O, level)"},{"type":"op","aoid":"CreateArrayFromList","refId":"sec-createarrayfromlist","location":"","key":"CreateArrayFromList"},{"type":"clause","id":"sec-createarrayfromlist","aoid":"CreateArrayFromList","title":"CreateArrayFromList (elements)","titleHTML":"CreateArrayFromList (<var>elements</var>)","number":"7.3.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateArrayFromList (elements)"},{"type":"op","aoid":"CreateListFromArrayLike","refId":"sec-createlistfromarraylike","location":"","key":"CreateListFromArrayLike"},{"type":"clause","id":"sec-createlistfromarraylike","aoid":"CreateListFromArrayLike","title":"CreateListFromArrayLike (obj [ , elementTypes ] )","titleHTML":"CreateListFromArrayLike (<var>obj</var> [ , <var>elementTypes</var> ] )","number":"7.3.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateListFromArrayLike (obj [ , elementTypes ] )"},{"type":"op","aoid":"Invoke","refId":"sec-invoke","location":"","key":"Invoke"},{"type":"clause","id":"sec-invoke","aoid":"Invoke","title":"Invoke (V, P [ , argumentsList ])","titleHTML":"Invoke (<var>V</var>, <var>P</var> [ , <var>argumentsList</var> ])","number":"7.3.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Invoke (V, P [ , argumentsList ])"},{"type":"op","aoid":"OrdinaryHasInstance","refId":"sec-ordinaryhasinstance","location":"","key":"OrdinaryHasInstance"},{"type":"clause","id":"sec-ordinaryhasinstance","aoid":"OrdinaryHasInstance","title":"OrdinaryHasInstance (C, O)","titleHTML":"OrdinaryHasInstance (<var>C</var>, <var>O</var>)","number":"7.3.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryHasInstance (C, O)"},{"type":"op","aoid":"SpeciesConstructor","refId":"sec-speciesconstructor","location":"","key":"SpeciesConstructor"},{"type":"clause","id":"sec-speciesconstructor","aoid":"SpeciesConstructor","title":"SpeciesConstructor ( O, defaultConstructor )","titleHTML":"SpeciesConstructor ( <var>O</var>, <var>defaultConstructor</var> )","number":"7.3.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SpeciesConstructor ( O, defaultConstructor )"},{"type":"op","aoid":"EnumerableOwnProperties","refId":"sec-enumerableownproperties","location":"","key":"EnumerableOwnProperties"},{"type":"clause","id":"sec-enumerableownproperties","aoid":"EnumerableOwnProperties","title":"EnumerableOwnProperties ( O, kind )","titleHTML":"EnumerableOwnProperties ( <var>O</var>, <var>kind</var> )","number":"7.3.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"EnumerableOwnProperties ( O, kind )"},{"type":"op","aoid":"GetFunctionRealm","refId":"sec-getfunctionrealm","location":"","key":"GetFunctionRealm"},{"type":"clause","id":"sec-getfunctionrealm","aoid":"GetFunctionRealm","title":"GetFunctionRealm ( obj )","titleHTML":"GetFunctionRealm ( <var>obj</var> )","number":"7.3.22","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetFunctionRealm ( obj )"},{"type":"clause","id":"sec-operations-on-objects","aoid":null,"title":"Operations on Objects","titleHTML":"Operations on Objects","number":"7.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Operations on Objects"},{"type":"op","aoid":"GetIterator","refId":"sec-getiterator","location":"","key":"GetIterator"},{"type":"clause","id":"sec-getiterator","aoid":"GetIterator","title":"GetIterator ( obj [ , method ] )","titleHTML":"GetIterator ( <var>obj</var> [ , <var>method</var> ] )","number":"7.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetIterator ( obj [ , method ] )"},{"type":"op","aoid":"IteratorNext","refId":"sec-iteratornext","location":"","key":"IteratorNext"},{"type":"clause","id":"sec-iteratornext","aoid":"IteratorNext","title":"IteratorNext ( iterator [ , value ] )","titleHTML":"IteratorNext ( <var>iterator</var> [ , <var>value</var> ] )","number":"7.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IteratorNext ( iterator [ , value ] )"},{"type":"op","aoid":"IteratorComplete","refId":"sec-iteratorcomplete","location":"","key":"IteratorComplete"},{"type":"clause","id":"sec-iteratorcomplete","aoid":"IteratorComplete","title":"IteratorComplete ( iterResult )","titleHTML":"IteratorComplete ( <var>iterResult</var> )","number":"7.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IteratorComplete ( iterResult )"},{"type":"op","aoid":"IteratorValue","refId":"sec-iteratorvalue","location":"","key":"IteratorValue"},{"type":"clause","id":"sec-iteratorvalue","aoid":"IteratorValue","title":"IteratorValue ( iterResult )","titleHTML":"IteratorValue ( <var>iterResult</var> )","number":"7.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IteratorValue ( iterResult )"},{"type":"op","aoid":"IteratorStep","refId":"sec-iteratorstep","location":"","key":"IteratorStep"},{"type":"clause","id":"sec-iteratorstep","aoid":"IteratorStep","title":"IteratorStep ( iterator )","titleHTML":"IteratorStep ( <var>iterator</var> )","number":"7.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IteratorStep ( iterator )"},{"type":"op","aoid":"IteratorClose","refId":"sec-iteratorclose","location":"","key":"IteratorClose"},{"type":"clause","id":"sec-iteratorclose","aoid":"IteratorClose","title":"IteratorClose ( iterator, completion )","titleHTML":"IteratorClose ( <var>iterator</var>, <var>completion</var> )","number":"7.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IteratorClose ( iterator, completion )"},{"type":"op","aoid":"CreateIterResultObject","refId":"sec-createiterresultobject","location":"","key":"CreateIterResultObject"},{"type":"clause","id":"sec-createiterresultobject","aoid":"CreateIterResultObject","title":"CreateIterResultObject ( value, done )","titleHTML":"CreateIterResultObject ( <var>value</var>, <var>done</var> )","number":"7.4.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateIterResultObject ( value, done )"},{"type":"clause","id":"sec-listiterator-next","aoid":null,"title":"ListIterator next( )","titleHTML":"ListIterator next( )","number":"7.4.8.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ListIterator next( )"},{"type":"op","aoid":"CreateListIterator","refId":"sec-createlistiterator","location":"","key":"CreateListIterator"},{"type":"clause","id":"sec-createlistiterator","aoid":"CreateListIterator","title":"CreateListIterator ( list )","titleHTML":"CreateListIterator ( <var>list</var> )","number":"7.4.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateListIterator ( list )"},{"type":"clause","id":"sec-operations-on-iterator-objects","aoid":null,"title":"Operations on Iterator Objects","titleHTML":"Operations on Iterator Objects","number":"7.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Operations on Iterator Objects"},{"type":"clause","id":"sec-abstract-operations","aoid":null,"title":"Abstract Operations","titleHTML":"Abstract Operations","number":"7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Abstract Operations"},{"type":"term","term":"Lexical Environment","refId":"sec-lexical-environments","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Lexical Environment"},{"type":"term","term":"EnvironmentRecord","refId":"sec-lexical-environments","namespace":"https://tc39.github.io/ecma262/","location":"","key":"EnvironmentRecord"},{"type":"term","term":"global environment","refId":"sec-lexical-environments","id":"global-environment","namespace":"https://tc39.github.io/ecma262/","location":"","key":"global environment"},{"type":"term","term":"global object","refId":"sec-lexical-environments","id":"global-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"global object"},{"type":"term","term":"module environment","refId":"sec-lexical-environments","id":"module-environment","namespace":"https://tc39.github.io/ecma262/","location":"","key":"module environment"},{"type":"term","term":"function environment","refId":"sec-lexical-environments","id":"function-environment","namespace":"https://tc39.github.io/ecma262/","location":"","key":"function environment"},{"type":"term","term":"Environment Record","refId":"sec-environment-records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Environment Record"},{"type":"table","id":"table-15","number":15,"caption":"Table 15: Abstract Methods of Environment Records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 15: Abstract Methods of Environment Records"},{"type":"clause","id":"sec-declarative-environment-records-hasbinding-n","aoid":null,"title":"HasBinding (N)","titleHTML":"HasBinding (<var>N</var>)","number":"8.1.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasBinding (N)"},{"type":"clause","id":"sec-declarative-environment-records-createmutablebinding-n-d","aoid":null,"title":"CreateMutableBinding (N, D)","titleHTML":"CreateMutableBinding (<var>N</var>, <var>D</var>)","number":"8.1.1.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateMutableBinding (N, D)"},{"type":"clause","id":"sec-declarative-environment-records-createimmutablebinding-n-s","aoid":null,"title":"CreateImmutableBinding (N, S)","titleHTML":"CreateImmutableBinding (<var>N</var>, <var>S</var>)","number":"8.1.1.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateImmutableBinding (N, S)"},{"type":"clause","id":"sec-declarative-environment-records-initializebinding-n-v","aoid":null,"title":"InitializeBinding (N, V)","titleHTML":"InitializeBinding (<var>N</var>, <var>V</var>)","number":"8.1.1.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"InitializeBinding (N, V)"},{"type":"clause","id":"sec-declarative-environment-records-setmutablebinding-n-v-s","aoid":null,"title":"SetMutableBinding (N, V, S)","titleHTML":"SetMutableBinding (<var>N</var>, <var>V</var>, <var>S</var>)","number":"8.1.1.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SetMutableBinding (N, V, S)"},{"type":"clause","id":"sec-declarative-environment-records-getbindingvalue-n-s","aoid":null,"title":"GetBindingValue (N, S)","titleHTML":"GetBindingValue (<var>N</var>, <var>S</var>)","number":"8.1.1.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetBindingValue (N, S)"},{"type":"clause","id":"sec-declarative-environment-records-deletebinding-n","aoid":null,"title":"DeleteBinding (N)","titleHTML":"DeleteBinding (<var>N</var>)","number":"8.1.1.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DeleteBinding (N)"},{"type":"clause","id":"sec-declarative-environment-records-hasthisbinding","aoid":null,"title":"HasThisBinding ()","titleHTML":"HasThisBinding ()","number":"8.1.1.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasThisBinding ()"},{"type":"clause","id":"sec-declarative-environment-records-hassuperbinding","aoid":null,"title":"HasSuperBinding ()","titleHTML":"HasSuperBinding ()","number":"8.1.1.1.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasSuperBinding ()"},{"type":"clause","id":"sec-declarative-environment-records-withbaseobject","aoid":null,"title":"WithBaseObject ()","titleHTML":"WithBaseObject ()","number":"8.1.1.1.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WithBaseObject ()"},{"type":"clause","id":"sec-declarative-environment-records","aoid":null,"title":"Declarative Environment Records","titleHTML":"Declarative Environment Records","number":"8.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Declarative Environment Records"},{"type":"clause","id":"sec-object-environment-records-hasbinding-n","aoid":null,"title":"HasBinding (N)","titleHTML":"HasBinding (<var>N</var>)","number":"8.1.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasBinding (N)"},{"type":"clause","id":"sec-object-environment-records-createmutablebinding-n-d","aoid":null,"title":"CreateMutableBinding (N, D)","titleHTML":"CreateMutableBinding (<var>N</var>, <var>D</var>)","number":"8.1.1.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateMutableBinding (N, D)"},{"type":"clause","id":"sec-object-environment-records-createimmutablebinding-n-s","aoid":null,"title":"CreateImmutableBinding (N, S)","titleHTML":"CreateImmutableBinding (<var>N</var>, <var>S</var>)","number":"8.1.1.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateImmutableBinding (N, S)"},{"type":"clause","id":"sec-object-environment-records-initializebinding-n-v","aoid":null,"title":"InitializeBinding (N, V)","titleHTML":"InitializeBinding (<var>N</var>, <var>V</var>)","number":"8.1.1.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"InitializeBinding (N, V)"},{"type":"clause","id":"sec-object-environment-records-setmutablebinding-n-v-s","aoid":null,"title":"SetMutableBinding (N, V, S)","titleHTML":"SetMutableBinding (<var>N</var>, <var>V</var>, <var>S</var>)","number":"8.1.1.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SetMutableBinding (N, V, S)"},{"type":"clause","id":"sec-object-environment-records-getbindingvalue-n-s","aoid":null,"title":"GetBindingValue (N, S)","titleHTML":"GetBindingValue (<var>N</var>, <var>S</var>)","number":"8.1.1.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetBindingValue (N, S)"},{"type":"clause","id":"sec-object-environment-records-deletebinding-n","aoid":null,"title":"DeleteBinding (N)","titleHTML":"DeleteBinding (<var>N</var>)","number":"8.1.1.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DeleteBinding (N)"},{"type":"clause","id":"sec-object-environment-records-hasthisbinding","aoid":null,"title":"HasThisBinding ()","titleHTML":"HasThisBinding ()","number":"8.1.1.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasThisBinding ()"},{"type":"clause","id":"sec-object-environment-records-hassuperbinding","aoid":null,"title":"HasSuperBinding ()","titleHTML":"HasSuperBinding ()","number":"8.1.1.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasSuperBinding ()"},{"type":"clause","id":"sec-object-environment-records-withbaseobject","aoid":null,"title":"WithBaseObject ()","titleHTML":"WithBaseObject ()","number":"8.1.1.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WithBaseObject ()"},{"type":"clause","id":"sec-object-environment-records","aoid":null,"title":"Object Environment Records","titleHTML":"Object Environment Records","number":"8.1.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object Environment Records"},{"type":"table","id":"table-16","number":16,"caption":"Table 16: Additional Fields of Function Environment Records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 16: Additional Fields of Function Environment Records"},{"type":"table","id":"table-17","number":17,"caption":"Table 17: Additional Methods of Function Environment Records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 17: Additional Methods of Function Environment Records"},{"type":"clause","id":"sec-bindthisvalue","aoid":null,"title":"BindThisValue (V)","titleHTML":"BindThisValue (<var>V</var>)","number":"8.1.1.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BindThisValue (V)"},{"type":"clause","id":"sec-function-environment-records-hasthisbinding","aoid":null,"title":"HasThisBinding ()","titleHTML":"HasThisBinding ()","number":"8.1.1.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasThisBinding ()"},{"type":"clause","id":"sec-function-environment-records-hassuperbinding","aoid":null,"title":"HasSuperBinding ()","titleHTML":"HasSuperBinding ()","number":"8.1.1.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasSuperBinding ()"},{"type":"clause","id":"sec-function-environment-records-getthisbinding","aoid":null,"title":"GetThisBinding ()","titleHTML":"GetThisBinding ()","number":"8.1.1.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetThisBinding ()"},{"type":"clause","id":"sec-getsuperbase","aoid":null,"title":"GetSuperBase ()","titleHTML":"GetSuperBase ()","number":"8.1.1.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetSuperBase ()"},{"type":"clause","id":"sec-function-environment-records","aoid":null,"title":"Function Environment Records","titleHTML":"Function Environment Records","number":"8.1.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function Environment Records"},{"type":"table","id":"table-18","number":18,"caption":"Table 18: Additional Fields of Global Environment Records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 18: Additional Fields of Global Environment Records"},{"type":"table","id":"table-19","number":19,"caption":"Table 19: Additional Methods of Global Environment Records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 19: Additional Methods of Global Environment Records"},{"type":"clause","id":"sec-global-environment-records-hasbinding-n","aoid":null,"title":"HasBinding (N)","titleHTML":"HasBinding (<var>N</var>)","number":"8.1.1.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasBinding (N)"},{"type":"clause","id":"sec-global-environment-records-createmutablebinding-n-d","aoid":null,"title":"CreateMutableBinding (N, D)","titleHTML":"CreateMutableBinding (<var>N</var>, <var>D</var>)","number":"8.1.1.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateMutableBinding (N, D)"},{"type":"clause","id":"sec-global-environment-records-createimmutablebinding-n-s","aoid":null,"title":"CreateImmutableBinding (N, S)","titleHTML":"CreateImmutableBinding (<var>N</var>, <var>S</var>)","number":"8.1.1.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateImmutableBinding (N, S)"},{"type":"clause","id":"sec-global-environment-records-initializebinding-n-v","aoid":null,"title":"InitializeBinding (N, V)","titleHTML":"InitializeBinding (<var>N</var>, <var>V</var>)","number":"8.1.1.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"InitializeBinding (N, V)"},{"type":"clause","id":"sec-global-environment-records-setmutablebinding-n-v-s","aoid":null,"title":"SetMutableBinding (N, V, S)","titleHTML":"SetMutableBinding (<var>N</var>, <var>V</var>, <var>S</var>)","number":"8.1.1.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SetMutableBinding (N, V, S)"},{"type":"clause","id":"sec-global-environment-records-getbindingvalue-n-s","aoid":null,"title":"GetBindingValue (N, S)","titleHTML":"GetBindingValue (<var>N</var>, <var>S</var>)","number":"8.1.1.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetBindingValue (N, S)"},{"type":"clause","id":"sec-global-environment-records-deletebinding-n","aoid":null,"title":"DeleteBinding (N)","titleHTML":"DeleteBinding (<var>N</var>)","number":"8.1.1.4.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DeleteBinding (N)"},{"type":"clause","id":"sec-global-environment-records-hasthisbinding","aoid":null,"title":"HasThisBinding ()","titleHTML":"HasThisBinding ()","number":"8.1.1.4.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasThisBinding ()"},{"type":"clause","id":"sec-global-environment-records-hassuperbinding","aoid":null,"title":"HasSuperBinding ()","titleHTML":"HasSuperBinding ()","number":"8.1.1.4.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasSuperBinding ()"},{"type":"clause","id":"sec-global-environment-records-withbaseobject","aoid":null,"title":"WithBaseObject ()","titleHTML":"WithBaseObject ()","number":"8.1.1.4.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WithBaseObject ()"},{"type":"clause","id":"sec-global-environment-records-getthisbinding","aoid":null,"title":"GetThisBinding ()","titleHTML":"GetThisBinding ()","number":"8.1.1.4.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetThisBinding ()"},{"type":"clause","id":"sec-hasvardeclaration","aoid":null,"title":"HasVarDeclaration (N)","titleHTML":"HasVarDeclaration (<var>N</var>)","number":"8.1.1.4.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasVarDeclaration (N)"},{"type":"clause","id":"sec-haslexicaldeclaration","aoid":null,"title":"HasLexicalDeclaration (N)","titleHTML":"HasLexicalDeclaration (<var>N</var>)","number":"8.1.1.4.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasLexicalDeclaration (N)"},{"type":"clause","id":"sec-hasrestrictedglobalproperty","aoid":null,"title":"HasRestrictedGlobalProperty (N)","titleHTML":"HasRestrictedGlobalProperty (<var>N</var>)","number":"8.1.1.4.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasRestrictedGlobalProperty (N)"},{"type":"clause","id":"sec-candeclareglobalvar","aoid":null,"title":"CanDeclareGlobalVar (N)","titleHTML":"CanDeclareGlobalVar (<var>N</var>)","number":"8.1.1.4.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CanDeclareGlobalVar (N)"},{"type":"clause","id":"sec-candeclareglobalfunction","aoid":null,"title":"CanDeclareGlobalFunction (N)","titleHTML":"CanDeclareGlobalFunction (<var>N</var>)","number":"8.1.1.4.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CanDeclareGlobalFunction (N)"},{"type":"clause","id":"sec-createglobalvarbinding","aoid":null,"title":"CreateGlobalVarBinding (N, D)","titleHTML":"CreateGlobalVarBinding (<var>N</var>, <var>D</var>)","number":"8.1.1.4.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateGlobalVarBinding (N, D)"},{"type":"clause","id":"sec-createglobalfunctionbinding","aoid":null,"title":"CreateGlobalFunctionBinding (N, V, D)","titleHTML":"CreateGlobalFunctionBinding (<var>N</var>, <var>V</var>, <var>D</var>)","number":"8.1.1.4.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateGlobalFunctionBinding (N, V, D)"},{"type":"clause","id":"sec-global-environment-records","aoid":null,"title":"Global Environment Records","titleHTML":"Global Environment Records","number":"8.1.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Global Environment Records"},{"type":"table","id":"table-20","number":20,"caption":"Table 20: Additional Methods of Module Environment Records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 20: Additional Methods of Module Environment Records"},{"type":"clause","id":"sec-module-environment-records-getbindingvalue-n-s","aoid":null,"title":"GetBindingValue (N, S)","titleHTML":"GetBindingValue (<var>N</var>, <var>S</var>)","number":"8.1.1.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetBindingValue (N, S)"},{"type":"clause","id":"sec-module-environment-records-deletebinding-n","aoid":null,"title":"DeleteBinding (N)","titleHTML":"DeleteBinding (<var>N</var>)","number":"8.1.1.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DeleteBinding (N)"},{"type":"clause","id":"sec-module-environment-records-hasthisbinding","aoid":null,"title":"HasThisBinding ()","titleHTML":"HasThisBinding ()","number":"8.1.1.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HasThisBinding ()"},{"type":"clause","id":"sec-module-environment-records-getthisbinding","aoid":null,"title":"GetThisBinding ()","titleHTML":"GetThisBinding ()","number":"8.1.1.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetThisBinding ()"},{"type":"clause","id":"sec-createimportbinding","aoid":null,"title":"CreateImportBinding (N, M, N2)","titleHTML":"CreateImportBinding (<var>N</var>, <var>M</var>, <var>N2</var>)","number":"8.1.1.5.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateImportBinding (N, M, N2)"},{"type":"clause","id":"sec-module-environment-records","aoid":null,"title":"Module Environment Records","titleHTML":"Module Environment Records","number":"8.1.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Module Environment Records"},{"type":"clause","id":"sec-environment-records","aoid":null,"title":"Environment Records","titleHTML":"Environment Records","number":"8.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Environment Records"},{"type":"op","aoid":"GetIdentifierReference","refId":"sec-getidentifierreference","location":"","key":"GetIdentifierReference"},{"type":"clause","id":"sec-getidentifierreference","aoid":"GetIdentifierReference","title":"GetIdentifierReference (lex, name, strict)","titleHTML":"GetIdentifierReference (<var>lex</var>, <var>name</var>, <var>strict</var>)","number":"8.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetIdentifierReference (lex, name, strict)"},{"type":"op","aoid":"NewDeclarativeEnvironment","refId":"sec-newdeclarativeenvironment","location":"","key":"NewDeclarativeEnvironment"},{"type":"clause","id":"sec-newdeclarativeenvironment","aoid":"NewDeclarativeEnvironment","title":"NewDeclarativeEnvironment (E)","titleHTML":"NewDeclarativeEnvironment (<var>E</var>)","number":"8.1.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NewDeclarativeEnvironment (E)"},{"type":"op","aoid":"NewObjectEnvironment","refId":"sec-newobjectenvironment","location":"","key":"NewObjectEnvironment"},{"type":"clause","id":"sec-newobjectenvironment","aoid":"NewObjectEnvironment","title":"NewObjectEnvironment (O, E)","titleHTML":"NewObjectEnvironment (<var>O</var>, <var>E</var>)","number":"8.1.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NewObjectEnvironment (O, E)"},{"type":"op","aoid":"NewFunctionEnvironment","refId":"sec-newfunctionenvironment","location":"","key":"NewFunctionEnvironment"},{"type":"clause","id":"sec-newfunctionenvironment","aoid":"NewFunctionEnvironment","title":"NewFunctionEnvironment ( F, newTarget )","titleHTML":"NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )","number":"8.1.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NewFunctionEnvironment ( F, newTarget )"},{"type":"op","aoid":"NewGlobalEnvironment","refId":"sec-newglobalenvironment","location":"","key":"NewGlobalEnvironment"},{"type":"clause","id":"sec-newglobalenvironment","aoid":"NewGlobalEnvironment","title":"NewGlobalEnvironment ( G, thisValue )","titleHTML":"NewGlobalEnvironment ( <var>G</var>, <var>thisValue</var> )","number":"8.1.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NewGlobalEnvironment ( G, thisValue )"},{"type":"op","aoid":"NewModuleEnvironment","refId":"sec-newmoduleenvironment","location":"","key":"NewModuleEnvironment"},{"type":"clause","id":"sec-newmoduleenvironment","aoid":"NewModuleEnvironment","title":"NewModuleEnvironment (E)","titleHTML":"NewModuleEnvironment (<var>E</var>)","number":"8.1.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NewModuleEnvironment (E)"},{"type":"clause","id":"sec-lexical-environment-operations","aoid":null,"title":"Lexical Environment Operations","titleHTML":"Lexical Environment Operations","number":"8.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Lexical Environment Operations"},{"type":"clause","id":"sec-lexical-environments","aoid":null,"title":"Lexical Environments","titleHTML":"Lexical Environments","number":"8.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Lexical Environments"},{"type":"term","term":"realm","refId":"sec-code-realms","id":"realm","namespace":"https://tc39.github.io/ecma262/","location":"","key":"realm"},{"type":"term","term":"Realm Record","refId":"sec-code-realms","id":"realm-record","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Realm Record"},{"type":"table","id":"table-21","number":21,"caption":"Table 21: Realm Record Fields","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 21: Realm Record Fields"},{"type":"op","aoid":"CreateRealm","refId":"sec-createrealm","location":"","key":"CreateRealm"},{"type":"clause","id":"sec-createrealm","aoid":"CreateRealm","title":"CreateRealm ( )","titleHTML":"CreateRealm ( )","number":"8.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateRealm ( )"},{"type":"op","aoid":"CreateIntrinsics","refId":"sec-createintrinsics","location":"","key":"CreateIntrinsics"},{"type":"clause","id":"sec-createintrinsics","aoid":"CreateIntrinsics","title":"CreateIntrinsics ( realmRec )","titleHTML":"CreateIntrinsics ( <var>realmRec</var> )","number":"8.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateIntrinsics ( realmRec )"},{"type":"op","aoid":"SetRealmGlobalObject","refId":"sec-setrealmglobalobject","location":"","key":"SetRealmGlobalObject"},{"type":"clause","id":"sec-setrealmglobalobject","aoid":"SetRealmGlobalObject","title":"SetRealmGlobalObject ( realmRec, globalObj, thisValue )","titleHTML":"SetRealmGlobalObject ( <var>realmRec</var>, <var>globalObj</var>, <var>thisValue</var> )","number":"8.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SetRealmGlobalObject ( realmRec, globalObj, thisValue )"},{"type":"op","aoid":"SetDefaultGlobalBindings","refId":"sec-setdefaultglobalbindings","location":"","key":"SetDefaultGlobalBindings"},{"type":"clause","id":"sec-setdefaultglobalbindings","aoid":"SetDefaultGlobalBindings","title":"SetDefaultGlobalBindings ( realmRec )","titleHTML":"SetDefaultGlobalBindings ( <var>realmRec</var> )","number":"8.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SetDefaultGlobalBindings ( realmRec )"},{"type":"clause","id":"sec-code-realms","aoid":null,"title":"Realms","titleHTML":"Realms","number":"8.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Realms"},{"type":"term","term":"execution context","refId":"sec-execution-contexts","namespace":"https://tc39.github.io/ecma262/","location":"","key":"execution context"},{"type":"term","term":"running execution context","refId":"sec-execution-contexts","id":"running-execution-context","namespace":"https://tc39.github.io/ecma262/","location":"","key":"running execution context"},{"type":"term","term":"execution context stack","refId":"sec-execution-contexts","id":"execution-context-stack","namespace":"https://tc39.github.io/ecma262/","location":"","key":"execution context stack"},{"type":"table","id":"table-22","number":22,"caption":"Table 22: State Components for All Execution Contexts","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 22: State Components for All Execution Contexts"},{"type":"term","term":"the current Realm Record","refId":"sec-execution-contexts","id":"current-realm","namespace":"https://tc39.github.io/ecma262/","location":"","key":"the current Realm Record"},{"type":"term","term":"active function object","refId":"sec-execution-contexts","id":"active-function-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"active function object"},{"type":"table","id":"table-23","number":23,"caption":"Table 23: Additional State Components for ECMAScript Code Execution Contexts","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 23: Additional State Components for ECMAScript Code Execution Contexts"},{"type":"table","id":"table-24","number":24,"caption":"Table 24: Additional State Components for Generator Execution Contexts","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 24: Additional State Components for Generator Execution Contexts"},{"type":"op","aoid":"GetActiveScriptOrModule","refId":"sec-getactivescriptormodule","location":"","key":"GetActiveScriptOrModule"},{"type":"clause","id":"sec-getactivescriptormodule","aoid":"GetActiveScriptOrModule","title":"GetActiveScriptOrModule ()","titleHTML":"GetActiveScriptOrModule ()","number":"8.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetActiveScriptOrModule ()"},{"type":"op","aoid":"ResolveBinding","refId":"sec-resolvebinding","location":"","key":"ResolveBinding"},{"type":"clause","id":"sec-resolvebinding","aoid":"ResolveBinding","title":"ResolveBinding ( name [ , env ] )","titleHTML":"ResolveBinding ( <var>name</var> [ , <var>env</var> ] )","number":"8.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ResolveBinding ( name [ , env ] )"},{"type":"op","aoid":"GetThisEnvironment","refId":"sec-getthisenvironment","location":"","key":"GetThisEnvironment"},{"type":"clause","id":"sec-getthisenvironment","aoid":"GetThisEnvironment","title":"GetThisEnvironment ( )","titleHTML":"GetThisEnvironment ( )","number":"8.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetThisEnvironment ( )"},{"type":"op","aoid":"ResolveThisBinding","refId":"sec-resolvethisbinding","location":"","key":"ResolveThisBinding"},{"type":"clause","id":"sec-resolvethisbinding","aoid":"ResolveThisBinding","title":"ResolveThisBinding ( )","titleHTML":"ResolveThisBinding ( )","number":"8.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ResolveThisBinding ( )"},{"type":"op","aoid":"GetNewTarget","refId":"sec-getnewtarget","location":"","key":"GetNewTarget"},{"type":"clause","id":"sec-getnewtarget","aoid":"GetNewTarget","title":"GetNewTarget ( )","titleHTML":"GetNewTarget ( )","number":"8.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetNewTarget ( )"},{"type":"op","aoid":"GetGlobalObject","refId":"sec-getglobalobject","location":"","key":"GetGlobalObject"},{"type":"clause","id":"sec-getglobalobject","aoid":"GetGlobalObject","title":"GetGlobalObject ( )","titleHTML":"GetGlobalObject ( )","number":"8.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetGlobalObject ( )"},{"type":"clause","id":"sec-execution-contexts","aoid":null,"title":"Execution Contexts","titleHTML":"Execution Contexts","number":"8.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Execution Contexts"},{"type":"table","id":"table-25","number":25,"caption":"Table 25: PendingJob Record Fields","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 25: PendingJob Record Fields"},{"type":"table","id":"table-26","number":26,"caption":"Table 26: Required Job Queues","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 26: Required Job Queues"},{"type":"op","aoid":"EnqueueJob","refId":"sec-enqueuejob","location":"","key":"EnqueueJob"},{"type":"clause","id":"sec-enqueuejob","aoid":"EnqueueJob","title":"EnqueueJob (queueName, job, arguments)","titleHTML":"EnqueueJob (<var>queueName</var>, <var>job</var>, <var>arguments</var>)","number":"8.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"EnqueueJob (queueName, job, arguments)"},{"type":"clause","id":"sec-jobs-and-job-queues","aoid":null,"title":"Jobs and Job Queues","titleHTML":"Jobs and Job Queues","number":"8.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Jobs and Job Queues"},{"type":"op","aoid":"InitializeHostDefinedRealm","refId":"sec-initializehostdefinedrealm","location":"","key":"InitializeHostDefinedRealm"},{"type":"clause","id":"sec-initializehostdefinedrealm","aoid":"InitializeHostDefinedRealm","title":"InitializeHostDefinedRealm ( )","titleHTML":"InitializeHostDefinedRealm ( )","number":"8.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"InitializeHostDefinedRealm ( )"},{"type":"op","aoid":"RunJobs","refId":"sec-runjobs","location":"","key":"RunJobs"},{"type":"clause","id":"sec-runjobs","aoid":"RunJobs","title":"RunJobs ( )","titleHTML":"RunJobs ( )","number":"8.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RunJobs ( )"},{"type":"clause","id":"sec-executable-code-and-execution-contexts","aoid":null,"title":"Executable Code and Execution Contexts","titleHTML":"Executable Code and Execution Contexts","number":"8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Executable Code and Execution Contexts"},{"type":"op","aoid":"OrdinaryGetPrototypeOf","refId":"sec-ordinarygetprototypeof","location":"","key":"OrdinaryGetPrototypeOf"},{"type":"clause","id":"sec-ordinarygetprototypeof","aoid":"OrdinaryGetPrototypeOf","title":"OrdinaryGetPrototypeOf (O)","titleHTML":"OrdinaryGetPrototypeOf (<var>O</var>)","number":"9.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryGetPrototypeOf (O)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof","aoid":null,"title":"[[GetPrototypeOf]] ( )","titleHTML":"[[GetPrototypeOf]] ( )","number":"9.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[GetPrototypeOf]] ( )"},{"type":"op","aoid":"OrdinarySetPrototypeOf","refId":"sec-ordinarysetprototypeof","location":"","key":"OrdinarySetPrototypeOf"},{"type":"clause","id":"sec-ordinarysetprototypeof","aoid":"OrdinarySetPrototypeOf","title":"OrdinarySetPrototypeOf (O, V)","titleHTML":"OrdinarySetPrototypeOf (<var>O</var>, <var>V</var>)","number":"9.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinarySetPrototypeOf (O, V)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-setprototypeof-v","aoid":null,"title":"[[SetPrototypeOf]] (V)","titleHTML":"[[SetPrototypeOf]] (<var>V</var>)","number":"9.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[SetPrototypeOf]] (V)"},{"type":"op","aoid":"OrdinaryIsExtensible","refId":"sec-ordinaryisextensible","location":"","key":"OrdinaryIsExtensible"},{"type":"clause","id":"sec-ordinaryisextensible","aoid":"OrdinaryIsExtensible","title":"OrdinaryIsExtensible (O)","titleHTML":"OrdinaryIsExtensible (<var>O</var>)","number":"9.1.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryIsExtensible (O)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-isextensible","aoid":null,"title":"[[IsExtensible]] ( )","titleHTML":"[[IsExtensible]] ( )","number":"9.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[IsExtensible]] ( )"},{"type":"op","aoid":"OrdinaryPreventExtensions","refId":"sec-ordinarypreventextensions","location":"","key":"OrdinaryPreventExtensions"},{"type":"clause","id":"sec-ordinarypreventextensions","aoid":"OrdinaryPreventExtensions","title":"OrdinaryPreventExtensions (O)","titleHTML":"OrdinaryPreventExtensions (<var>O</var>)","number":"9.1.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryPreventExtensions (O)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-preventextensions","aoid":null,"title":"[[PreventExtensions]] ( )","titleHTML":"[[PreventExtensions]] ( )","number":"9.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[PreventExtensions]] ( )"},{"type":"op","aoid":"OrdinaryGetOwnProperty","refId":"sec-ordinarygetownproperty","location":"","key":"OrdinaryGetOwnProperty"},{"type":"clause","id":"sec-ordinarygetownproperty","aoid":"OrdinaryGetOwnProperty","title":"OrdinaryGetOwnProperty (O, P)","titleHTML":"OrdinaryGetOwnProperty (<var>O</var>, <var>P</var>)","number":"9.1.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryGetOwnProperty (O, P)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-getownproperty-p","aoid":null,"title":"[[GetOwnProperty]] (P)","titleHTML":"[[GetOwnProperty]] (<var>P</var>)","number":"9.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[GetOwnProperty]] (P)"},{"type":"op","aoid":"OrdinaryDefineOwnProperty","refId":"sec-ordinarydefineownproperty","location":"","key":"OrdinaryDefineOwnProperty"},{"type":"clause","id":"sec-ordinarydefineownproperty","aoid":"OrdinaryDefineOwnProperty","title":"OrdinaryDefineOwnProperty (O, P, Desc)","titleHTML":"OrdinaryDefineOwnProperty (<var>O</var>, <var>P</var>, <var>Desc</var>)","number":"9.1.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryDefineOwnProperty (O, P, Desc)"},{"type":"op","aoid":"IsCompatiblePropertyDescriptor","refId":"sec-iscompatiblepropertydescriptor","location":"","key":"IsCompatiblePropertyDescriptor"},{"type":"clause","id":"sec-iscompatiblepropertydescriptor","aoid":"IsCompatiblePropertyDescriptor","title":"IsCompatiblePropertyDescriptor (Extensible, Desc, Current)","titleHTML":"IsCompatiblePropertyDescriptor (<var>Extensible</var>, <var>Desc</var>, <var>Current</var>)","number":"9.1.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsCompatiblePropertyDescriptor (Extensible, Desc, Current)"},{"type":"op","aoid":"ValidateAndApplyPropertyDescriptor","refId":"sec-validateandapplypropertydescriptor","location":"","key":"ValidateAndApplyPropertyDescriptor"},{"type":"clause","id":"sec-validateandapplypropertydescriptor","aoid":"ValidateAndApplyPropertyDescriptor","title":"ValidateAndApplyPropertyDescriptor (O, P, extensible, Desc, current)","titleHTML":"ValidateAndApplyPropertyDescriptor (<var>O</var>, <var>P</var>, <var>extensible</var>, <var>Desc</var>, <var>current</var>)","number":"9.1.6.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ValidateAndApplyPropertyDescriptor (O, P, extensible, Desc, current)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc","aoid":null,"title":"[[DefineOwnProperty]] (P, Desc)","titleHTML":"[[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)","number":"9.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[DefineOwnProperty]] (P, Desc)"},{"type":"op","aoid":"OrdinaryHasProperty","refId":"sec-ordinaryhasproperty","location":"","key":"OrdinaryHasProperty"},{"type":"clause","id":"sec-ordinaryhasproperty","aoid":"OrdinaryHasProperty","title":"OrdinaryHasProperty (O, P)","titleHTML":"OrdinaryHasProperty (<var>O</var>, <var>P</var>)","number":"9.1.7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryHasProperty (O, P)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p","aoid":null,"title":"[[HasProperty]](P)","titleHTML":"[[HasProperty]](<var>P</var>)","number":"9.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[HasProperty]](P)"},{"type":"op","aoid":"OrdinaryGet","refId":"sec-ordinaryget","location":"","key":"OrdinaryGet"},{"type":"clause","id":"sec-ordinaryget","aoid":"OrdinaryGet","title":"OrdinaryGet (O, P, Receiver)","titleHTML":"OrdinaryGet (<var>O</var>, <var>P</var>, <var>Receiver</var>)","number":"9.1.8.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryGet (O, P, Receiver)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver","aoid":null,"title":"[[Get]] (P, Receiver)","titleHTML":"[[Get]] (<var>P</var>, <var>Receiver</var>)","number":"9.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Get]] (P, Receiver)"},{"type":"op","aoid":"OrdinarySet","refId":"sec-ordinaryset","location":"","key":"OrdinarySet"},{"type":"clause","id":"sec-ordinaryset","aoid":"OrdinarySet","title":"OrdinarySet (O, P, V, Receiver)","titleHTML":"OrdinarySet (<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>)","number":"9.1.9.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinarySet (O, P, V, Receiver)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-set-p-v-receiver","aoid":null,"title":"[[Set]] ( P, V, Receiver)","titleHTML":"[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)","number":"9.1.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Set]] ( P, V, Receiver)"},{"type":"op","aoid":"OrdinaryDelete","refId":"sec-ordinarydelete","location":"","key":"OrdinaryDelete"},{"type":"clause","id":"sec-ordinarydelete","aoid":"OrdinaryDelete","title":"OrdinaryDelete (O, P)","titleHTML":"OrdinaryDelete (<var>O</var>, <var>P</var>)","number":"9.1.10.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryDelete (O, P)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-delete-p","aoid":null,"title":"[[Delete]] (P)","titleHTML":"[[Delete]] (<var>P</var>)","number":"9.1.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Delete]] (P)"},{"type":"op","aoid":"OrdinaryOwnPropertyKeys","refId":"sec-ordinaryownpropertykeys","location":"","key":"OrdinaryOwnPropertyKeys"},{"type":"clause","id":"sec-ordinaryownpropertykeys","aoid":"OrdinaryOwnPropertyKeys","title":"OrdinaryOwnPropertyKeys (O)","titleHTML":"OrdinaryOwnPropertyKeys (<var>O</var>)","number":"9.1.11.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryOwnPropertyKeys (O)"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys","aoid":null,"title":"[[OwnPropertyKeys]] ( )","titleHTML":"[[OwnPropertyKeys]] ( )","number":"9.1.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[OwnPropertyKeys]] ( )"},{"type":"op","aoid":"ObjectCreate","refId":"sec-objectcreate","location":"","key":"ObjectCreate"},{"type":"clause","id":"sec-objectcreate","aoid":"ObjectCreate","title":"ObjectCreate (proto [ , internalSlotsList ])","titleHTML":"ObjectCreate (<var>proto</var> [ , <var>internalSlotsList</var> ])","number":"9.1.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ObjectCreate (proto [ , internalSlotsList ])"},{"type":"op","aoid":"OrdinaryCreateFromConstructor","refId":"sec-ordinarycreatefromconstructor","location":"","key":"OrdinaryCreateFromConstructor"},{"type":"clause","id":"sec-ordinarycreatefromconstructor","aoid":"OrdinaryCreateFromConstructor","title":"OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )","titleHTML":"OrdinaryCreateFromConstructor ( <var>constructor</var>, <var>intrinsicDefaultProto</var> [ , <var>internalSlotsList</var> ] )","number":"9.1.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )"},{"type":"op","aoid":"GetPrototypeFromConstructor","refId":"sec-getprototypefromconstructor","location":"","key":"GetPrototypeFromConstructor"},{"type":"clause","id":"sec-getprototypefromconstructor","aoid":"GetPrototypeFromConstructor","title":"GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )","titleHTML":"GetPrototypeFromConstructor ( <var>constructor</var>, <var>intrinsicDefaultProto</var> )","number":"9.1.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )"},{"type":"clause","id":"sec-ordinary-object-internal-methods-and-internal-slots","aoid":null,"title":"Ordinary Object Internal Methods and Internal Slots","titleHTML":"Ordinary Object Internal Methods and Internal Slots","number":"9.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Ordinary Object Internal Methods and Internal Slots"},{"type":"term","term":"strict function","refId":"sec-ecmascript-function-objects","id":"strict-function","namespace":"https://tc39.github.io/ecma262/","location":"","key":"strict function"},{"type":"term","term":"non-strict function","refId":"sec-ecmascript-function-objects","id":"non-strict-function","namespace":"https://tc39.github.io/ecma262/","location":"","key":"non-strict function"},{"type":"table","id":"table-27","number":27,"caption":"Table 27: Internal Slots of ECMAScript Function Objects","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 27: Internal Slots of ECMAScript Function Objects"},{"type":"op","aoid":"PrepareForOrdinaryCall","refId":"sec-prepareforordinarycall","location":"","key":"PrepareForOrdinaryCall"},{"type":"clause","id":"sec-prepareforordinarycall","aoid":"PrepareForOrdinaryCall","title":"PrepareForOrdinaryCall ( F, newTarget )","titleHTML":"PrepareForOrdinaryCall ( <var>F</var>, <var>newTarget</var> )","number":"9.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PrepareForOrdinaryCall ( F, newTarget )"},{"type":"op","aoid":"OrdinaryCallBindThis","refId":"sec-ordinarycallbindthis","location":"","key":"OrdinaryCallBindThis"},{"type":"clause","id":"sec-ordinarycallbindthis","aoid":"OrdinaryCallBindThis","title":"OrdinaryCallBindThis ( F, calleeContext, thisArgument )","titleHTML":"OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )","number":"9.2.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryCallBindThis ( F, calleeContext, thisArgument )"},{"type":"op","aoid":"OrdinaryCallEvaluateBody","refId":"sec-ordinarycallevaluatebody","location":"","key":"OrdinaryCallEvaluateBody"},{"type":"clause","id":"sec-ordinarycallevaluatebody","aoid":"OrdinaryCallEvaluateBody","title":"OrdinaryCallEvaluateBody ( F, argumentsList )","titleHTML":"OrdinaryCallEvaluateBody ( <var>F</var>, <var>argumentsList</var> )","number":"9.2.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OrdinaryCallEvaluateBody ( F, argumentsList )"},{"type":"clause","id":"sec-ecmascript-function-objects-call-thisargument-argumentslist","aoid":null,"title":"[[Call]] ( thisArgument, argumentsList)","titleHTML":"[[Call]] ( <var>thisArgument</var>, <var>argumentsList</var>)","number":"9.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Call]] ( thisArgument, argumentsList)"},{"type":"clause","id":"sec-ecmascript-function-objects-construct-argumentslist-newtarget","aoid":null,"title":"[[Construct]] ( argumentsList, newTarget)","titleHTML":"[[Construct]] ( <var>argumentsList</var>, <var>newTarget</var>)","number":"9.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Construct]] ( argumentsList, newTarget)"},{"type":"op","aoid":"FunctionAllocate","refId":"sec-functionallocate","location":"","key":"FunctionAllocate"},{"type":"clause","id":"sec-functionallocate","aoid":"FunctionAllocate","title":"FunctionAllocate (functionPrototype, strict, functionKind)","titleHTML":"FunctionAllocate (<var>functionPrototype</var>, <var>strict</var>, <var>functionKind</var>)","number":"9.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FunctionAllocate (functionPrototype, strict, functionKind)"},{"type":"op","aoid":"FunctionInitialize","refId":"sec-functioninitialize","location":"","key":"FunctionInitialize"},{"type":"clause","id":"sec-functioninitialize","aoid":"FunctionInitialize","title":"FunctionInitialize (F, kind, ParameterList, Body, Scope)","titleHTML":"FunctionInitialize (<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>)","number":"9.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FunctionInitialize (F, kind, ParameterList, Body, Scope)"},{"type":"op","aoid":"FunctionCreate","refId":"sec-functioncreate","location":"","key":"FunctionCreate"},{"type":"clause","id":"sec-functioncreate","aoid":"FunctionCreate","title":"FunctionCreate (kind, ParameterList, Body, Scope, Strict [ , prototype ])","titleHTML":"FunctionCreate (<var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>Strict</var> [ , <var>prototype</var> ])","number":"9.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FunctionCreate (kind, ParameterList, Body, Scope, Strict [ , prototype ])"},{"type":"op","aoid":"GeneratorFunctionCreate","refId":"sec-generatorfunctioncreate","location":"","key":"GeneratorFunctionCreate"},{"type":"clause","id":"sec-generatorfunctioncreate","aoid":"GeneratorFunctionCreate","title":"GeneratorFunctionCreate (kind, ParameterList, Body, Scope, Strict)","titleHTML":"GeneratorFunctionCreate (<var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>Strict</var>)","number":"9.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorFunctionCreate (kind, ParameterList, Body, Scope, Strict)"},{"type":"term","term":"%ThrowTypeError%","refId":"sec-%throwtypeerror%","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ThrowTypeError%"},{"type":"clause","id":"sec-%throwtypeerror%","aoid":null,"title":"%ThrowTypeError% ( )","titleHTML":"%ThrowTypeError% ( )","number":"9.2.7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ThrowTypeError% ( )"},{"type":"op","aoid":"AddRestrictedFunctionProperties","refId":"sec-addrestrictedfunctionproperties","location":"","key":"AddRestrictedFunctionProperties"},{"type":"clause","id":"sec-addrestrictedfunctionproperties","aoid":"AddRestrictedFunctionProperties","title":"AddRestrictedFunctionProperties ( F, realm )","titleHTML":"AddRestrictedFunctionProperties ( <var>F</var>, <var>realm</var> )","number":"9.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AddRestrictedFunctionProperties ( F, realm )"},{"type":"op","aoid":"MakeConstructor","refId":"sec-makeconstructor","location":"","key":"MakeConstructor"},{"type":"clause","id":"sec-makeconstructor","aoid":"MakeConstructor","title":"MakeConstructor (F [ , writablePrototype [ , prototype ] ] )","titleHTML":"MakeConstructor (<var>F</var> [ , <var>writablePrototype</var> [ , <var>prototype</var> ] ] )","number":"9.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MakeConstructor (F [ , writablePrototype [ , prototype ] ] )"},{"type":"op","aoid":"MakeClassConstructor","refId":"sec-makeclassconstructor","location":"","key":"MakeClassConstructor"},{"type":"clause","id":"sec-makeclassconstructor","aoid":"MakeClassConstructor","title":"MakeClassConstructor ( F)","titleHTML":"MakeClassConstructor ( <var>F</var>)","number":"9.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MakeClassConstructor ( F)"},{"type":"op","aoid":"MakeMethod","refId":"sec-makemethod","location":"","key":"MakeMethod"},{"type":"clause","id":"sec-makemethod","aoid":"MakeMethod","title":"MakeMethod ( F, homeObject)","titleHTML":"MakeMethod ( <var>F</var>, <var>homeObject</var>)","number":"9.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MakeMethod ( F, homeObject)"},{"type":"op","aoid":"SetFunctionName","refId":"sec-setfunctionname","location":"","key":"SetFunctionName"},{"type":"clause","id":"sec-setfunctionname","aoid":"SetFunctionName","title":"SetFunctionName (F, name [ , prefix ])","titleHTML":"SetFunctionName (<var>F</var>, <var>name</var> [ , <var>prefix</var> ])","number":"9.2.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SetFunctionName (F, name [ , prefix ])"},{"type":"op","aoid":"FunctionDeclarationInstantiation","refId":"sec-functiondeclarationinstantiation","location":"","key":"FunctionDeclarationInstantiation"},{"type":"clause","id":"sec-functiondeclarationinstantiation","aoid":"FunctionDeclarationInstantiation","title":"FunctionDeclarationInstantiation (func, argumentsList)","titleHTML":"FunctionDeclarationInstantiation (<var>func</var>, <var>argumentsList</var>)","number":"9.2.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FunctionDeclarationInstantiation (func, argumentsList)"},{"type":"clause","id":"sec-ecmascript-function-objects","aoid":null,"title":"ECMAScript Function Objects","titleHTML":"ECMAScript Function Objects","number":"9.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Function Objects"},{"type":"clause","id":"sec-built-in-function-objects-call-thisargument-argumentslist","aoid":null,"title":"[[Call]] ( thisArgument, argumentsList)","titleHTML":"[[Call]] ( <var>thisArgument</var>, <var>argumentsList</var>)","number":"9.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Call]] ( thisArgument, argumentsList)"},{"type":"clause","id":"sec-built-in-function-objects-construct-argumentslist-newtarget","aoid":null,"title":"[[Construct]] (argumentsList, newTarget)","titleHTML":"[[Construct]] (<var>argumentsList</var>, <var>newTarget</var>)","number":"9.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Construct]] (argumentsList, newTarget)"},{"type":"op","aoid":"CreateBuiltinFunction","refId":"sec-createbuiltinfunction","location":"","key":"CreateBuiltinFunction"},{"type":"clause","id":"sec-createbuiltinfunction","aoid":"CreateBuiltinFunction","title":"CreateBuiltinFunction (realm, steps, prototype [ , internalSlotsList ])","titleHTML":"CreateBuiltinFunction (<var>realm</var>, <var>steps</var>, <var>prototype</var> [ , <var>internalSlotsList</var> ])","number":"9.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateBuiltinFunction (realm, steps, prototype [ , internalSlotsList ])"},{"type":"clause","id":"sec-built-in-function-objects","aoid":null,"title":"Built-in Function Objects","titleHTML":"Built-in Function Objects","number":"9.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Built-in Function Objects"},{"type":"term","term":"bound function","refId":"sec-bound-function-exotic-objects","namespace":"https://tc39.github.io/ecma262/","location":"","key":"bound function"},{"type":"table","id":"table-28","number":28,"caption":"Table 28: Internal Slots of Exotic Bound Function Objects","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 28: Internal Slots of Exotic Bound Function Objects"},{"type":"clause","id":"sec-bound-function-exotic-objects-call-thisargument-argumentslist","aoid":null,"title":"[[Call]] ( thisArgument, argumentsList)","titleHTML":"[[Call]] ( <var>thisArgument</var>, <var>argumentsList</var>)","number":"9.4.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Call]] ( thisArgument, argumentsList)"},{"type":"clause","id":"sec-bound-function-exotic-objects-construct-argumentslist-newtarget","aoid":null,"title":"[[Construct]] (argumentsList, newTarget)","titleHTML":"[[Construct]] (<var>argumentsList</var>, <var>newTarget</var>)","number":"9.4.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Construct]] (argumentsList, newTarget)"},{"type":"op","aoid":"BoundFunctionCreate","refId":"sec-boundfunctioncreate","location":"","key":"BoundFunctionCreate"},{"type":"clause","id":"sec-boundfunctioncreate","aoid":"BoundFunctionCreate","title":"BoundFunctionCreate (targetFunction, boundThis, boundArgs)","titleHTML":"BoundFunctionCreate (<var>targetFunction</var>, <var>boundThis</var>, <var>boundArgs</var>)","number":"9.4.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BoundFunctionCreate (targetFunction, boundThis, boundArgs)"},{"type":"clause","id":"sec-bound-function-exotic-objects","aoid":null,"title":"Bound Function Exotic Objects","titleHTML":"Bound Function Exotic Objects","number":"9.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Bound Function Exotic Objects"},{"type":"clause","id":"sec-array-exotic-objects-defineownproperty-p-desc","aoid":null,"title":"[[DefineOwnProperty]] ( P, Desc)","titleHTML":"[[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var>)","number":"9.4.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[DefineOwnProperty]] ( P, Desc)"},{"type":"op","aoid":"ArrayCreate","refId":"sec-arraycreate","location":"","key":"ArrayCreate"},{"type":"clause","id":"sec-arraycreate","aoid":"ArrayCreate","title":"ArrayCreate (length [ , proto ])","titleHTML":"ArrayCreate (<var>length</var> [ , <var>proto</var> ])","number":"9.4.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayCreate (length [ , proto ])"},{"type":"op","aoid":"ArraySpeciesCreate","refId":"sec-arrayspeciescreate","location":"","key":"ArraySpeciesCreate"},{"type":"clause","id":"sec-arrayspeciescreate","aoid":"ArraySpeciesCreate","title":"ArraySpeciesCreate (originalArray, length)","titleHTML":"ArraySpeciesCreate (<var>originalArray</var>, <var>length</var>)","number":"9.4.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArraySpeciesCreate (originalArray, length)"},{"type":"op","aoid":"ArraySetLength","refId":"sec-arraysetlength","location":"","key":"ArraySetLength"},{"type":"clause","id":"sec-arraysetlength","aoid":"ArraySetLength","title":"ArraySetLength (A, Desc)","titleHTML":"ArraySetLength (<var>A</var>, <var>Desc</var>)","number":"9.4.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArraySetLength (A, Desc)"},{"type":"clause","id":"sec-array-exotic-objects","aoid":null,"title":"Array Exotic Objects","titleHTML":"Array Exotic Objects","number":"9.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array Exotic Objects"},{"type":"clause","id":"sec-string-exotic-objects-getownproperty-p","aoid":null,"title":"[[GetOwnProperty]] ( P )","titleHTML":"[[GetOwnProperty]] ( <var>P</var> )","number":"9.4.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[GetOwnProperty]] ( P )"},{"type":"clause","id":"sec-string-exotic-objects-ownpropertykeys","aoid":null,"title":"[[OwnPropertyKeys]] ( )","titleHTML":"[[OwnPropertyKeys]] ( )","number":"9.4.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[OwnPropertyKeys]] ( )"},{"type":"op","aoid":"StringCreate","refId":"sec-stringcreate","location":"","key":"StringCreate"},{"type":"clause","id":"sec-stringcreate","aoid":"StringCreate","title":"StringCreate ( value, prototype)","titleHTML":"StringCreate ( <var>value</var>, <var>prototype</var>)","number":"9.4.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"StringCreate ( value, prototype)"},{"type":"clause","id":"sec-string-exotic-objects","aoid":null,"title":"String Exotic Objects","titleHTML":"String Exotic Objects","number":"9.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String Exotic Objects"},{"type":"clause","id":"sec-arguments-exotic-objects-getownproperty-p","aoid":null,"title":"[[GetOwnProperty]] (P)","titleHTML":"[[GetOwnProperty]] (<var>P</var>)","number":"9.4.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[GetOwnProperty]] (P)"},{"type":"clause","id":"sec-arguments-exotic-objects-defineownproperty-p-desc","aoid":null,"title":"[[DefineOwnProperty]] (P, Desc)","titleHTML":"[[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)","number":"9.4.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[DefineOwnProperty]] (P, Desc)"},{"type":"clause","id":"sec-arguments-exotic-objects-get-p-receiver","aoid":null,"title":"[[Get]] (P, Receiver)","titleHTML":"[[Get]] (<var>P</var>, <var>Receiver</var>)","number":"9.4.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Get]] (P, Receiver)"},{"type":"clause","id":"sec-arguments-exotic-objects-set-p-v-receiver","aoid":null,"title":"[[Set]] ( P, V, Receiver)","titleHTML":"[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)","number":"9.4.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Set]] ( P, V, Receiver)"},{"type":"clause","id":"sec-arguments-exotic-objects-delete-p","aoid":null,"title":"[[Delete]] (P)","titleHTML":"[[Delete]] (<var>P</var>)","number":"9.4.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Delete]] (P)"},{"type":"op","aoid":"CreateUnmappedArgumentsObject","refId":"sec-createunmappedargumentsobject","location":"","key":"CreateUnmappedArgumentsObject"},{"type":"clause","id":"sec-createunmappedargumentsobject","aoid":"CreateUnmappedArgumentsObject","title":"CreateUnmappedArgumentsObject (argumentsList)","titleHTML":"CreateUnmappedArgumentsObject (<var>argumentsList</var>)","number":"9.4.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateUnmappedArgumentsObject (argumentsList)"},{"type":"op","aoid":"MakeArgGetter","refId":"sec-makearggetter","location":"","key":"MakeArgGetter"},{"type":"clause","id":"sec-makearggetter","aoid":"MakeArgGetter","title":"MakeArgGetter ( name, env)","titleHTML":"MakeArgGetter ( <var>name</var>, <var>env</var>)","number":"9.4.4.7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MakeArgGetter ( name, env)"},{"type":"op","aoid":"MakeArgSetter","refId":"sec-makeargsetter","location":"","key":"MakeArgSetter"},{"type":"clause","id":"sec-makeargsetter","aoid":"MakeArgSetter","title":"MakeArgSetter ( name, env)","titleHTML":"MakeArgSetter ( <var>name</var>, <var>env</var>)","number":"9.4.4.7.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MakeArgSetter ( name, env)"},{"type":"op","aoid":"CreateMappedArgumentsObject","refId":"sec-createmappedargumentsobject","location":"","key":"CreateMappedArgumentsObject"},{"type":"clause","id":"sec-createmappedargumentsobject","aoid":"CreateMappedArgumentsObject","title":"CreateMappedArgumentsObject ( func, formals, argumentsList, env )","titleHTML":"CreateMappedArgumentsObject ( <var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var> )","number":"9.4.4.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateMappedArgumentsObject ( func, formals, argumentsList, env )"},{"type":"clause","id":"sec-arguments-exotic-objects","aoid":null,"title":"Arguments Exotic Objects","titleHTML":"Arguments Exotic Objects","number":"9.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Arguments Exotic Objects"},{"type":"clause","id":"sec-integer-indexed-exotic-objects-getownproperty-p","aoid":null,"title":"[[GetOwnProperty]] ( P )","titleHTML":"[[GetOwnProperty]] ( <var>P</var> )","number":"9.4.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[GetOwnProperty]] ( P )"},{"type":"clause","id":"sec-integer-indexed-exotic-objects-hasproperty-p","aoid":null,"title":"[[HasProperty]](P)","titleHTML":"[[HasProperty]](<var>P</var>)","number":"9.4.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[HasProperty]](P)"},{"type":"clause","id":"sec-integer-indexed-exotic-objects-defineownproperty-p-desc","aoid":null,"title":"[[DefineOwnProperty]] ( P, Desc)","titleHTML":"[[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var>)","number":"9.4.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[DefineOwnProperty]] ( P, Desc)"},{"type":"clause","id":"sec-integer-indexed-exotic-objects-get-p-receiver","aoid":null,"title":"[[Get]] (P, Receiver)","titleHTML":"[[Get]] (<var>P</var>, <var>Receiver</var>)","number":"9.4.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Get]] (P, Receiver)"},{"type":"clause","id":"sec-integer-indexed-exotic-objects-set-p-v-receiver","aoid":null,"title":"[[Set]] ( P, V, Receiver)","titleHTML":"[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)","number":"9.4.5.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Set]] ( P, V, Receiver)"},{"type":"clause","id":"sec-integer-indexed-exotic-objects-ownpropertykeys","aoid":null,"title":"[[OwnPropertyKeys]] ()","titleHTML":"[[OwnPropertyKeys]] ()","number":"9.4.5.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[OwnPropertyKeys]] ()"},{"type":"op","aoid":"IntegerIndexedObjectCreate","refId":"sec-integerindexedobjectcreate","location":"","key":"IntegerIndexedObjectCreate"},{"type":"clause","id":"sec-integerindexedobjectcreate","aoid":"IntegerIndexedObjectCreate","title":"IntegerIndexedObjectCreate (prototype, internalSlotsList)","titleHTML":"IntegerIndexedObjectCreate (<var>prototype</var>, <var>internalSlotsList</var>)","number":"9.4.5.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IntegerIndexedObjectCreate (prototype, internalSlotsList)"},{"type":"op","aoid":"IntegerIndexedElementGet","refId":"sec-integerindexedelementget","location":"","key":"IntegerIndexedElementGet"},{"type":"clause","id":"sec-integerindexedelementget","aoid":"IntegerIndexedElementGet","title":"IntegerIndexedElementGet ( O, index )","titleHTML":"IntegerIndexedElementGet ( <var>O</var>, <var>index</var> )","number":"9.4.5.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IntegerIndexedElementGet ( O, index )"},{"type":"op","aoid":"IntegerIndexedElementSet","refId":"sec-integerindexedelementset","location":"","key":"IntegerIndexedElementSet"},{"type":"clause","id":"sec-integerindexedelementset","aoid":"IntegerIndexedElementSet","title":"IntegerIndexedElementSet ( O, index, value )","titleHTML":"IntegerIndexedElementSet ( <var>O</var>, <var>index</var>, <var>value</var> )","number":"9.4.5.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IntegerIndexedElementSet ( O, index, value )"},{"type":"clause","id":"sec-integer-indexed-exotic-objects","aoid":null,"title":"Integer Indexed Exotic Objects","titleHTML":"Integer Indexed Exotic Objects","number":"9.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Integer Indexed Exotic Objects"},{"type":"table","id":"table-29","number":29,"caption":"Table 29: Internal Slots of Module Namespace Exotic Objects","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 29: Internal Slots of Module Namespace Exotic Objects"},{"type":"clause","id":"sec-module-namespace-exotic-objects-getprototypeof","aoid":null,"title":"[[GetPrototypeOf]] ( )","titleHTML":"[[GetPrototypeOf]] ( )","number":"9.4.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[GetPrototypeOf]] ( )"},{"type":"clause","id":"sec-module-namespace-exotic-objects-setprototypeof-v","aoid":null,"title":"[[SetPrototypeOf]] (V)","titleHTML":"[[SetPrototypeOf]] (<var>V</var>)","number":"9.4.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[SetPrototypeOf]] (V)"},{"type":"clause","id":"sec-module-namespace-exotic-objects-isextensible","aoid":null,"title":"[[IsExtensible]] ( )","titleHTML":"[[IsExtensible]] ( )","number":"9.4.6.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[IsExtensible]] ( )"},{"type":"clause","id":"sec-module-namespace-exotic-objects-preventextensions","aoid":null,"title":"[[PreventExtensions]] ( )","titleHTML":"[[PreventExtensions]] ( )","number":"9.4.6.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[PreventExtensions]] ( )"},{"type":"clause","id":"sec-module-namespace-exotic-objects-getownproperty-p","aoid":null,"title":"[[GetOwnProperty]] (P)","titleHTML":"[[GetOwnProperty]] (<var>P</var>)","number":"9.4.6.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[GetOwnProperty]] (P)"},{"type":"clause","id":"sec-module-namespace-exotic-objects-defineownproperty-p-desc","aoid":null,"title":"[[DefineOwnProperty]] (P, Desc)","titleHTML":"[[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)","number":"9.4.6.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[DefineOwnProperty]] (P, Desc)"},{"type":"clause","id":"sec-module-namespace-exotic-objects-hasproperty-p","aoid":null,"title":"[[HasProperty]] (P)","titleHTML":"[[HasProperty]] (<var>P</var>)","number":"9.4.6.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[HasProperty]] (P)"},{"type":"clause","id":"sec-module-namespace-exotic-objects-get-p-receiver","aoid":null,"title":"[[Get]] (P, Receiver)","titleHTML":"[[Get]] (<var>P</var>, <var>Receiver</var>)","number":"9.4.6.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Get]] (P, Receiver)"},{"type":"clause","id":"sec-module-namespace-exotic-objects-set-p-v-receiver","aoid":null,"title":"[[Set]] ( P, V, Receiver)","titleHTML":"[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)","number":"9.4.6.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Set]] ( P, V, Receiver)"},{"type":"clause","id":"sec-module-namespace-exotic-objects-delete-p","aoid":null,"title":"[[Delete]] (P)","titleHTML":"[[Delete]] (<var>P</var>)","number":"9.4.6.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Delete]] (P)"},{"type":"clause","id":"sec-module-namespace-exotic-objects-ownpropertykeys","aoid":null,"title":"[[OwnPropertyKeys]] ( )","titleHTML":"[[OwnPropertyKeys]] ( )","number":"9.4.6.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[OwnPropertyKeys]] ( )"},{"type":"op","aoid":"ModuleNamespaceCreate","refId":"sec-modulenamespacecreate","location":"","key":"ModuleNamespaceCreate"},{"type":"clause","id":"sec-modulenamespacecreate","aoid":"ModuleNamespaceCreate","title":"ModuleNamespaceCreate (module, exports)","titleHTML":"ModuleNamespaceCreate (<var>module</var>, <var>exports</var>)","number":"9.4.6.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ModuleNamespaceCreate (module, exports)"},{"type":"clause","id":"sec-module-namespace-exotic-objects","aoid":null,"title":"Module Namespace Exotic Objects","titleHTML":"Module Namespace Exotic Objects","number":"9.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Module Namespace Exotic Objects"},{"type":"term","term":"immutable prototype exotic object","refId":"sec-immutable-prototype-exotic-objects","namespace":"https://tc39.github.io/ecma262/","location":"","key":"immutable prototype exotic object"},{"type":"clause","id":"sec-immutable-prototype-exotic-objects-setprototypeof-v","aoid":null,"title":"[[SetPrototypeOf]] (V)","titleHTML":"[[SetPrototypeOf]] (<var>V</var>)","number":"9.4.7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[SetPrototypeOf]] (V)"},{"type":"clause","id":"sec-immutable-prototype-exotic-objects","aoid":null,"title":"Immutable Prototype Exotic Objects","titleHTML":"Immutable Prototype Exotic Objects","number":"9.4.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Immutable Prototype Exotic Objects"},{"type":"clause","id":"sec-built-in-exotic-object-internal-methods-and-slots","aoid":null,"title":"Built-in Exotic Object Internal Methods and Slots","titleHTML":"Built-in Exotic Object Internal Methods and Slots","number":"9.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Built-in Exotic Object Internal Methods and Slots"},{"type":"table","id":"table-30","number":30,"caption":"Table 30: Proxy Handler Methods","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 30: Proxy Handler Methods"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-getprototypeof","aoid":null,"title":"[[GetPrototypeOf]] ( )","titleHTML":"[[GetPrototypeOf]] ( )","number":"9.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[GetPrototypeOf]] ( )"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v","aoid":null,"title":"[[SetPrototypeOf]] (V)","titleHTML":"[[SetPrototypeOf]] (<var>V</var>)","number":"9.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[SetPrototypeOf]] (V)"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-isextensible","aoid":null,"title":"[[IsExtensible]] ( )","titleHTML":"[[IsExtensible]] ( )","number":"9.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[IsExtensible]] ( )"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-preventextensions","aoid":null,"title":"[[PreventExtensions]] ( )","titleHTML":"[[PreventExtensions]] ( )","number":"9.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[PreventExtensions]] ( )"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p","aoid":null,"title":"[[GetOwnProperty]] (P)","titleHTML":"[[GetOwnProperty]] (<var>P</var>)","number":"9.5.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[GetOwnProperty]] (P)"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc","aoid":null,"title":"[[DefineOwnProperty]] (P, Desc)","titleHTML":"[[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)","number":"9.5.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[DefineOwnProperty]] (P, Desc)"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p","aoid":null,"title":"[[HasProperty]] (P)","titleHTML":"[[HasProperty]] (<var>P</var>)","number":"9.5.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[HasProperty]] (P)"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver","aoid":null,"title":"[[Get]] (P, Receiver)","titleHTML":"[[Get]] (<var>P</var>, <var>Receiver</var>)","number":"9.5.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Get]] (P, Receiver)"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver","aoid":null,"title":"[[Set]] ( P, V, Receiver)","titleHTML":"[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)","number":"9.5.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Set]] ( P, V, Receiver)"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-delete-p","aoid":null,"title":"[[Delete]] (P)","titleHTML":"[[Delete]] (<var>P</var>)","number":"9.5.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Delete]] (P)"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys","aoid":null,"title":"[[OwnPropertyKeys]] ( )","titleHTML":"[[OwnPropertyKeys]] ( )","number":"9.5.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[OwnPropertyKeys]] ( )"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist","aoid":null,"title":"[[Call]] (thisArgument, argumentsList)","titleHTML":"[[Call]] (<var>thisArgument</var>, <var>argumentsList</var>)","number":"9.5.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Call]] (thisArgument, argumentsList)"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget","aoid":null,"title":"[[Construct]] ( argumentsList, newTarget)","titleHTML":"[[Construct]] ( <var>argumentsList</var>, <var>newTarget</var>)","number":"9.5.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[[Construct]] ( argumentsList, newTarget)"},{"type":"op","aoid":"ProxyCreate","refId":"sec-proxycreate","location":"","key":"ProxyCreate"},{"type":"clause","id":"sec-proxycreate","aoid":"ProxyCreate","title":"ProxyCreate (target, handler)","titleHTML":"ProxyCreate (<var>target</var>, <var>handler</var>)","number":"9.5.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ProxyCreate (target, handler)"},{"type":"clause","id":"sec-proxy-object-internal-methods-and-internal-slots","aoid":null,"title":"Proxy Object Internal Methods and Internal Slots","titleHTML":"Proxy Object Internal Methods and Internal Slots","number":"9.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Proxy Object Internal Methods and Internal Slots"},{"type":"clause","id":"sec-ordinary-and-exotic-objects-behaviours","aoid":null,"title":"Ordinary and Exotic Objects Behaviours","titleHTML":"Ordinary and Exotic Objects Behaviours","number":"9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Ordinary and Exotic Objects Behaviours"},{"type":"production","id":"prod-SourceCharacter","name":"SourceCharacter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SourceCharacter"},{"type":"op","aoid":"UTF16Encoding","refId":"sec-utf16encoding","location":"","key":"UTF16Encoding"},{"type":"clause","id":"sec-utf16encoding","aoid":"UTF16Encoding","title":"Static Semantics: UTF16Encoding ( cp )","titleHTML":"Static Semantics: UTF16Encoding ( <var>cp</var> )","number":"10.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: UTF16Encoding ( cp )"},{"type":"op","aoid":"UTF16Decode","refId":"sec-utf16decode","location":"","key":"UTF16Decode"},{"type":"clause","id":"sec-utf16decode","aoid":"UTF16Decode","title":"Static Semantics: UTF16Decode( lead, trail )","titleHTML":"Static Semantics: UTF16Decode( <var>lead</var>, <var>trail</var> )","number":"10.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: UTF16Decode( lead, trail )"},{"type":"clause","id":"sec-source-text","aoid":null,"title":"Source Text","titleHTML":"Source Text","number":"10.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Source Text"},{"type":"term","term":"strict mode code","refId":"sec-strict-mode-code","namespace":"https://tc39.github.io/ecma262/","location":"","key":"strict mode code"},{"type":"term","term":"non-strict code","refId":"sec-strict-mode-code","id":"non-strict-code","namespace":"https://tc39.github.io/ecma262/","location":"","key":"non-strict code"},{"type":"clause","id":"sec-strict-mode-code","aoid":null,"title":"Strict Mode Code","titleHTML":"Strict Mode Code","number":"10.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Strict Mode Code"},{"type":"clause","id":"sec-non-ecmascript-functions","aoid":null,"title":"Non-ECMAScript Functions","titleHTML":"Non-ECMAScript Functions","number":"10.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Non-ECMAScript Functions"},{"type":"clause","id":"sec-types-of-source-code","aoid":null,"title":"Types of Source Code","titleHTML":"Types of Source Code","number":"10.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Types of Source Code"},{"type":"clause","id":"sec-ecmascript-language-source-code","aoid":null,"title":"ECMAScript Language: Source Code","titleHTML":"ECMAScript Language: Source Code","number":"10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Language: Source Code"},{"type":"production","id":"prod-InputElementDiv","name":"InputElementDiv","namespace":"https://tc39.github.io/ecma262/","location":"","key":"InputElementDiv"},{"type":"production","id":"prod-InputElementRegExp","name":"InputElementRegExp","namespace":"https://tc39.github.io/ecma262/","location":"","key":"InputElementRegExp"},{"type":"production","id":"prod-InputElementRegExpOrTemplateTail","name":"InputElementRegExpOrTemplateTail","namespace":"https://tc39.github.io/ecma262/","location":"","key":"InputElementRegExpOrTemplateTail"},{"type":"production","id":"prod-InputElementTemplateTail","name":"InputElementTemplateTail","namespace":"https://tc39.github.io/ecma262/","location":"","key":"InputElementTemplateTail"},{"type":"table","id":"table-31","number":31,"caption":"Table 31: Format-Control Code Point Usage","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 31: Format-Control Code Point Usage"},{"type":"clause","id":"sec-unicode-format-control-characters","aoid":null,"title":"Unicode Format-Control Characters","titleHTML":"Unicode Format-Control Characters","number":"11.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Unicode Format-Control Characters"},{"type":"table","id":"table-32","number":32,"caption":"Table 32: White Space Code Points","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 32: White Space Code Points"},{"type":"production","id":"prod-WhiteSpace","name":"WhiteSpace","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WhiteSpace"},{"type":"clause","id":"sec-white-space","aoid":null,"title":"White Space","titleHTML":"White Space","number":"11.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"White Space"},{"type":"table","id":"table-33","number":33,"caption":"Table 33: Line Terminator Code Points","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 33: Line Terminator Code Points"},{"type":"production","id":"prod-LineTerminator","name":"LineTerminator","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LineTerminator"},{"type":"production","id":"prod-LineTerminatorSequence","name":"LineTerminatorSequence","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LineTerminatorSequence"},{"type":"clause","id":"sec-line-terminators","aoid":null,"title":"Line Terminators","titleHTML":"Line Terminators","number":"11.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Line Terminators"},{"type":"production","id":"prod-Comment","name":"Comment","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Comment"},{"type":"production","id":"prod-MultiLineComment","name":"MultiLineComment","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MultiLineComment"},{"type":"production","id":"prod-MultiLineCommentChars","name":"MultiLineCommentChars","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MultiLineCommentChars"},{"type":"production","id":"prod-PostAsteriskCommentChars","name":"PostAsteriskCommentChars","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PostAsteriskCommentChars"},{"type":"production","id":"prod-MultiLineNotAsteriskChar","name":"MultiLineNotAsteriskChar","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MultiLineNotAsteriskChar"},{"type":"production","id":"prod-MultiLineNotForwardSlashOrAsteriskChar","name":"MultiLineNotForwardSlashOrAsteriskChar","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MultiLineNotForwardSlashOrAsteriskChar"},{"type":"production","id":"prod-SingleLineComment","name":"SingleLineComment","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SingleLineComment"},{"type":"production","id":"prod-SingleLineCommentChars","name":"SingleLineCommentChars","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SingleLineCommentChars"},{"type":"production","id":"prod-SingleLineCommentChar","name":"SingleLineCommentChar","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SingleLineCommentChar"},{"type":"clause","id":"sec-comments","aoid":null,"title":"Comments","titleHTML":"Comments","number":"11.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Comments"},{"type":"production","id":"prod-CommonToken","name":"CommonToken","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CommonToken"},{"type":"clause","id":"sec-tokens","aoid":null,"title":"Tokens","titleHTML":"Tokens","number":"11.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Tokens"},{"type":"production","id":"prod-IdentifierName","name":"IdentifierName","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IdentifierName"},{"type":"production","id":"prod-IdentifierStart","name":"IdentifierStart","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IdentifierStart"},{"type":"production","id":"prod-IdentifierPart","name":"IdentifierPart","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IdentifierPart"},{"type":"production","id":"prod-UnicodeIDStart","name":"UnicodeIDStart","namespace":"https://tc39.github.io/ecma262/","location":"","key":"UnicodeIDStart"},{"type":"production","id":"prod-UnicodeIDContinue","name":"UnicodeIDContinue","namespace":"https://tc39.github.io/ecma262/","location":"","key":"UnicodeIDContinue"},{"type":"clause","id":"sec-identifier-names-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"11.6.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-identifier-names-static-semantics-stringvalue","aoid":null,"title":"Static Semantics: StringValue","titleHTML":"Static Semantics: StringValue","number":"11.6.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: StringValue"},{"type":"clause","id":"sec-identifier-names","aoid":null,"title":"Identifier Names","titleHTML":"Identifier Names","number":"11.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Identifier Names"},{"type":"production","id":"prod-ReservedWord","name":"ReservedWord","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ReservedWord"},{"type":"production","id":"prod-Keyword","name":"Keyword","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Keyword"},{"type":"clause","id":"sec-keywords","aoid":null,"title":"Keywords","titleHTML":"Keywords","number":"11.6.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Keywords"},{"type":"production","id":"prod-FutureReservedWord","name":"FutureReservedWord","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FutureReservedWord"},{"type":"clause","id":"sec-future-reserved-words","aoid":null,"title":"Future Reserved Words","titleHTML":"Future Reserved Words","number":"11.6.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Future Reserved Words"},{"type":"clause","id":"sec-reserved-words","aoid":null,"title":"Reserved Words","titleHTML":"Reserved Words","number":"11.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reserved Words"},{"type":"clause","id":"sec-names-and-keywords","aoid":null,"title":"Names and Keywords","titleHTML":"Names and Keywords","number":"11.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Names and Keywords"},{"type":"production","id":"prod-Punctuator","name":"Punctuator","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Punctuator"},{"type":"production","id":"prod-DivPunctuator","name":"DivPunctuator","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DivPunctuator"},{"type":"production","id":"prod-RightBracePunctuator","name":"RightBracePunctuator","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RightBracePunctuator"},{"type":"clause","id":"sec-punctuators","aoid":null,"title":"Punctuators","titleHTML":"Punctuators","number":"11.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Punctuators"},{"type":"production","id":"prod-NullLiteral","name":"NullLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NullLiteral"},{"type":"clause","id":"sec-null-literals","aoid":null,"title":"Null Literals","titleHTML":"Null Literals","number":"11.8.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Null Literals"},{"type":"production","id":"prod-BooleanLiteral","name":"BooleanLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BooleanLiteral"},{"type":"clause","id":"sec-boolean-literals","aoid":null,"title":"Boolean Literals","titleHTML":"Boolean Literals","number":"11.8.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean Literals"},{"type":"production","id":"prod-NumericLiteral","name":"NumericLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NumericLiteral"},{"type":"production","id":"prod-DecimalLiteral","name":"DecimalLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DecimalLiteral"},{"type":"production","id":"prod-DecimalIntegerLiteral","name":"DecimalIntegerLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DecimalIntegerLiteral"},{"type":"production","id":"prod-DecimalDigits","name":"DecimalDigits","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DecimalDigits"},{"type":"production","id":"prod-DecimalDigit","name":"DecimalDigit","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DecimalDigit"},{"type":"production","id":"prod-NonZeroDigit","name":"NonZeroDigit","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NonZeroDigit"},{"type":"production","id":"prod-ExponentPart","name":"ExponentPart","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ExponentPart"},{"type":"production","id":"prod-ExponentIndicator","name":"ExponentIndicator","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ExponentIndicator"},{"type":"production","id":"prod-SignedInteger","name":"SignedInteger","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SignedInteger"},{"type":"production","id":"prod-BinaryIntegerLiteral","name":"BinaryIntegerLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BinaryIntegerLiteral"},{"type":"production","id":"prod-BinaryDigits","name":"BinaryDigits","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BinaryDigits"},{"type":"production","id":"prod-BinaryDigit","name":"BinaryDigit","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BinaryDigit"},{"type":"production","id":"prod-OctalIntegerLiteral","name":"OctalIntegerLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OctalIntegerLiteral"},{"type":"production","id":"prod-OctalDigits","name":"OctalDigits","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OctalDigits"},{"type":"production","id":"prod-OctalDigit","name":"OctalDigit","namespace":"https://tc39.github.io/ecma262/","location":"","key":"OctalDigit"},{"type":"production","id":"prod-HexIntegerLiteral","name":"HexIntegerLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HexIntegerLiteral"},{"type":"production","id":"prod-HexDigits","name":"HexDigits","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HexDigits"},{"type":"production","id":"prod-HexDigit","name":"HexDigit","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HexDigit"},{"type":"clause","id":"sec-static-semantics-mv","aoid":null,"title":"Static Semantics: MV","titleHTML":"Static Semantics: MV","number":"11.8.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: MV"},{"type":"clause","id":"sec-literals-numeric-literals","aoid":null,"title":"Numeric Literals","titleHTML":"Numeric Literals","number":"11.8.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Numeric Literals"},{"type":"production","id":"prod-StringLiteral","name":"StringLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"StringLiteral"},{"type":"production","id":"prod-DoubleStringCharacters","name":"DoubleStringCharacters","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DoubleStringCharacters"},{"type":"production","id":"prod-SingleStringCharacters","name":"SingleStringCharacters","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SingleStringCharacters"},{"type":"production","id":"prod-DoubleStringCharacter","name":"DoubleStringCharacter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DoubleStringCharacter"},{"type":"production","id":"prod-SingleStringCharacter","name":"SingleStringCharacter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SingleStringCharacter"},{"type":"production","id":"prod-LineContinuation","name":"LineContinuation","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LineContinuation"},{"type":"production","id":"prod-EscapeSequence","name":"EscapeSequence","namespace":"https://tc39.github.io/ecma262/","location":"","key":"EscapeSequence"},{"type":"production","id":"prod-CharacterEscapeSequence","name":"CharacterEscapeSequence","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CharacterEscapeSequence"},{"type":"production","id":"prod-SingleEscapeCharacter","name":"SingleEscapeCharacter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SingleEscapeCharacter"},{"type":"production","id":"prod-NonEscapeCharacter","name":"NonEscapeCharacter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NonEscapeCharacter"},{"type":"production","id":"prod-EscapeCharacter","name":"EscapeCharacter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"EscapeCharacter"},{"type":"production","id":"prod-HexEscapeSequence","name":"HexEscapeSequence","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HexEscapeSequence"},{"type":"production","id":"prod-UnicodeEscapeSequence","name":"UnicodeEscapeSequence","namespace":"https://tc39.github.io/ecma262/","location":"","key":"UnicodeEscapeSequence"},{"type":"production","id":"prod-Hex4Digits","name":"Hex4Digits","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Hex4Digits"},{"type":"clause","id":"sec-string-literals-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"11.8.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-string-literals-static-semantics-stringvalue","aoid":null,"title":"Static Semantics: StringValue","titleHTML":"Static Semantics: StringValue","number":"11.8.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: StringValue"},{"type":"table","id":"table-34","number":34,"caption":"Table 34: String Single Character Escape Sequences","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 34: String Single Character Escape Sequences"},{"type":"clause","id":"sec-static-semantics-sv","aoid":null,"title":"Static Semantics: SV","titleHTML":"Static Semantics: SV","number":"11.8.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: SV"},{"type":"clause","id":"sec-literals-string-literals","aoid":null,"title":"String Literals","titleHTML":"String Literals","number":"11.8.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String Literals"},{"type":"production","id":"prod-RegularExpressionLiteral","name":"RegularExpressionLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionLiteral"},{"type":"production","id":"prod-RegularExpressionBody","name":"RegularExpressionBody","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionBody"},{"type":"production","id":"prod-RegularExpressionChars","name":"RegularExpressionChars","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionChars"},{"type":"production","id":"prod-RegularExpressionFirstChar","name":"RegularExpressionFirstChar","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionFirstChar"},{"type":"production","id":"prod-RegularExpressionChar","name":"RegularExpressionChar","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionChar"},{"type":"production","id":"prod-RegularExpressionBackslashSequence","name":"RegularExpressionBackslashSequence","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionBackslashSequence"},{"type":"production","id":"prod-RegularExpressionNonTerminator","name":"RegularExpressionNonTerminator","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionNonTerminator"},{"type":"production","id":"prod-RegularExpressionClass","name":"RegularExpressionClass","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionClass"},{"type":"production","id":"prod-RegularExpressionClassChars","name":"RegularExpressionClassChars","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionClassChars"},{"type":"production","id":"prod-RegularExpressionClassChar","name":"RegularExpressionClassChar","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionClassChar"},{"type":"production","id":"prod-RegularExpressionFlags","name":"RegularExpressionFlags","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegularExpressionFlags"},{"type":"clause","id":"sec-literals-regular-expression-literals-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"11.8.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-static-semantics-bodytext","aoid":null,"title":"Static Semantics: BodyText","titleHTML":"Static Semantics: BodyText","number":"11.8.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BodyText"},{"type":"clause","id":"sec-static-semantics-flagtext","aoid":null,"title":"Static Semantics: FlagText","titleHTML":"Static Semantics: FlagText","number":"11.8.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: FlagText"},{"type":"clause","id":"sec-literals-regular-expression-literals","aoid":null,"title":"Regular Expression Literals","titleHTML":"Regular Expression Literals","number":"11.8.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Regular Expression Literals"},{"type":"production","id":"prod-Template","name":"Template","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Template"},{"type":"production","id":"prod-NoSubstitutionTemplate","name":"NoSubstitutionTemplate","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NoSubstitutionTemplate"},{"type":"production","id":"prod-TemplateHead","name":"TemplateHead","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TemplateHead"},{"type":"production","id":"prod-TemplateSubstitutionTail","name":"TemplateSubstitutionTail","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TemplateSubstitutionTail"},{"type":"production","id":"prod-TemplateMiddle","name":"TemplateMiddle","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TemplateMiddle"},{"type":"production","id":"prod-TemplateTail","name":"TemplateTail","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TemplateTail"},{"type":"production","id":"prod-TemplateCharacters","name":"TemplateCharacters","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TemplateCharacters"},{"type":"production","id":"prod-TemplateCharacter","name":"TemplateCharacter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TemplateCharacter"},{"type":"clause","id":"sec-static-semantics-tv-and-trv","aoid":null,"title":"Static Semantics: TV and TRV","titleHTML":"Static Semantics: TV and TRV","number":"11.8.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: TV and TRV"},{"type":"clause","id":"sec-template-literal-lexical-components","aoid":null,"title":"Template Literal Lexical Components","titleHTML":"Template Literal Lexical Components","number":"11.8.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Template Literal Lexical Components"},{"type":"clause","id":"sec-ecmascript-language-lexical-grammar-literals","aoid":null,"title":"Literals","titleHTML":"Literals","number":"11.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Literals"},{"type":"clause","id":"sec-rules-of-automatic-semicolon-insertion","aoid":null,"title":"Rules of Automatic Semicolon Insertion","titleHTML":"Rules of Automatic Semicolon Insertion","number":"11.9.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Rules of Automatic Semicolon Insertion"},{"type":"clause","id":"sec-examples-of-automatic-semicolon-insertion","aoid":null,"title":"Examples of Automatic Semicolon Insertion","titleHTML":"Examples of Automatic Semicolon Insertion","number":"11.9.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Examples of Automatic Semicolon Insertion"},{"type":"clause","id":"sec-automatic-semicolon-insertion","aoid":null,"title":"Automatic Semicolon Insertion","titleHTML":"Automatic Semicolon Insertion","number":"11.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Automatic Semicolon Insertion"},{"type":"clause","id":"sec-ecmascript-language-lexical-grammar","aoid":null,"title":"ECMAScript Language: Lexical Grammar","titleHTML":"ECMAScript Language: Lexical Grammar","number":"11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Language: Lexical Grammar"},{"type":"production","id":"prod-IdentifierReference","name":"IdentifierReference","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IdentifierReference"},{"type":"production","id":"prod-BindingIdentifier","name":"BindingIdentifier","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BindingIdentifier"},{"type":"production","id":"prod-LabelIdentifier","name":"LabelIdentifier","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LabelIdentifier"},{"type":"production","id":"prod-Identifier","name":"Identifier","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Identifier"},{"type":"clause","id":"sec-identifiers-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"12.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-identifiers-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"12.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-identifiers-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-identifiers-static-semantics-stringvalue","aoid":null,"title":"Static Semantics: StringValue","titleHTML":"Static Semantics: StringValue","number":"12.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: StringValue"},{"type":"op","aoid":"InitializeBoundName","refId":"sec-initializeboundname","location":"","key":"InitializeBoundName"},{"type":"clause","id":"sec-initializeboundname","aoid":"InitializeBoundName","title":"Runtime Semantics: InitializeBoundName(name, value, environment)","titleHTML":"Runtime Semantics: InitializeBoundName(<var>name</var>, <var>value</var>, <var>environment</var>)","number":"12.1.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: InitializeBoundName(name, value, environment)"},{"type":"clause","id":"sec-identifiers-runtime-semantics-bindinginitialization","aoid":null,"title":"Runtime Semantics: BindingInitialization","titleHTML":"Runtime Semantics: BindingInitialization","number":"12.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: BindingInitialization"},{"type":"clause","id":"sec-identifiers-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-identifiers","aoid":null,"title":"Identifiers","titleHTML":"Identifiers","number":"12.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Identifiers"},{"type":"production","id":"prod-PrimaryExpression","name":"PrimaryExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PrimaryExpression"},{"type":"production","id":"prod-CoverParenthesizedExpressionAndArrowParameterList","name":"CoverParenthesizedExpressionAndArrowParameterList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CoverParenthesizedExpressionAndArrowParameterList"},{"type":"production","id":"prod-ParenthesizedExpression","name":"ParenthesizedExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ParenthesizedExpression"},{"type":"clause","id":"sec-static-semantics-coveredparenthesizedexpression","aoid":null,"title":"Static Semantics: CoveredParenthesizedExpression","titleHTML":"Static Semantics: CoveredParenthesizedExpression","number":"12.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: CoveredParenthesizedExpression"},{"type":"clause","id":"sec-semantics-static-semantics-hasname","aoid":null,"title":"Static Semantics: HasName","titleHTML":"Static Semantics: HasName","number":"12.2.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: HasName"},{"type":"clause","id":"sec-semantics-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.2.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-semantics-static-semantics-isidentifierref","aoid":null,"title":"Static Semantics: IsIdentifierRef","titleHTML":"Static Semantics: IsIdentifierRef","number":"12.2.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsIdentifierRef"},{"type":"clause","id":"sec-semantics-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.2.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-primary-expression-semantics","aoid":null,"title":"Semantics","titleHTML":"Semantics","number":"12.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Semantics"},{"type":"clause","id":"sec-this-keyword-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-this-keyword","aoid":null,"title":"The this Keyword","titleHTML":"The <code>this</code> Keyword","number":"12.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The this Keyword"},{"type":"clause","id":"sec-identifier-reference","aoid":null,"title":"Identifier Reference","titleHTML":"Identifier Reference","number":"12.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Identifier Reference"},{"type":"production","id":"prod-Literal","name":"Literal","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Literal"},{"type":"clause","id":"sec-literals-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.2.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-primary-expression-literals","aoid":null,"title":"Literals","titleHTML":"Literals","number":"12.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Literals"},{"type":"production","id":"prod-ArrayLiteral","name":"ArrayLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayLiteral"},{"type":"production","id":"prod-ElementList","name":"ElementList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ElementList"},{"type":"production","id":"prod-Elision","name":"Elision","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Elision"},{"type":"production","id":"prod-SpreadElement","name":"SpreadElement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SpreadElement"},{"type":"clause","id":"sec-static-semantics-elisionwidth","aoid":null,"title":"Static Semantics: ElisionWidth","titleHTML":"Static Semantics: ElisionWidth","number":"12.2.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ElisionWidth"},{"type":"clause","id":"sec-runtime-semantics-arrayaccumulation","aoid":null,"title":"Runtime Semantics: ArrayAccumulation","titleHTML":"Runtime Semantics: ArrayAccumulation","number":"12.2.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ArrayAccumulation"},{"type":"clause","id":"sec-array-initializer-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.2.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-array-initializer","aoid":null,"title":"Array Initializer","titleHTML":"Array Initializer","number":"12.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array Initializer"},{"type":"production","id":"prod-ObjectLiteral","name":"ObjectLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ObjectLiteral"},{"type":"production","id":"prod-PropertyDefinitionList","name":"PropertyDefinitionList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PropertyDefinitionList"},{"type":"production","id":"prod-PropertyDefinition","name":"PropertyDefinition","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PropertyDefinition"},{"type":"production","id":"prod-PropertyName","name":"PropertyName","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PropertyName"},{"type":"production","id":"prod-LiteralPropertyName","name":"LiteralPropertyName","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LiteralPropertyName"},{"type":"production","id":"prod-ComputedPropertyName","name":"ComputedPropertyName","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ComputedPropertyName"},{"type":"production","id":"prod-CoverInitializedName","name":"CoverInitializedName","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CoverInitializedName"},{"type":"production","id":"prod-Initializer","name":"Initializer","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Initializer"},{"type":"clause","id":"sec-object-initializer-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"12.2.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-object-initializer-static-semantics-computedpropertycontains","aoid":null,"title":"Static Semantics: ComputedPropertyContains","titleHTML":"Static Semantics: ComputedPropertyContains","number":"12.2.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ComputedPropertyContains"},{"type":"clause","id":"sec-object-initializer-static-semantics-contains","aoid":null,"title":"Static Semantics: Contains","titleHTML":"Static Semantics: Contains","number":"12.2.6.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Contains"},{"type":"clause","id":"sec-static-semantics-iscomputedpropertykey","aoid":null,"title":"Static Semantics: IsComputedPropertyKey","titleHTML":"Static Semantics: IsComputedPropertyKey","number":"12.2.6.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsComputedPropertyKey"},{"type":"clause","id":"sec-object-initializer-static-semantics-propname","aoid":null,"title":"Static Semantics: PropName","titleHTML":"Static Semantics: PropName","number":"12.2.6.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: PropName"},{"type":"clause","id":"sec-static-semantics-propertynamelist","aoid":null,"title":"Static Semantics: PropertyNameList","titleHTML":"Static Semantics: PropertyNameList","number":"12.2.6.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: PropertyNameList"},{"type":"clause","id":"sec-object-initializer-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.2.6.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-object-initializer-runtime-semantics-propertydefinitionevaluation","aoid":null,"title":"Runtime Semantics: PropertyDefinitionEvaluation","titleHTML":"Runtime Semantics: PropertyDefinitionEvaluation","number":"12.2.6.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: PropertyDefinitionEvaluation"},{"type":"clause","id":"sec-object-initializer","aoid":null,"title":"Object Initializer","titleHTML":"Object Initializer","number":"12.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object Initializer"},{"type":"clause","id":"sec-function-defining-expressions","aoid":null,"title":"Function Defining Expressions","titleHTML":"Function Defining Expressions","number":"12.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function Defining Expressions"},{"type":"clause","id":"sec-primary-expression-regular-expression-literals-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"12.2.8.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-regular-expression-literals-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.2.8.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-primary-expression-regular-expression-literals","aoid":null,"title":"Regular Expression Literals","titleHTML":"Regular Expression Literals","number":"12.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Regular Expression Literals"},{"type":"production","id":"prod-TemplateLiteral","name":"TemplateLiteral","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TemplateLiteral"},{"type":"production","id":"prod-TemplateSpans","name":"TemplateSpans","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TemplateSpans"},{"type":"production","id":"prod-TemplateMiddleList","name":"TemplateMiddleList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TemplateMiddleList"},{"type":"clause","id":"sec-static-semantics-templatestrings","aoid":null,"title":"Static Semantics: TemplateStrings","titleHTML":"Static Semantics: TemplateStrings","number":"12.2.9.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: TemplateStrings"},{"type":"clause","id":"sec-template-literals-runtime-semantics-argumentlistevaluation","aoid":null,"title":"Runtime Semantics: ArgumentListEvaluation","titleHTML":"Runtime Semantics: ArgumentListEvaluation","number":"12.2.9.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ArgumentListEvaluation"},{"type":"op","aoid":"GetTemplateObject","refId":"sec-gettemplateobject","location":"","key":"GetTemplateObject"},{"type":"clause","id":"sec-gettemplateobject","aoid":"GetTemplateObject","title":"Runtime Semantics: GetTemplateObject ( templateLiteral )","titleHTML":"Runtime Semantics: GetTemplateObject ( <var>templateLiteral</var> )","number":"12.2.9.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: GetTemplateObject ( templateLiteral )"},{"type":"clause","id":"sec-runtime-semantics-substitutionevaluation","aoid":null,"title":"Runtime Semantics: SubstitutionEvaluation","titleHTML":"Runtime Semantics: SubstitutionEvaluation","number":"12.2.9.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: SubstitutionEvaluation"},{"type":"clause","id":"sec-template-literals-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.2.9.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-template-literals","aoid":null,"title":"Template Literals","titleHTML":"Template Literals","number":"12.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Template Literals"},{"type":"clause","id":"sec-grouping-operator-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"12.2.10.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-grouping-operator-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.2.10.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.2.10.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-grouping-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.2.10.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-grouping-operator","aoid":null,"title":"The Grouping Operator","titleHTML":"The Grouping Operator","number":"12.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Grouping Operator"},{"type":"clause","id":"sec-primary-expression","aoid":null,"title":"Primary Expression","titleHTML":"Primary Expression","number":"12.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Primary Expression"},{"type":"production","id":"prod-MemberExpression","name":"MemberExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MemberExpression"},{"type":"production","id":"prod-SuperProperty","name":"SuperProperty","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SuperProperty"},{"type":"production","id":"prod-MetaProperty","name":"MetaProperty","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MetaProperty"},{"type":"production","id":"prod-NewTarget","name":"NewTarget","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NewTarget"},{"type":"production","id":"prod-NewExpression","name":"NewExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NewExpression"},{"type":"production","id":"prod-CallExpression","name":"CallExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CallExpression"},{"type":"production","id":"prod-SuperCall","name":"SuperCall","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SuperCall"},{"type":"production","id":"prod-Arguments","name":"Arguments","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Arguments"},{"type":"production","id":"prod-ArgumentList","name":"ArgumentList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArgumentList"},{"type":"production","id":"prod-LeftHandSideExpression","name":"LeftHandSideExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LeftHandSideExpression"},{"type":"clause","id":"sec-static-semantics-static-semantics-contains","aoid":null,"title":"Static Semantics: Contains","titleHTML":"Static Semantics: Contains","number":"12.3.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Contains"},{"type":"clause","id":"sec-static-semantics-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.3.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-static-semantics-static-semantics-isdestructuring","aoid":null,"title":"Static Semantics: IsDestructuring","titleHTML":"Static Semantics: IsDestructuring","number":"12.3.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsDestructuring"},{"type":"clause","id":"sec-static-semantics-static-semantics-isidentifierref","aoid":null,"title":"Static Semantics: IsIdentifierRef","titleHTML":"Static Semantics: IsIdentifierRef","number":"12.3.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsIdentifierRef"},{"type":"clause","id":"sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.3.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-static-semantics","aoid":null,"title":"Static Semantics","titleHTML":"Static Semantics","number":"12.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics"},{"type":"clause","id":"sec-property-accessors-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.3.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-property-accessors","aoid":null,"title":"Property Accessors","titleHTML":"Property Accessors","number":"12.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Property Accessors"},{"type":"op","aoid":"EvaluateNew","refId":"sec-evaluatenew","location":"","key":"EvaluateNew"},{"type":"clause","id":"sec-evaluatenew","aoid":"EvaluateNew","title":"Runtime Semantics: EvaluateNew(constructProduction, arguments)","titleHTML":"Runtime Semantics: EvaluateNew(<var>constructProduction</var>, <var>arguments</var>)","number":"12.3.3.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: EvaluateNew(constructProduction, arguments)"},{"type":"clause","id":"sec-new-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.3.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-new-operator","aoid":null,"title":"The new Operator","titleHTML":"The <code>new</code> Operator","number":"12.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The new Operator"},{"type":"term","term":"direct eval","refId":"sec-function-calls-runtime-semantics-evaluation","namespace":"https://tc39.github.io/ecma262/","location":"","key":"direct eval"},{"type":"clause","id":"sec-function-calls-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.3.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"op","aoid":"EvaluateCall","refId":"sec-evaluatecall","location":"","key":"EvaluateCall"},{"type":"clause","id":"sec-evaluatecall","aoid":"EvaluateCall","title":"Runtime Semantics: EvaluateCall( ref, arguments, tailPosition )","titleHTML":"Runtime Semantics: EvaluateCall( <var>ref</var>, <var>arguments</var>, <var>tailPosition</var> )","number":"12.3.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: EvaluateCall( ref, arguments, tailPosition )"},{"type":"op","aoid":"EvaluateDirectCall","refId":"sec-evaluatedirectcall","location":"","key":"EvaluateDirectCall"},{"type":"clause","id":"sec-evaluatedirectcall","aoid":"EvaluateDirectCall","title":"Runtime Semantics: EvaluateDirectCall( func, thisValue, arguments, tailPosition )","titleHTML":"Runtime Semantics: EvaluateDirectCall( <var>func</var>, <var>thisValue</var>, <var>arguments</var>, <var>tailPosition</var> )","number":"12.3.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: EvaluateDirectCall( func, thisValue, arguments, tailPosition )"},{"type":"clause","id":"sec-function-calls","aoid":null,"title":"Function Calls","titleHTML":"Function Calls","number":"12.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function Calls"},{"type":"clause","id":"sec-super-keyword-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.3.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"op","aoid":"GetSuperConstructor","refId":"sec-getsuperconstructor","location":"","key":"GetSuperConstructor"},{"type":"clause","id":"sec-getsuperconstructor","aoid":"GetSuperConstructor","title":"Runtime Semantics: GetSuperConstructor ( )","titleHTML":"Runtime Semantics: GetSuperConstructor ( )","number":"12.3.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: GetSuperConstructor ( )"},{"type":"op","aoid":"MakeSuperPropertyReference","refId":"sec-makesuperpropertyreference","location":"","key":"MakeSuperPropertyReference"},{"type":"clause","id":"sec-makesuperpropertyreference","aoid":"MakeSuperPropertyReference","title":"Runtime Semantics: MakeSuperPropertyReference(propertyKey, strict)","titleHTML":"Runtime Semantics: MakeSuperPropertyReference(<var>propertyKey</var>, <var>strict</var>)","number":"12.3.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: MakeSuperPropertyReference(propertyKey, strict)"},{"type":"clause","id":"sec-super-keyword","aoid":null,"title":"The super Keyword","titleHTML":"The <code>super</code> Keyword","number":"12.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The super Keyword"},{"type":"clause","id":"sec-argument-lists-runtime-semantics-argumentlistevaluation","aoid":null,"title":"Runtime Semantics: ArgumentListEvaluation","titleHTML":"Runtime Semantics: ArgumentListEvaluation","number":"12.3.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ArgumentListEvaluation"},{"type":"clause","id":"sec-argument-lists","aoid":null,"title":"Argument Lists","titleHTML":"Argument Lists","number":"12.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Argument Lists"},{"type":"clause","id":"sec-tagged-templates-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.3.7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-tagged-templates","aoid":null,"title":"Tagged Templates","titleHTML":"Tagged Templates","number":"12.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Tagged Templates"},{"type":"clause","id":"sec-meta-properties-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.3.8.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-meta-properties","aoid":null,"title":"Meta Properties","titleHTML":"Meta Properties","number":"12.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Meta Properties"},{"type":"clause","id":"sec-left-hand-side-expressions","aoid":null,"title":"Left-Hand-Side Expressions","titleHTML":"Left-Hand-Side Expressions","number":"12.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Left-Hand-Side Expressions"},{"type":"production","id":"prod-UpdateExpression","name":"UpdateExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"UpdateExpression"},{"type":"clause","id":"sec-update-expressions-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"12.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-update-expressions-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-update-expressions-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-postfix-increment-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.4.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-postfix-increment-operator","aoid":null,"title":"Postfix Increment Operator","titleHTML":"Postfix Increment Operator","number":"12.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Postfix Increment Operator"},{"type":"clause","id":"sec-postfix-decrement-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.4.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-postfix-decrement-operator","aoid":null,"title":"Postfix Decrement Operator","titleHTML":"Postfix Decrement Operator","number":"12.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Postfix Decrement Operator"},{"type":"clause","id":"sec-prefix-increment-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.4.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-prefix-increment-operator","aoid":null,"title":"Prefix Increment Operator","titleHTML":"Prefix Increment Operator","number":"12.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Prefix Increment Operator"},{"type":"clause","id":"sec-prefix-decrement-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.4.7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-prefix-decrement-operator","aoid":null,"title":"Prefix Decrement Operator","titleHTML":"Prefix Decrement Operator","number":"12.4.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Prefix Decrement Operator"},{"type":"clause","id":"sec-update-expressions","aoid":null,"title":"Update Expressions","titleHTML":"Update Expressions","number":"12.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Update Expressions"},{"type":"production","id":"prod-UnaryExpression","name":"UnaryExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"UnaryExpression"},{"type":"clause","id":"sec-unary-operators-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-delete-operator-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"12.5.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-delete-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.5.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-delete-operator","aoid":null,"title":"The delete Operator","titleHTML":"The <code>delete</code> Operator","number":"12.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The delete Operator"},{"type":"clause","id":"sec-void-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.5.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-void-operator","aoid":null,"title":"The void Operator","titleHTML":"The <code>void</code> Operator","number":"12.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The void Operator"},{"type":"table","id":"table-35","number":35,"caption":"Table 35: typeof Operator Results","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 35: typeof Operator Results"},{"type":"clause","id":"sec-typeof-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.5.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-typeof-operator","aoid":null,"title":"The typeof Operator","titleHTML":"The <code>typeof</code> Operator","number":"12.5.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The typeof Operator"},{"type":"clause","id":"sec-unary-plus-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.5.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-unary-plus-operator","aoid":null,"title":"Unary + Operator","titleHTML":"Unary <code>+</code> Operator","number":"12.5.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Unary + Operator"},{"type":"clause","id":"sec-unary-minus-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.5.7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-unary-minus-operator","aoid":null,"title":"Unary - Operator","titleHTML":"Unary <code>-</code> Operator","number":"12.5.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Unary - Operator"},{"type":"clause","id":"sec-bitwise-not-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.5.8.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-bitwise-not-operator","aoid":null,"title":"Bitwise NOT Operator ( ~ )","titleHTML":"Bitwise NOT Operator ( <code>~</code> )","number":"12.5.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Bitwise NOT Operator ( ~ )"},{"type":"clause","id":"sec-logical-not-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.5.9.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-logical-not-operator","aoid":null,"title":"Logical NOT Operator ( ! )","titleHTML":"Logical NOT Operator ( <code>!</code> )","number":"12.5.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Logical NOT Operator ( ! )"},{"type":"clause","id":"sec-unary-operators","aoid":null,"title":"Unary Operators","titleHTML":"Unary Operators","number":"12.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Unary Operators"},{"type":"production","id":"prod-ExponentiationExpression","name":"ExponentiationExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ExponentiationExpression"},{"type":"clause","id":"sec-exp-operator-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-exp-operator-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-exp-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.6.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-exp-operator","aoid":null,"title":"Exponentiation Operator","titleHTML":"Exponentiation Operator","number":"12.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Exponentiation Operator"},{"type":"production","id":"prod-MultiplicativeExpression","name":"MultiplicativeExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MultiplicativeExpression"},{"type":"production","id":"prod-MultiplicativeOperator","name":"MultiplicativeOperator","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MultiplicativeOperator"},{"type":"clause","id":"sec-multiplicative-operators-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.7.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-applying-the-mul-operator","aoid":null,"title":"Applying the * Operator","titleHTML":"Applying the <code>*</code> Operator","number":"12.7.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Applying the * Operator"},{"type":"clause","id":"sec-applying-the-div-operator","aoid":null,"title":"Applying the / Operator","titleHTML":"Applying the <code>/</code> Operator","number":"12.7.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Applying the / Operator"},{"type":"clause","id":"sec-applying-the-mod-operator","aoid":null,"title":"Applying the % Operator","titleHTML":"Applying the <code>%</code> Operator","number":"12.7.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Applying the % Operator"},{"type":"clause","id":"sec-applying-the-exp-operator","aoid":null,"title":"Applying the ** Operator","titleHTML":"Applying the <code>**</code> Operator","number":"12.7.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Applying the ** Operator"},{"type":"clause","id":"sec-multiplicative-operators-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.7.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-multiplicative-operators","aoid":null,"title":"Multiplicative Operators","titleHTML":"Multiplicative Operators","number":"12.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Multiplicative Operators"},{"type":"production","id":"prod-AdditiveExpression","name":"AdditiveExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AdditiveExpression"},{"type":"clause","id":"sec-additive-operators-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.8.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.8.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-addition-operator-plus-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.8.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-addition-operator-plus","aoid":null,"title":"The Addition Operator ( + )","titleHTML":"The Addition Operator ( <code>+</code> )","number":"12.8.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Addition Operator ( + )"},{"type":"clause","id":"sec-subtraction-operator-minus-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.8.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-subtraction-operator-minus","aoid":null,"title":"The Subtraction Operator ( - )","titleHTML":"The Subtraction Operator ( <code>-</code> )","number":"12.8.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Subtraction Operator ( - )"},{"type":"clause","id":"sec-applying-the-additive-operators-to-numbers","aoid":null,"title":"Applying the Additive Operators to Numbers","titleHTML":"Applying the Additive Operators to Numbers","number":"12.8.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Applying the Additive Operators to Numbers"},{"type":"clause","id":"sec-additive-operators","aoid":null,"title":"Additive Operators","titleHTML":"Additive Operators","number":"12.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additive Operators"},{"type":"production","id":"prod-ShiftExpression","name":"ShiftExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ShiftExpression"},{"type":"clause","id":"sec-bitwise-shift-operators-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.9.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.9.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-left-shift-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.9.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-left-shift-operator","aoid":null,"title":"The Left Shift Operator ( << )","titleHTML":"The Left Shift Operator ( <code>&lt;&lt;</code> )","number":"12.9.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Left Shift Operator ( << )"},{"type":"clause","id":"sec-signed-right-shift-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.9.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-signed-right-shift-operator","aoid":null,"title":"The Signed Right Shift Operator ( >> )","titleHTML":"The Signed Right Shift Operator ( <code>&gt;&gt;</code> )","number":"12.9.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Signed Right Shift Operator ( >> )"},{"type":"clause","id":"sec-unsigned-right-shift-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.9.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-unsigned-right-shift-operator","aoid":null,"title":"The Unsigned Right Shift Operator ( >>> )","titleHTML":"The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )","number":"12.9.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Unsigned Right Shift Operator ( >>> )"},{"type":"clause","id":"sec-bitwise-shift-operators","aoid":null,"title":"Bitwise Shift Operators","titleHTML":"Bitwise Shift Operators","number":"12.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Bitwise Shift Operators"},{"type":"production","id":"prod-RelationalExpression","name":"RelationalExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RelationalExpression"},{"type":"clause","id":"sec-relational-operators-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.10.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.10.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-relational-operators-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.10.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"op","aoid":"InstanceofOperator","refId":"sec-instanceofoperator","location":"","key":"InstanceofOperator"},{"type":"clause","id":"sec-instanceofoperator","aoid":"InstanceofOperator","title":"Runtime Semantics: InstanceofOperator(O, C)","titleHTML":"Runtime Semantics: InstanceofOperator(<var>O</var>, <var>C</var>)","number":"12.10.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: InstanceofOperator(O, C)"},{"type":"clause","id":"sec-relational-operators","aoid":null,"title":"Relational Operators","titleHTML":"Relational Operators","number":"12.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Relational Operators"},{"type":"production","id":"prod-EqualityExpression","name":"EqualityExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"EqualityExpression"},{"type":"clause","id":"sec-equality-operators-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.11.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.11.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-equality-operators-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.11.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-equality-operators","aoid":null,"title":"Equality Operators","titleHTML":"Equality Operators","number":"12.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Equality Operators"},{"type":"production","id":"prod-BitwiseANDExpression","name":"BitwiseANDExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BitwiseANDExpression"},{"type":"production","id":"prod-BitwiseXORExpression","name":"BitwiseXORExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BitwiseXORExpression"},{"type":"production","id":"prod-BitwiseORExpression","name":"BitwiseORExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BitwiseORExpression"},{"type":"clause","id":"sec-binary-bitwise-operators-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.12.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.12.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"production","id":"prod-A","name":"A","namespace":"https://tc39.github.io/ecma262/","location":"","key":"A"},{"type":"clause","id":"sec-binary-bitwise-operators-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.12.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-binary-bitwise-operators","aoid":null,"title":"Binary Bitwise Operators","titleHTML":"Binary Bitwise Operators","number":"12.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Binary Bitwise Operators"},{"type":"production","id":"prod-LogicalANDExpression","name":"LogicalANDExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LogicalANDExpression"},{"type":"production","id":"prod-LogicalORExpression","name":"LogicalORExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LogicalORExpression"},{"type":"clause","id":"sec-binary-logical-operators-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.13.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.13.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-binary-logical-operators-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.13.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-binary-logical-operators","aoid":null,"title":"Binary Logical Operators","titleHTML":"Binary Logical Operators","number":"12.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Binary Logical Operators"},{"type":"production","id":"prod-ConditionalExpression","name":"ConditionalExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ConditionalExpression"},{"type":"clause","id":"sec-conditional-operator-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.14.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.14.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-conditional-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.14.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-conditional-operator","aoid":null,"title":"Conditional Operator ( ? : )","titleHTML":"Conditional Operator ( <code>? :</code> )","number":"12.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Conditional Operator ( ? : )"},{"type":"production","id":"prod-AssignmentExpression","name":"AssignmentExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AssignmentExpression"},{"type":"production","id":"prod-AssignmentOperator","name":"AssignmentOperator","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AssignmentOperator"},{"type":"clause","id":"sec-assignment-operators-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"12.15.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-assignment-operators-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.15.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.15.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-assignment-operators-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.15.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"production","id":"prod-AssignmentPattern","name":"AssignmentPattern","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AssignmentPattern"},{"type":"production","id":"prod-ObjectAssignmentPattern","name":"ObjectAssignmentPattern","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ObjectAssignmentPattern"},{"type":"production","id":"prod-ArrayAssignmentPattern","name":"ArrayAssignmentPattern","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayAssignmentPattern"},{"type":"production","id":"prod-AssignmentPropertyList","name":"AssignmentPropertyList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AssignmentPropertyList"},{"type":"production","id":"prod-AssignmentElementList","name":"AssignmentElementList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AssignmentElementList"},{"type":"production","id":"prod-AssignmentElisionElement","name":"AssignmentElisionElement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AssignmentElisionElement"},{"type":"production","id":"prod-AssignmentProperty","name":"AssignmentProperty","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AssignmentProperty"},{"type":"production","id":"prod-AssignmentElement","name":"AssignmentElement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AssignmentElement"},{"type":"production","id":"prod-AssignmentRestElement","name":"AssignmentRestElement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AssignmentRestElement"},{"type":"production","id":"prod-DestructuringAssignmentTarget","name":"DestructuringAssignmentTarget","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DestructuringAssignmentTarget"},{"type":"clause","id":"sec-destructuring-assignment-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"12.15.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-runtime-semantics-destructuringassignmentevaluation","aoid":null,"title":"Runtime Semantics: DestructuringAssignmentEvaluation","titleHTML":"Runtime Semantics: DestructuringAssignmentEvaluation","number":"12.15.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: DestructuringAssignmentEvaluation"},{"type":"clause","id":"sec-runtime-semantics-iteratordestructuringassignmentevaluation","aoid":null,"title":"Runtime Semantics: IteratorDestructuringAssignmentEvaluation","titleHTML":"Runtime Semantics: IteratorDestructuringAssignmentEvaluation","number":"12.15.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: IteratorDestructuringAssignmentEvaluation"},{"type":"clause","id":"sec-runtime-semantics-keyeddestructuringassignmentevaluation","aoid":null,"title":"Runtime Semantics: KeyedDestructuringAssignmentEvaluation","titleHTML":"Runtime Semantics: KeyedDestructuringAssignmentEvaluation","number":"12.15.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: KeyedDestructuringAssignmentEvaluation"},{"type":"clause","id":"sec-destructuring-assignment","aoid":null,"title":"Destructuring Assignment","titleHTML":"Destructuring Assignment","number":"12.15.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Destructuring Assignment"},{"type":"clause","id":"sec-assignment-operators","aoid":null,"title":"Assignment Operators","titleHTML":"Assignment Operators","number":"12.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Assignment Operators"},{"type":"production","id":"prod-Expression","name":"Expression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Expression"},{"type":"clause","id":"sec-comma-operator-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"12.16.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget","aoid":null,"title":"Static Semantics: IsValidSimpleAssignmentTarget","titleHTML":"Static Semantics: IsValidSimpleAssignmentTarget","number":"12.16.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsValidSimpleAssignmentTarget"},{"type":"clause","id":"sec-comma-operator-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"12.16.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-comma-operator","aoid":null,"title":"Comma Operator ( , )","titleHTML":"Comma Operator ( <code>,</code> )","number":"12.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Comma Operator ( , )"},{"type":"clause","id":"sec-ecmascript-language-expressions","aoid":null,"title":"ECMAScript Language: Expressions","titleHTML":"ECMAScript Language: Expressions","number":"12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Language: Expressions"},{"type":"production","id":"prod-Statement","name":"Statement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Statement"},{"type":"production","id":"prod-Declaration","name":"Declaration","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Declaration"},{"type":"production","id":"prod-HoistableDeclaration","name":"HoistableDeclaration","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HoistableDeclaration"},{"type":"production","id":"prod-BreakableStatement","name":"BreakableStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BreakableStatement"},{"type":"clause","id":"sec-statement-semantics-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-statement-semantics-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-statement-semantics-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-static-semantics-declarationpart","aoid":null,"title":"Static Semantics: DeclarationPart","titleHTML":"Static Semantics: DeclarationPart","number":"13.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: DeclarationPart"},{"type":"clause","id":"sec-statement-semantics-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-statement-semantics-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-statement-semantics-runtime-semantics-labelledevaluation","aoid":null,"title":"Runtime Semantics: LabelledEvaluation","titleHTML":"Runtime Semantics: LabelledEvaluation","number":"13.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: LabelledEvaluation"},{"type":"clause","id":"sec-statement-semantics-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-statement-semantics","aoid":null,"title":"Statement Semantics","titleHTML":"Statement Semantics","number":"13.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Statement Semantics"},{"type":"production","id":"prod-BlockStatement","name":"BlockStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BlockStatement"},{"type":"production","id":"prod-Block","name":"Block","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Block"},{"type":"production","id":"prod-StatementList","name":"StatementList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"StatementList"},{"type":"production","id":"prod-StatementListItem","name":"StatementListItem","namespace":"https://tc39.github.io/ecma262/","location":"","key":"StatementListItem"},{"type":"clause","id":"sec-block-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-block-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-block-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-block-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-block-static-semantics-lexicallydeclarednames","aoid":null,"title":"Static Semantics: LexicallyDeclaredNames","titleHTML":"Static Semantics: LexicallyDeclaredNames","number":"13.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyDeclaredNames"},{"type":"clause","id":"sec-block-static-semantics-lexicallyscopeddeclarations","aoid":null,"title":"Static Semantics: LexicallyScopedDeclarations","titleHTML":"Static Semantics: LexicallyScopedDeclarations","number":"13.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyScopedDeclarations"},{"type":"clause","id":"sec-block-static-semantics-toplevellexicallydeclarednames","aoid":null,"title":"Static Semantics: TopLevelLexicallyDeclaredNames","titleHTML":"Static Semantics: TopLevelLexicallyDeclaredNames","number":"13.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: TopLevelLexicallyDeclaredNames"},{"type":"clause","id":"sec-block-static-semantics-toplevellexicallyscopeddeclarations","aoid":null,"title":"Static Semantics: TopLevelLexicallyScopedDeclarations","titleHTML":"Static Semantics: TopLevelLexicallyScopedDeclarations","number":"13.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: TopLevelLexicallyScopedDeclarations"},{"type":"clause","id":"sec-block-static-semantics-toplevelvardeclarednames","aoid":null,"title":"Static Semantics: TopLevelVarDeclaredNames","titleHTML":"Static Semantics: TopLevelVarDeclaredNames","number":"13.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: TopLevelVarDeclaredNames"},{"type":"clause","id":"sec-block-static-semantics-toplevelvarscopeddeclarations","aoid":null,"title":"Static Semantics: TopLevelVarScopedDeclarations","titleHTML":"Static Semantics: TopLevelVarScopedDeclarations","number":"13.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: TopLevelVarScopedDeclarations"},{"type":"clause","id":"sec-block-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.2.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-block-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.2.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-block-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.2.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"op","aoid":"BlockDeclarationInstantiation","refId":"sec-blockdeclarationinstantiation","location":"","key":"BlockDeclarationInstantiation"},{"type":"clause","id":"sec-blockdeclarationinstantiation","aoid":"BlockDeclarationInstantiation","title":"Runtime Semantics: BlockDeclarationInstantiation( code, env )","titleHTML":"Runtime Semantics: BlockDeclarationInstantiation( <var>code</var>, <var>env</var> )","number":"13.2.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: BlockDeclarationInstantiation( code, env )"},{"type":"clause","id":"sec-block","aoid":null,"title":"Block","titleHTML":"Block","number":"13.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Block"},{"type":"production","id":"prod-LexicalDeclaration","name":"LexicalDeclaration","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LexicalDeclaration"},{"type":"production","id":"prod-LetOrConst","name":"LetOrConst","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LetOrConst"},{"type":"production","id":"prod-BindingList","name":"BindingList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BindingList"},{"type":"production","id":"prod-LexicalBinding","name":"LexicalBinding","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LexicalBinding"},{"type":"clause","id":"sec-let-and-const-declarations-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.3.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-let-and-const-declarations-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"13.3.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-let-and-const-declarations-static-semantics-isconstantdeclaration","aoid":null,"title":"Static Semantics: IsConstantDeclaration","titleHTML":"Static Semantics: IsConstantDeclaration","number":"13.3.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsConstantDeclaration"},{"type":"clause","id":"sec-let-and-const-declarations-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.3.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-let-and-const-declarations","aoid":null,"title":"Let and Const Declarations","titleHTML":"Let and Const Declarations","number":"13.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Let and Const Declarations"},{"type":"production","id":"prod-VariableStatement","name":"VariableStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"VariableStatement"},{"type":"production","id":"prod-VariableDeclarationList","name":"VariableDeclarationList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"VariableDeclarationList"},{"type":"production","id":"prod-VariableDeclaration","name":"VariableDeclaration","namespace":"https://tc39.github.io/ecma262/","location":"","key":"VariableDeclaration"},{"type":"clause","id":"sec-variable-statement-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"13.3.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-variable-statement-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.3.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-variable-statement-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.3.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-variable-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.3.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-variable-statement","aoid":null,"title":"Variable Statement","titleHTML":"Variable Statement","number":"13.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Variable Statement"},{"type":"production","id":"prod-BindingPattern","name":"BindingPattern","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BindingPattern"},{"type":"production","id":"prod-ObjectBindingPattern","name":"ObjectBindingPattern","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ObjectBindingPattern"},{"type":"production","id":"prod-ArrayBindingPattern","name":"ArrayBindingPattern","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayBindingPattern"},{"type":"production","id":"prod-BindingPropertyList","name":"BindingPropertyList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BindingPropertyList"},{"type":"production","id":"prod-BindingElementList","name":"BindingElementList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BindingElementList"},{"type":"production","id":"prod-BindingElisionElement","name":"BindingElisionElement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BindingElisionElement"},{"type":"production","id":"prod-BindingProperty","name":"BindingProperty","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BindingProperty"},{"type":"production","id":"prod-BindingElement","name":"BindingElement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BindingElement"},{"type":"production","id":"prod-SingleNameBinding","name":"SingleNameBinding","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SingleNameBinding"},{"type":"production","id":"prod-BindingRestElement","name":"BindingRestElement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BindingRestElement"},{"type":"clause","id":"sec-destructuring-binding-patterns-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"13.3.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-destructuring-binding-patterns-static-semantics-containsexpression","aoid":null,"title":"Static Semantics: ContainsExpression","titleHTML":"Static Semantics: ContainsExpression","number":"13.3.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsExpression"},{"type":"clause","id":"sec-destructuring-binding-patterns-static-semantics-hasinitializer","aoid":null,"title":"Static Semantics: HasInitializer","titleHTML":"Static Semantics: HasInitializer","number":"13.3.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: HasInitializer"},{"type":"clause","id":"sec-destructuring-binding-patterns-static-semantics-issimpleparameterlist","aoid":null,"title":"Static Semantics: IsSimpleParameterList","titleHTML":"Static Semantics: IsSimpleParameterList","number":"13.3.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsSimpleParameterList"},{"type":"clause","id":"sec-destructuring-binding-patterns-runtime-semantics-bindinginitialization","aoid":null,"title":"Runtime Semantics: BindingInitialization","titleHTML":"Runtime Semantics: BindingInitialization","number":"13.3.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: BindingInitialization"},{"type":"clause","id":"sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization","aoid":null,"title":"Runtime Semantics: IteratorBindingInitialization","titleHTML":"Runtime Semantics: IteratorBindingInitialization","number":"13.3.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: IteratorBindingInitialization"},{"type":"clause","id":"sec-runtime-semantics-keyedbindinginitialization","aoid":null,"title":"Runtime Semantics: KeyedBindingInitialization","titleHTML":"Runtime Semantics: KeyedBindingInitialization","number":"13.3.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: KeyedBindingInitialization"},{"type":"clause","id":"sec-destructuring-binding-patterns","aoid":null,"title":"Destructuring Binding Patterns","titleHTML":"Destructuring Binding Patterns","number":"13.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Destructuring Binding Patterns"},{"type":"clause","id":"sec-declarations-and-the-variable-statement","aoid":null,"title":"Declarations and the Variable Statement","titleHTML":"Declarations and the Variable Statement","number":"13.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Declarations and the Variable Statement"},{"type":"production","id":"prod-EmptyStatement","name":"EmptyStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"EmptyStatement"},{"type":"clause","id":"sec-empty-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-empty-statement","aoid":null,"title":"Empty Statement","titleHTML":"Empty Statement","number":"13.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Empty Statement"},{"type":"production","id":"prod-ExpressionStatement","name":"ExpressionStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ExpressionStatement"},{"type":"clause","id":"sec-expression-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-expression-statement","aoid":null,"title":"Expression Statement","titleHTML":"Expression Statement","number":"13.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Expression Statement"},{"type":"production","id":"prod-IfStatement","name":"IfStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IfStatement"},{"type":"clause","id":"sec-if-statement-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-if-statement-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-if-statement-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.6.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-if-statement-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.6.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-if-statement-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.6.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-if-statement-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.6.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-if-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.6.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-if-statement","aoid":null,"title":"The if Statement","titleHTML":"The <code>if</code> Statement","number":"13.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The if Statement"},{"type":"production","id":"prod-IterationStatement","name":"IterationStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IterationStatement"},{"type":"production","id":"prod-ForDeclaration","name":"ForDeclaration","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ForDeclaration"},{"type":"production","id":"prod-ForBinding","name":"ForBinding","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ForBinding"},{"type":"clause","id":"sec-semantics-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.7.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"op","aoid":"LoopContinues","refId":"sec-loopcontinues","location":"","key":"LoopContinues"},{"type":"clause","id":"sec-loopcontinues","aoid":"LoopContinues","title":"Runtime Semantics: LoopContinues(completion, labelSet)","titleHTML":"Runtime Semantics: LoopContinues(<var>completion</var>, <var>labelSet</var>)","number":"13.7.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: LoopContinues(completion, labelSet)"},{"type":"clause","id":"sec-iteration-statements-semantics","aoid":null,"title":"Semantics","titleHTML":"Semantics","number":"13.7.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Semantics"},{"type":"clause","id":"sec-do-while-statement-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.7.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-do-while-statement-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.7.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-do-while-statement-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.7.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-do-while-statement-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.7.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-do-while-statement-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.7.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-do-while-statement-runtime-semantics-labelledevaluation","aoid":null,"title":"Runtime Semantics: LabelledEvaluation","titleHTML":"Runtime Semantics: LabelledEvaluation","number":"13.7.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: LabelledEvaluation"},{"type":"clause","id":"sec-do-while-statement","aoid":null,"title":"The do-while Statement","titleHTML":"The <code>do</code>-<code>while</code> Statement","number":"13.7.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The do-while Statement"},{"type":"clause","id":"sec-while-statement-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.7.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-while-statement-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.7.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-while-statement-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.7.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-while-statement-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.7.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-while-statement-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.7.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-while-statement-runtime-semantics-labelledevaluation","aoid":null,"title":"Runtime Semantics: LabelledEvaluation","titleHTML":"Runtime Semantics: LabelledEvaluation","number":"13.7.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: LabelledEvaluation"},{"type":"clause","id":"sec-while-statement","aoid":null,"title":"The while Statement","titleHTML":"The <code>while</code> Statement","number":"13.7.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The while Statement"},{"type":"clause","id":"sec-for-statement-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.7.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-for-statement-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.7.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-for-statement-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.7.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-for-statement-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.7.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-for-statement-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.7.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-for-statement-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.7.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-for-statement-runtime-semantics-labelledevaluation","aoid":null,"title":"Runtime Semantics: LabelledEvaluation","titleHTML":"Runtime Semantics: LabelledEvaluation","number":"13.7.4.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: LabelledEvaluation"},{"type":"op","aoid":"ForBodyEvaluation","refId":"sec-forbodyevaluation","location":"","key":"ForBodyEvaluation"},{"type":"clause","id":"sec-forbodyevaluation","aoid":"ForBodyEvaluation","title":"Runtime Semantics: ForBodyEvaluation( test, increment, stmt, perIterationBindings, labelSet )","titleHTML":"Runtime Semantics: ForBodyEvaluation( <var>test</var>, <var>increment</var>, <var>stmt</var>, <var>perIterationBindings</var>, <var>labelSet</var> )","number":"13.7.4.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ForBodyEvaluation( test, increment, stmt, perIterationBindings, labelSet )"},{"type":"op","aoid":"CreatePerIterationEnvironment","refId":"sec-createperiterationenvironment","location":"","key":"CreatePerIterationEnvironment"},{"type":"clause","id":"sec-createperiterationenvironment","aoid":"CreatePerIterationEnvironment","title":"Runtime Semantics: CreatePerIterationEnvironment( perIterationBindings )","titleHTML":"Runtime Semantics: CreatePerIterationEnvironment( <var>perIterationBindings</var> )","number":"13.7.4.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: CreatePerIterationEnvironment( perIterationBindings )"},{"type":"clause","id":"sec-for-statement","aoid":null,"title":"The for Statement","titleHTML":"The <code>for</code> Statement","number":"13.7.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The for Statement"},{"type":"clause","id":"sec-for-in-and-for-of-statements-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.7.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-for-in-and-for-of-statements-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"13.7.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.7.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.7.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.7.5.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-for-in-and-for-of-statements-static-semantics-isdestructuring","aoid":null,"title":"Static Semantics: IsDestructuring","titleHTML":"Static Semantics: IsDestructuring","number":"13.7.5.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsDestructuring"},{"type":"clause","id":"sec-for-in-and-for-of-statements-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.7.5.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.7.5.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization","aoid":null,"title":"Runtime Semantics: BindingInitialization","titleHTML":"Runtime Semantics: BindingInitialization","number":"13.7.5.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: BindingInitialization"},{"type":"clause","id":"sec-runtime-semantics-bindinginstantiation","aoid":null,"title":"Runtime Semantics: BindingInstantiation","titleHTML":"Runtime Semantics: BindingInstantiation","number":"13.7.5.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: BindingInstantiation"},{"type":"clause","id":"sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation","aoid":null,"title":"Runtime Semantics: LabelledEvaluation","titleHTML":"Runtime Semantics: LabelledEvaluation","number":"13.7.5.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: LabelledEvaluation"},{"type":"op","aoid":"ForIn/OfHeadEvaluation","refId":"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind","location":"","key":"ForIn/OfHeadEvaluation"},{"type":"clause","id":"sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind","aoid":"ForIn/OfHeadEvaluation","title":"Runtime Semantics: ForIn/OfHeadEvaluation ( TDZnames, expr, iterationKind)","titleHTML":"Runtime Semantics: ForIn/OfHeadEvaluation ( <var>TDZnames</var>, <var>expr</var>, <var>iterationKind</var>)","number":"13.7.5.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ForIn/OfHeadEvaluation ( TDZnames, expr, iterationKind)"},{"type":"op","aoid":"ForIn/OfBodyEvaluation","refId":"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset","location":"","key":"ForIn/OfBodyEvaluation"},{"type":"clause","id":"sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset","aoid":"ForIn/OfBodyEvaluation","title":"Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iterator, lhsKind, labelSet )","titleHTML":"Runtime Semantics: ForIn/OfBodyEvaluation ( <var>lhs</var>, <var>stmt</var>, <var>iterator</var>, <var>lhsKind</var>, <var>labelSet</var> )","number":"13.7.5.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iterator, lhsKind, labelSet )"},{"type":"clause","id":"sec-for-in-and-for-of-statements-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.7.5.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"op","aoid":"EnumerateObjectProperties","refId":"sec-enumerate-object-properties","location":"","key":"EnumerateObjectProperties"},{"type":"clause","id":"sec-enumerate-object-properties","aoid":"EnumerateObjectProperties","title":"EnumerateObjectProperties (O)","titleHTML":"EnumerateObjectProperties (<var>O</var>)","number":"13.7.5.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"EnumerateObjectProperties (O)"},{"type":"clause","id":"sec-for-in-and-for-of-statements","aoid":null,"title":"The for-in and for-of Statements","titleHTML":"The <code>for</code>-<code>in</code> and <code>for</code>-<code>of</code> Statements","number":"13.7.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The for-in and for-of Statements"},{"type":"clause","id":"sec-iteration-statements","aoid":null,"title":"Iteration Statements","titleHTML":"Iteration Statements","number":"13.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Iteration Statements"},{"type":"production","id":"prod-ContinueStatement","name":"ContinueStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ContinueStatement"},{"type":"clause","id":"sec-continue-statement-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.8.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-continue-statement-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.8.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-continue-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.8.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-continue-statement","aoid":null,"title":"The continue Statement","titleHTML":"The <code>continue</code> Statement","number":"13.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The continue Statement"},{"type":"production","id":"prod-BreakStatement","name":"BreakStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"BreakStatement"},{"type":"clause","id":"sec-break-statement-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.9.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-break-statement-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.9.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-break-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.9.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-break-statement","aoid":null,"title":"The break Statement","titleHTML":"The <code>break</code> Statement","number":"13.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The break Statement"},{"type":"production","id":"prod-ReturnStatement","name":"ReturnStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ReturnStatement"},{"type":"clause","id":"sec-return-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.10.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-return-statement","aoid":null,"title":"The return Statement","titleHTML":"The <code>return</code> Statement","number":"13.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The return Statement"},{"type":"production","id":"prod-WithStatement","name":"WithStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WithStatement"},{"type":"clause","id":"sec-with-statement-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.11.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-with-statement-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.11.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-with-statement-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.11.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-with-statement-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.11.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-with-statement-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.11.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-with-statement-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.11.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-with-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.11.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-with-statement","aoid":null,"title":"The with Statement","titleHTML":"The <code>with</code> Statement","number":"13.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The with Statement"},{"type":"production","id":"prod-SwitchStatement","name":"SwitchStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SwitchStatement"},{"type":"production","id":"prod-CaseBlock","name":"CaseBlock","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CaseBlock"},{"type":"production","id":"prod-CaseClauses","name":"CaseClauses","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CaseClauses"},{"type":"production","id":"prod-CaseClause","name":"CaseClause","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CaseClause"},{"type":"production","id":"prod-DefaultClause","name":"DefaultClause","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DefaultClause"},{"type":"clause","id":"sec-switch-statement-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.12.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-switch-statement-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.12.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-switch-statement-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.12.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-switch-statement-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.12.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-switch-statement-static-semantics-lexicallydeclarednames","aoid":null,"title":"Static Semantics: LexicallyDeclaredNames","titleHTML":"Static Semantics: LexicallyDeclaredNames","number":"13.12.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyDeclaredNames"},{"type":"clause","id":"sec-switch-statement-static-semantics-lexicallyscopeddeclarations","aoid":null,"title":"Static Semantics: LexicallyScopedDeclarations","titleHTML":"Static Semantics: LexicallyScopedDeclarations","number":"13.12.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyScopedDeclarations"},{"type":"clause","id":"sec-switch-statement-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.12.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-switch-statement-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.12.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-runtime-semantics-caseblockevaluation","aoid":null,"title":"Runtime Semantics: CaseBlockEvaluation","titleHTML":"Runtime Semantics: CaseBlockEvaluation","number":"13.12.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: CaseBlockEvaluation"},{"type":"clause","id":"sec-runtime-semantics-caseselectorevaluation","aoid":null,"title":"Runtime Semantics: CaseSelectorEvaluation","titleHTML":"Runtime Semantics: CaseSelectorEvaluation","number":"13.12.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: CaseSelectorEvaluation"},{"type":"clause","id":"sec-switch-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.12.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-switch-statement","aoid":null,"title":"The switch Statement","titleHTML":"The <code>switch</code> Statement","number":"13.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The switch Statement"},{"type":"production","id":"prod-LabelledStatement","name":"LabelledStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LabelledStatement"},{"type":"production","id":"prod-LabelledItem","name":"LabelledItem","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LabelledItem"},{"type":"clause","id":"sec-labelled-statements-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.13.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-labelled-statements-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.13.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-labelled-statements-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.13.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-labelled-statements-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.13.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"op","aoid":"IsLabelledFunction","refId":"sec-islabelledfunction","location":"","key":"IsLabelledFunction"},{"type":"clause","id":"sec-islabelledfunction","aoid":"IsLabelledFunction","title":"Static Semantics: IsLabelledFunction ( stmt )","titleHTML":"Static Semantics: IsLabelledFunction ( <var>stmt</var> )","number":"13.13.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsLabelledFunction ( stmt )"},{"type":"clause","id":"sec-labelled-statements-static-semantics-lexicallydeclarednames","aoid":null,"title":"Static Semantics: LexicallyDeclaredNames","titleHTML":"Static Semantics: LexicallyDeclaredNames","number":"13.13.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyDeclaredNames"},{"type":"clause","id":"sec-labelled-statements-static-semantics-lexicallyscopeddeclarations","aoid":null,"title":"Static Semantics: LexicallyScopedDeclarations","titleHTML":"Static Semantics: LexicallyScopedDeclarations","number":"13.13.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyScopedDeclarations"},{"type":"clause","id":"sec-labelled-statements-static-semantics-toplevellexicallydeclarednames","aoid":null,"title":"Static Semantics: TopLevelLexicallyDeclaredNames","titleHTML":"Static Semantics: TopLevelLexicallyDeclaredNames","number":"13.13.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: TopLevelLexicallyDeclaredNames"},{"type":"clause","id":"sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations","aoid":null,"title":"Static Semantics: TopLevelLexicallyScopedDeclarations","titleHTML":"Static Semantics: TopLevelLexicallyScopedDeclarations","number":"13.13.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: TopLevelLexicallyScopedDeclarations"},{"type":"clause","id":"sec-labelled-statements-static-semantics-toplevelvardeclarednames","aoid":null,"title":"Static Semantics: TopLevelVarDeclaredNames","titleHTML":"Static Semantics: TopLevelVarDeclaredNames","number":"13.13.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: TopLevelVarDeclaredNames"},{"type":"clause","id":"sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations","aoid":null,"title":"Static Semantics: TopLevelVarScopedDeclarations","titleHTML":"Static Semantics: TopLevelVarScopedDeclarations","number":"13.13.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: TopLevelVarScopedDeclarations"},{"type":"clause","id":"sec-labelled-statements-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.13.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-labelled-statements-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.13.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-labelled-statements-runtime-semantics-labelledevaluation","aoid":null,"title":"Runtime Semantics: LabelledEvaluation","titleHTML":"Runtime Semantics: LabelledEvaluation","number":"13.13.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: LabelledEvaluation"},{"type":"clause","id":"sec-labelled-statements-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.13.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-labelled-statements","aoid":null,"title":"Labelled Statements","titleHTML":"Labelled Statements","number":"13.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Labelled Statements"},{"type":"production","id":"prod-ThrowStatement","name":"ThrowStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ThrowStatement"},{"type":"clause","id":"sec-throw-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.14.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-throw-statement","aoid":null,"title":"The throw Statement","titleHTML":"The <code>throw</code> Statement","number":"13.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The throw Statement"},{"type":"production","id":"prod-TryStatement","name":"TryStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TryStatement"},{"type":"production","id":"prod-Catch","name":"Catch","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Catch"},{"type":"production","id":"prod-Finally","name":"Finally","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Finally"},{"type":"production","id":"prod-CatchParameter","name":"CatchParameter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CatchParameter"},{"type":"clause","id":"sec-try-statement-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"13.15.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-try-statement-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"13.15.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-try-statement-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"13.15.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-try-statement-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"13.15.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-try-statement-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"13.15.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-try-statement-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"13.15.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-runtime-semantics-catchclauseevaluation","aoid":null,"title":"Runtime Semantics: CatchClauseEvaluation","titleHTML":"Runtime Semantics: CatchClauseEvaluation","number":"13.15.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: CatchClauseEvaluation"},{"type":"clause","id":"sec-try-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.15.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-try-statement","aoid":null,"title":"The try Statement","titleHTML":"The <code>try</code> Statement","number":"13.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The try Statement"},{"type":"production","id":"prod-DebuggerStatement","name":"DebuggerStatement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DebuggerStatement"},{"type":"clause","id":"sec-debugger-statement-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"13.16.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-debugger-statement","aoid":null,"title":"The debugger Statement","titleHTML":"The <code>debugger</code> Statement","number":"13.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The debugger Statement"},{"type":"clause","id":"sec-ecmascript-language-statements-and-declarations","aoid":null,"title":"ECMAScript Language: Statements and Declarations","titleHTML":"ECMAScript Language: Statements and Declarations","number":"13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Language: Statements and Declarations"},{"type":"production","id":"prod-FunctionDeclaration","name":"FunctionDeclaration","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FunctionDeclaration"},{"type":"production","id":"prod-FunctionExpression","name":"FunctionExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FunctionExpression"},{"type":"production","id":"prod-UniqueFormalParameters","name":"UniqueFormalParameters","namespace":"https://tc39.github.io/ecma262/","location":"","key":"UniqueFormalParameters"},{"type":"production","id":"prod-FormalParameters","name":"FormalParameters","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FormalParameters"},{"type":"production","id":"prod-FormalParameterList","name":"FormalParameterList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FormalParameterList"},{"type":"production","id":"prod-FormalsList","name":"FormalsList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FormalsList"},{"type":"production","id":"prod-FunctionRestParameter","name":"FunctionRestParameter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FunctionRestParameter"},{"type":"production","id":"prod-FormalParameter","name":"FormalParameter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FormalParameter"},{"type":"production","id":"prod-FunctionBody","name":"FunctionBody","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FunctionBody"},{"type":"production","id":"prod-FunctionStatementList","name":"FunctionStatementList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FunctionStatementList"},{"type":"term","term":"Directive Prologue","refId":"sec-directive-prologues-and-the-use-strict-directive","id":"directive-prologue","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Directive Prologue"},{"type":"term","term":"Use Strict Directive","refId":"sec-directive-prologues-and-the-use-strict-directive","id":"use-strict-directive","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Use Strict Directive"},{"type":"clause","id":"sec-directive-prologues-and-the-use-strict-directive","aoid":null,"title":"Directive Prologues and the Use Strict Directive","titleHTML":"Directive Prologues and the Use Strict Directive","number":"14.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Directive Prologues and the Use Strict Directive"},{"type":"clause","id":"sec-function-definitions-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"14.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-function-definitions-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"14.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-function-definitions-static-semantics-contains","aoid":null,"title":"Static Semantics: Contains","titleHTML":"Static Semantics: Contains","number":"14.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Contains"},{"type":"clause","id":"sec-function-definitions-static-semantics-containsexpression","aoid":null,"title":"Static Semantics: ContainsExpression","titleHTML":"Static Semantics: ContainsExpression","number":"14.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsExpression"},{"type":"clause","id":"sec-function-definitions-static-semantics-containsusestrict","aoid":null,"title":"Static Semantics: ContainsUseStrict","titleHTML":"Static Semantics: ContainsUseStrict","number":"14.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUseStrict"},{"type":"clause","id":"sec-function-definitions-static-semantics-expectedargumentcount","aoid":null,"title":"Static Semantics: ExpectedArgumentCount","titleHTML":"Static Semantics: ExpectedArgumentCount","number":"14.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ExpectedArgumentCount"},{"type":"clause","id":"sec-function-definitions-static-semantics-hasinitializer","aoid":null,"title":"Static Semantics: HasInitializer","titleHTML":"Static Semantics: HasInitializer","number":"14.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: HasInitializer"},{"type":"clause","id":"sec-function-definitions-static-semantics-hasname","aoid":null,"title":"Static Semantics: HasName","titleHTML":"Static Semantics: HasName","number":"14.1.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: HasName"},{"type":"op","aoid":"IsAnonymousFunctionDefinition","refId":"sec-isanonymousfunctiondefinition","location":"","key":"IsAnonymousFunctionDefinition"},{"type":"clause","id":"sec-isanonymousfunctiondefinition","aoid":"IsAnonymousFunctionDefinition","title":"Static Semantics: IsAnonymousFunctionDefinition ( production )","titleHTML":"Static Semantics: IsAnonymousFunctionDefinition ( <var>production</var> )","number":"14.1.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsAnonymousFunctionDefinition ( production )"},{"type":"clause","id":"sec-function-definitions-static-semantics-isconstantdeclaration","aoid":null,"title":"Static Semantics: IsConstantDeclaration","titleHTML":"Static Semantics: IsConstantDeclaration","number":"14.1.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsConstantDeclaration"},{"type":"clause","id":"sec-function-definitions-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"14.1.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-function-definitions-static-semantics-issimpleparameterlist","aoid":null,"title":"Static Semantics: IsSimpleParameterList","titleHTML":"Static Semantics: IsSimpleParameterList","number":"14.1.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsSimpleParameterList"},{"type":"clause","id":"sec-function-definitions-static-semantics-lexicallydeclarednames","aoid":null,"title":"Static Semantics: LexicallyDeclaredNames","titleHTML":"Static Semantics: LexicallyDeclaredNames","number":"14.1.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyDeclaredNames"},{"type":"clause","id":"sec-function-definitions-static-semantics-lexicallyscopeddeclarations","aoid":null,"title":"Static Semantics: LexicallyScopedDeclarations","titleHTML":"Static Semantics: LexicallyScopedDeclarations","number":"14.1.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyScopedDeclarations"},{"type":"clause","id":"sec-function-definitions-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"14.1.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-function-definitions-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"14.1.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-function-definitions-runtime-semantics-evaluatebody","aoid":null,"title":"Runtime Semantics: EvaluateBody","titleHTML":"Runtime Semantics: EvaluateBody","number":"14.1.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: EvaluateBody"},{"type":"clause","id":"sec-function-definitions-runtime-semantics-iteratorbindinginitialization","aoid":null,"title":"Runtime Semantics: IteratorBindingInitialization","titleHTML":"Runtime Semantics: IteratorBindingInitialization","number":"14.1.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: IteratorBindingInitialization"},{"type":"clause","id":"sec-function-definitions-runtime-semantics-instantiatefunctionobject","aoid":null,"title":"Runtime Semantics: InstantiateFunctionObject","titleHTML":"Runtime Semantics: InstantiateFunctionObject","number":"14.1.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: InstantiateFunctionObject"},{"type":"clause","id":"sec-function-definitions-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"14.1.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-function-definitions","aoid":null,"title":"Function Definitions","titleHTML":"Function Definitions","number":"14.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function Definitions"},{"type":"production","id":"prod-ArrowFunction","name":"ArrowFunction","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrowFunction"},{"type":"production","id":"prod-ArrowParameters","name":"ArrowParameters","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrowParameters"},{"type":"production","id":"prod-ConciseBody","name":"ConciseBody","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ConciseBody"},{"type":"production","id":"prod-ArrowFormalParameters","name":"ArrowFormalParameters","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrowFormalParameters"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"14.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"14.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-contains","aoid":null,"title":"Static Semantics: Contains","titleHTML":"Static Semantics: Contains","number":"14.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Contains"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-containsexpression","aoid":null,"title":"Static Semantics: ContainsExpression","titleHTML":"Static Semantics: ContainsExpression","number":"14.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsExpression"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-containsusestrict","aoid":null,"title":"Static Semantics: ContainsUseStrict","titleHTML":"Static Semantics: ContainsUseStrict","number":"14.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUseStrict"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-expectedargumentcount","aoid":null,"title":"Static Semantics: ExpectedArgumentCount","titleHTML":"Static Semantics: ExpectedArgumentCount","number":"14.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ExpectedArgumentCount"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-hasname","aoid":null,"title":"Static Semantics: HasName","titleHTML":"Static Semantics: HasName","number":"14.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: HasName"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-issimpleparameterlist","aoid":null,"title":"Static Semantics: IsSimpleParameterList","titleHTML":"Static Semantics: IsSimpleParameterList","number":"14.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsSimpleParameterList"},{"type":"clause","id":"sec-static-semantics-coveredformalslist","aoid":null,"title":"Static Semantics: CoveredFormalsList","titleHTML":"Static Semantics: CoveredFormalsList","number":"14.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: CoveredFormalsList"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-lexicallydeclarednames","aoid":null,"title":"Static Semantics: LexicallyDeclaredNames","titleHTML":"Static Semantics: LexicallyDeclaredNames","number":"14.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyDeclaredNames"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations","aoid":null,"title":"Static Semantics: LexicallyScopedDeclarations","titleHTML":"Static Semantics: LexicallyScopedDeclarations","number":"14.2.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyScopedDeclarations"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"14.2.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-arrow-function-definitions-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"14.2.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization","aoid":null,"title":"Runtime Semantics: IteratorBindingInitialization","titleHTML":"Runtime Semantics: IteratorBindingInitialization","number":"14.2.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: IteratorBindingInitialization"},{"type":"clause","id":"sec-arrow-function-definitions-runtime-semantics-evaluatebody","aoid":null,"title":"Runtime Semantics: EvaluateBody","titleHTML":"Runtime Semantics: EvaluateBody","number":"14.2.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: EvaluateBody"},{"type":"clause","id":"sec-arrow-function-definitions-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"14.2.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-arrow-function-definitions","aoid":null,"title":"Arrow Function Definitions","titleHTML":"Arrow Function Definitions","number":"14.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Arrow Function Definitions"},{"type":"production","id":"prod-MethodDefinition","name":"MethodDefinition","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MethodDefinition"},{"type":"production","id":"prod-PropertySetParameterList","name":"PropertySetParameterList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PropertySetParameterList"},{"type":"clause","id":"sec-method-definitions-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"14.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-method-definitions-static-semantics-computedpropertycontains","aoid":null,"title":"Static Semantics: ComputedPropertyContains","titleHTML":"Static Semantics: ComputedPropertyContains","number":"14.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ComputedPropertyContains"},{"type":"clause","id":"sec-method-definitions-static-semantics-expectedargumentcount","aoid":null,"title":"Static Semantics: ExpectedArgumentCount","titleHTML":"Static Semantics: ExpectedArgumentCount","number":"14.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ExpectedArgumentCount"},{"type":"clause","id":"sec-method-definitions-static-semantics-hasdirectsuper","aoid":null,"title":"Static Semantics: HasDirectSuper","titleHTML":"Static Semantics: HasDirectSuper","number":"14.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: HasDirectSuper"},{"type":"clause","id":"sec-method-definitions-static-semantics-propname","aoid":null,"title":"Static Semantics: PropName","titleHTML":"Static Semantics: PropName","number":"14.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: PropName"},{"type":"clause","id":"sec-static-semantics-specialmethod","aoid":null,"title":"Static Semantics: SpecialMethod","titleHTML":"Static Semantics: SpecialMethod","number":"14.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: SpecialMethod"},{"type":"clause","id":"sec-runtime-semantics-definemethod","aoid":null,"title":"Runtime Semantics: DefineMethod","titleHTML":"Runtime Semantics: DefineMethod","number":"14.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: DefineMethod"},{"type":"clause","id":"sec-method-definitions-runtime-semantics-propertydefinitionevaluation","aoid":null,"title":"Runtime Semantics: PropertyDefinitionEvaluation","titleHTML":"Runtime Semantics: PropertyDefinitionEvaluation","number":"14.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: PropertyDefinitionEvaluation"},{"type":"clause","id":"sec-method-definitions","aoid":null,"title":"Method Definitions","titleHTML":"Method Definitions","number":"14.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Method Definitions"},{"type":"production","id":"prod-GeneratorMethod","name":"GeneratorMethod","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorMethod"},{"type":"production","id":"prod-GeneratorDeclaration","name":"GeneratorDeclaration","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorDeclaration"},{"type":"production","id":"prod-GeneratorExpression","name":"GeneratorExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorExpression"},{"type":"production","id":"prod-GeneratorBody","name":"GeneratorBody","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorBody"},{"type":"production","id":"prod-YieldExpression","name":"YieldExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"YieldExpression"},{"type":"clause","id":"sec-generator-function-definitions-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"14.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-generator-function-definitions-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"14.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-generator-function-definitions-static-semantics-computedpropertycontains","aoid":null,"title":"Static Semantics: ComputedPropertyContains","titleHTML":"Static Semantics: ComputedPropertyContains","number":"14.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ComputedPropertyContains"},{"type":"clause","id":"sec-generator-function-definitions-static-semantics-contains","aoid":null,"title":"Static Semantics: Contains","titleHTML":"Static Semantics: Contains","number":"14.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Contains"},{"type":"clause","id":"sec-generator-function-definitions-static-semantics-hasdirectsuper","aoid":null,"title":"Static Semantics: HasDirectSuper","titleHTML":"Static Semantics: HasDirectSuper","number":"14.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: HasDirectSuper"},{"type":"clause","id":"sec-generator-function-definitions-static-semantics-hasname","aoid":null,"title":"Static Semantics: HasName","titleHTML":"Static Semantics: HasName","number":"14.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: HasName"},{"type":"clause","id":"sec-generator-function-definitions-static-semantics-isconstantdeclaration","aoid":null,"title":"Static Semantics: IsConstantDeclaration","titleHTML":"Static Semantics: IsConstantDeclaration","number":"14.4.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsConstantDeclaration"},{"type":"clause","id":"sec-generator-function-definitions-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"14.4.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-generator-function-definitions-static-semantics-propname","aoid":null,"title":"Static Semantics: PropName","titleHTML":"Static Semantics: PropName","number":"14.4.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: PropName"},{"type":"clause","id":"sec-generator-function-definitions-runtime-semantics-evaluatebody","aoid":null,"title":"Runtime Semantics: EvaluateBody","titleHTML":"Runtime Semantics: EvaluateBody","number":"14.4.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: EvaluateBody"},{"type":"clause","id":"sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject","aoid":null,"title":"Runtime Semantics: InstantiateFunctionObject","titleHTML":"Runtime Semantics: InstantiateFunctionObject","number":"14.4.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: InstantiateFunctionObject"},{"type":"clause","id":"sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation","aoid":null,"title":"Runtime Semantics: PropertyDefinitionEvaluation","titleHTML":"Runtime Semantics: PropertyDefinitionEvaluation","number":"14.4.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: PropertyDefinitionEvaluation"},{"type":"clause","id":"sec-generator-function-definitions-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"14.4.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-generator-function-definitions","aoid":null,"title":"Generator Function Definitions","titleHTML":"Generator Function Definitions","number":"14.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Generator Function Definitions"},{"type":"production","id":"prod-ClassDeclaration","name":"ClassDeclaration","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassDeclaration"},{"type":"production","id":"prod-ClassExpression","name":"ClassExpression","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassExpression"},{"type":"production","id":"prod-ClassTail","name":"ClassTail","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassTail"},{"type":"production","id":"prod-ClassHeritage","name":"ClassHeritage","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassHeritage"},{"type":"production","id":"prod-ClassBody","name":"ClassBody","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassBody"},{"type":"production","id":"prod-ClassElementList","name":"ClassElementList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassElementList"},{"type":"production","id":"prod-ClassElement","name":"ClassElement","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassElement"},{"type":"clause","id":"sec-class-definitions-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"14.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-class-definitions-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"14.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-static-semantics-constructormethod","aoid":null,"title":"Static Semantics: ConstructorMethod","titleHTML":"Static Semantics: ConstructorMethod","number":"14.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ConstructorMethod"},{"type":"clause","id":"sec-class-definitions-static-semantics-contains","aoid":null,"title":"Static Semantics: Contains","titleHTML":"Static Semantics: Contains","number":"14.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Contains"},{"type":"clause","id":"sec-class-definitions-static-semantics-computedpropertycontains","aoid":null,"title":"Static Semantics: ComputedPropertyContains","titleHTML":"Static Semantics: ComputedPropertyContains","number":"14.5.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ComputedPropertyContains"},{"type":"clause","id":"sec-class-definitions-static-semantics-hasname","aoid":null,"title":"Static Semantics: HasName","titleHTML":"Static Semantics: HasName","number":"14.5.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: HasName"},{"type":"clause","id":"sec-class-definitions-static-semantics-isconstantdeclaration","aoid":null,"title":"Static Semantics: IsConstantDeclaration","titleHTML":"Static Semantics: IsConstantDeclaration","number":"14.5.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsConstantDeclaration"},{"type":"clause","id":"sec-class-definitions-static-semantics-isfunctiondefinition","aoid":null,"title":"Static Semantics: IsFunctionDefinition","titleHTML":"Static Semantics: IsFunctionDefinition","number":"14.5.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsFunctionDefinition"},{"type":"clause","id":"sec-static-semantics-isstatic","aoid":null,"title":"Static Semantics: IsStatic","titleHTML":"Static Semantics: IsStatic","number":"14.5.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsStatic"},{"type":"clause","id":"sec-static-semantics-nonconstructormethoddefinitions","aoid":null,"title":"Static Semantics: NonConstructorMethodDefinitions","titleHTML":"Static Semantics: NonConstructorMethodDefinitions","number":"14.5.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: NonConstructorMethodDefinitions"},{"type":"clause","id":"sec-static-semantics-prototypepropertynamelist","aoid":null,"title":"Static Semantics: PrototypePropertyNameList","titleHTML":"Static Semantics: PrototypePropertyNameList","number":"14.5.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: PrototypePropertyNameList"},{"type":"clause","id":"sec-class-definitions-static-semantics-propname","aoid":null,"title":"Static Semantics: PropName","titleHTML":"Static Semantics: PropName","number":"14.5.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: PropName"},{"type":"clause","id":"sec-runtime-semantics-classdefinitionevaluation","aoid":null,"title":"Runtime Semantics: ClassDefinitionEvaluation","titleHTML":"Runtime Semantics: ClassDefinitionEvaluation","number":"14.5.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ClassDefinitionEvaluation"},{"type":"clause","id":"sec-runtime-semantics-bindingclassdeclarationevaluation","aoid":null,"title":"Runtime Semantics: BindingClassDeclarationEvaluation","titleHTML":"Runtime Semantics: BindingClassDeclarationEvaluation","number":"14.5.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: BindingClassDeclarationEvaluation"},{"type":"clause","id":"sec-class-definitions-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"14.5.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-class-definitions","aoid":null,"title":"Class Definitions","titleHTML":"Class Definitions","number":"14.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Class Definitions"},{"type":"op","aoid":"IsInTailPosition","refId":"sec-isintailposition","location":"","key":"IsInTailPosition"},{"type":"clause","id":"sec-isintailposition","aoid":"IsInTailPosition","title":"Static Semantics: IsInTailPosition(nonterminal)","titleHTML":"Static Semantics: IsInTailPosition(<var>nonterminal</var>)","number":"14.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsInTailPosition(nonterminal)"},{"type":"clause","id":"sec-statement-rules","aoid":null,"title":"Statement Rules","titleHTML":"Statement Rules","number":"14.6.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Statement Rules"},{"type":"clause","id":"sec-expression-rules","aoid":null,"title":"Expression Rules","titleHTML":"Expression Rules","number":"14.6.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Expression Rules"},{"type":"clause","id":"sec-static-semantics-hasproductionintailposition","aoid":null,"title":"Static Semantics: HasProductionInTailPosition","titleHTML":"Static Semantics: HasProductionInTailPosition","number":"14.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: HasProductionInTailPosition"},{"type":"op","aoid":"PrepareForTailCall","refId":"sec-preparefortailcall","location":"","key":"PrepareForTailCall"},{"type":"clause","id":"sec-preparefortailcall","aoid":"PrepareForTailCall","title":"Runtime Semantics: PrepareForTailCall ( )","titleHTML":"Runtime Semantics: PrepareForTailCall ( )","number":"14.6.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: PrepareForTailCall ( )"},{"type":"clause","id":"sec-tail-position-calls","aoid":null,"title":"Tail Position Calls","titleHTML":"Tail Position Calls","number":"14.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Tail Position Calls"},{"type":"clause","id":"sec-ecmascript-language-functions-and-classes","aoid":null,"title":"ECMAScript Language: Functions and Classes","titleHTML":"ECMAScript Language: Functions and Classes","number":"14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Language: Functions and Classes"},{"type":"production","id":"prod-Script","name":"Script","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Script"},{"type":"production","id":"prod-ScriptBody","name":"ScriptBody","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ScriptBody"},{"type":"clause","id":"sec-scripts-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"15.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-static-semantics-isstrict","aoid":null,"title":"Static Semantics: IsStrict","titleHTML":"Static Semantics: IsStrict","number":"15.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsStrict"},{"type":"clause","id":"sec-scripts-static-semantics-lexicallydeclarednames","aoid":null,"title":"Static Semantics: LexicallyDeclaredNames","titleHTML":"Static Semantics: LexicallyDeclaredNames","number":"15.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyDeclaredNames"},{"type":"clause","id":"sec-scripts-static-semantics-lexicallyscopeddeclarations","aoid":null,"title":"Static Semantics: LexicallyScopedDeclarations","titleHTML":"Static Semantics: LexicallyScopedDeclarations","number":"15.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyScopedDeclarations"},{"type":"clause","id":"sec-scripts-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"15.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-scripts-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"15.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"clause","id":"sec-script-semantics-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"15.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"term","term":"Script Record","refId":"sec-script-records","id":"script-record","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Script Record"},{"type":"table","id":"table-script-records","number":36,"caption":"Table 36: Script Record Fields","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 36: Script Record Fields"},{"type":"clause","id":"sec-script-records","aoid":null,"title":"Script Records","titleHTML":"Script Records","number":"15.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Script Records"},{"type":"op","aoid":"ParseScript","refId":"sec-parse-script","location":"","key":"ParseScript"},{"type":"clause","id":"sec-parse-script","aoid":"ParseScript","title":"ParseScript ( sourceText, realm, hostDefined )","titleHTML":"ParseScript ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )","number":"15.1.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ParseScript ( sourceText, realm, hostDefined )"},{"type":"op","aoid":"ScriptEvaluation","refId":"sec-runtime-semantics-scriptevaluation","location":"","key":"ScriptEvaluation"},{"type":"clause","id":"sec-runtime-semantics-scriptevaluation","aoid":"ScriptEvaluation","title":"ScriptEvaluation ( scriptRecord )","titleHTML":"ScriptEvaluation ( <var>scriptRecord</var> )","number":"15.1.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ScriptEvaluation ( scriptRecord )"},{"type":"op","aoid":"GlobalDeclarationInstantiation","refId":"sec-globaldeclarationinstantiation","location":"","key":"GlobalDeclarationInstantiation"},{"type":"clause","id":"sec-globaldeclarationinstantiation","aoid":"GlobalDeclarationInstantiation","title":"Runtime Semantics: GlobalDeclarationInstantiation (script, env)","titleHTML":"Runtime Semantics: GlobalDeclarationInstantiation (<var>script</var>, <var>env</var>)","number":"15.1.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: GlobalDeclarationInstantiation (script, env)"},{"type":"op","aoid":"ScriptEvaluationJob","refId":"sec-scriptevaluationjob","location":"","key":"ScriptEvaluationJob"},{"type":"clause","id":"sec-scriptevaluationjob","aoid":"ScriptEvaluationJob","title":"Runtime Semantics: ScriptEvaluationJob ( sourceText, hostDefined )","titleHTML":"Runtime Semantics: ScriptEvaluationJob ( <var>sourceText</var>, <var>hostDefined</var> )","number":"15.1.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ScriptEvaluationJob ( sourceText, hostDefined )"},{"type":"clause","id":"sec-scripts","aoid":null,"title":"Scripts","titleHTML":"Scripts","number":"15.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Scripts"},{"type":"production","id":"prod-Module","name":"Module","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Module"},{"type":"production","id":"prod-ModuleBody","name":"ModuleBody","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ModuleBody"},{"type":"production","id":"prod-ModuleItemList","name":"ModuleItemList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ModuleItemList"},{"type":"production","id":"prod-ModuleItem","name":"ModuleItem","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ModuleItem"},{"type":"clause","id":"sec-module-semantics-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"15.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-module-semantics-static-semantics-containsduplicatelabels","aoid":null,"title":"Static Semantics: ContainsDuplicateLabels","titleHTML":"Static Semantics: ContainsDuplicateLabels","number":"15.2.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsDuplicateLabels"},{"type":"clause","id":"sec-module-semantics-static-semantics-containsundefinedbreaktarget","aoid":null,"title":"Static Semantics: ContainsUndefinedBreakTarget","titleHTML":"Static Semantics: ContainsUndefinedBreakTarget","number":"15.2.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedBreakTarget"},{"type":"clause","id":"sec-module-semantics-static-semantics-containsundefinedcontinuetarget","aoid":null,"title":"Static Semantics: ContainsUndefinedContinueTarget","titleHTML":"Static Semantics: ContainsUndefinedContinueTarget","number":"15.2.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ContainsUndefinedContinueTarget"},{"type":"clause","id":"sec-module-semantics-static-semantics-exportedbindings","aoid":null,"title":"Static Semantics: ExportedBindings","titleHTML":"Static Semantics: ExportedBindings","number":"15.2.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ExportedBindings"},{"type":"clause","id":"sec-module-semantics-static-semantics-exportednames","aoid":null,"title":"Static Semantics: ExportedNames","titleHTML":"Static Semantics: ExportedNames","number":"15.2.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ExportedNames"},{"type":"clause","id":"sec-module-semantics-static-semantics-exportentries","aoid":null,"title":"Static Semantics: ExportEntries","titleHTML":"Static Semantics: ExportEntries","number":"15.2.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ExportEntries"},{"type":"clause","id":"sec-module-semantics-static-semantics-importentries","aoid":null,"title":"Static Semantics: ImportEntries","titleHTML":"Static Semantics: ImportEntries","number":"15.2.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ImportEntries"},{"type":"op","aoid":"ImportedLocalNames","refId":"sec-importedlocalnames","location":"","key":"ImportedLocalNames"},{"type":"clause","id":"sec-importedlocalnames","aoid":"ImportedLocalNames","title":"Static Semantics: ImportedLocalNames ( importEntries )","titleHTML":"Static Semantics: ImportedLocalNames ( <var>importEntries</var> )","number":"15.2.1.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ImportedLocalNames ( importEntries )"},{"type":"clause","id":"sec-module-semantics-static-semantics-modulerequests","aoid":null,"title":"Static Semantics: ModuleRequests","titleHTML":"Static Semantics: ModuleRequests","number":"15.2.1.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ModuleRequests"},{"type":"clause","id":"sec-module-semantics-static-semantics-lexicallydeclarednames","aoid":null,"title":"Static Semantics: LexicallyDeclaredNames","titleHTML":"Static Semantics: LexicallyDeclaredNames","number":"15.2.1.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyDeclaredNames"},{"type":"clause","id":"sec-module-semantics-static-semantics-lexicallyscopeddeclarations","aoid":null,"title":"Static Semantics: LexicallyScopedDeclarations","titleHTML":"Static Semantics: LexicallyScopedDeclarations","number":"15.2.1.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyScopedDeclarations"},{"type":"clause","id":"sec-module-semantics-static-semantics-vardeclarednames","aoid":null,"title":"Static Semantics: VarDeclaredNames","titleHTML":"Static Semantics: VarDeclaredNames","number":"15.2.1.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarDeclaredNames"},{"type":"clause","id":"sec-module-semantics-static-semantics-varscopeddeclarations","aoid":null,"title":"Static Semantics: VarScopedDeclarations","titleHTML":"Static Semantics: VarScopedDeclarations","number":"15.2.1.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: VarScopedDeclarations"},{"type":"term","term":"Module Record","refId":"sec-abstract-module-records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Module Record"},{"type":"table","id":"table-36","number":37,"caption":"Table 37: Module Record Fields","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 37: Module Record Fields"},{"type":"table","id":"table-37","number":38,"caption":"Table 38: Abstract Methods of Module Records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 38: Abstract Methods of Module Records"},{"type":"clause","id":"sec-abstract-module-records","aoid":null,"title":"Abstract Module Records","titleHTML":"Abstract Module Records","number":"15.2.1.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Abstract Module Records"},{"type":"term","term":"Source Text Module Record","refId":"sec-source-text-module-records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Source Text Module Record"},{"type":"table","id":"table-38","number":39,"caption":"Table 39: Additional Fields of Source Text Module Records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 39: Additional Fields of Source Text Module Records"},{"type":"table","id":"table-39","number":40,"caption":"Table 40: ImportEntry Record Fields","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 40: ImportEntry Record Fields"},{"type":"table","id":"table-40","number":41,"caption":"Table 41 (Informative): Import Forms Mappings to ImportEntry Records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 41 (Informative): Import Forms Mappings to ImportEntry Records"},{"type":"table","id":"table-41","number":42,"caption":"Table 42: ExportEntry Record Fields","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 42: ExportEntry Record Fields"},{"type":"table","id":"table-42","number":43,"caption":"Table 43 (Informative): Export Forms Mappings to ExportEntry Records","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 43 (Informative): Export Forms Mappings to ExportEntry Records"},{"type":"op","aoid":"ParseModule","refId":"sec-parsemodule","location":"","key":"ParseModule"},{"type":"clause","id":"sec-parsemodule","aoid":"ParseModule","title":"ParseModule ( sourceText, realm, hostDefined )","titleHTML":"ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )","number":"15.2.1.16.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ParseModule ( sourceText, realm, hostDefined )"},{"type":"clause","id":"sec-getexportednames","aoid":null,"title":"GetExportedNames( exportStarSet ) Concrete Method","titleHTML":"GetExportedNames( <var>exportStarSet</var> ) Concrete Method","number":"15.2.1.16.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetExportedNames( exportStarSet ) Concrete Method"},{"type":"clause","id":"sec-resolveexport","aoid":null,"title":"ResolveExport( exportName, resolveSet, exportStarSet ) Concrete Method","titleHTML":"ResolveExport( <var>exportName</var>, <var>resolveSet</var>, <var>exportStarSet</var> ) Concrete Method","number":"15.2.1.16.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ResolveExport( exportName, resolveSet, exportStarSet ) Concrete Method"},{"type":"clause","id":"sec-moduledeclarationinstantiation","aoid":null,"title":"ModuleDeclarationInstantiation( ) Concrete Method","titleHTML":"ModuleDeclarationInstantiation( ) Concrete Method","number":"15.2.1.16.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ModuleDeclarationInstantiation( ) Concrete Method"},{"type":"clause","id":"sec-moduleevaluation","aoid":null,"title":"ModuleEvaluation() Concrete Method","titleHTML":"ModuleEvaluation() Concrete Method","number":"15.2.1.16.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ModuleEvaluation() Concrete Method"},{"type":"clause","id":"sec-source-text-module-records","aoid":null,"title":"Source Text Module Records","titleHTML":"Source Text Module Records","number":"15.2.1.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Source Text Module Records"},{"type":"op","aoid":"HostResolveImportedModule","refId":"sec-hostresolveimportedmodule","location":"","key":"HostResolveImportedModule"},{"type":"clause","id":"sec-hostresolveimportedmodule","aoid":"HostResolveImportedModule","title":"Runtime Semantics: HostResolveImportedModule (referencingModule, specifier )","titleHTML":"Runtime Semantics: HostResolveImportedModule (<var>referencingModule</var>, <var>specifier</var> )","number":"15.2.1.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: HostResolveImportedModule (referencingModule, specifier )"},{"type":"op","aoid":"GetModuleNamespace","refId":"sec-getmodulenamespace","location":"","key":"GetModuleNamespace"},{"type":"clause","id":"sec-getmodulenamespace","aoid":"GetModuleNamespace","title":"Runtime Semantics: GetModuleNamespace( module )","titleHTML":"Runtime Semantics: GetModuleNamespace( <var>module</var> )","number":"15.2.1.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: GetModuleNamespace( module )"},{"type":"op","aoid":"TopLevelModuleEvaluationJob","refId":"sec-toplevelmoduleevaluationjob","location":"","key":"TopLevelModuleEvaluationJob"},{"type":"clause","id":"sec-toplevelmoduleevaluationjob","aoid":"TopLevelModuleEvaluationJob","title":"Runtime Semantics: TopLevelModuleEvaluationJob ( sourceText, hostDefined )","titleHTML":"Runtime Semantics: TopLevelModuleEvaluationJob ( <var>sourceText</var>, <var>hostDefined</var> )","number":"15.2.1.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: TopLevelModuleEvaluationJob ( sourceText, hostDefined )"},{"type":"clause","id":"sec-module-semantics-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"15.2.1.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-module-semantics","aoid":null,"title":"Module Semantics","titleHTML":"Module Semantics","number":"15.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Module Semantics"},{"type":"production","id":"prod-ImportDeclaration","name":"ImportDeclaration","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ImportDeclaration"},{"type":"production","id":"prod-ImportClause","name":"ImportClause","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ImportClause"},{"type":"production","id":"prod-ImportedDefaultBinding","name":"ImportedDefaultBinding","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ImportedDefaultBinding"},{"type":"production","id":"prod-NameSpaceImport","name":"NameSpaceImport","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NameSpaceImport"},{"type":"production","id":"prod-NamedImports","name":"NamedImports","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NamedImports"},{"type":"production","id":"prod-FromClause","name":"FromClause","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FromClause"},{"type":"production","id":"prod-ImportsList","name":"ImportsList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ImportsList"},{"type":"production","id":"prod-ImportSpecifier","name":"ImportSpecifier","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ImportSpecifier"},{"type":"production","id":"prod-ModuleSpecifier","name":"ModuleSpecifier","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ModuleSpecifier"},{"type":"production","id":"prod-ImportedBinding","name":"ImportedBinding","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ImportedBinding"},{"type":"clause","id":"sec-imports-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"15.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-imports-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"15.2.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-imports-static-semantics-importentries","aoid":null,"title":"Static Semantics: ImportEntries","titleHTML":"Static Semantics: ImportEntries","number":"15.2.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ImportEntries"},{"type":"clause","id":"sec-static-semantics-importentriesformodule","aoid":null,"title":"Static Semantics: ImportEntriesForModule","titleHTML":"Static Semantics: ImportEntriesForModule","number":"15.2.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ImportEntriesForModule"},{"type":"clause","id":"sec-imports-static-semantics-modulerequests","aoid":null,"title":"Static Semantics: ModuleRequests","titleHTML":"Static Semantics: ModuleRequests","number":"15.2.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ModuleRequests"},{"type":"clause","id":"sec-imports","aoid":null,"title":"Imports","titleHTML":"Imports","number":"15.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Imports"},{"type":"production","id":"prod-ExportDeclaration","name":"ExportDeclaration","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ExportDeclaration"},{"type":"production","id":"prod-ExportClause","name":"ExportClause","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ExportClause"},{"type":"production","id":"prod-ExportsList","name":"ExportsList","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ExportsList"},{"type":"production","id":"prod-ExportSpecifier","name":"ExportSpecifier","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ExportSpecifier"},{"type":"clause","id":"sec-exports-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"15.2.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-exports-static-semantics-boundnames","aoid":null,"title":"Static Semantics: BoundNames","titleHTML":"Static Semantics: BoundNames","number":"15.2.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: BoundNames"},{"type":"clause","id":"sec-exports-static-semantics-exportedbindings","aoid":null,"title":"Static Semantics: ExportedBindings","titleHTML":"Static Semantics: ExportedBindings","number":"15.2.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ExportedBindings"},{"type":"clause","id":"sec-exports-static-semantics-exportednames","aoid":null,"title":"Static Semantics: ExportedNames","titleHTML":"Static Semantics: ExportedNames","number":"15.2.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ExportedNames"},{"type":"clause","id":"sec-exports-static-semantics-exportentries","aoid":null,"title":"Static Semantics: ExportEntries","titleHTML":"Static Semantics: ExportEntries","number":"15.2.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ExportEntries"},{"type":"clause","id":"sec-static-semantics-exportentriesformodule","aoid":null,"title":"Static Semantics: ExportEntriesForModule","titleHTML":"Static Semantics: ExportEntriesForModule","number":"15.2.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ExportEntriesForModule"},{"type":"clause","id":"sec-exports-static-semantics-isconstantdeclaration","aoid":null,"title":"Static Semantics: IsConstantDeclaration","titleHTML":"Static Semantics: IsConstantDeclaration","number":"15.2.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: IsConstantDeclaration"},{"type":"clause","id":"sec-exports-static-semantics-lexicallyscopeddeclarations","aoid":null,"title":"Static Semantics: LexicallyScopedDeclarations","titleHTML":"Static Semantics: LexicallyScopedDeclarations","number":"15.2.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: LexicallyScopedDeclarations"},{"type":"clause","id":"sec-exports-static-semantics-modulerequests","aoid":null,"title":"Static Semantics: ModuleRequests","titleHTML":"Static Semantics: ModuleRequests","number":"15.2.3.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ModuleRequests"},{"type":"clause","id":"sec-static-semantics-referencedbindings","aoid":null,"title":"Static Semantics: ReferencedBindings","titleHTML":"Static Semantics: ReferencedBindings","number":"15.2.3.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: ReferencedBindings"},{"type":"clause","id":"sec-exports-runtime-semantics-evaluation","aoid":null,"title":"Runtime Semantics: Evaluation","titleHTML":"Runtime Semantics: Evaluation","number":"15.2.3.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Evaluation"},{"type":"clause","id":"sec-exports","aoid":null,"title":"Exports","titleHTML":"Exports","number":"15.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Exports"},{"type":"clause","id":"sec-modules","aoid":null,"title":"Modules","titleHTML":"Modules","number":"15.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Modules"},{"type":"clause","id":"sec-ecmascript-language-scripts-and-modules","aoid":null,"title":"ECMAScript Language: Scripts and Modules","titleHTML":"ECMAScript Language: Scripts and Modules","number":"15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Language: Scripts and Modules"},{"type":"term","term":"early error","refId":"sec-error-handling-and-language-extensions","id":"early-error","namespace":"https://tc39.github.io/ecma262/","location":"","key":"early error"},{"type":"op","aoid":"HostReportErrors","refId":"sec-host-report-errors","location":"","key":"HostReportErrors"},{"type":"clause","id":"sec-host-report-errors","aoid":"HostReportErrors","title":"HostReportErrors ( errorList )","titleHTML":"HostReportErrors ( <var>errorList</var> )","number":"16.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HostReportErrors ( errorList )"},{"type":"clause","id":"sec-forbidden-extensions","aoid":null,"title":"Forbidden Extensions","titleHTML":"Forbidden Extensions","number":"16.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Forbidden Extensions"},{"type":"clause","id":"sec-error-handling-and-language-extensions","aoid":null,"title":"Error Handling and Language Extensions","titleHTML":"Error Handling and Language Extensions","number":"16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Error Handling and Language Extensions"},{"type":"clause","id":"sec-ecmascript-standard-built-in-objects","aoid":null,"title":"ECMAScript Standard Built-in Objects","titleHTML":"ECMAScript Standard Built-in Objects","number":"17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ECMAScript Standard Built-in Objects"},{"type":"clause","id":"sec-value-properties-of-the-global-object-infinity","aoid":null,"title":"Infinity","titleHTML":"Infinity","number":"18.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Infinity"},{"type":"clause","id":"sec-value-properties-of-the-global-object-nan","aoid":null,"title":"NaN","titleHTML":"NaN","number":"18.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NaN"},{"type":"clause","id":"sec-undefined","aoid":null,"title":"undefined","titleHTML":"undefined","number":"18.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"undefined"},{"type":"clause","id":"sec-value-properties-of-the-global-object","aoid":null,"title":"Value Properties of the Global Object","titleHTML":"Value Properties of the Global Object","number":"18.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Value Properties of the Global Object"},{"type":"term","term":"%eval%","refId":"sec-eval-x","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%eval%"},{"type":"clause","id":"sec-performeval-rules-outside-methods","aoid":null,"title":"Additional Early Error Rules for Eval Outside Methods","titleHTML":"Additional Early Error Rules for Eval Outside Methods","number":"18.2.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additional Early Error Rules for Eval Outside Methods"},{"type":"clause","id":"sec-performeval-rules-outside-constructors","aoid":null,"title":"Additional Early Error Rules for Eval Outside Constructors","titleHTML":"Additional Early Error Rules for Eval Outside Constructors","number":"18.2.1.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additional Early Error Rules for Eval Outside Constructors"},{"type":"op","aoid":"PerformEval","refId":"sec-performeval","location":"","key":"PerformEval"},{"type":"clause","id":"sec-performeval","aoid":"PerformEval","title":"Runtime Semantics: PerformEval( x, evalRealm, strictCaller, direct)","titleHTML":"Runtime Semantics: PerformEval( <var>x</var>, <var>evalRealm</var>, <var>strictCaller</var>, <var>direct</var>)","number":"18.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: PerformEval( x, evalRealm, strictCaller, direct)"},{"type":"op","aoid":"HostEnsureCanCompileStrings","refId":"sec-hostensurecancompilestrings","location":"","key":"HostEnsureCanCompileStrings"},{"type":"clause","id":"sec-hostensurecancompilestrings","aoid":"HostEnsureCanCompileStrings","title":"HostEnsureCanCompileStrings( callerRealm, calleeRealm )","titleHTML":"HostEnsureCanCompileStrings( <var>callerRealm</var>, <var>calleeRealm</var> )","number":"18.2.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HostEnsureCanCompileStrings( callerRealm, calleeRealm )"},{"type":"op","aoid":"EvalDeclarationInstantiation","refId":"sec-evaldeclarationinstantiation","location":"","key":"EvalDeclarationInstantiation"},{"type":"clause","id":"sec-evaldeclarationinstantiation","aoid":"EvalDeclarationInstantiation","title":"Runtime Semantics: EvalDeclarationInstantiation( body, varEnv, lexEnv, strict)","titleHTML":"Runtime Semantics: EvalDeclarationInstantiation( <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strict</var>)","number":"18.2.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: EvalDeclarationInstantiation( body, varEnv, lexEnv, strict)"},{"type":"clause","id":"sec-eval-x","aoid":null,"title":"eval (x)","titleHTML":"eval (<var>x</var>)","number":"18.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"eval (x)"},{"type":"term","term":"%isFinite%","refId":"sec-isfinite-number","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%isFinite%"},{"type":"clause","id":"sec-isfinite-number","aoid":null,"title":"isFinite (number)","titleHTML":"isFinite (<var>number</var>)","number":"18.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"isFinite (number)"},{"type":"term","term":"%isNaN%","refId":"sec-isnan-number","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%isNaN%"},{"type":"clause","id":"sec-isnan-number","aoid":null,"title":"isNaN (number)","titleHTML":"isNaN (<var>number</var>)","number":"18.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"isNaN (number)"},{"type":"term","term":"%parseFloat%","refId":"sec-parsefloat-string","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%parseFloat%"},{"type":"clause","id":"sec-parsefloat-string","aoid":null,"title":"parseFloat (string)","titleHTML":"parseFloat (<var>string</var>)","number":"18.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"parseFloat (string)"},{"type":"term","term":"%parseInt%","refId":"sec-parseint-string-radix","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%parseInt%"},{"type":"clause","id":"sec-parseint-string-radix","aoid":null,"title":"parseInt (string, radix)","titleHTML":"parseInt (<var>string</var>, <var>radix</var>)","number":"18.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"parseInt (string, radix)"},{"type":"production","id":"prod-uri","name":"uri","namespace":"https://tc39.github.io/ecma262/","location":"","key":"uri"},{"type":"production","id":"prod-uriCharacters","name":"uriCharacters","namespace":"https://tc39.github.io/ecma262/","location":"","key":"uriCharacters"},{"type":"production","id":"prod-uriCharacter","name":"uriCharacter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"uriCharacter"},{"type":"production","id":"prod-uriReserved","name":"uriReserved","namespace":"https://tc39.github.io/ecma262/","location":"","key":"uriReserved"},{"type":"production","id":"prod-uriUnescaped","name":"uriUnescaped","namespace":"https://tc39.github.io/ecma262/","location":"","key":"uriUnescaped"},{"type":"production","id":"prod-uriEscaped","name":"uriEscaped","namespace":"https://tc39.github.io/ecma262/","location":"","key":"uriEscaped"},{"type":"production","id":"prod-uriAlpha","name":"uriAlpha","namespace":"https://tc39.github.io/ecma262/","location":"","key":"uriAlpha"},{"type":"production","id":"prod-uriMark","name":"uriMark","namespace":"https://tc39.github.io/ecma262/","location":"","key":"uriMark"},{"type":"op","aoid":"Encode","refId":"sec-encode","location":"","key":"Encode"},{"type":"clause","id":"sec-encode","aoid":"Encode","title":"Runtime Semantics: Encode ( string, unescapedSet )","titleHTML":"Runtime Semantics: Encode ( <var>string</var>, <var>unescapedSet</var> )","number":"18.2.6.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Encode ( string, unescapedSet )"},{"type":"table","id":"table-43","number":44,"caption":"Table 44 (Informative): UTF-8 Encodings","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 44 (Informative): UTF-8 Encodings"},{"type":"op","aoid":"Decode","refId":"sec-decode","location":"","key":"Decode"},{"type":"clause","id":"sec-decode","aoid":"Decode","title":"Runtime Semantics: Decode ( string, reservedSet )","titleHTML":"Runtime Semantics: Decode ( <var>string</var>, <var>reservedSet</var> )","number":"18.2.6.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Decode ( string, reservedSet )"},{"type":"clause","id":"sec-uri-syntax-and-semantics","aoid":null,"title":"URI Syntax and Semantics","titleHTML":"URI Syntax and Semantics","number":"18.2.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"URI Syntax and Semantics"},{"type":"term","term":"%decodeURI%","refId":"sec-decodeuri-encodeduri","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%decodeURI%"},{"type":"clause","id":"sec-decodeuri-encodeduri","aoid":null,"title":"decodeURI (encodedURI)","titleHTML":"decodeURI (<var>encodedURI</var>)","number":"18.2.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"decodeURI (encodedURI)"},{"type":"term","term":"%decodeURIComponent%","refId":"sec-decodeuricomponent-encodeduricomponent","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%decodeURIComponent%"},{"type":"clause","id":"sec-decodeuricomponent-encodeduricomponent","aoid":null,"title":"decodeURIComponent (encodedURIComponent)","titleHTML":"decodeURIComponent (<var>encodedURIComponent</var>)","number":"18.2.6.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"decodeURIComponent (encodedURIComponent)"},{"type":"term","term":"%encodeURI%","refId":"sec-encodeuri-uri","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%encodeURI%"},{"type":"clause","id":"sec-encodeuri-uri","aoid":null,"title":"encodeURI (uri)","titleHTML":"encodeURI (<var>uri</var>)","number":"18.2.6.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"encodeURI (uri)"},{"type":"term","term":"%encodeURIComponent%","refId":"sec-encodeuricomponent-uricomponent","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%encodeURIComponent%"},{"type":"clause","id":"sec-encodeuricomponent-uricomponent","aoid":null,"title":"encodeURIComponent (uriComponent)","titleHTML":"encodeURIComponent (<var>uriComponent</var>)","number":"18.2.6.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"encodeURIComponent (uriComponent)"},{"type":"clause","id":"sec-uri-handling-functions","aoid":null,"title":"URI Handling Functions","titleHTML":"URI Handling Functions","number":"18.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"URI Handling Functions"},{"type":"clause","id":"sec-function-properties-of-the-global-object","aoid":null,"title":"Function Properties of the Global Object","titleHTML":"Function Properties of the Global Object","number":"18.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function Properties of the Global Object"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-array","aoid":null,"title":"Array ( . . . )","titleHTML":"Array ( . . . )","number":"18.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-arraybuffer","aoid":null,"title":"ArrayBuffer ( . . . )","titleHTML":"ArrayBuffer ( . . . )","number":"18.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayBuffer ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-boolean","aoid":null,"title":"Boolean ( . . . )","titleHTML":"Boolean ( . . . )","number":"18.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-dataview","aoid":null,"title":"DataView ( . . . )","titleHTML":"DataView ( . . . )","number":"18.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-date","aoid":null,"title":"Date ( . . . )","titleHTML":"Date ( . . . )","number":"18.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-error","aoid":null,"title":"Error ( . . . )","titleHTML":"Error ( . . . )","number":"18.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Error ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-evalerror","aoid":null,"title":"EvalError ( . . . )","titleHTML":"EvalError ( . . . )","number":"18.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"EvalError ( . . . )"},{"type":"clause","id":"sec-float32array","aoid":null,"title":"Float32Array ( . . . )","titleHTML":"Float32Array ( . . . )","number":"18.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Float32Array ( . . . )"},{"type":"clause","id":"sec-float64array","aoid":null,"title":"Float64Array ( . . . )","titleHTML":"Float64Array ( . . . )","number":"18.3.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Float64Array ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-function","aoid":null,"title":"Function ( . . . )","titleHTML":"Function ( . . . )","number":"18.3.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function ( . . . )"},{"type":"clause","id":"sec-int8array","aoid":null,"title":"Int8Array ( . . . )","titleHTML":"Int8Array ( . . . )","number":"18.3.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Int8Array ( . . . )"},{"type":"clause","id":"sec-int16array","aoid":null,"title":"Int16Array ( . . . )","titleHTML":"Int16Array ( . . . )","number":"18.3.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Int16Array ( . . . )"},{"type":"clause","id":"sec-int32array","aoid":null,"title":"Int32Array ( . . . )","titleHTML":"Int32Array ( . . . )","number":"18.3.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Int32Array ( . . . )"},{"type":"clause","id":"sec-map","aoid":null,"title":"Map ( . . . )","titleHTML":"Map ( . . . )","number":"18.3.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-number","aoid":null,"title":"Number ( . . . )","titleHTML":"Number ( . . . )","number":"18.3.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-object","aoid":null,"title":"Object ( . . . )","titleHTML":"Object ( . . . )","number":"18.3.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-proxy","aoid":null,"title":"Proxy ( . . . )","titleHTML":"Proxy ( . . . )","number":"18.3.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Proxy ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-promise","aoid":null,"title":"Promise ( . . . )","titleHTML":"Promise ( . . . )","number":"18.3.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-rangeerror","aoid":null,"title":"RangeError ( . . . )","titleHTML":"RangeError ( . . . )","number":"18.3.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RangeError ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-referenceerror","aoid":null,"title":"ReferenceError ( . . . )","titleHTML":"ReferenceError ( . . . )","number":"18.3.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ReferenceError ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-regexp","aoid":null,"title":"RegExp ( . . . )","titleHTML":"RegExp ( . . . )","number":"18.3.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp ( . . . )"},{"type":"clause","id":"sec-set","aoid":null,"title":"Set ( . . . )","titleHTML":"Set ( . . . )","number":"18.3.22","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-string","aoid":null,"title":"String ( . . . )","titleHTML":"String ( . . . )","number":"18.3.23","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-symbol","aoid":null,"title":"Symbol ( . . . )","titleHTML":"Symbol ( . . . )","number":"18.3.24","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-syntaxerror","aoid":null,"title":"SyntaxError ( . . . )","titleHTML":"SyntaxError ( . . . )","number":"18.3.25","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SyntaxError ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-typeerror","aoid":null,"title":"TypeError ( . . . )","titleHTML":"TypeError ( . . . )","number":"18.3.26","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypeError ( . . . )"},{"type":"clause","id":"sec-uint8array","aoid":null,"title":"Uint8Array ( . . . )","titleHTML":"Uint8Array ( . . . )","number":"18.3.27","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Uint8Array ( . . . )"},{"type":"clause","id":"sec-uint8clampedarray","aoid":null,"title":"Uint8ClampedArray ( . . . )","titleHTML":"Uint8ClampedArray ( . . . )","number":"18.3.28","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Uint8ClampedArray ( . . . )"},{"type":"clause","id":"sec-uint16array","aoid":null,"title":"Uint16Array ( . . . )","titleHTML":"Uint16Array ( . . . )","number":"18.3.29","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Uint16Array ( . . . )"},{"type":"clause","id":"sec-uint32array","aoid":null,"title":"Uint32Array ( . . . )","titleHTML":"Uint32Array ( . . . )","number":"18.3.30","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Uint32Array ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-urierror","aoid":null,"title":"URIError ( . . . )","titleHTML":"URIError ( . . . )","number":"18.3.31","namespace":"https://tc39.github.io/ecma262/","location":"","key":"URIError ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-weakmap","aoid":null,"title":"WeakMap ( . . . )","titleHTML":"WeakMap ( . . . )","number":"18.3.32","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakMap ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object-weakset","aoid":null,"title":"WeakSet ( . . . )","titleHTML":"WeakSet ( . . . )","number":"18.3.33","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakSet ( . . . )"},{"type":"clause","id":"sec-constructor-properties-of-the-global-object","aoid":null,"title":"Constructor Properties of the Global Object","titleHTML":"Constructor Properties of the Global Object","number":"18.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Constructor Properties of the Global Object"},{"type":"clause","id":"sec-json","aoid":null,"title":"JSON","titleHTML":"JSON","number":"18.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"JSON"},{"type":"clause","id":"sec-math","aoid":null,"title":"Math","titleHTML":"Math","number":"18.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math"},{"type":"clause","id":"sec-reflect","aoid":null,"title":"Reflect","titleHTML":"Reflect","number":"18.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect"},{"type":"clause","id":"sec-other-properties-of-the-global-object","aoid":null,"title":"Other Properties of the Global Object","titleHTML":"Other Properties of the Global Object","number":"18.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Other Properties of the Global Object"},{"type":"clause","id":"sec-global-object","aoid":null,"title":"The Global Object","titleHTML":"The Global Object","number":"18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Global Object"},{"type":"term","term":"%Object%","refId":"sec-object-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Object%"},{"type":"clause","id":"sec-object-value","aoid":null,"title":"Object ( [ value ] )","titleHTML":"Object ( [ <var>value</var> ] )","number":"19.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object ( [ value ] )"},{"type":"clause","id":"sec-object-constructor","aoid":null,"title":"The Object Constructor","titleHTML":"The Object Constructor","number":"19.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Object Constructor"},{"type":"clause","id":"sec-object.assign","aoid":null,"title":"Object.assign ( target, ...sources )","titleHTML":"Object.assign ( <var>target</var>, ...<var>sources</var> )","number":"19.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.assign ( target, ...sources )"},{"type":"clause","id":"sec-object.create","aoid":null,"title":"Object.create ( O, Properties )","titleHTML":"Object.create ( <var>O</var>, <var>Properties</var> )","number":"19.1.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.create ( O, Properties )"},{"type":"op","aoid":"ObjectDefineProperties","refId":"sec-objectdefineproperties","location":"","key":"ObjectDefineProperties"},{"type":"clause","id":"sec-objectdefineproperties","aoid":"ObjectDefineProperties","title":"Runtime Semantics: ObjectDefineProperties ( O, Properties )","titleHTML":"Runtime Semantics: ObjectDefineProperties ( <var>O</var>, <var>Properties</var> )","number":"19.1.2.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ObjectDefineProperties ( O, Properties )"},{"type":"clause","id":"sec-object.defineproperties","aoid":null,"title":"Object.defineProperties ( O, Properties )","titleHTML":"Object.defineProperties ( <var>O</var>, <var>Properties</var> )","number":"19.1.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.defineProperties ( O, Properties )"},{"type":"clause","id":"sec-object.defineproperty","aoid":null,"title":"Object.defineProperty ( O, P, Attributes )","titleHTML":"Object.defineProperty ( <var>O</var>, <var>P</var>, <var>Attributes</var> )","number":"19.1.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.defineProperty ( O, P, Attributes )"},{"type":"clause","id":"sec-object.freeze","aoid":null,"title":"Object.freeze ( O )","titleHTML":"Object.freeze ( <var>O</var> )","number":"19.1.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.freeze ( O )"},{"type":"clause","id":"sec-object.getownpropertydescriptor","aoid":null,"title":"Object.getOwnPropertyDescriptor ( O, P )","titleHTML":"Object.getOwnPropertyDescriptor ( <var>O</var>, <var>P</var> )","number":"19.1.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.getOwnPropertyDescriptor ( O, P )"},{"type":"clause","id":"sec-object.getownpropertydescriptors","aoid":null,"title":"Object.getOwnPropertyDescriptors ( O )","titleHTML":"Object.getOwnPropertyDescriptors ( <var>O</var> )","number":"19.1.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.getOwnPropertyDescriptors ( O )"},{"type":"clause","id":"sec-object.getownpropertynames","aoid":null,"title":"Object.getOwnPropertyNames ( O )","titleHTML":"Object.getOwnPropertyNames ( <var>O</var> )","number":"19.1.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.getOwnPropertyNames ( O )"},{"type":"op","aoid":"GetOwnPropertyKeys","refId":"sec-getownpropertykeys","location":"","key":"GetOwnPropertyKeys"},{"type":"clause","id":"sec-getownpropertykeys","aoid":"GetOwnPropertyKeys","title":"Runtime Semantics: GetOwnPropertyKeys ( O, Type )","titleHTML":"Runtime Semantics: GetOwnPropertyKeys ( <var>O</var>, <var>Type</var> )","number":"19.1.2.9.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: GetOwnPropertyKeys ( O, Type )"},{"type":"clause","id":"sec-object.getownpropertysymbols","aoid":null,"title":"Object.getOwnPropertySymbols ( O )","titleHTML":"Object.getOwnPropertySymbols ( <var>O</var> )","number":"19.1.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.getOwnPropertySymbols ( O )"},{"type":"clause","id":"sec-object.getprototypeof","aoid":null,"title":"Object.getPrototypeOf ( O )","titleHTML":"Object.getPrototypeOf ( <var>O</var> )","number":"19.1.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.getPrototypeOf ( O )"},{"type":"clause","id":"sec-object.is","aoid":null,"title":"Object.is ( value1, value2 )","titleHTML":"Object.is ( <var>value1</var>, <var>value2</var> )","number":"19.1.2.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.is ( value1, value2 )"},{"type":"clause","id":"sec-object.isextensible","aoid":null,"title":"Object.isExtensible ( O )","titleHTML":"Object.isExtensible ( <var>O</var> )","number":"19.1.2.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.isExtensible ( O )"},{"type":"clause","id":"sec-object.isfrozen","aoid":null,"title":"Object.isFrozen ( O )","titleHTML":"Object.isFrozen ( <var>O</var> )","number":"19.1.2.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.isFrozen ( O )"},{"type":"clause","id":"sec-object.issealed","aoid":null,"title":"Object.isSealed ( O )","titleHTML":"Object.isSealed ( <var>O</var> )","number":"19.1.2.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.isSealed ( O )"},{"type":"clause","id":"sec-object.keys","aoid":null,"title":"Object.keys ( O )","titleHTML":"Object.keys ( <var>O</var> )","number":"19.1.2.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.keys ( O )"},{"type":"clause","id":"sec-object.values","aoid":null,"title":"Object.values ( O )","titleHTML":"Object.values ( <var>O</var> )","number":"19.1.2.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.values ( O )"},{"type":"clause","id":"sec-object.entries","aoid":null,"title":"Object.entries ( O )","titleHTML":"Object.entries ( <var>O</var> )","number":"19.1.2.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.entries ( O )"},{"type":"clause","id":"sec-object.preventextensions","aoid":null,"title":"Object.preventExtensions ( O )","titleHTML":"Object.preventExtensions ( <var>O</var> )","number":"19.1.2.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.preventExtensions ( O )"},{"type":"clause","id":"sec-object.prototype","aoid":null,"title":"Object.prototype","titleHTML":"Object.prototype","number":"19.1.2.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype"},{"type":"clause","id":"sec-object.seal","aoid":null,"title":"Object.seal ( O )","titleHTML":"Object.seal ( <var>O</var> )","number":"19.1.2.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.seal ( O )"},{"type":"clause","id":"sec-object.setprototypeof","aoid":null,"title":"Object.setPrototypeOf ( O, proto )","titleHTML":"Object.setPrototypeOf ( <var>O</var>, <var>proto</var> )","number":"19.1.2.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.setPrototypeOf ( O, proto )"},{"type":"clause","id":"sec-properties-of-the-object-constructor","aoid":null,"title":"Properties of the Object Constructor","titleHTML":"Properties of the Object Constructor","number":"19.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Object Constructor"},{"type":"term","term":"%ObjectPrototype%","refId":"sec-properties-of-the-object-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ObjectPrototype%"},{"type":"clause","id":"sec-object.prototype.constructor","aoid":null,"title":"Object.prototype.constructor","titleHTML":"Object.prototype.constructor","number":"19.1.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.constructor"},{"type":"clause","id":"sec-object.prototype.hasownproperty","aoid":null,"title":"Object.prototype.hasOwnProperty ( V )","titleHTML":"Object.prototype.hasOwnProperty ( <var>V</var> )","number":"19.1.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.hasOwnProperty ( V )"},{"type":"clause","id":"sec-object.prototype.isprototypeof","aoid":null,"title":"Object.prototype.isPrototypeOf ( V )","titleHTML":"Object.prototype.isPrototypeOf ( <var>V</var> )","number":"19.1.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.isPrototypeOf ( V )"},{"type":"clause","id":"sec-object.prototype.propertyisenumerable","aoid":null,"title":"Object.prototype.propertyIsEnumerable ( V )","titleHTML":"Object.prototype.propertyIsEnumerable ( <var>V</var> )","number":"19.1.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.propertyIsEnumerable ( V )"},{"type":"clause","id":"sec-object.prototype.tolocalestring","aoid":null,"title":"Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )","titleHTML":"Object.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )","number":"19.1.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )"},{"type":"term","term":"%ObjProto_toString%","refId":"sec-object.prototype.tostring","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ObjProto_toString%"},{"type":"clause","id":"sec-object.prototype.tostring","aoid":null,"title":"Object.prototype.toString ( )","titleHTML":"Object.prototype.toString ( )","number":"19.1.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.toString ( )"},{"type":"term","term":"%ObjProto_valueOf%","refId":"sec-object.prototype.valueof","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ObjProto_valueOf%"},{"type":"clause","id":"sec-object.prototype.valueof","aoid":null,"title":"Object.prototype.valueOf ( )","titleHTML":"Object.prototype.valueOf ( )","number":"19.1.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.valueOf ( )"},{"type":"clause","id":"sec-properties-of-the-object-prototype-object","aoid":null,"title":"Properties of the Object Prototype Object","titleHTML":"Properties of the Object Prototype Object","number":"19.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Object Prototype Object"},{"type":"clause","id":"sec-properties-of-object-instances","aoid":null,"title":"Properties of Object Instances","titleHTML":"Properties of Object Instances","number":"19.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Object Instances"},{"type":"clause","id":"sec-object-objects","aoid":null,"title":"Object Objects","titleHTML":"Object Objects","number":"19.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object Objects"},{"type":"term","term":"%Function%","refId":"sec-function-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Function%"},{"type":"op","aoid":"CreateDynamicFunction","refId":"sec-createdynamicfunction","location":"","key":"CreateDynamicFunction"},{"type":"clause","id":"sec-createdynamicfunction","aoid":"CreateDynamicFunction","title":"Runtime Semantics: CreateDynamicFunction(constructor, newTarget, kind, args)","titleHTML":"Runtime Semantics: CreateDynamicFunction(<var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var>)","number":"19.2.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: CreateDynamicFunction(constructor, newTarget, kind, args)"},{"type":"clause","id":"sec-function-p1-p2-pn-body","aoid":null,"title":"Function ( p1, p2, â¦ , pn, body )","titleHTML":"Function ( <var>p1</var>, <var>p2</var>, â¦ , <var>pn</var>, <var>body</var> )","number":"19.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function ( p1, p2, â¦ , pn, body )"},{"type":"clause","id":"sec-function-constructor","aoid":null,"title":"The Function Constructor","titleHTML":"The Function Constructor","number":"19.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Function Constructor"},{"type":"clause","id":"sec-function.length","aoid":null,"title":"Function.length","titleHTML":"Function.length","number":"19.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function.length"},{"type":"clause","id":"sec-function.prototype","aoid":null,"title":"Function.prototype","titleHTML":"Function.prototype","number":"19.2.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function.prototype"},{"type":"clause","id":"sec-properties-of-the-function-constructor","aoid":null,"title":"Properties of the Function Constructor","titleHTML":"Properties of the Function Constructor","number":"19.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Function Constructor"},{"type":"term","term":"%FunctionPrototype%","refId":"sec-properties-of-the-function-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%FunctionPrototype%"},{"type":"clause","id":"sec-function.prototype.apply","aoid":null,"title":"Function.prototype.apply ( thisArg, argArray )","titleHTML":"Function.prototype.apply ( <var>thisArg</var>, <var>argArray</var> )","number":"19.2.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function.prototype.apply ( thisArg, argArray )"},{"type":"clause","id":"sec-function.prototype.bind","aoid":null,"title":"Function.prototype.bind ( thisArg, ...args)","titleHTML":"Function.prototype.bind ( <var>thisArg</var>, ...<var>args</var>)","number":"19.2.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function.prototype.bind ( thisArg, ...args)"},{"type":"clause","id":"sec-function.prototype.call","aoid":null,"title":"Function.prototype.call (thisArg, ...args)","titleHTML":"Function.prototype.call (<var>thisArg</var>, ...<var>args</var>)","number":"19.2.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function.prototype.call (thisArg, ...args)"},{"type":"clause","id":"sec-function.prototype.constructor","aoid":null,"title":"Function.prototype.constructor","titleHTML":"Function.prototype.constructor","number":"19.2.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function.prototype.constructor"},{"type":"clause","id":"sec-function.prototype.tostring","aoid":null,"title":"Function.prototype.toString ( )","titleHTML":"Function.prototype.toString ( )","number":"19.2.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function.prototype.toString ( )"},{"type":"clause","id":"sec-function.prototype-@@hasinstance","aoid":null,"title":"Function.prototype [ @@hasInstance ] ( V )","titleHTML":"Function.prototype [ @@hasInstance ] ( <var>V</var> )","number":"19.2.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function.prototype [ @@hasInstance ] ( V )"},{"type":"clause","id":"sec-properties-of-the-function-prototype-object","aoid":null,"title":"Properties of the Function Prototype Object","titleHTML":"Properties of the Function Prototype Object","number":"19.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Function Prototype Object"},{"type":"clause","id":"sec-function-instances-length","aoid":null,"title":"length","titleHTML":"length","number":"19.2.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"length"},{"type":"clause","id":"sec-function-instances-name","aoid":null,"title":"name","titleHTML":"name","number":"19.2.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"name"},{"type":"clause","id":"sec-function-instances-prototype","aoid":null,"title":"prototype","titleHTML":"prototype","number":"19.2.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"prototype"},{"type":"clause","id":"sec-function-instances","aoid":null,"title":"Function Instances","titleHTML":"Function Instances","number":"19.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function Instances"},{"type":"clause","id":"sec-function-objects","aoid":null,"title":"Function Objects","titleHTML":"Function Objects","number":"19.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function Objects"},{"type":"term","term":"%Boolean%","refId":"sec-boolean-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Boolean%"},{"type":"clause","id":"sec-boolean-constructor-boolean-value","aoid":null,"title":"Boolean ( value )","titleHTML":"Boolean ( <var>value</var> )","number":"19.3.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean ( value )"},{"type":"clause","id":"sec-boolean-constructor","aoid":null,"title":"The Boolean Constructor","titleHTML":"The Boolean Constructor","number":"19.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Boolean Constructor"},{"type":"clause","id":"sec-boolean.prototype","aoid":null,"title":"Boolean.prototype","titleHTML":"Boolean.prototype","number":"19.3.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean.prototype"},{"type":"clause","id":"sec-properties-of-the-boolean-constructor","aoid":null,"title":"Properties of the Boolean Constructor","titleHTML":"Properties of the Boolean Constructor","number":"19.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Boolean Constructor"},{"type":"term","term":"%BooleanPrototype%","refId":"sec-properties-of-the-boolean-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%BooleanPrototype%"},{"type":"op","aoid":"thisBooleanValue","refId":"sec-thisbooleanvalue","location":"","key":"thisBooleanValue"},{"type":"clause","id":"sec-thisbooleanvalue","aoid":"thisBooleanValue","title":"thisBooleanValue ( value )","titleHTML":"thisBooleanValue ( <var>value</var> )","number":"19.3.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"thisBooleanValue ( value )"},{"type":"clause","id":"sec-boolean.prototype.constructor","aoid":null,"title":"Boolean.prototype.constructor","titleHTML":"Boolean.prototype.constructor","number":"19.3.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean.prototype.constructor"},{"type":"clause","id":"sec-boolean.prototype.tostring","aoid":null,"title":"Boolean.prototype.toString ( )","titleHTML":"Boolean.prototype.toString ( )","number":"19.3.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean.prototype.toString ( )"},{"type":"clause","id":"sec-boolean.prototype.valueof","aoid":null,"title":"Boolean.prototype.valueOf ( )","titleHTML":"Boolean.prototype.valueOf ( )","number":"19.3.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean.prototype.valueOf ( )"},{"type":"clause","id":"sec-properties-of-the-boolean-prototype-object","aoid":null,"title":"Properties of the Boolean Prototype Object","titleHTML":"Properties of the Boolean Prototype Object","number":"19.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Boolean Prototype Object"},{"type":"clause","id":"sec-properties-of-boolean-instances","aoid":null,"title":"Properties of Boolean Instances","titleHTML":"Properties of Boolean Instances","number":"19.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Boolean Instances"},{"type":"clause","id":"sec-boolean-objects","aoid":null,"title":"Boolean Objects","titleHTML":"Boolean Objects","number":"19.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Boolean Objects"},{"type":"term","term":"%Symbol%","refId":"sec-symbol-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Symbol%"},{"type":"clause","id":"sec-symbol-description","aoid":null,"title":"Symbol ( [ description ] )","titleHTML":"Symbol ( [ <var>description</var> ] )","number":"19.4.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol ( [ description ] )"},{"type":"clause","id":"sec-symbol-constructor","aoid":null,"title":"The Symbol Constructor","titleHTML":"The Symbol Constructor","number":"19.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Symbol Constructor"},{"type":"table","id":"table-44","number":45,"caption":"Table 45: GlobalSymbolRegistry Record Fields","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 45: GlobalSymbolRegistry Record Fields"},{"type":"clause","id":"sec-symbol.for","aoid":null,"title":"Symbol.for ( key )","titleHTML":"Symbol.for ( <var>key</var> )","number":"19.4.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.for ( key )"},{"type":"clause","id":"sec-symbol.hasinstance","aoid":null,"title":"Symbol.hasInstance","titleHTML":"Symbol.hasInstance","number":"19.4.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.hasInstance"},{"type":"clause","id":"sec-symbol.isconcatspreadable","aoid":null,"title":"Symbol.isConcatSpreadable","titleHTML":"Symbol.isConcatSpreadable","number":"19.4.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.isConcatSpreadable"},{"type":"clause","id":"sec-symbol.iterator","aoid":null,"title":"Symbol.iterator","titleHTML":"Symbol.iterator","number":"19.4.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.iterator"},{"type":"clause","id":"sec-symbol.keyfor","aoid":null,"title":"Symbol.keyFor ( sym )","titleHTML":"Symbol.keyFor ( <var>sym</var> )","number":"19.4.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.keyFor ( sym )"},{"type":"clause","id":"sec-symbol.match","aoid":null,"title":"Symbol.match","titleHTML":"Symbol.match","number":"19.4.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.match"},{"type":"clause","id":"sec-symbol.prototype","aoid":null,"title":"Symbol.prototype","titleHTML":"Symbol.prototype","number":"19.4.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.prototype"},{"type":"clause","id":"sec-symbol.replace","aoid":null,"title":"Symbol.replace","titleHTML":"Symbol.replace","number":"19.4.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.replace"},{"type":"clause","id":"sec-symbol.search","aoid":null,"title":"Symbol.search","titleHTML":"Symbol.search","number":"19.4.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.search"},{"type":"clause","id":"sec-symbol.species","aoid":null,"title":"Symbol.species","titleHTML":"Symbol.species","number":"19.4.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.species"},{"type":"clause","id":"sec-symbol.split","aoid":null,"title":"Symbol.split","titleHTML":"Symbol.split","number":"19.4.2.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.split"},{"type":"clause","id":"sec-symbol.toprimitive","aoid":null,"title":"Symbol.toPrimitive","titleHTML":"Symbol.toPrimitive","number":"19.4.2.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.toPrimitive"},{"type":"clause","id":"sec-symbol.tostringtag","aoid":null,"title":"Symbol.toStringTag","titleHTML":"Symbol.toStringTag","number":"19.4.2.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.toStringTag"},{"type":"clause","id":"sec-symbol.unscopables","aoid":null,"title":"Symbol.unscopables","titleHTML":"Symbol.unscopables","number":"19.4.2.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.unscopables"},{"type":"clause","id":"sec-properties-of-the-symbol-constructor","aoid":null,"title":"Properties of the Symbol Constructor","titleHTML":"Properties of the Symbol Constructor","number":"19.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Symbol Constructor"},{"type":"term","term":"%SymbolPrototype%","refId":"sec-properties-of-the-symbol-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%SymbolPrototype%"},{"type":"clause","id":"sec-symbol.prototype.constructor","aoid":null,"title":"Symbol.prototype.constructor","titleHTML":"Symbol.prototype.constructor","number":"19.4.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.prototype.constructor"},{"type":"op","aoid":"SymbolDescriptiveString","refId":"sec-symboldescriptivestring","location":"","key":"SymbolDescriptiveString"},{"type":"clause","id":"sec-symboldescriptivestring","aoid":"SymbolDescriptiveString","title":"Runtime Semantics: SymbolDescriptiveString ( sym )","titleHTML":"Runtime Semantics: SymbolDescriptiveString ( <var>sym</var> )","number":"19.4.3.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: SymbolDescriptiveString ( sym )"},{"type":"clause","id":"sec-symbol.prototype.tostring","aoid":null,"title":"Symbol.prototype.toString ( )","titleHTML":"Symbol.prototype.toString ( )","number":"19.4.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.prototype.toString ( )"},{"type":"clause","id":"sec-symbol.prototype.valueof","aoid":null,"title":"Symbol.prototype.valueOf ( )","titleHTML":"Symbol.prototype.valueOf ( )","number":"19.4.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.prototype.valueOf ( )"},{"type":"clause","id":"sec-symbol.prototype-@@toprimitive","aoid":null,"title":"Symbol.prototype [ @@toPrimitive ] ( hint )","titleHTML":"Symbol.prototype [ @@toPrimitive ] ( <var>hint</var> )","number":"19.4.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.prototype [ @@toPrimitive ] ( hint )"},{"type":"clause","id":"sec-symbol.prototype-@@tostringtag","aoid":null,"title":"Symbol.prototype [ @@toStringTag ]","titleHTML":"Symbol.prototype [ @@toStringTag ]","number":"19.4.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-the-symbol-prototype-object","aoid":null,"title":"Properties of the Symbol Prototype Object","titleHTML":"Properties of the Symbol Prototype Object","number":"19.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Symbol Prototype Object"},{"type":"clause","id":"sec-properties-of-symbol-instances","aoid":null,"title":"Properties of Symbol Instances","titleHTML":"Properties of Symbol Instances","number":"19.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Symbol Instances"},{"type":"clause","id":"sec-symbol-objects","aoid":null,"title":"Symbol Objects","titleHTML":"Symbol Objects","number":"19.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Symbol Objects"},{"type":"term","term":"%Error%","refId":"sec-error-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Error%"},{"type":"clause","id":"sec-error-message","aoid":null,"title":"Error ( message )","titleHTML":"Error ( <var>message</var> )","number":"19.5.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Error ( message )"},{"type":"clause","id":"sec-error-constructor","aoid":null,"title":"The Error Constructor","titleHTML":"The Error Constructor","number":"19.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Error Constructor"},{"type":"clause","id":"sec-error.prototype","aoid":null,"title":"Error.prototype","titleHTML":"Error.prototype","number":"19.5.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Error.prototype"},{"type":"clause","id":"sec-properties-of-the-error-constructor","aoid":null,"title":"Properties of the Error Constructor","titleHTML":"Properties of the Error Constructor","number":"19.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Error Constructor"},{"type":"term","term":"%ErrorPrototype%","refId":"sec-properties-of-the-error-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ErrorPrototype%"},{"type":"clause","id":"sec-error.prototype.constructor","aoid":null,"title":"Error.prototype.constructor","titleHTML":"Error.prototype.constructor","number":"19.5.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Error.prototype.constructor"},{"type":"clause","id":"sec-error.prototype.message","aoid":null,"title":"Error.prototype.message","titleHTML":"Error.prototype.message","number":"19.5.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Error.prototype.message"},{"type":"clause","id":"sec-error.prototype.name","aoid":null,"title":"Error.prototype.name","titleHTML":"Error.prototype.name","number":"19.5.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Error.prototype.name"},{"type":"clause","id":"sec-error.prototype.tostring","aoid":null,"title":"Error.prototype.toString ( )","titleHTML":"Error.prototype.toString ( )","number":"19.5.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Error.prototype.toString ( )"},{"type":"clause","id":"sec-properties-of-the-error-prototype-object","aoid":null,"title":"Properties of the Error Prototype Object","titleHTML":"Properties of the Error Prototype Object","number":"19.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Error Prototype Object"},{"type":"clause","id":"sec-properties-of-error-instances","aoid":null,"title":"Properties of Error Instances","titleHTML":"Properties of Error Instances","number":"19.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Error Instances"},{"type":"clause","id":"sec-native-error-types-used-in-this-standard-evalerror","aoid":null,"title":"EvalError","titleHTML":"EvalError","number":"19.5.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"EvalError"},{"type":"clause","id":"sec-native-error-types-used-in-this-standard-rangeerror","aoid":null,"title":"RangeError","titleHTML":"RangeError","number":"19.5.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RangeError"},{"type":"clause","id":"sec-native-error-types-used-in-this-standard-referenceerror","aoid":null,"title":"ReferenceError","titleHTML":"ReferenceError","number":"19.5.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ReferenceError"},{"type":"clause","id":"sec-native-error-types-used-in-this-standard-syntaxerror","aoid":null,"title":"SyntaxError","titleHTML":"SyntaxError","number":"19.5.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SyntaxError"},{"type":"clause","id":"sec-native-error-types-used-in-this-standard-typeerror","aoid":null,"title":"TypeError","titleHTML":"TypeError","number":"19.5.5.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypeError"},{"type":"clause","id":"sec-native-error-types-used-in-this-standard-urierror","aoid":null,"title":"URIError","titleHTML":"URIError","number":"19.5.5.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"URIError"},{"type":"clause","id":"sec-native-error-types-used-in-this-standard","aoid":null,"title":"Native Error Types Used in This Standard","titleHTML":"Native Error Types Used in This Standard","number":"19.5.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Native Error Types Used in This Standard"},{"type":"clause","id":"sec-nativeerror","aoid":null,"title":"NativeError ( message )","titleHTML":"NativeError ( <var>message</var> )","number":"19.5.6.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NativeError ( message )"},{"type":"clause","id":"sec-nativeerror-constructors","aoid":null,"title":"NativeError Constructors","titleHTML":"<var>NativeError</var> Constructors","number":"19.5.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NativeError Constructors"},{"type":"clause","id":"sec-nativeerror.prototype","aoid":null,"title":"NativeError.prototype","titleHTML":"NativeError.prototype","number":"19.5.6.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NativeError.prototype"},{"type":"clause","id":"sec-properties-of-the-nativeerror-constructors","aoid":null,"title":"Properties of the NativeError Constructors","titleHTML":"Properties of the <var>NativeError</var> Constructors","number":"19.5.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the NativeError Constructors"},{"type":"clause","id":"sec-nativeerror.prototype.constructor","aoid":null,"title":"NativeError.prototype.constructor","titleHTML":"<var>NativeError</var>.prototype.constructor","number":"19.5.6.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NativeError.prototype.constructor"},{"type":"clause","id":"sec-nativeerror.prototype.message","aoid":null,"title":"NativeError.prototype.message","titleHTML":"<var>NativeError</var>.prototype.message","number":"19.5.6.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NativeError.prototype.message"},{"type":"clause","id":"sec-nativeerror.prototype.name","aoid":null,"title":"NativeError.prototype.name","titleHTML":"<var>NativeError</var>.prototype.name","number":"19.5.6.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NativeError.prototype.name"},{"type":"clause","id":"sec-properties-of-the-nativeerror-prototype-objects","aoid":null,"title":"Properties of the NativeError Prototype Objects","titleHTML":"Properties of the <var>NativeError</var> Prototype Objects","number":"19.5.6.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the NativeError Prototype Objects"},{"type":"clause","id":"sec-properties-of-nativeerror-instances","aoid":null,"title":"Properties of NativeError Instances","titleHTML":"Properties of <var>NativeError</var> Instances","number":"19.5.6.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of NativeError Instances"},{"type":"clause","id":"sec-nativeerror-object-structure","aoid":null,"title":"NativeError Object Structure","titleHTML":"<var>NativeError</var> Object Structure","number":"19.5.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NativeError Object Structure"},{"type":"clause","id":"sec-error-objects","aoid":null,"title":"Error Objects","titleHTML":"Error Objects","number":"19.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Error Objects"},{"type":"clause","id":"sec-fundamental-objects","aoid":null,"title":"Fundamental Objects","titleHTML":"Fundamental Objects","number":"19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Fundamental Objects"},{"type":"term","term":"%Number%","refId":"sec-number-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Number%"},{"type":"clause","id":"sec-number-constructor-number-value","aoid":null,"title":"Number ( value )","titleHTML":"Number ( <var>value</var> )","number":"20.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number ( value )"},{"type":"clause","id":"sec-number-constructor","aoid":null,"title":"The Number Constructor","titleHTML":"The Number Constructor","number":"20.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Number Constructor"},{"type":"clause","id":"sec-number.epsilon","aoid":null,"title":"Number.EPSILON","titleHTML":"Number.EPSILON","number":"20.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.EPSILON"},{"type":"clause","id":"sec-number.isfinite","aoid":null,"title":"Number.isFinite ( number )","titleHTML":"Number.isFinite ( <var>number</var> )","number":"20.1.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.isFinite ( number )"},{"type":"clause","id":"sec-number.isinteger","aoid":null,"title":"Number.isInteger ( number )","titleHTML":"Number.isInteger ( <var>number</var> )","number":"20.1.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.isInteger ( number )"},{"type":"clause","id":"sec-number.isnan","aoid":null,"title":"Number.isNaN ( number )","titleHTML":"Number.isNaN ( <var>number</var> )","number":"20.1.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.isNaN ( number )"},{"type":"clause","id":"sec-number.issafeinteger","aoid":null,"title":"Number.isSafeInteger ( number )","titleHTML":"Number.isSafeInteger ( <var>number</var> )","number":"20.1.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.isSafeInteger ( number )"},{"type":"clause","id":"sec-number.max_safe_integer","aoid":null,"title":"Number.MAX_SAFE_INTEGER","titleHTML":"Number.MAX_SAFE_INTEGER","number":"20.1.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.MAX_SAFE_INTEGER"},{"type":"clause","id":"sec-number.max_value","aoid":null,"title":"Number.MAX_VALUE","titleHTML":"Number.MAX_VALUE","number":"20.1.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.MAX_VALUE"},{"type":"clause","id":"sec-number.min_safe_integer","aoid":null,"title":"Number.MIN_SAFE_INTEGER","titleHTML":"Number.MIN_SAFE_INTEGER","number":"20.1.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.MIN_SAFE_INTEGER"},{"type":"clause","id":"sec-number.min_value","aoid":null,"title":"Number.MIN_VALUE","titleHTML":"Number.MIN_VALUE","number":"20.1.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.MIN_VALUE"},{"type":"clause","id":"sec-number.nan","aoid":null,"title":"Number.NaN","titleHTML":"Number.NaN","number":"20.1.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.NaN"},{"type":"clause","id":"sec-number.negative_infinity","aoid":null,"title":"Number.NEGATIVE_INFINITY","titleHTML":"Number.NEGATIVE_INFINITY","number":"20.1.2.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.NEGATIVE_INFINITY"},{"type":"clause","id":"sec-number.parsefloat","aoid":null,"title":"Number.parseFloat ( string )","titleHTML":"Number.parseFloat ( <var>string</var> )","number":"20.1.2.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.parseFloat ( string )"},{"type":"clause","id":"sec-number.parseint","aoid":null,"title":"Number.parseInt ( string, radix )","titleHTML":"Number.parseInt ( <var>string</var>, <var>radix</var> )","number":"20.1.2.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.parseInt ( string, radix )"},{"type":"clause","id":"sec-number.positive_infinity","aoid":null,"title":"Number.POSITIVE_INFINITY","titleHTML":"Number.POSITIVE_INFINITY","number":"20.1.2.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.POSITIVE_INFINITY"},{"type":"clause","id":"sec-number.prototype","aoid":null,"title":"Number.prototype","titleHTML":"Number.prototype","number":"20.1.2.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.prototype"},{"type":"clause","id":"sec-properties-of-the-number-constructor","aoid":null,"title":"Properties of the Number Constructor","titleHTML":"Properties of the Number Constructor","number":"20.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Number Constructor"},{"type":"term","term":"%NumberPrototype%","refId":"sec-properties-of-the-number-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%NumberPrototype%"},{"type":"clause","id":"sec-number.prototype.constructor","aoid":null,"title":"Number.prototype.constructor","titleHTML":"Number.prototype.constructor","number":"20.1.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.prototype.constructor"},{"type":"clause","id":"sec-number.prototype.toexponential","aoid":null,"title":"Number.prototype.toExponential ( fractionDigits )","titleHTML":"Number.prototype.toExponential ( <var>fractionDigits</var> )","number":"20.1.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.prototype.toExponential ( fractionDigits )"},{"type":"clause","id":"sec-number.prototype.tofixed","aoid":null,"title":"Number.prototype.toFixed ( fractionDigits )","titleHTML":"Number.prototype.toFixed ( <var>fractionDigits</var> )","number":"20.1.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.prototype.toFixed ( fractionDigits )"},{"type":"clause","id":"sec-number.prototype.tolocalestring","aoid":null,"title":"Number.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )","titleHTML":"Number.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )","number":"20.1.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )"},{"type":"clause","id":"sec-number.prototype.toprecision","aoid":null,"title":"Number.prototype.toPrecision ( precision )","titleHTML":"Number.prototype.toPrecision ( <var>precision</var> )","number":"20.1.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.prototype.toPrecision ( precision )"},{"type":"clause","id":"sec-number.prototype.tostring","aoid":null,"title":"Number.prototype.toString ( [ radix ] )","titleHTML":"Number.prototype.toString ( [ <var>radix</var> ] )","number":"20.1.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.prototype.toString ( [ radix ] )"},{"type":"clause","id":"sec-number.prototype.valueof","aoid":null,"title":"Number.prototype.valueOf ( )","titleHTML":"Number.prototype.valueOf ( )","number":"20.1.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number.prototype.valueOf ( )"},{"type":"clause","id":"sec-properties-of-the-number-prototype-object","aoid":null,"title":"Properties of the Number Prototype Object","titleHTML":"Properties of the Number Prototype Object","number":"20.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Number Prototype Object"},{"type":"clause","id":"sec-properties-of-number-instances","aoid":null,"title":"Properties of Number Instances","titleHTML":"Properties of Number Instances","number":"20.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Number Instances"},{"type":"clause","id":"sec-number-objects","aoid":null,"title":"Number Objects","titleHTML":"Number Objects","number":"20.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number Objects"},{"type":"term","term":"%Math%","refId":"sec-math-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Math%"},{"type":"clause","id":"sec-math.e","aoid":null,"title":"Math.E","titleHTML":"Math.E","number":"20.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.E"},{"type":"clause","id":"sec-math.ln10","aoid":null,"title":"Math.LN10","titleHTML":"Math.LN10","number":"20.2.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.LN10"},{"type":"clause","id":"sec-math.ln2","aoid":null,"title":"Math.LN2","titleHTML":"Math.LN2","number":"20.2.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.LN2"},{"type":"clause","id":"sec-math.log10e","aoid":null,"title":"Math.LOG10E","titleHTML":"Math.LOG10E","number":"20.2.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.LOG10E"},{"type":"clause","id":"sec-math.log2e","aoid":null,"title":"Math.LOG2E","titleHTML":"Math.LOG2E","number":"20.2.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.LOG2E"},{"type":"clause","id":"sec-math.pi","aoid":null,"title":"Math.PI","titleHTML":"Math.PI","number":"20.2.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.PI"},{"type":"clause","id":"sec-math.sqrt1_2","aoid":null,"title":"Math.SQRT1_2","titleHTML":"Math.SQRT1_2","number":"20.2.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.SQRT1_2"},{"type":"clause","id":"sec-math.sqrt2","aoid":null,"title":"Math.SQRT2","titleHTML":"Math.SQRT2","number":"20.2.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.SQRT2"},{"type":"clause","id":"sec-math-@@tostringtag","aoid":null,"title":"Math [ @@toStringTag ]","titleHTML":"Math [ @@toStringTag ]","number":"20.2.1.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math [ @@toStringTag ]"},{"type":"clause","id":"sec-value-properties-of-the-math-object","aoid":null,"title":"Value Properties of the Math Object","titleHTML":"Value Properties of the Math Object","number":"20.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Value Properties of the Math Object"},{"type":"clause","id":"sec-math.abs","aoid":null,"title":"Math.abs ( x )","titleHTML":"Math.abs ( <var>x</var> )","number":"20.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.abs ( x )"},{"type":"clause","id":"sec-math.acos","aoid":null,"title":"Math.acos ( x )","titleHTML":"Math.acos ( <var>x</var> )","number":"20.2.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.acos ( x )"},{"type":"clause","id":"sec-math.acosh","aoid":null,"title":"Math.acosh ( x )","titleHTML":"Math.acosh ( <var>x</var> )","number":"20.2.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.acosh ( x )"},{"type":"clause","id":"sec-math.asin","aoid":null,"title":"Math.asin ( x )","titleHTML":"Math.asin ( <var>x</var> )","number":"20.2.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.asin ( x )"},{"type":"clause","id":"sec-math.asinh","aoid":null,"title":"Math.asinh ( x )","titleHTML":"Math.asinh ( <var>x</var> )","number":"20.2.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.asinh ( x )"},{"type":"clause","id":"sec-math.atan","aoid":null,"title":"Math.atan ( x )","titleHTML":"Math.atan ( <var>x</var> )","number":"20.2.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.atan ( x )"},{"type":"clause","id":"sec-math.atanh","aoid":null,"title":"Math.atanh ( x )","titleHTML":"Math.atanh ( <var>x</var> )","number":"20.2.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.atanh ( x )"},{"type":"clause","id":"sec-math.atan2","aoid":null,"title":"Math.atan2 ( y, x )","titleHTML":"Math.atan2 ( <var>y</var>, <var>x</var> )","number":"20.2.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.atan2 ( y, x )"},{"type":"clause","id":"sec-math.cbrt","aoid":null,"title":"Math.cbrt ( x )","titleHTML":"Math.cbrt ( <var>x</var> )","number":"20.2.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.cbrt ( x )"},{"type":"clause","id":"sec-math.ceil","aoid":null,"title":"Math.ceil ( x )","titleHTML":"Math.ceil ( <var>x</var> )","number":"20.2.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.ceil ( x )"},{"type":"clause","id":"sec-math.clz32","aoid":null,"title":"Math.clz32 ( x )","titleHTML":"Math.clz32 ( <var>x</var> )","number":"20.2.2.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.clz32 ( x )"},{"type":"clause","id":"sec-math.cos","aoid":null,"title":"Math.cos ( x )","titleHTML":"Math.cos ( <var>x</var> )","number":"20.2.2.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.cos ( x )"},{"type":"clause","id":"sec-math.cosh","aoid":null,"title":"Math.cosh ( x )","titleHTML":"Math.cosh ( <var>x</var> )","number":"20.2.2.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.cosh ( x )"},{"type":"clause","id":"sec-math.exp","aoid":null,"title":"Math.exp ( x )","titleHTML":"Math.exp ( <var>x</var> )","number":"20.2.2.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.exp ( x )"},{"type":"clause","id":"sec-math.expm1","aoid":null,"title":"Math.expm1 ( x )","titleHTML":"Math.expm1 ( <var>x</var> )","number":"20.2.2.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.expm1 ( x )"},{"type":"clause","id":"sec-math.floor","aoid":null,"title":"Math.floor ( x )","titleHTML":"Math.floor ( <var>x</var> )","number":"20.2.2.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.floor ( x )"},{"type":"clause","id":"sec-math.fround","aoid":null,"title":"Math.fround ( x )","titleHTML":"Math.fround ( <var>x</var> )","number":"20.2.2.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.fround ( x )"},{"type":"clause","id":"sec-math.hypot","aoid":null,"title":"Math.hypot ( value1, value2, ...values )","titleHTML":"Math.hypot ( <var>value1</var>, <var>value2</var>, ...<var>values</var> )","number":"20.2.2.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.hypot ( value1, value2, ...values )"},{"type":"clause","id":"sec-math.imul","aoid":null,"title":"Math.imul ( x, y )","titleHTML":"Math.imul ( <var>x</var>, <var>y</var> )","number":"20.2.2.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.imul ( x, y )"},{"type":"clause","id":"sec-math.log","aoid":null,"title":"Math.log ( x )","titleHTML":"Math.log ( <var>x</var> )","number":"20.2.2.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.log ( x )"},{"type":"clause","id":"sec-math.log1p","aoid":null,"title":"Math.log1p ( x )","titleHTML":"Math.log1p ( <var>x</var> )","number":"20.2.2.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.log1p ( x )"},{"type":"clause","id":"sec-math.log10","aoid":null,"title":"Math.log10 ( x )","titleHTML":"Math.log10 ( <var>x</var> )","number":"20.2.2.22","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.log10 ( x )"},{"type":"clause","id":"sec-math.log2","aoid":null,"title":"Math.log2 ( x )","titleHTML":"Math.log2 ( <var>x</var> )","number":"20.2.2.23","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.log2 ( x )"},{"type":"clause","id":"sec-math.max","aoid":null,"title":"Math.max ( value1, value2, ...values )","titleHTML":"Math.max ( <var>value1</var>, <var>value2</var>, ...<var>values</var> )","number":"20.2.2.24","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.max ( value1, value2, ...values )"},{"type":"clause","id":"sec-math.min","aoid":null,"title":"Math.min ( value1, value2, ...values )","titleHTML":"Math.min ( <var>value1</var>, <var>value2</var>, ...<var>values</var> )","number":"20.2.2.25","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.min ( value1, value2, ...values )"},{"type":"clause","id":"sec-math.pow","aoid":null,"title":"Math.pow ( base, exponent )","titleHTML":"Math.pow ( <var>base</var>, <var>exponent</var> )","number":"20.2.2.26","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.pow ( base, exponent )"},{"type":"clause","id":"sec-math.random","aoid":null,"title":"Math.random ( )","titleHTML":"Math.random ( )","number":"20.2.2.27","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.random ( )"},{"type":"clause","id":"sec-math.round","aoid":null,"title":"Math.round ( x )","titleHTML":"Math.round ( <var>x</var> )","number":"20.2.2.28","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.round ( x )"},{"type":"clause","id":"sec-math.sign","aoid":null,"title":"Math.sign (x)","titleHTML":"Math.sign (<var>x</var>)","number":"20.2.2.29","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.sign (x)"},{"type":"clause","id":"sec-math.sin","aoid":null,"title":"Math.sin ( x )","titleHTML":"Math.sin ( <var>x</var> )","number":"20.2.2.30","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.sin ( x )"},{"type":"clause","id":"sec-math.sinh","aoid":null,"title":"Math.sinh ( x )","titleHTML":"Math.sinh ( <var>x</var> )","number":"20.2.2.31","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.sinh ( x )"},{"type":"clause","id":"sec-math.sqrt","aoid":null,"title":"Math.sqrt ( x )","titleHTML":"Math.sqrt ( <var>x</var> )","number":"20.2.2.32","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.sqrt ( x )"},{"type":"clause","id":"sec-math.tan","aoid":null,"title":"Math.tan ( x )","titleHTML":"Math.tan ( <var>x</var> )","number":"20.2.2.33","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.tan ( x )"},{"type":"clause","id":"sec-math.tanh","aoid":null,"title":"Math.tanh ( x )","titleHTML":"Math.tanh ( <var>x</var> )","number":"20.2.2.34","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.tanh ( x )"},{"type":"clause","id":"sec-math.trunc","aoid":null,"title":"Math.trunc ( x )","titleHTML":"Math.trunc ( <var>x</var> )","number":"20.2.2.35","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Math.trunc ( x )"},{"type":"clause","id":"sec-function-properties-of-the-math-object","aoid":null,"title":"Function Properties of the Math Object","titleHTML":"Function Properties of the Math Object","number":"20.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Function Properties of the Math Object"},{"type":"clause","id":"sec-math-object","aoid":null,"title":"The Math Object","titleHTML":"The Math Object","number":"20.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Math Object"},{"type":"term","term":"time value","refId":"sec-time-values-and-time-range","namespace":"https://tc39.github.io/ecma262/","location":"","key":"time value"},{"type":"clause","id":"sec-time-values-and-time-range","aoid":null,"title":"Time Values and Time Range","titleHTML":"Time Values and Time Range","number":"20.3.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Time Values and Time Range"},{"type":"op","aoid":"Day","refId":"sec-day-number-and-time-within-day","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Day"},{"type":"op","aoid":"msPerDay","refId":"sec-day-number-and-time-within-day","namespace":"https://tc39.github.io/ecma262/","location":"","key":"msPerDay"},{"type":"op","aoid":"TimeWithinDay","refId":"sec-day-number-and-time-within-day","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TimeWithinDay"},{"type":"clause","id":"sec-day-number-and-time-within-day","aoid":null,"title":"Day Number and Time within Day","titleHTML":"Day Number and Time within Day","number":"20.3.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Day Number and Time within Day"},{"type":"op","aoid":"DaysInYear","refId":"sec-year-number","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DaysInYear"},{"type":"op","aoid":"DayFromYear","refId":"sec-year-number","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DayFromYear"},{"type":"op","aoid":"TimeFromYear","refId":"sec-year-number","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TimeFromYear"},{"type":"op","aoid":"YearFromTime","refId":"sec-year-number","namespace":"https://tc39.github.io/ecma262/","location":"","key":"YearFromTime"},{"type":"op","aoid":"InLeapYear","refId":"sec-year-number","namespace":"https://tc39.github.io/ecma262/","location":"","key":"InLeapYear"},{"type":"clause","id":"sec-year-number","aoid":null,"title":"Year Number","titleHTML":"Year Number","number":"20.3.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Year Number"},{"type":"op","aoid":"MonthFromTime","refId":"sec-month-number","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MonthFromTime"},{"type":"op","aoid":"DayWithinYear","refId":"sec-month-number","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DayWithinYear"},{"type":"clause","id":"sec-month-number","aoid":null,"title":"Month Number","titleHTML":"Month Number","number":"20.3.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Month Number"},{"type":"op","aoid":"DateFromTime","refId":"sec-date-number","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DateFromTime"},{"type":"clause","id":"sec-date-number","aoid":null,"title":"Date Number","titleHTML":"Date Number","number":"20.3.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date Number"},{"type":"op","aoid":"WeekDay","refId":"sec-week-day","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeekDay"},{"type":"clause","id":"sec-week-day","aoid":null,"title":"Week Day","titleHTML":"Week Day","number":"20.3.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Week Day"},{"type":"term","term":"LocalTZA","refId":"sec-local-time-zone-adjustment","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LocalTZA"},{"type":"clause","id":"sec-local-time-zone-adjustment","aoid":null,"title":"Local Time Zone Adjustment","titleHTML":"Local Time Zone Adjustment","number":"20.3.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Local Time Zone Adjustment"},{"type":"clause","id":"sec-daylight-saving-time-adjustment","aoid":null,"title":"Daylight Saving Time Adjustment","titleHTML":"Daylight Saving Time Adjustment","number":"20.3.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Daylight Saving Time Adjustment"},{"type":"op","aoid":"LocalTime","refId":"sec-localtime","location":"","key":"LocalTime"},{"type":"clause","id":"sec-localtime","aoid":"LocalTime","title":"LocalTime ( t )","titleHTML":"LocalTime ( <var>t</var> )","number":"20.3.1.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LocalTime ( t )"},{"type":"op","aoid":"UTC","refId":"sec-utc-t","location":"","key":"UTC"},{"type":"clause","id":"sec-utc-t","aoid":"UTC","title":"UTC ( t )","titleHTML":"UTC ( <var>t</var> )","number":"20.3.1.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"UTC ( t )"},{"type":"op","aoid":"HourFromTime","refId":"sec-hours-minutes-second-and-milliseconds","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HourFromTime"},{"type":"op","aoid":"MinFromTime","refId":"sec-hours-minutes-second-and-milliseconds","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MinFromTime"},{"type":"op","aoid":"SecFromTime","refId":"sec-hours-minutes-second-and-milliseconds","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SecFromTime"},{"type":"op","aoid":"msFromTime","refId":"sec-hours-minutes-second-and-milliseconds","namespace":"https://tc39.github.io/ecma262/","location":"","key":"msFromTime"},{"type":"op","aoid":"HoursPerDay","refId":"sec-hours-minutes-second-and-milliseconds","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HoursPerDay"},{"type":"op","aoid":"MinutesPerHour","refId":"sec-hours-minutes-second-and-milliseconds","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MinutesPerHour"},{"type":"op","aoid":"SecondsPerMinute","refId":"sec-hours-minutes-second-and-milliseconds","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SecondsPerMinute"},{"type":"op","aoid":"msPerSecond","refId":"sec-hours-minutes-second-and-milliseconds","namespace":"https://tc39.github.io/ecma262/","location":"","key":"msPerSecond"},{"type":"op","aoid":"msPerMinute","refId":"sec-hours-minutes-second-and-milliseconds","namespace":"https://tc39.github.io/ecma262/","location":"","key":"msPerMinute"},{"type":"op","aoid":"msPerHour","refId":"sec-hours-minutes-second-and-milliseconds","namespace":"https://tc39.github.io/ecma262/","location":"","key":"msPerHour"},{"type":"clause","id":"sec-hours-minutes-second-and-milliseconds","aoid":null,"title":"Hours, Minutes, Second, and Milliseconds","titleHTML":"Hours, Minutes, Second, and Milliseconds","number":"20.3.1.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Hours, Minutes, Second, and Milliseconds"},{"type":"op","aoid":"MakeTime","refId":"sec-maketime","location":"","key":"MakeTime"},{"type":"clause","id":"sec-maketime","aoid":"MakeTime","title":"MakeTime (hour, min, sec, ms)","titleHTML":"MakeTime (<var>hour</var>, <var>min</var>, <var>sec</var>, <var>ms</var>)","number":"20.3.1.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MakeTime (hour, min, sec, ms)"},{"type":"op","aoid":"MakeDay","refId":"sec-makeday","location":"","key":"MakeDay"},{"type":"clause","id":"sec-makeday","aoid":"MakeDay","title":"MakeDay (year, month, date)","titleHTML":"MakeDay (<var>year</var>, <var>month</var>, <var>date</var>)","number":"20.3.1.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MakeDay (year, month, date)"},{"type":"op","aoid":"MakeDate","refId":"sec-makedate","location":"","key":"MakeDate"},{"type":"clause","id":"sec-makedate","aoid":"MakeDate","title":"MakeDate (day, time)","titleHTML":"MakeDate (<var>day</var>, <var>time</var>)","number":"20.3.1.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"MakeDate (day, time)"},{"type":"op","aoid":"TimeClip","refId":"sec-timeclip","location":"","key":"TimeClip"},{"type":"clause","id":"sec-timeclip","aoid":"TimeClip","title":"TimeClip (time)","titleHTML":"TimeClip (<var>time</var>)","number":"20.3.1.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TimeClip (time)"},{"type":"clause","id":"sec-extended-years","aoid":null,"title":"Extended Years","titleHTML":"Extended Years","number":"20.3.1.16.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Extended Years"},{"type":"clause","id":"sec-date-time-string-format","aoid":null,"title":"Date Time String Format","titleHTML":"Date Time String Format","number":"20.3.1.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date Time String Format"},{"type":"clause","id":"sec-overview-of-date-objects-and-definitions-of-abstract-operations","aoid":null,"title":"Overview of Date Objects and Definitions of Abstract Operations","titleHTML":"Overview of Date Objects and Definitions of Abstract Operations","number":"20.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Overview of Date Objects and Definitions of Abstract Operations"},{"type":"term","term":"%Date%","refId":"sec-date-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Date%"},{"type":"clause","id":"sec-date-year-month-date-hours-minutes-seconds-ms","aoid":null,"title":"Date ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )","titleHTML":"Date ( <var>year</var>, <var>month</var> [ , <var>date</var> [ , <var>hours</var> [ , <var>minutes</var> [ , <var>seconds</var> [ , <var>ms</var> ] ] ] ] ] )","number":"20.3.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )"},{"type":"clause","id":"sec-date-value","aoid":null,"title":"Date ( value )","titleHTML":"Date ( <var>value</var> )","number":"20.3.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date ( value )"},{"type":"clause","id":"sec-date-constructor-date","aoid":null,"title":"Date ( )","titleHTML":"Date ( )","number":"20.3.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date ( )"},{"type":"clause","id":"sec-date-constructor","aoid":null,"title":"The Date Constructor","titleHTML":"The Date Constructor","number":"20.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Date Constructor"},{"type":"clause","id":"sec-date.now","aoid":null,"title":"Date.now ( )","titleHTML":"Date.now ( )","number":"20.3.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.now ( )"},{"type":"clause","id":"sec-date.parse","aoid":null,"title":"Date.parse ( string )","titleHTML":"Date.parse ( <var>string</var> )","number":"20.3.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.parse ( string )"},{"type":"clause","id":"sec-date.prototype","aoid":null,"title":"Date.prototype","titleHTML":"Date.prototype","number":"20.3.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype"},{"type":"clause","id":"sec-date.utc","aoid":null,"title":"Date.UTC ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )","titleHTML":"Date.UTC ( <var>year</var>, <var>month</var> [ , <var>date</var> [ , <var>hours</var> [ , <var>minutes</var> [ , <var>seconds</var> [ , <var>ms</var> ] ] ] ] ] )","number":"20.3.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.UTC ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )"},{"type":"clause","id":"sec-properties-of-the-date-constructor","aoid":null,"title":"Properties of the Date Constructor","titleHTML":"Properties of the Date Constructor","number":"20.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Date Constructor"},{"type":"term","term":"%DatePrototype%","refId":"sec-properties-of-the-date-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%DatePrototype%"},{"type":"term","term":"this time value","refId":"sec-properties-of-the-date-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"this time value"},{"type":"clause","id":"sec-date.prototype.constructor","aoid":null,"title":"Date.prototype.constructor","titleHTML":"Date.prototype.constructor","number":"20.3.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.constructor"},{"type":"clause","id":"sec-date.prototype.getdate","aoid":null,"title":"Date.prototype.getDate ( )","titleHTML":"Date.prototype.getDate ( )","number":"20.3.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getDate ( )"},{"type":"clause","id":"sec-date.prototype.getday","aoid":null,"title":"Date.prototype.getDay ( )","titleHTML":"Date.prototype.getDay ( )","number":"20.3.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getDay ( )"},{"type":"clause","id":"sec-date.prototype.getfullyear","aoid":null,"title":"Date.prototype.getFullYear ( )","titleHTML":"Date.prototype.getFullYear ( )","number":"20.3.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getFullYear ( )"},{"type":"clause","id":"sec-date.prototype.gethours","aoid":null,"title":"Date.prototype.getHours ( )","titleHTML":"Date.prototype.getHours ( )","number":"20.3.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getHours ( )"},{"type":"clause","id":"sec-date.prototype.getmilliseconds","aoid":null,"title":"Date.prototype.getMilliseconds ( )","titleHTML":"Date.prototype.getMilliseconds ( )","number":"20.3.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getMilliseconds ( )"},{"type":"clause","id":"sec-date.prototype.getminutes","aoid":null,"title":"Date.prototype.getMinutes ( )","titleHTML":"Date.prototype.getMinutes ( )","number":"20.3.4.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getMinutes ( )"},{"type":"clause","id":"sec-date.prototype.getmonth","aoid":null,"title":"Date.prototype.getMonth ( )","titleHTML":"Date.prototype.getMonth ( )","number":"20.3.4.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getMonth ( )"},{"type":"clause","id":"sec-date.prototype.getseconds","aoid":null,"title":"Date.prototype.getSeconds ( )","titleHTML":"Date.prototype.getSeconds ( )","number":"20.3.4.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getSeconds ( )"},{"type":"clause","id":"sec-date.prototype.gettime","aoid":null,"title":"Date.prototype.getTime ( )","titleHTML":"Date.prototype.getTime ( )","number":"20.3.4.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getTime ( )"},{"type":"clause","id":"sec-date.prototype.gettimezoneoffset","aoid":null,"title":"Date.prototype.getTimezoneOffset ( )","titleHTML":"Date.prototype.getTimezoneOffset ( )","number":"20.3.4.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getTimezoneOffset ( )"},{"type":"clause","id":"sec-date.prototype.getutcdate","aoid":null,"title":"Date.prototype.getUTCDate ( )","titleHTML":"Date.prototype.getUTCDate ( )","number":"20.3.4.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getUTCDate ( )"},{"type":"clause","id":"sec-date.prototype.getutcday","aoid":null,"title":"Date.prototype.getUTCDay ( )","titleHTML":"Date.prototype.getUTCDay ( )","number":"20.3.4.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getUTCDay ( )"},{"type":"clause","id":"sec-date.prototype.getutcfullyear","aoid":null,"title":"Date.prototype.getUTCFullYear ( )","titleHTML":"Date.prototype.getUTCFullYear ( )","number":"20.3.4.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getUTCFullYear ( )"},{"type":"clause","id":"sec-date.prototype.getutchours","aoid":null,"title":"Date.prototype.getUTCHours ( )","titleHTML":"Date.prototype.getUTCHours ( )","number":"20.3.4.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getUTCHours ( )"},{"type":"clause","id":"sec-date.prototype.getutcmilliseconds","aoid":null,"title":"Date.prototype.getUTCMilliseconds ( )","titleHTML":"Date.prototype.getUTCMilliseconds ( )","number":"20.3.4.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getUTCMilliseconds ( )"},{"type":"clause","id":"sec-date.prototype.getutcminutes","aoid":null,"title":"Date.prototype.getUTCMinutes ( )","titleHTML":"Date.prototype.getUTCMinutes ( )","number":"20.3.4.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getUTCMinutes ( )"},{"type":"clause","id":"sec-date.prototype.getutcmonth","aoid":null,"title":"Date.prototype.getUTCMonth ( )","titleHTML":"Date.prototype.getUTCMonth ( )","number":"20.3.4.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getUTCMonth ( )"},{"type":"clause","id":"sec-date.prototype.getutcseconds","aoid":null,"title":"Date.prototype.getUTCSeconds ( )","titleHTML":"Date.prototype.getUTCSeconds ( )","number":"20.3.4.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getUTCSeconds ( )"},{"type":"clause","id":"sec-date.prototype.setdate","aoid":null,"title":"Date.prototype.setDate ( date )","titleHTML":"Date.prototype.setDate ( <var>date</var> )","number":"20.3.4.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setDate ( date )"},{"type":"clause","id":"sec-date.prototype.setfullyear","aoid":null,"title":"Date.prototype.setFullYear ( year [ , month [ , date ] ] )","titleHTML":"Date.prototype.setFullYear ( <var>year</var> [ , <var>month</var> [ , <var>date</var> ] ] )","number":"20.3.4.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setFullYear ( year [ , month [ , date ] ] )"},{"type":"clause","id":"sec-date.prototype.sethours","aoid":null,"title":"Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )","titleHTML":"Date.prototype.setHours ( <var>hour</var> [ , <var>min</var> [ , <var>sec</var> [ , <var>ms</var> ] ] ] )","number":"20.3.4.22","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )"},{"type":"clause","id":"sec-date.prototype.setmilliseconds","aoid":null,"title":"Date.prototype.setMilliseconds ( ms )","titleHTML":"Date.prototype.setMilliseconds ( <var>ms</var> )","number":"20.3.4.23","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setMilliseconds ( ms )"},{"type":"clause","id":"sec-date.prototype.setminutes","aoid":null,"title":"Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )","titleHTML":"Date.prototype.setMinutes ( <var>min</var> [ , <var>sec</var> [ , <var>ms</var> ] ] )","number":"20.3.4.24","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )"},{"type":"clause","id":"sec-date.prototype.setmonth","aoid":null,"title":"Date.prototype.setMonth ( month [ , date ] )","titleHTML":"Date.prototype.setMonth ( <var>month</var> [ , <var>date</var> ] )","number":"20.3.4.25","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setMonth ( month [ , date ] )"},{"type":"clause","id":"sec-date.prototype.setseconds","aoid":null,"title":"Date.prototype.setSeconds ( sec [ , ms ] )","titleHTML":"Date.prototype.setSeconds ( <var>sec</var> [ , <var>ms</var> ] )","number":"20.3.4.26","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setSeconds ( sec [ , ms ] )"},{"type":"clause","id":"sec-date.prototype.settime","aoid":null,"title":"Date.prototype.setTime ( time )","titleHTML":"Date.prototype.setTime ( <var>time</var> )","number":"20.3.4.27","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setTime ( time )"},{"type":"clause","id":"sec-date.prototype.setutcdate","aoid":null,"title":"Date.prototype.setUTCDate ( date )","titleHTML":"Date.prototype.setUTCDate ( <var>date</var> )","number":"20.3.4.28","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setUTCDate ( date )"},{"type":"clause","id":"sec-date.prototype.setutcfullyear","aoid":null,"title":"Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )","titleHTML":"Date.prototype.setUTCFullYear ( <var>year</var> [ , <var>month</var> [ , <var>date</var> ] ] )","number":"20.3.4.29","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )"},{"type":"clause","id":"sec-date.prototype.setutchours","aoid":null,"title":"Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )","titleHTML":"Date.prototype.setUTCHours ( <var>hour</var> [ , <var>min</var> [ , <var>sec</var> [ , <var>ms</var> ] ] ] )","number":"20.3.4.30","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )"},{"type":"clause","id":"sec-date.prototype.setutcmilliseconds","aoid":null,"title":"Date.prototype.setUTCMilliseconds ( ms )","titleHTML":"Date.prototype.setUTCMilliseconds ( <var>ms</var> )","number":"20.3.4.31","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setUTCMilliseconds ( ms )"},{"type":"clause","id":"sec-date.prototype.setutcminutes","aoid":null,"title":"Date.prototype.setUTCMinutes ( min [ , sec [ , ms ] ] )","titleHTML":"Date.prototype.setUTCMinutes ( <var>min</var> [ , <var>sec</var> [ , <var>ms</var> ] ] )","number":"20.3.4.32","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setUTCMinutes ( min [ , sec [ , ms ] ] )"},{"type":"clause","id":"sec-date.prototype.setutcmonth","aoid":null,"title":"Date.prototype.setUTCMonth ( month [ , date ] )","titleHTML":"Date.prototype.setUTCMonth ( <var>month</var> [ , <var>date</var> ] )","number":"20.3.4.33","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setUTCMonth ( month [ , date ] )"},{"type":"clause","id":"sec-date.prototype.setutcseconds","aoid":null,"title":"Date.prototype.setUTCSeconds ( sec [ , ms ] )","titleHTML":"Date.prototype.setUTCSeconds ( <var>sec</var> [ , <var>ms</var> ] )","number":"20.3.4.34","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setUTCSeconds ( sec [ , ms ] )"},{"type":"clause","id":"sec-date.prototype.todatestring","aoid":null,"title":"Date.prototype.toDateString ( )","titleHTML":"Date.prototype.toDateString ( )","number":"20.3.4.35","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.toDateString ( )"},{"type":"clause","id":"sec-date.prototype.toisostring","aoid":null,"title":"Date.prototype.toISOString ( )","titleHTML":"Date.prototype.toISOString ( )","number":"20.3.4.36","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.toISOString ( )"},{"type":"clause","id":"sec-date.prototype.tojson","aoid":null,"title":"Date.prototype.toJSON ( key )","titleHTML":"Date.prototype.toJSON ( <var>key</var> )","number":"20.3.4.37","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.toJSON ( key )"},{"type":"clause","id":"sec-date.prototype.tolocaledatestring","aoid":null,"title":"Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )","titleHTML":"Date.prototype.toLocaleDateString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )","number":"20.3.4.38","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )"},{"type":"clause","id":"sec-date.prototype.tolocalestring","aoid":null,"title":"Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )","titleHTML":"Date.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )","number":"20.3.4.39","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )"},{"type":"clause","id":"sec-date.prototype.tolocaletimestring","aoid":null,"title":"Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )","titleHTML":"Date.prototype.toLocaleTimeString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )","number":"20.3.4.40","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )"},{"type":"op","aoid":"ToDateString","refId":"sec-todatestring","location":"","key":"ToDateString"},{"type":"clause","id":"sec-todatestring","aoid":"ToDateString","title":"Runtime Semantics: ToDateString(tv)","titleHTML":"Runtime Semantics: ToDateString(<var>tv</var>)","number":"20.3.4.41.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ToDateString(tv)"},{"type":"clause","id":"sec-date.prototype.tostring","aoid":null,"title":"Date.prototype.toString ( )","titleHTML":"Date.prototype.toString ( )","number":"20.3.4.41","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.toString ( )"},{"type":"clause","id":"sec-date.prototype.totimestring","aoid":null,"title":"Date.prototype.toTimeString ( )","titleHTML":"Date.prototype.toTimeString ( )","number":"20.3.4.42","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.toTimeString ( )"},{"type":"clause","id":"sec-date.prototype.toutcstring","aoid":null,"title":"Date.prototype.toUTCString ( )","titleHTML":"Date.prototype.toUTCString ( )","number":"20.3.4.43","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.toUTCString ( )"},{"type":"clause","id":"sec-date.prototype.valueof","aoid":null,"title":"Date.prototype.valueOf ( )","titleHTML":"Date.prototype.valueOf ( )","number":"20.3.4.44","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.valueOf ( )"},{"type":"clause","id":"sec-date.prototype-@@toprimitive","aoid":null,"title":"Date.prototype [ @@toPrimitive ] ( hint )","titleHTML":"Date.prototype [ @@toPrimitive ] ( <var>hint</var> )","number":"20.3.4.45","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype [ @@toPrimitive ] ( hint )"},{"type":"op","aoid":"thisTimeValue","refId":"sec-properties-of-the-date-prototype-object","location":"","key":"thisTimeValue"},{"type":"clause","id":"sec-properties-of-the-date-prototype-object","aoid":"thisTimeValue","title":"Properties of the Date Prototype Object","titleHTML":"Properties of the Date Prototype Object","number":"20.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Date Prototype Object"},{"type":"clause","id":"sec-properties-of-date-instances","aoid":null,"title":"Properties of Date Instances","titleHTML":"Properties of Date Instances","number":"20.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Date Instances"},{"type":"clause","id":"sec-date-objects","aoid":null,"title":"Date Objects","titleHTML":"Date Objects","number":"20.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date Objects"},{"type":"clause","id":"sec-numbers-and-dates","aoid":null,"title":"Numbers and Dates","titleHTML":"Numbers and Dates","number":"20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Numbers and Dates"},{"type":"term","term":"%String%","refId":"sec-string-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%String%"},{"type":"clause","id":"sec-string-constructor-string-value","aoid":null,"title":"String ( value )","titleHTML":"String ( <var>value</var> )","number":"21.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String ( value )"},{"type":"clause","id":"sec-string-constructor","aoid":null,"title":"The String Constructor","titleHTML":"The String Constructor","number":"21.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The String Constructor"},{"type":"clause","id":"sec-string.fromcharcode","aoid":null,"title":"String.fromCharCode ( ...codeUnits )","titleHTML":"String.fromCharCode ( ...<var>codeUnits</var> )","number":"21.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.fromCharCode ( ...codeUnits )"},{"type":"clause","id":"sec-string.fromcodepoint","aoid":null,"title":"String.fromCodePoint ( ...codePoints )","titleHTML":"String.fromCodePoint ( ...<var>codePoints</var> )","number":"21.1.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.fromCodePoint ( ...codePoints )"},{"type":"clause","id":"sec-string.prototype","aoid":null,"title":"String.prototype","titleHTML":"String.prototype","number":"21.1.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype"},{"type":"clause","id":"sec-string.raw","aoid":null,"title":"String.raw ( template, ...substitutions )","titleHTML":"String.raw ( <var>template</var>, ...<var>substitutions</var> )","number":"21.1.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.raw ( template, ...substitutions )"},{"type":"clause","id":"sec-properties-of-the-string-constructor","aoid":null,"title":"Properties of the String Constructor","titleHTML":"Properties of the String Constructor","number":"21.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the String Constructor"},{"type":"term","term":"%StringPrototype%","refId":"sec-properties-of-the-string-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%StringPrototype%"},{"type":"clause","id":"sec-string.prototype.charat","aoid":null,"title":"String.prototype.charAt ( pos )","titleHTML":"String.prototype.charAt ( <var>pos</var> )","number":"21.1.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.charAt ( pos )"},{"type":"clause","id":"sec-string.prototype.charcodeat","aoid":null,"title":"String.prototype.charCodeAt ( pos )","titleHTML":"String.prototype.charCodeAt ( <var>pos</var> )","number":"21.1.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.charCodeAt ( pos )"},{"type":"clause","id":"sec-string.prototype.codepointat","aoid":null,"title":"String.prototype.codePointAt ( pos )","titleHTML":"String.prototype.codePointAt ( <var>pos</var> )","number":"21.1.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.codePointAt ( pos )"},{"type":"clause","id":"sec-string.prototype.concat","aoid":null,"title":"String.prototype.concat ( ...args )","titleHTML":"String.prototype.concat ( ...<var>args</var> )","number":"21.1.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.concat ( ...args )"},{"type":"clause","id":"sec-string.prototype.constructor","aoid":null,"title":"String.prototype.constructor","titleHTML":"String.prototype.constructor","number":"21.1.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.constructor"},{"type":"clause","id":"sec-string.prototype.endswith","aoid":null,"title":"String.prototype.endsWith ( searchString [ , endPosition ] )","titleHTML":"String.prototype.endsWith ( <var>searchString</var> [ , <var>endPosition</var> ] )","number":"21.1.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.endsWith ( searchString [ , endPosition ] )"},{"type":"clause","id":"sec-string.prototype.includes","aoid":null,"title":"String.prototype.includes ( searchString [ , position ] )","titleHTML":"String.prototype.includes ( <var>searchString</var> [ , <var>position</var> ] )","number":"21.1.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.includes ( searchString [ , position ] )"},{"type":"clause","id":"sec-string.prototype.indexof","aoid":null,"title":"String.prototype.indexOf ( searchString [ , position ] )","titleHTML":"String.prototype.indexOf ( <var>searchString</var> [ , <var>position</var> ] )","number":"21.1.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.indexOf ( searchString [ , position ] )"},{"type":"clause","id":"sec-string.prototype.lastindexof","aoid":null,"title":"String.prototype.lastIndexOf ( searchString [ , position ] )","titleHTML":"String.prototype.lastIndexOf ( <var>searchString</var> [ , <var>position</var> ] )","number":"21.1.3.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.lastIndexOf ( searchString [ , position ] )"},{"type":"clause","id":"sec-string.prototype.localecompare","aoid":null,"title":"String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )","titleHTML":"String.prototype.localeCompare ( <var>that</var> [ , <var>reserved1</var> [ , <var>reserved2</var> ] ] )","number":"21.1.3.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )"},{"type":"clause","id":"sec-string.prototype.match","aoid":null,"title":"String.prototype.match ( regexp )","titleHTML":"String.prototype.match ( <var>regexp</var> )","number":"21.1.3.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.match ( regexp )"},{"type":"clause","id":"sec-string.prototype.normalize","aoid":null,"title":"String.prototype.normalize ( [ form ] )","titleHTML":"String.prototype.normalize ( [ <var>form</var> ] )","number":"21.1.3.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.normalize ( [ form ] )"},{"type":"clause","id":"sec-string.prototype.padend","aoid":null,"title":"String.prototype.padEnd( maxLength [ , fillString ] )","titleHTML":"String.prototype.padEnd( <var>maxLength</var> [ , <var>fillString</var> ] )","number":"21.1.3.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.padEnd( maxLength [ , fillString ] )"},{"type":"clause","id":"sec-string.prototype.padstart","aoid":null,"title":"String.prototype.padStart( maxLength [ , fillString ] )","titleHTML":"String.prototype.padStart( <var>maxLength</var> [ , <var>fillString</var> ] )","number":"21.1.3.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.padStart( maxLength [ , fillString ] )"},{"type":"clause","id":"sec-string.prototype.repeat","aoid":null,"title":"String.prototype.repeat ( count )","titleHTML":"String.prototype.repeat ( <var>count</var> )","number":"21.1.3.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.repeat ( count )"},{"type":"table","id":"table-45","number":46,"caption":"Table 46: Replacement Text Symbol Substitutions","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 46: Replacement Text Symbol Substitutions"},{"type":"op","aoid":"GetSubstitution","refId":"sec-getsubstitution","location":"","key":"GetSubstitution"},{"type":"clause","id":"sec-getsubstitution","aoid":"GetSubstitution","title":"Runtime Semantics: GetSubstitution(matched, str, position, captures, replacement)","titleHTML":"Runtime Semantics: GetSubstitution(<var>matched</var>, <var>str</var>, <var>position</var>, <var>captures</var>, <var>replacement</var>)","number":"21.1.3.16.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: GetSubstitution(matched, str, position, captures, replacement)"},{"type":"clause","id":"sec-string.prototype.replace","aoid":null,"title":"String.prototype.replace (searchValue, replaceValue )","titleHTML":"String.prototype.replace (<var>searchValue</var>, <var>replaceValue</var> )","number":"21.1.3.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.replace (searchValue, replaceValue )"},{"type":"clause","id":"sec-string.prototype.search","aoid":null,"title":"String.prototype.search ( regexp )","titleHTML":"String.prototype.search ( <var>regexp</var> )","number":"21.1.3.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.search ( regexp )"},{"type":"clause","id":"sec-string.prototype.slice","aoid":null,"title":"String.prototype.slice ( start, end )","titleHTML":"String.prototype.slice ( <var>start</var>, <var>end</var> )","number":"21.1.3.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.slice ( start, end )"},{"type":"op","aoid":"SplitMatch","refId":"sec-splitmatch","location":"","key":"SplitMatch"},{"type":"clause","id":"sec-splitmatch","aoid":"SplitMatch","title":"Runtime Semantics: SplitMatch ( S, q, R )","titleHTML":"Runtime Semantics: SplitMatch ( <var>S</var>, <var>q</var>, <var>R</var> )","number":"21.1.3.19.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: SplitMatch ( S, q, R )"},{"type":"clause","id":"sec-string.prototype.split","aoid":null,"title":"String.prototype.split ( separator, limit )","titleHTML":"String.prototype.split ( <var>separator</var>, <var>limit</var> )","number":"21.1.3.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.split ( separator, limit )"},{"type":"clause","id":"sec-string.prototype.startswith","aoid":null,"title":"String.prototype.startsWith ( searchString [ , position ] )","titleHTML":"String.prototype.startsWith ( <var>searchString</var> [ , <var>position</var> ] )","number":"21.1.3.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.startsWith ( searchString [ , position ] )"},{"type":"clause","id":"sec-string.prototype.substring","aoid":null,"title":"String.prototype.substring ( start, end )","titleHTML":"String.prototype.substring ( <var>start</var>, <var>end</var> )","number":"21.1.3.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.substring ( start, end )"},{"type":"clause","id":"sec-string.prototype.tolocalelowercase","aoid":null,"title":"String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )","titleHTML":"String.prototype.toLocaleLowerCase ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )","number":"21.1.3.22","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )"},{"type":"clause","id":"sec-string.prototype.tolocaleuppercase","aoid":null,"title":"String.prototype.toLocaleUpperCase ([ reserved1 [ , reserved2 ] ] )","titleHTML":"String.prototype.toLocaleUpperCase ([ <var>reserved1</var> [ , <var>reserved2</var> ] ] )","number":"21.1.3.23","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.toLocaleUpperCase ([ reserved1 [ , reserved2 ] ] )"},{"type":"clause","id":"sec-string.prototype.tolowercase","aoid":null,"title":"String.prototype.toLowerCase ( )","titleHTML":"String.prototype.toLowerCase ( )","number":"21.1.3.24","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.toLowerCase ( )"},{"type":"clause","id":"sec-string.prototype.tostring","aoid":null,"title":"String.prototype.toString ( )","titleHTML":"String.prototype.toString ( )","number":"21.1.3.25","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.toString ( )"},{"type":"clause","id":"sec-string.prototype.touppercase","aoid":null,"title":"String.prototype.toUpperCase ( )","titleHTML":"String.prototype.toUpperCase ( )","number":"21.1.3.26","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.toUpperCase ( )"},{"type":"clause","id":"sec-string.prototype.trim","aoid":null,"title":"String.prototype.trim ( )","titleHTML":"String.prototype.trim ( )","number":"21.1.3.27","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.trim ( )"},{"type":"clause","id":"sec-string.prototype.valueof","aoid":null,"title":"String.prototype.valueOf ( )","titleHTML":"String.prototype.valueOf ( )","number":"21.1.3.28","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.valueOf ( )"},{"type":"clause","id":"sec-string.prototype-@@iterator","aoid":null,"title":"String.prototype [ @@iterator ] ( )","titleHTML":"String.prototype [ @@iterator ] ( )","number":"21.1.3.29","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype [ @@iterator ] ( )"},{"type":"clause","id":"sec-properties-of-the-string-prototype-object","aoid":null,"title":"Properties of the String Prototype Object","titleHTML":"Properties of the String Prototype Object","number":"21.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the String Prototype Object"},{"type":"clause","id":"sec-properties-of-string-instances-length","aoid":null,"title":"length","titleHTML":"length","number":"21.1.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"length"},{"type":"clause","id":"sec-properties-of-string-instances","aoid":null,"title":"Properties of String Instances","titleHTML":"Properties of String Instances","number":"21.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of String Instances"},{"type":"op","aoid":"CreateStringIterator","refId":"sec-createstringiterator","location":"","key":"CreateStringIterator"},{"type":"clause","id":"sec-createstringiterator","aoid":"CreateStringIterator","title":"CreateStringIterator Abstract Operation","titleHTML":"CreateStringIterator Abstract Operation","number":"21.1.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateStringIterator Abstract Operation"},{"type":"term","term":"%StringIteratorPrototype%","refId":"sec-%stringiteratorprototype%-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%StringIteratorPrototype%"},{"type":"clause","id":"sec-%stringiteratorprototype%.next","aoid":null,"title":"%StringIteratorPrototype%.next ( )","titleHTML":"%StringIteratorPrototype%.next ( )","number":"21.1.5.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%StringIteratorPrototype%.next ( )"},{"type":"clause","id":"sec-%stringiteratorprototype%-@@tostringtag","aoid":null,"title":"%StringIteratorPrototype% [ @@toStringTag ]","titleHTML":"%StringIteratorPrototype% [ @@toStringTag ]","number":"21.1.5.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%StringIteratorPrototype% [ @@toStringTag ]"},{"type":"clause","id":"sec-%stringiteratorprototype%-object","aoid":null,"title":"The %StringIteratorPrototype% Object","titleHTML":"The %StringIteratorPrototype% Object","number":"21.1.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The %StringIteratorPrototype% Object"},{"type":"table","id":"table-46","number":47,"caption":"Table 47: Internal Slots of String Iterator Instances","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 47: Internal Slots of String Iterator Instances"},{"type":"clause","id":"sec-properties-of-string-iterator-instances","aoid":null,"title":"Properties of String Iterator Instances","titleHTML":"Properties of String Iterator Instances","number":"21.1.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of String Iterator Instances"},{"type":"clause","id":"sec-string-iterator-objects","aoid":null,"title":"String Iterator Objects","titleHTML":"String Iterator Objects","number":"21.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String Iterator Objects"},{"type":"clause","id":"sec-string-objects","aoid":null,"title":"String Objects","titleHTML":"String Objects","number":"21.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String Objects"},{"type":"production","id":"prod-Pattern","name":"Pattern","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Pattern"},{"type":"production","id":"prod-Disjunction","name":"Disjunction","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Disjunction"},{"type":"production","id":"prod-Alternative","name":"Alternative","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Alternative"},{"type":"production","id":"prod-Term","name":"Term","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Term"},{"type":"production","id":"prod-Assertion","name":"Assertion","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Assertion"},{"type":"production","id":"prod-Quantifier","name":"Quantifier","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Quantifier"},{"type":"production","id":"prod-QuantifierPrefix","name":"QuantifierPrefix","namespace":"https://tc39.github.io/ecma262/","location":"","key":"QuantifierPrefix"},{"type":"production","id":"prod-Atom","name":"Atom","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Atom"},{"type":"production","id":"prod-SyntaxCharacter","name":"SyntaxCharacter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SyntaxCharacter"},{"type":"production","id":"prod-PatternCharacter","name":"PatternCharacter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PatternCharacter"},{"type":"production","id":"prod-AtomEscape","name":"AtomEscape","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AtomEscape"},{"type":"production","id":"prod-CharacterEscape","name":"CharacterEscape","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CharacterEscape"},{"type":"production","id":"prod-ControlEscape","name":"ControlEscape","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ControlEscape"},{"type":"production","id":"prod-ControlLetter","name":"ControlLetter","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ControlLetter"},{"type":"production","id":"prod-RegExpUnicodeEscapeSequence","name":"RegExpUnicodeEscapeSequence","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExpUnicodeEscapeSequence"},{"type":"production","id":"prod-LeadSurrogate","name":"LeadSurrogate","namespace":"https://tc39.github.io/ecma262/","location":"","key":"LeadSurrogate"},{"type":"production","id":"prod-TrailSurrogate","name":"TrailSurrogate","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TrailSurrogate"},{"type":"production","id":"prod-NonSurrogate","name":"NonSurrogate","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NonSurrogate"},{"type":"production","id":"prod-IdentityEscape","name":"IdentityEscape","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IdentityEscape"},{"type":"production","id":"prod-DecimalEscape","name":"DecimalEscape","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DecimalEscape"},{"type":"production","id":"prod-CharacterClassEscape","name":"CharacterClassEscape","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CharacterClassEscape"},{"type":"production","id":"prod-CharacterClass","name":"CharacterClass","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CharacterClass"},{"type":"production","id":"prod-ClassRanges","name":"ClassRanges","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassRanges"},{"type":"production","id":"prod-NonemptyClassRanges","name":"NonemptyClassRanges","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NonemptyClassRanges"},{"type":"production","id":"prod-NonemptyClassRangesNoDash","name":"NonemptyClassRangesNoDash","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NonemptyClassRangesNoDash"},{"type":"production","id":"prod-ClassAtom","name":"ClassAtom","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassAtom"},{"type":"production","id":"prod-ClassAtomNoDash","name":"ClassAtomNoDash","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassAtomNoDash"},{"type":"production","id":"prod-ClassEscape","name":"ClassEscape","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassEscape"},{"type":"clause","id":"sec-patterns-static-semantics-early-errors","aoid":null,"title":"Static Semantics: Early Errors","titleHTML":"Static Semantics: Early Errors","number":"21.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics: Early Errors"},{"type":"clause","id":"sec-patterns","aoid":null,"title":"Patterns","titleHTML":"Patterns","number":"21.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Patterns"},{"type":"clause","id":"sec-notation","aoid":null,"title":"Notation","titleHTML":"Notation","number":"21.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Notation"},{"type":"clause","id":"sec-pattern","aoid":null,"title":"Pattern","titleHTML":"Pattern","number":"21.2.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Pattern"},{"type":"clause","id":"sec-disjunction","aoid":null,"title":"Disjunction","titleHTML":"Disjunction","number":"21.2.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Disjunction"},{"type":"clause","id":"sec-alternative","aoid":null,"title":"Alternative","titleHTML":"Alternative","number":"21.2.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Alternative"},{"type":"op","aoid":"RepeatMatcher","refId":"sec-runtime-semantics-repeatmatcher-abstract-operation","location":"","key":"RepeatMatcher"},{"type":"clause","id":"sec-runtime-semantics-repeatmatcher-abstract-operation","aoid":"RepeatMatcher","title":"Runtime Semantics: RepeatMatcher Abstract Operation","titleHTML":"Runtime Semantics: RepeatMatcher Abstract Operation","number":"21.2.2.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: RepeatMatcher Abstract Operation"},{"type":"clause","id":"sec-term","aoid":null,"title":"Term","titleHTML":"Term","number":"21.2.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Term"},{"type":"op","aoid":"WordCharacters","refId":"sec-runtime-semantics-wordcharacters-abstract-operation","location":"","key":"WordCharacters"},{"type":"clause","id":"sec-runtime-semantics-wordcharacters-abstract-operation","aoid":"WordCharacters","title":"Runtime Semantics: WordCharacters Abstract Operation","titleHTML":"Runtime Semantics: WordCharacters Abstract Operation","number":"21.2.2.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: WordCharacters Abstract Operation"},{"type":"op","aoid":"IsWordChar","refId":"sec-runtime-semantics-iswordchar-abstract-operation","location":"","key":"IsWordChar"},{"type":"clause","id":"sec-runtime-semantics-iswordchar-abstract-operation","aoid":"IsWordChar","title":"Runtime Semantics: IsWordChar Abstract Operation","titleHTML":"Runtime Semantics: IsWordChar Abstract Operation","number":"21.2.2.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: IsWordChar Abstract Operation"},{"type":"clause","id":"sec-assertion","aoid":null,"title":"Assertion","titleHTML":"Assertion","number":"21.2.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Assertion"},{"type":"clause","id":"sec-quantifier","aoid":null,"title":"Quantifier","titleHTML":"Quantifier","number":"21.2.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Quantifier"},{"type":"op","aoid":"CharacterSetMatcher","refId":"sec-runtime-semantics-charactersetmatcher-abstract-operation","location":"","key":"CharacterSetMatcher"},{"type":"clause","id":"sec-runtime-semantics-charactersetmatcher-abstract-operation","aoid":"CharacterSetMatcher","title":"Runtime Semantics: CharacterSetMatcher Abstract Operation","titleHTML":"Runtime Semantics: CharacterSetMatcher Abstract Operation","number":"21.2.2.8.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: CharacterSetMatcher Abstract Operation"},{"type":"op","aoid":"Canonicalize","refId":"sec-runtime-semantics-canonicalize-ch","location":"","key":"Canonicalize"},{"type":"clause","id":"sec-runtime-semantics-canonicalize-ch","aoid":"Canonicalize","title":"Runtime Semantics: Canonicalize ( ch )","titleHTML":"Runtime Semantics: Canonicalize ( <var>ch</var> )","number":"21.2.2.8.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: Canonicalize ( ch )"},{"type":"clause","id":"sec-atom","aoid":null,"title":"Atom","titleHTML":"Atom","number":"21.2.2.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Atom"},{"type":"clause","id":"sec-atomescape","aoid":null,"title":"AtomEscape","titleHTML":"AtomEscape","number":"21.2.2.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AtomEscape"},{"type":"table","id":"table-47","number":48,"caption":"Table 48: ControlEscape Character Values","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 48: ControlEscape Character Values"},{"type":"clause","id":"sec-characterescape","aoid":null,"title":"CharacterEscape","titleHTML":"CharacterEscape","number":"21.2.2.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CharacterEscape"},{"type":"clause","id":"sec-decimalescape","aoid":null,"title":"DecimalEscape","titleHTML":"DecimalEscape","number":"21.2.2.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DecimalEscape"},{"type":"clause","id":"sec-characterclassescape","aoid":null,"title":"CharacterClassEscape","titleHTML":"CharacterClassEscape","number":"21.2.2.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CharacterClassEscape"},{"type":"clause","id":"sec-characterclass","aoid":null,"title":"CharacterClass","titleHTML":"CharacterClass","number":"21.2.2.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CharacterClass"},{"type":"clause","id":"sec-classranges","aoid":null,"title":"ClassRanges","titleHTML":"ClassRanges","number":"21.2.2.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassRanges"},{"type":"op","aoid":"CharacterRange","refId":"sec-runtime-semantics-characterrange-abstract-operation","location":"","key":"CharacterRange"},{"type":"clause","id":"sec-runtime-semantics-characterrange-abstract-operation","aoid":"CharacterRange","title":"Runtime Semantics: CharacterRange Abstract Operation","titleHTML":"Runtime Semantics: CharacterRange Abstract Operation","number":"21.2.2.15.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: CharacterRange Abstract Operation"},{"type":"clause","id":"sec-nonemptyclassranges","aoid":null,"title":"NonemptyClassRanges","titleHTML":"NonemptyClassRanges","number":"21.2.2.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NonemptyClassRanges"},{"type":"clause","id":"sec-nonemptyclassrangesnodash","aoid":null,"title":"NonemptyClassRangesNoDash","titleHTML":"NonemptyClassRangesNoDash","number":"21.2.2.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NonemptyClassRangesNoDash"},{"type":"clause","id":"sec-classatom","aoid":null,"title":"ClassAtom","titleHTML":"ClassAtom","number":"21.2.2.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassAtom"},{"type":"clause","id":"sec-classatomnodash","aoid":null,"title":"ClassAtomNoDash","titleHTML":"ClassAtomNoDash","number":"21.2.2.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassAtomNoDash"},{"type":"clause","id":"sec-classescape","aoid":null,"title":"ClassEscape","titleHTML":"ClassEscape","number":"21.2.2.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ClassEscape"},{"type":"clause","id":"sec-pattern-semantics","aoid":null,"title":"Pattern Semantics","titleHTML":"Pattern Semantics","number":"21.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Pattern Semantics"},{"type":"term","term":"%RegExp%","refId":"sec-regexp-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%RegExp%"},{"type":"clause","id":"sec-regexp-pattern-flags","aoid":null,"title":"RegExp ( pattern, flags )","titleHTML":"RegExp ( <var>pattern</var>, <var>flags</var> )","number":"21.2.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp ( pattern, flags )"},{"type":"op","aoid":"RegExpAlloc","refId":"sec-regexpalloc","location":"","key":"RegExpAlloc"},{"type":"clause","id":"sec-regexpalloc","aoid":"RegExpAlloc","title":"Runtime Semantics: RegExpAlloc ( newTarget )","titleHTML":"Runtime Semantics: RegExpAlloc ( <var>newTarget</var> )","number":"21.2.3.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: RegExpAlloc ( newTarget )"},{"type":"op","aoid":"RegExpInitialize","refId":"sec-regexpinitialize","location":"","key":"RegExpInitialize"},{"type":"clause","id":"sec-regexpinitialize","aoid":"RegExpInitialize","title":"Runtime Semantics: RegExpInitialize ( obj, pattern, flags )","titleHTML":"Runtime Semantics: RegExpInitialize ( <var>obj</var>, <var>pattern</var>, <var>flags</var> )","number":"21.2.3.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: RegExpInitialize ( obj, pattern, flags )"},{"type":"op","aoid":"RegExpCreate","refId":"sec-regexpcreate","location":"","key":"RegExpCreate"},{"type":"clause","id":"sec-regexpcreate","aoid":"RegExpCreate","title":"Runtime Semantics: RegExpCreate ( P, F )","titleHTML":"Runtime Semantics: RegExpCreate ( <var>P</var>, <var>F</var> )","number":"21.2.3.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: RegExpCreate ( P, F )"},{"type":"op","aoid":"EscapeRegExpPattern","refId":"sec-escaperegexppattern","location":"","key":"EscapeRegExpPattern"},{"type":"clause","id":"sec-escaperegexppattern","aoid":"EscapeRegExpPattern","title":"Runtime Semantics: EscapeRegExpPattern ( P, F )","titleHTML":"Runtime Semantics: EscapeRegExpPattern ( <var>P</var>, <var>F</var> )","number":"21.2.3.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: EscapeRegExpPattern ( P, F )"},{"type":"clause","id":"sec-abstract-operations-for-the-regexp-constructor","aoid":null,"title":"Abstract Operations for the RegExp Constructor","titleHTML":"Abstract Operations for the RegExp Constructor","number":"21.2.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Abstract Operations for the RegExp Constructor"},{"type":"clause","id":"sec-regexp-constructor","aoid":null,"title":"The RegExp Constructor","titleHTML":"The RegExp Constructor","number":"21.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The RegExp Constructor"},{"type":"clause","id":"sec-regexp.prototype","aoid":null,"title":"RegExp.prototype","titleHTML":"RegExp.prototype","number":"21.2.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp.prototype"},{"type":"clause","id":"sec-get-regexp-@@species","aoid":null,"title":"get RegExp [ @@species ]","titleHTML":"get RegExp [ @@species ]","number":"21.2.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get RegExp [ @@species ]"},{"type":"clause","id":"sec-properties-of-the-regexp-constructor","aoid":null,"title":"Properties of the RegExp Constructor","titleHTML":"Properties of the RegExp Constructor","number":"21.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the RegExp Constructor"},{"type":"term","term":"%RegExpPrototype%","refId":"sec-properties-of-the-regexp-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%RegExpPrototype%"},{"type":"clause","id":"sec-regexp.prototype.constructor","aoid":null,"title":"RegExp.prototype.constructor","titleHTML":"RegExp.prototype.constructor","number":"21.2.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp.prototype.constructor"},{"type":"op","aoid":"RegExpExec","refId":"sec-regexpexec","location":"","key":"RegExpExec"},{"type":"clause","id":"sec-regexpexec","aoid":"RegExpExec","title":"Runtime Semantics: RegExpExec ( R, S )","titleHTML":"Runtime Semantics: RegExpExec ( <var>R</var>, <var>S</var> )","number":"21.2.5.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: RegExpExec ( R, S )"},{"type":"op","aoid":"RegExpBuiltinExec","refId":"sec-regexpbuiltinexec","location":"","key":"RegExpBuiltinExec"},{"type":"clause","id":"sec-regexpbuiltinexec","aoid":"RegExpBuiltinExec","title":"Runtime Semantics: RegExpBuiltinExec ( R, S )","titleHTML":"Runtime Semantics: RegExpBuiltinExec ( <var>R</var>, <var>S</var> )","number":"21.2.5.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: RegExpBuiltinExec ( R, S )"},{"type":"op","aoid":"AdvanceStringIndex","refId":"sec-advancestringindex","location":"","key":"AdvanceStringIndex"},{"type":"clause","id":"sec-advancestringindex","aoid":"AdvanceStringIndex","title":"AdvanceStringIndex ( S, index, unicode )","titleHTML":"AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )","number":"21.2.5.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AdvanceStringIndex ( S, index, unicode )"},{"type":"clause","id":"sec-regexp.prototype.exec","aoid":null,"title":"RegExp.prototype.exec ( string )","titleHTML":"RegExp.prototype.exec ( <var>string</var> )","number":"21.2.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp.prototype.exec ( string )"},{"type":"clause","id":"sec-get-regexp.prototype.flags","aoid":null,"title":"get RegExp.prototype.flags","titleHTML":"get RegExp.prototype.flags","number":"21.2.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get RegExp.prototype.flags"},{"type":"clause","id":"sec-get-regexp.prototype.global","aoid":null,"title":"get RegExp.prototype.global","titleHTML":"get RegExp.prototype.global","number":"21.2.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get RegExp.prototype.global"},{"type":"clause","id":"sec-get-regexp.prototype.ignorecase","aoid":null,"title":"get RegExp.prototype.ignoreCase","titleHTML":"get RegExp.prototype.ignoreCase","number":"21.2.5.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get RegExp.prototype.ignoreCase"},{"type":"clause","id":"sec-regexp.prototype-@@match","aoid":null,"title":"RegExp.prototype [ @@match ] ( string )","titleHTML":"RegExp.prototype [ @@match ] ( <var>string</var> )","number":"21.2.5.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp.prototype [ @@match ] ( string )"},{"type":"clause","id":"sec-get-regexp.prototype.multiline","aoid":null,"title":"get RegExp.prototype.multiline","titleHTML":"get RegExp.prototype.multiline","number":"21.2.5.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get RegExp.prototype.multiline"},{"type":"clause","id":"sec-regexp.prototype-@@replace","aoid":null,"title":"RegExp.prototype [ @@replace ] ( string, replaceValue )","titleHTML":"RegExp.prototype [ @@replace ] ( <var>string</var>, <var>replaceValue</var> )","number":"21.2.5.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp.prototype [ @@replace ] ( string, replaceValue )"},{"type":"clause","id":"sec-regexp.prototype-@@search","aoid":null,"title":"RegExp.prototype [ @@search ] ( string )","titleHTML":"RegExp.prototype [ @@search ] ( <var>string</var> )","number":"21.2.5.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp.prototype [ @@search ] ( string )"},{"type":"clause","id":"sec-get-regexp.prototype.source","aoid":null,"title":"get RegExp.prototype.source","titleHTML":"get RegExp.prototype.source","number":"21.2.5.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get RegExp.prototype.source"},{"type":"clause","id":"sec-regexp.prototype-@@split","aoid":null,"title":"RegExp.prototype [ @@split ] ( string, limit )","titleHTML":"RegExp.prototype [ @@split ] ( <var>string</var>, <var>limit</var> )","number":"21.2.5.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp.prototype [ @@split ] ( string, limit )"},{"type":"clause","id":"sec-get-regexp.prototype.sticky","aoid":null,"title":"get RegExp.prototype.sticky","titleHTML":"get RegExp.prototype.sticky","number":"21.2.5.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get RegExp.prototype.sticky"},{"type":"clause","id":"sec-regexp.prototype.test","aoid":null,"title":"RegExp.prototype.test ( S )","titleHTML":"RegExp.prototype.test ( <var>S</var> )","number":"21.2.5.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp.prototype.test ( S )"},{"type":"clause","id":"sec-regexp.prototype.tostring","aoid":null,"title":"RegExp.prototype.toString ( )","titleHTML":"RegExp.prototype.toString ( )","number":"21.2.5.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp.prototype.toString ( )"},{"type":"clause","id":"sec-get-regexp.prototype.unicode","aoid":null,"title":"get RegExp.prototype.unicode","titleHTML":"get RegExp.prototype.unicode","number":"21.2.5.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get RegExp.prototype.unicode"},{"type":"clause","id":"sec-properties-of-the-regexp-prototype-object","aoid":null,"title":"Properties of the RegExp Prototype Object","titleHTML":"Properties of the RegExp Prototype Object","number":"21.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the RegExp Prototype Object"},{"type":"clause","id":"sec-lastindex","aoid":null,"title":"lastIndex","titleHTML":"lastIndex","number":"21.2.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"lastIndex"},{"type":"clause","id":"sec-properties-of-regexp-instances","aoid":null,"title":"Properties of RegExp Instances","titleHTML":"Properties of RegExp Instances","number":"21.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of RegExp Instances"},{"type":"clause","id":"sec-regexp-regular-expression-objects","aoid":null,"title":"RegExp (Regular Expression) Objects","titleHTML":"RegExp (Regular Expression) Objects","number":"21.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp (Regular Expression) Objects"},{"type":"clause","id":"sec-text-processing","aoid":null,"title":"Text Processing","titleHTML":"Text Processing","number":"21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Text Processing"},{"type":"term","term":"%Array%","refId":"sec-array-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Array%"},{"type":"clause","id":"sec-array-constructor-array","aoid":null,"title":"Array ( )","titleHTML":"Array ( )","number":"22.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array ( )"},{"type":"clause","id":"sec-array-len","aoid":null,"title":"Array (len)","titleHTML":"Array (<var>len</var>)","number":"22.1.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array (len)"},{"type":"clause","id":"sec-array-items","aoid":null,"title":"Array (...items )","titleHTML":"Array (...<var>items</var> )","number":"22.1.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array (...items )"},{"type":"clause","id":"sec-array-constructor","aoid":null,"title":"The Array Constructor","titleHTML":"The Array Constructor","number":"22.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Array Constructor"},{"type":"clause","id":"sec-array.from","aoid":null,"title":"Array.from ( items [ , mapfn [ , thisArg ] ] )","titleHTML":"Array.from ( <var>items</var> [ , <var>mapfn</var> [ , <var>thisArg</var> ] ] )","number":"22.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.from ( items [ , mapfn [ , thisArg ] ] )"},{"type":"clause","id":"sec-array.isarray","aoid":null,"title":"Array.isArray ( arg )","titleHTML":"Array.isArray ( <var>arg</var> )","number":"22.1.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.isArray ( arg )"},{"type":"clause","id":"sec-array.of","aoid":null,"title":"Array.of ( ...items )","titleHTML":"Array.of ( ...<var>items</var> )","number":"22.1.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.of ( ...items )"},{"type":"clause","id":"sec-array.prototype","aoid":null,"title":"Array.prototype","titleHTML":"Array.prototype","number":"22.1.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype"},{"type":"clause","id":"sec-get-array-@@species","aoid":null,"title":"get Array [ @@species ]","titleHTML":"get Array [ @@species ]","number":"22.1.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get Array [ @@species ]"},{"type":"clause","id":"sec-properties-of-the-array-constructor","aoid":null,"title":"Properties of the Array Constructor","titleHTML":"Properties of the Array Constructor","number":"22.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Array Constructor"},{"type":"term","term":"%ArrayPrototype%","refId":"sec-properties-of-the-array-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ArrayPrototype%"},{"type":"op","aoid":"IsConcatSpreadable","refId":"sec-isconcatspreadable","location":"","key":"IsConcatSpreadable"},{"type":"clause","id":"sec-isconcatspreadable","aoid":"IsConcatSpreadable","title":"Runtime Semantics: IsConcatSpreadable ( O )","titleHTML":"Runtime Semantics: IsConcatSpreadable ( <var>O</var> )","number":"22.1.3.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: IsConcatSpreadable ( O )"},{"type":"clause","id":"sec-array.prototype.concat","aoid":null,"title":"Array.prototype.concat ( ...arguments )","titleHTML":"Array.prototype.concat ( ...<var>arguments</var> )","number":"22.1.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.concat ( ...arguments )"},{"type":"clause","id":"sec-array.prototype.constructor","aoid":null,"title":"Array.prototype.constructor","titleHTML":"Array.prototype.constructor","number":"22.1.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.constructor"},{"type":"clause","id":"sec-array.prototype.copywithin","aoid":null,"title":"Array.prototype.copyWithin (target, start [ , end ] )","titleHTML":"Array.prototype.copyWithin (<var>target</var>, <var>start</var> [ , <var>end</var> ] )","number":"22.1.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.copyWithin (target, start [ , end ] )"},{"type":"clause","id":"sec-array.prototype.entries","aoid":null,"title":"Array.prototype.entries ( )","titleHTML":"Array.prototype.entries ( )","number":"22.1.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.entries ( )"},{"type":"clause","id":"sec-array.prototype.every","aoid":null,"title":"Array.prototype.every ( callbackfn [ , thisArg ] )","titleHTML":"Array.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"22.1.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.every ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-array.prototype.fill","aoid":null,"title":"Array.prototype.fill (value [ , start [ , end ] ] )","titleHTML":"Array.prototype.fill (<var>value</var> [ , <var>start</var> [ , <var>end</var> ] ] )","number":"22.1.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.fill (value [ , start [ , end ] ] )"},{"type":"clause","id":"sec-array.prototype.filter","aoid":null,"title":"Array.prototype.filter ( callbackfn [ , thisArg ] )","titleHTML":"Array.prototype.filter ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"22.1.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.filter ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-array.prototype.find","aoid":null,"title":"Array.prototype.find ( predicate [ , thisArg ] )","titleHTML":"Array.prototype.find ( <var>predicate</var> [ , <var>thisArg</var> ] )","number":"22.1.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.find ( predicate [ , thisArg ] )"},{"type":"clause","id":"sec-array.prototype.findindex","aoid":null,"title":"Array.prototype.findIndex ( predicate [ , thisArg ] )","titleHTML":"Array.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )","number":"22.1.3.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.findIndex ( predicate [ , thisArg ] )"},{"type":"clause","id":"sec-array.prototype.foreach","aoid":null,"title":"Array.prototype.forEach ( callbackfn [ , thisArg ] )","titleHTML":"Array.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"22.1.3.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.forEach ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-array.prototype.includes","aoid":null,"title":"Array.prototype.includes ( searchElement [ , fromIndex ] )","titleHTML":"Array.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )","number":"22.1.3.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.includes ( searchElement [ , fromIndex ] )"},{"type":"clause","id":"sec-array.prototype.indexof","aoid":null,"title":"Array.prototype.indexOf ( searchElement [ , fromIndex ] )","titleHTML":"Array.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )","number":"22.1.3.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.indexOf ( searchElement [ , fromIndex ] )"},{"type":"clause","id":"sec-array.prototype.join","aoid":null,"title":"Array.prototype.join (separator)","titleHTML":"Array.prototype.join (<var>separator</var>)","number":"22.1.3.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.join (separator)"},{"type":"clause","id":"sec-array.prototype.keys","aoid":null,"title":"Array.prototype.keys ( )","titleHTML":"Array.prototype.keys ( )","number":"22.1.3.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.keys ( )"},{"type":"clause","id":"sec-array.prototype.lastindexof","aoid":null,"title":"Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )","titleHTML":"Array.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )","number":"22.1.3.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )"},{"type":"clause","id":"sec-array.prototype.map","aoid":null,"title":"Array.prototype.map ( callbackfn [ , thisArg ] )","titleHTML":"Array.prototype.map ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"22.1.3.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.map ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-array.prototype.pop","aoid":null,"title":"Array.prototype.pop ( )","titleHTML":"Array.prototype.pop ( )","number":"22.1.3.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.pop ( )"},{"type":"clause","id":"sec-array.prototype.push","aoid":null,"title":"Array.prototype.push ( ...items )","titleHTML":"Array.prototype.push ( ...<var>items</var> )","number":"22.1.3.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.push ( ...items )"},{"type":"clause","id":"sec-array.prototype.reduce","aoid":null,"title":"Array.prototype.reduce ( callbackfn [ , initialValue ] )","titleHTML":"Array.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )","number":"22.1.3.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.reduce ( callbackfn [ , initialValue ] )"},{"type":"clause","id":"sec-array.prototype.reduceright","aoid":null,"title":"Array.prototype.reduceRight ( callbackfn [ , initialValue ] )","titleHTML":"Array.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )","number":"22.1.3.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.reduceRight ( callbackfn [ , initialValue ] )"},{"type":"clause","id":"sec-array.prototype.reverse","aoid":null,"title":"Array.prototype.reverse ( )","titleHTML":"Array.prototype.reverse ( )","number":"22.1.3.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.reverse ( )"},{"type":"clause","id":"sec-array.prototype.shift","aoid":null,"title":"Array.prototype.shift ( )","titleHTML":"Array.prototype.shift ( )","number":"22.1.3.22","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.shift ( )"},{"type":"clause","id":"sec-array.prototype.slice","aoid":null,"title":"Array.prototype.slice (start, end)","titleHTML":"Array.prototype.slice (<var>start</var>, <var>end</var>)","number":"22.1.3.23","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.slice (start, end)"},{"type":"clause","id":"sec-array.prototype.some","aoid":null,"title":"Array.prototype.some ( callbackfn [ , thisArg ] )","titleHTML":"Array.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"22.1.3.24","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.some ( callbackfn [ , thisArg ] )"},{"type":"op","aoid":"SortCompare","refId":"sec-sortcompare","location":"","key":"SortCompare"},{"type":"clause","id":"sec-sortcompare","aoid":"SortCompare","title":"Runtime Semantics: SortCompare( x, y )","titleHTML":"Runtime Semantics: SortCompare( <var>x</var>, <var>y</var> )","number":"22.1.3.25.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: SortCompare( x, y )"},{"type":"clause","id":"sec-array.prototype.sort","aoid":null,"title":"Array.prototype.sort (comparefn)","titleHTML":"Array.prototype.sort (<var>comparefn</var>)","number":"22.1.3.25","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.sort (comparefn)"},{"type":"clause","id":"sec-array.prototype.splice","aoid":null,"title":"Array.prototype.splice (start, deleteCount, ...items )","titleHTML":"Array.prototype.splice (<var>start</var>, <var>deleteCount</var>, ...<var>items</var> )","number":"22.1.3.26","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.splice (start, deleteCount, ...items )"},{"type":"clause","id":"sec-array.prototype.tolocalestring","aoid":null,"title":"Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )","titleHTML":"Array.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )","number":"22.1.3.27","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )"},{"type":"clause","id":"sec-array.prototype.tostring","aoid":null,"title":"Array.prototype.toString ( )","titleHTML":"Array.prototype.toString ( )","number":"22.1.3.28","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.toString ( )"},{"type":"clause","id":"sec-array.prototype.unshift","aoid":null,"title":"Array.prototype.unshift ( ...items )","titleHTML":"Array.prototype.unshift ( ...<var>items</var> )","number":"22.1.3.29","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.unshift ( ...items )"},{"type":"term","term":"%ArrayProto_values%","refId":"sec-array.prototype.values","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ArrayProto_values%"},{"type":"clause","id":"sec-array.prototype.values","aoid":null,"title":"Array.prototype.values ( )","titleHTML":"Array.prototype.values ( )","number":"22.1.3.30","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype.values ( )"},{"type":"clause","id":"sec-array.prototype-@@iterator","aoid":null,"title":"Array.prototype [ @@iterator ] ( )","titleHTML":"Array.prototype [ @@iterator ] ( )","number":"22.1.3.31","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype [ @@iterator ] ( )"},{"type":"clause","id":"sec-array.prototype-@@unscopables","aoid":null,"title":"Array.prototype [ @@unscopables ]","titleHTML":"Array.prototype [ @@unscopables ]","number":"22.1.3.32","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array.prototype [ @@unscopables ]"},{"type":"clause","id":"sec-properties-of-the-array-prototype-object","aoid":null,"title":"Properties of the Array Prototype Object","titleHTML":"Properties of the Array Prototype Object","number":"22.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Array Prototype Object"},{"type":"clause","id":"sec-properties-of-array-instances-length","aoid":null,"title":"length","titleHTML":"length","number":"22.1.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"length"},{"type":"clause","id":"sec-properties-of-array-instances","aoid":null,"title":"Properties of Array Instances","titleHTML":"Properties of Array Instances","number":"22.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Array Instances"},{"type":"op","aoid":"CreateArrayIterator","refId":"sec-createarrayiterator","location":"","key":"CreateArrayIterator"},{"type":"clause","id":"sec-createarrayiterator","aoid":"CreateArrayIterator","title":"CreateArrayIterator Abstract Operation","titleHTML":"CreateArrayIterator Abstract Operation","number":"22.1.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateArrayIterator Abstract Operation"},{"type":"term","term":"%ArrayIteratorPrototype%","refId":"sec-%arrayiteratorprototype%-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ArrayIteratorPrototype%"},{"type":"clause","id":"sec-%arrayiteratorprototype%.next","aoid":null,"title":"%ArrayIteratorPrototype%.next( )","titleHTML":"%ArrayIteratorPrototype%.next( )","number":"22.1.5.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ArrayIteratorPrototype%.next( )"},{"type":"clause","id":"sec-%arrayiteratorprototype%-@@tostringtag","aoid":null,"title":"%ArrayIteratorPrototype% [ @@toStringTag ]","titleHTML":"%ArrayIteratorPrototype% [ @@toStringTag ]","number":"22.1.5.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ArrayIteratorPrototype% [ @@toStringTag ]"},{"type":"clause","id":"sec-%arrayiteratorprototype%-object","aoid":null,"title":"The %ArrayIteratorPrototype% Object","titleHTML":"The %ArrayIteratorPrototype% Object","number":"22.1.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The %ArrayIteratorPrototype% Object"},{"type":"table","id":"table-48","number":49,"caption":"Table 49: Internal Slots of Array Iterator Instances","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 49: Internal Slots of Array Iterator Instances"},{"type":"clause","id":"sec-properties-of-array-iterator-instances","aoid":null,"title":"Properties of Array Iterator Instances","titleHTML":"Properties of Array Iterator Instances","number":"22.1.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Array Iterator Instances"},{"type":"clause","id":"sec-array-iterator-objects","aoid":null,"title":"Array Iterator Objects","titleHTML":"Array Iterator Objects","number":"22.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array Iterator Objects"},{"type":"clause","id":"sec-array-objects","aoid":null,"title":"Array Objects","titleHTML":"Array Objects","number":"22.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Array Objects"},{"type":"table","id":"table-49","number":50,"caption":"Table 50: The TypedArray Constructors","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 50: The TypedArray Constructors"},{"type":"term","term":"%TypedArray%","refId":"sec-%typedarray%-intrinsic-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%"},{"type":"clause","id":"sec-%typedarray%","aoid":null,"title":"%TypedArray%()","titleHTML":"%TypedArray%()","number":"22.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%()"},{"type":"clause","id":"sec-%typedarray%-intrinsic-object","aoid":null,"title":"The %TypedArray% Intrinsic Object","titleHTML":"The %TypedArray% Intrinsic Object","number":"22.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The %TypedArray% Intrinsic Object"},{"type":"op","aoid":"IterableToList","refId":"sec-iterabletolist","location":"","key":"IterableToList"},{"type":"clause","id":"sec-iterabletolist","aoid":"IterableToList","title":"Runtime Semantics: IterableToList( items, method )","titleHTML":"Runtime Semantics: IterableToList( <var>items</var>, <var>method</var> )","number":"22.2.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: IterableToList( items, method )"},{"type":"clause","id":"sec-%typedarray%.from","aoid":null,"title":"%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )","titleHTML":"%TypedArray%.from ( <var>source</var> [ , <var>mapfn</var> [ , <var>thisArg</var> ] ] )","number":"22.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )"},{"type":"clause","id":"sec-%typedarray%.of","aoid":null,"title":"%TypedArray%.of ( ...items )","titleHTML":"%TypedArray%.of ( ...<var>items</var> )","number":"22.2.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.of ( ...items )"},{"type":"clause","id":"sec-%typedarray%.prototype","aoid":null,"title":"%TypedArray%.prototype","titleHTML":"%TypedArray%.prototype","number":"22.2.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype"},{"type":"clause","id":"sec-get-%typedarray%-@@species","aoid":null,"title":"get %TypedArray% [ @@species ]","titleHTML":"get %TypedArray% [ @@species ]","number":"22.2.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get %TypedArray% [ @@species ]"},{"type":"clause","id":"sec-properties-of-the-%typedarray%-intrinsic-object","aoid":null,"title":"Properties of the %TypedArray% Intrinsic Object","titleHTML":"Properties of the %TypedArray% Intrinsic Object","number":"22.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the %TypedArray% Intrinsic Object"},{"type":"term","term":"%TypedArrayPrototype%","refId":"sec-properties-of-the-%typedarrayprototype%-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArrayPrototype%"},{"type":"clause","id":"sec-get-%typedarray%.prototype.buffer","aoid":null,"title":"get %TypedArray%.prototype.buffer","titleHTML":"get %TypedArray%.prototype.buffer","number":"22.2.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get %TypedArray%.prototype.buffer"},{"type":"clause","id":"sec-get-%typedarray%.prototype.bytelength","aoid":null,"title":"get %TypedArray%.prototype.byteLength","titleHTML":"get %TypedArray%.prototype.byteLength","number":"22.2.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get %TypedArray%.prototype.byteLength"},{"type":"clause","id":"sec-get-%typedarray%.prototype.byteoffset","aoid":null,"title":"get %TypedArray%.prototype.byteOffset","titleHTML":"get %TypedArray%.prototype.byteOffset","number":"22.2.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get %TypedArray%.prototype.byteOffset"},{"type":"clause","id":"sec-%typedarray%.prototype.constructor","aoid":null,"title":"%TypedArray%.prototype.constructor","titleHTML":"%TypedArray%.prototype.constructor","number":"22.2.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.constructor"},{"type":"op","aoid":"ValidateTypedArray","refId":"sec-validatetypedarray","location":"","key":"ValidateTypedArray"},{"type":"clause","id":"sec-validatetypedarray","aoid":"ValidateTypedArray","title":"Runtime Semantics: ValidateTypedArray ( O )","titleHTML":"Runtime Semantics: ValidateTypedArray ( <var>O</var> )","number":"22.2.3.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: ValidateTypedArray ( O )"},{"type":"clause","id":"sec-%typedarray%.prototype.copywithin","aoid":null,"title":"%TypedArray%.prototype.copyWithin (target, start [ , end ] )","titleHTML":"%TypedArray%.prototype.copyWithin (<var>target</var>, <var>start</var> [ , <var>end</var> ] )","number":"22.2.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.copyWithin (target, start [ , end ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.entries","aoid":null,"title":"%TypedArray%.prototype.entries ( )","titleHTML":"%TypedArray%.prototype.entries ( )","number":"22.2.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.entries ( )"},{"type":"clause","id":"sec-%typedarray%.prototype.every","aoid":null,"title":"%TypedArray%.prototype.every ( callbackfn [ , thisArg ] )","titleHTML":"%TypedArray%.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"22.2.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.every ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.fill","aoid":null,"title":"%TypedArray%.prototype.fill (value [ , start [ , end ] ] )","titleHTML":"%TypedArray%.prototype.fill (<var>value</var> [ , <var>start</var> [ , <var>end</var> ] ] )","number":"22.2.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.fill (value [ , start [ , end ] ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.filter","aoid":null,"title":"%TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )","titleHTML":"%TypedArray%.prototype.filter ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"22.2.3.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.find","aoid":null,"title":"%TypedArray%.prototype.find (predicate [ , thisArg ] )","titleHTML":"%TypedArray%.prototype.find (<var>predicate</var> [ , <var>thisArg</var> ] )","number":"22.2.3.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.find (predicate [ , thisArg ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.findindex","aoid":null,"title":"%TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )","titleHTML":"%TypedArray%.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )","number":"22.2.3.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.foreach","aoid":null,"title":"%TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )","titleHTML":"%TypedArray%.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"22.2.3.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.includes","aoid":null,"title":"%TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )","titleHTML":"%TypedArray%.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )","number":"22.2.3.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.indexof","aoid":null,"title":"%TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )","titleHTML":"%TypedArray%.prototype.indexOf (<var>searchElement</var> [ , <var>fromIndex</var> ] )","number":"22.2.3.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.join","aoid":null,"title":"%TypedArray%.prototype.join ( separator )","titleHTML":"%TypedArray%.prototype.join ( <var>separator</var> )","number":"22.2.3.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.join ( separator )"},{"type":"clause","id":"sec-%typedarray%.prototype.keys","aoid":null,"title":"%TypedArray%.prototype.keys ( )","titleHTML":"%TypedArray%.prototype.keys ( )","number":"22.2.3.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.keys ( )"},{"type":"clause","id":"sec-%typedarray%.prototype.lastindexof","aoid":null,"title":"%TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )","titleHTML":"%TypedArray%.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )","number":"22.2.3.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )"},{"type":"clause","id":"sec-get-%typedarray%.prototype.length","aoid":null,"title":"get %TypedArray%.prototype.length","titleHTML":"get %TypedArray%.prototype.length","number":"22.2.3.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get %TypedArray%.prototype.length"},{"type":"clause","id":"sec-%typedarray%.prototype.map","aoid":null,"title":"%TypedArray%.prototype.map ( callbackfn [ , thisArg ] )","titleHTML":"%TypedArray%.prototype.map ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"22.2.3.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.map ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.reduce","aoid":null,"title":"%TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )","titleHTML":"%TypedArray%.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )","number":"22.2.3.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.reduceright","aoid":null,"title":"%TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )","titleHTML":"%TypedArray%.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )","number":"22.2.3.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.reverse","aoid":null,"title":"%TypedArray%.prototype.reverse ( )","titleHTML":"%TypedArray%.prototype.reverse ( )","number":"22.2.3.22","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.reverse ( )"},{"type":"clause","id":"sec-%typedarray%.prototype.set-array-offset","aoid":null,"title":"%TypedArray%.prototype.set (array [ , offset ] )","titleHTML":"%TypedArray%.prototype.set (<var>array</var> [ , <var>offset</var> ] )","number":"22.2.3.23.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.set (array [ , offset ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.set-typedarray-offset","aoid":null,"title":"%TypedArray%.prototype.set(typedArray [ , offset ] )","titleHTML":"%TypedArray%.prototype.set(<var>typedArray</var> [ , <var>offset</var> ] )","number":"22.2.3.23.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.set(typedArray [ , offset ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.set-overloaded-offset","aoid":null,"title":"%TypedArray%.prototype.set ( overloaded [ , offset ])","titleHTML":"%TypedArray%.prototype.set ( <var>overloaded</var> [ , <var>offset</var> ])","number":"22.2.3.23","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.set ( overloaded [ , offset ])"},{"type":"clause","id":"sec-%typedarray%.prototype.slice","aoid":null,"title":"%TypedArray%.prototype.slice ( start, end )","titleHTML":"%TypedArray%.prototype.slice ( <var>start</var>, <var>end</var> )","number":"22.2.3.24","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.slice ( start, end )"},{"type":"clause","id":"sec-%typedarray%.prototype.some","aoid":null,"title":"%TypedArray%.prototype.some ( callbackfn [ , thisArg ] )","titleHTML":"%TypedArray%.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"22.2.3.25","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.some ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-%typedarray%.prototype.sort","aoid":null,"title":"%TypedArray%.prototype.sort ( comparefn )","titleHTML":"%TypedArray%.prototype.sort ( <var>comparefn</var> )","number":"22.2.3.26","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.sort ( comparefn )"},{"type":"clause","id":"sec-%typedarray%.prototype.subarray","aoid":null,"title":"%TypedArray%.prototype.subarray( begin, end )","titleHTML":"%TypedArray%.prototype.subarray( <var>begin</var>, <var>end</var> )","number":"22.2.3.27","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.subarray( begin, end )"},{"type":"clause","id":"sec-%typedarray%.prototype.tolocalestring","aoid":null,"title":"%TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])","titleHTML":"%TypedArray%.prototype.toLocaleString ([ <var>reserved1</var> [ , <var>reserved2</var> ] ])","number":"22.2.3.28","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])"},{"type":"clause","id":"sec-%typedarray%.prototype.tostring","aoid":null,"title":"%TypedArray%.prototype.toString ( )","titleHTML":"%TypedArray%.prototype.toString ( )","number":"22.2.3.29","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.toString ( )"},{"type":"clause","id":"sec-%typedarray%.prototype.values","aoid":null,"title":"%TypedArray%.prototype.values ( )","titleHTML":"%TypedArray%.prototype.values ( )","number":"22.2.3.30","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype.values ( )"},{"type":"clause","id":"sec-%typedarray%.prototype-@@iterator","aoid":null,"title":"%TypedArray%.prototype [ @@iterator ] ( )","titleHTML":"%TypedArray%.prototype [ @@iterator ] ( )","number":"22.2.3.31","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%TypedArray%.prototype [ @@iterator ] ( )"},{"type":"clause","id":"sec-get-%typedarray%.prototype-@@tostringtag","aoid":null,"title":"get %TypedArray%.prototype [ @@toStringTag ]","titleHTML":"get %TypedArray%.prototype [ @@toStringTag ]","number":"22.2.3.32","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get %TypedArray%.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-the-%typedarrayprototype%-object","aoid":null,"title":"Properties of the %TypedArrayPrototype% Object","titleHTML":"Properties of the %TypedArrayPrototype% Object","number":"22.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the %TypedArrayPrototype% Object"},{"type":"clause","id":"sec-typedarray","aoid":null,"title":"TypedArray ( )","titleHTML":"<var>TypedArray</var> ( )","number":"22.2.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArray ( )"},{"type":"op","aoid":"AllocateTypedArray","refId":"sec-allocatetypedarray","location":"","key":"AllocateTypedArray"},{"type":"clause","id":"sec-allocatetypedarray","aoid":"AllocateTypedArray","title":"Runtime Semantics: AllocateTypedArray (constructorName, newTarget, defaultProto [ , length ])","titleHTML":"Runtime Semantics: AllocateTypedArray (<var>constructorName</var>, <var>newTarget</var>, <var>defaultProto</var> [ , <var>length</var> ])","number":"22.2.4.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: AllocateTypedArray (constructorName, newTarget, defaultProto [ , length ])"},{"type":"op","aoid":"AllocateTypedArrayBuffer","refId":"sec-allocatetypedarraybuffer","location":"","key":"AllocateTypedArrayBuffer"},{"type":"clause","id":"sec-allocatetypedarraybuffer","aoid":"AllocateTypedArrayBuffer","title":"Runtime Semantics: AllocateTypedArrayBuffer ( O, length )","titleHTML":"Runtime Semantics: AllocateTypedArrayBuffer ( <var>O</var>, <var>length</var> )","number":"22.2.4.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: AllocateTypedArrayBuffer ( O, length )"},{"type":"clause","id":"sec-typedarray-length","aoid":null,"title":"TypedArray ( length )","titleHTML":"<var>TypedArray</var> ( <var>length</var> )","number":"22.2.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArray ( length )"},{"type":"clause","id":"sec-typedarray-typedarray","aoid":null,"title":"TypedArray ( typedArray )","titleHTML":"<var>TypedArray</var> ( <var>typedArray</var> )","number":"22.2.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArray ( typedArray )"},{"type":"clause","id":"sec-typedarray-object","aoid":null,"title":"TypedArray ( object )","titleHTML":"<var>TypedArray</var> ( <var>object</var> )","number":"22.2.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArray ( object )"},{"type":"clause","id":"sec-typedarray-buffer-byteoffset-length","aoid":null,"title":"TypedArray ( buffer [ , byteOffset [ , length ] ] )","titleHTML":"<var>TypedArray</var> ( <var>buffer</var> [ , <var>byteOffset</var> [ , <var>length</var> ] ] )","number":"22.2.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArray ( buffer [ , byteOffset [ , length ] ] )"},{"type":"op","aoid":"TypedArrayCreate","refId":"typedarray-create","location":"","key":"TypedArrayCreate"},{"type":"clause","id":"typedarray-create","aoid":"TypedArrayCreate","title":"TypedArrayCreate ( constructor, argumentList )","titleHTML":"TypedArrayCreate ( <var>constructor</var>, <var>argumentList</var> )","number":"22.2.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArrayCreate ( constructor, argumentList )"},{"type":"op","aoid":"TypedArraySpeciesCreate","refId":"typedarray-species-create","location":"","key":"TypedArraySpeciesCreate"},{"type":"clause","id":"typedarray-species-create","aoid":"TypedArraySpeciesCreate","title":"TypedArraySpeciesCreate ( exemplar, argumentList )","titleHTML":"TypedArraySpeciesCreate ( <var>exemplar</var>, <var>argumentList</var> )","number":"22.2.4.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArraySpeciesCreate ( exemplar, argumentList )"},{"type":"clause","id":"sec-typedarray-constructors","aoid":null,"title":"The TypedArray Constructors","titleHTML":"The <var>TypedArray</var> Constructors","number":"22.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The TypedArray Constructors"},{"type":"clause","id":"sec-typedarray.bytes_per_element","aoid":null,"title":"TypedArray.BYTES_PER_ELEMENT","titleHTML":"<var>TypedArray</var>.BYTES_PER_ELEMENT","number":"22.2.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArray.BYTES_PER_ELEMENT"},{"type":"clause","id":"sec-typedarray.prototype","aoid":null,"title":"TypedArray.prototype","titleHTML":"<var>TypedArray</var>.prototype","number":"22.2.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArray.prototype"},{"type":"clause","id":"sec-properties-of-the-typedarray-constructors","aoid":null,"title":"Properties of the TypedArray Constructors","titleHTML":"Properties of the <var>TypedArray</var> Constructors","number":"22.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the TypedArray Constructors"},{"type":"clause","id":"sec-typedarray.prototype.bytes_per_element","aoid":null,"title":"TypedArray.prototype.BYTES_PER_ELEMENT","titleHTML":"<var>TypedArray</var>.prototype.BYTES_PER_ELEMENT","number":"22.2.6.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArray.prototype.BYTES_PER_ELEMENT"},{"type":"clause","id":"sec-typedarray.prototype.constructor","aoid":null,"title":"TypedArray.prototype.constructor","titleHTML":"<var>TypedArray</var>.prototype.constructor","number":"22.2.6.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArray.prototype.constructor"},{"type":"clause","id":"sec-properties-of-typedarray-prototype-objects","aoid":null,"title":"Properties of TypedArray Prototype Objects","titleHTML":"Properties of <var>TypedArray</var> Prototype Objects","number":"22.2.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of TypedArray Prototype Objects"},{"type":"clause","id":"sec-properties-of-typedarray-instances","aoid":null,"title":"Properties of TypedArray Instances","titleHTML":"Properties of <var>TypedArray</var> Instances","number":"22.2.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of TypedArray Instances"},{"type":"clause","id":"sec-typedarray-objects","aoid":null,"title":"TypedArray Objects","titleHTML":"TypedArray Objects","number":"22.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TypedArray Objects"},{"type":"clause","id":"sec-indexed-collections","aoid":null,"title":"Indexed Collections","titleHTML":"Indexed Collections","number":"22","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Indexed Collections"},{"type":"term","term":"%Map%","refId":"sec-map-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Map%"},{"type":"clause","id":"sec-map-iterable","aoid":null,"title":"Map ( [ iterable ] )","titleHTML":"Map ( [ <var>iterable</var> ] )","number":"23.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map ( [ iterable ] )"},{"type":"clause","id":"sec-map-constructor","aoid":null,"title":"The Map Constructor","titleHTML":"The Map Constructor","number":"23.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Map Constructor"},{"type":"clause","id":"sec-map.prototype","aoid":null,"title":"Map.prototype","titleHTML":"Map.prototype","number":"23.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype"},{"type":"clause","id":"sec-get-map-@@species","aoid":null,"title":"get Map [ @@species ]","titleHTML":"get Map [ @@species ]","number":"23.1.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get Map [ @@species ]"},{"type":"clause","id":"sec-properties-of-the-map-constructor","aoid":null,"title":"Properties of the Map Constructor","titleHTML":"Properties of the Map Constructor","number":"23.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Map Constructor"},{"type":"term","term":"%MapPrototype%","refId":"sec-properties-of-the-map-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%MapPrototype%"},{"type":"clause","id":"sec-map.prototype.clear","aoid":null,"title":"Map.prototype.clear ( )","titleHTML":"Map.prototype.clear ( )","number":"23.1.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype.clear ( )"},{"type":"clause","id":"sec-map.prototype.constructor","aoid":null,"title":"Map.prototype.constructor","titleHTML":"Map.prototype.constructor","number":"23.1.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype.constructor"},{"type":"clause","id":"sec-map.prototype.delete","aoid":null,"title":"Map.prototype.delete ( key )","titleHTML":"Map.prototype.delete ( <var>key</var> )","number":"23.1.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype.delete ( key )"},{"type":"clause","id":"sec-map.prototype.entries","aoid":null,"title":"Map.prototype.entries ( )","titleHTML":"Map.prototype.entries ( )","number":"23.1.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype.entries ( )"},{"type":"clause","id":"sec-map.prototype.foreach","aoid":null,"title":"Map.prototype.forEach ( callbackfn [ , thisArg ] )","titleHTML":"Map.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"23.1.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype.forEach ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-map.prototype.get","aoid":null,"title":"Map.prototype.get ( key )","titleHTML":"Map.prototype.get ( <var>key</var> )","number":"23.1.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype.get ( key )"},{"type":"clause","id":"sec-map.prototype.has","aoid":null,"title":"Map.prototype.has ( key )","titleHTML":"Map.prototype.has ( <var>key</var> )","number":"23.1.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype.has ( key )"},{"type":"clause","id":"sec-map.prototype.keys","aoid":null,"title":"Map.prototype.keys ( )","titleHTML":"Map.prototype.keys ( )","number":"23.1.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype.keys ( )"},{"type":"clause","id":"sec-map.prototype.set","aoid":null,"title":"Map.prototype.set ( key, value )","titleHTML":"Map.prototype.set ( <var>key</var>, <var>value</var> )","number":"23.1.3.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype.set ( key, value )"},{"type":"clause","id":"sec-get-map.prototype.size","aoid":null,"title":"get Map.prototype.size","titleHTML":"get Map.prototype.size","number":"23.1.3.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get Map.prototype.size"},{"type":"clause","id":"sec-map.prototype.values","aoid":null,"title":"Map.prototype.values ( )","titleHTML":"Map.prototype.values ( )","number":"23.1.3.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype.values ( )"},{"type":"clause","id":"sec-map.prototype-@@iterator","aoid":null,"title":"Map.prototype [ @@iterator ] ( )","titleHTML":"Map.prototype [ @@iterator ] ( )","number":"23.1.3.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype [ @@iterator ] ( )"},{"type":"clause","id":"sec-map.prototype-@@tostringtag","aoid":null,"title":"Map.prototype [ @@toStringTag ]","titleHTML":"Map.prototype [ @@toStringTag ]","number":"23.1.3.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-the-map-prototype-object","aoid":null,"title":"Properties of the Map Prototype Object","titleHTML":"Properties of the Map Prototype Object","number":"23.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Map Prototype Object"},{"type":"clause","id":"sec-properties-of-map-instances","aoid":null,"title":"Properties of Map Instances","titleHTML":"Properties of Map Instances","number":"23.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Map Instances"},{"type":"op","aoid":"CreateMapIterator","refId":"sec-createmapiterator","location":"","key":"CreateMapIterator"},{"type":"clause","id":"sec-createmapiterator","aoid":"CreateMapIterator","title":"CreateMapIterator Abstract Operation","titleHTML":"CreateMapIterator Abstract Operation","number":"23.1.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateMapIterator Abstract Operation"},{"type":"term","term":"%MapIteratorPrototype%","refId":"sec-%mapiteratorprototype%-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%MapIteratorPrototype%"},{"type":"clause","id":"sec-%mapiteratorprototype%.next","aoid":null,"title":"%MapIteratorPrototype%.next ( )","titleHTML":"%MapIteratorPrototype%.next ( )","number":"23.1.5.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%MapIteratorPrototype%.next ( )"},{"type":"clause","id":"sec-%mapiteratorprototype%-@@tostringtag","aoid":null,"title":"%MapIteratorPrototype% [ @@toStringTag ]","titleHTML":"%MapIteratorPrototype% [ @@toStringTag ]","number":"23.1.5.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%MapIteratorPrototype% [ @@toStringTag ]"},{"type":"clause","id":"sec-%mapiteratorprototype%-object","aoid":null,"title":"The %MapIteratorPrototype% Object","titleHTML":"The %MapIteratorPrototype% Object","number":"23.1.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The %MapIteratorPrototype% Object"},{"type":"table","id":"table-50","number":51,"caption":"Table 51: Internal Slots of Map Iterator Instances","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 51: Internal Slots of Map Iterator Instances"},{"type":"clause","id":"sec-properties-of-map-iterator-instances","aoid":null,"title":"Properties of Map Iterator Instances","titleHTML":"Properties of Map Iterator Instances","number":"23.1.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Map Iterator Instances"},{"type":"clause","id":"sec-map-iterator-objects","aoid":null,"title":"Map Iterator Objects","titleHTML":"Map Iterator Objects","number":"23.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map Iterator Objects"},{"type":"clause","id":"sec-map-objects","aoid":null,"title":"Map Objects","titleHTML":"Map Objects","number":"23.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Map Objects"},{"type":"term","term":"%Set%","refId":"sec-set-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Set%"},{"type":"clause","id":"sec-set-iterable","aoid":null,"title":"Set ( [ iterable ] )","titleHTML":"Set ( [ <var>iterable</var> ] )","number":"23.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set ( [ iterable ] )"},{"type":"clause","id":"sec-set-constructor","aoid":null,"title":"The Set Constructor","titleHTML":"The Set Constructor","number":"23.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Set Constructor"},{"type":"clause","id":"sec-set.prototype","aoid":null,"title":"Set.prototype","titleHTML":"Set.prototype","number":"23.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype"},{"type":"clause","id":"sec-get-set-@@species","aoid":null,"title":"get Set [ @@species ]","titleHTML":"get Set [ @@species ]","number":"23.2.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get Set [ @@species ]"},{"type":"clause","id":"sec-properties-of-the-set-constructor","aoid":null,"title":"Properties of the Set Constructor","titleHTML":"Properties of the Set Constructor","number":"23.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Set Constructor"},{"type":"term","term":"%SetPrototype%","refId":"sec-properties-of-the-set-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%SetPrototype%"},{"type":"clause","id":"sec-set.prototype.add","aoid":null,"title":"Set.prototype.add ( value )","titleHTML":"Set.prototype.add ( <var>value</var> )","number":"23.2.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype.add ( value )"},{"type":"clause","id":"sec-set.prototype.clear","aoid":null,"title":"Set.prototype.clear ( )","titleHTML":"Set.prototype.clear ( )","number":"23.2.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype.clear ( )"},{"type":"clause","id":"sec-set.prototype.constructor","aoid":null,"title":"Set.prototype.constructor","titleHTML":"Set.prototype.constructor","number":"23.2.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype.constructor"},{"type":"clause","id":"sec-set.prototype.delete","aoid":null,"title":"Set.prototype.delete ( value )","titleHTML":"Set.prototype.delete ( <var>value</var> )","number":"23.2.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype.delete ( value )"},{"type":"clause","id":"sec-set.prototype.entries","aoid":null,"title":"Set.prototype.entries ( )","titleHTML":"Set.prototype.entries ( )","number":"23.2.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype.entries ( )"},{"type":"clause","id":"sec-set.prototype.foreach","aoid":null,"title":"Set.prototype.forEach ( callbackfn [ , thisArg ] )","titleHTML":"Set.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )","number":"23.2.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype.forEach ( callbackfn [ , thisArg ] )"},{"type":"clause","id":"sec-set.prototype.has","aoid":null,"title":"Set.prototype.has ( value )","titleHTML":"Set.prototype.has ( <var>value</var> )","number":"23.2.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype.has ( value )"},{"type":"clause","id":"sec-set.prototype.keys","aoid":null,"title":"Set.prototype.keys ( )","titleHTML":"Set.prototype.keys ( )","number":"23.2.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype.keys ( )"},{"type":"clause","id":"sec-get-set.prototype.size","aoid":null,"title":"get Set.prototype.size","titleHTML":"get Set.prototype.size","number":"23.2.3.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get Set.prototype.size"},{"type":"clause","id":"sec-set.prototype.values","aoid":null,"title":"Set.prototype.values ( )","titleHTML":"Set.prototype.values ( )","number":"23.2.3.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype.values ( )"},{"type":"clause","id":"sec-set.prototype-@@iterator","aoid":null,"title":"Set.prototype [ @@iterator ] ( )","titleHTML":"Set.prototype [ @@iterator ] ( )","number":"23.2.3.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype [ @@iterator ] ( )"},{"type":"clause","id":"sec-set.prototype-@@tostringtag","aoid":null,"title":"Set.prototype [ @@toStringTag ]","titleHTML":"Set.prototype [ @@toStringTag ]","number":"23.2.3.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-the-set-prototype-object","aoid":null,"title":"Properties of the Set Prototype Object","titleHTML":"Properties of the Set Prototype Object","number":"23.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Set Prototype Object"},{"type":"clause","id":"sec-properties-of-set-instances","aoid":null,"title":"Properties of Set Instances","titleHTML":"Properties of Set Instances","number":"23.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Set Instances"},{"type":"op","aoid":"CreateSetIterator","refId":"sec-createsetiterator","location":"","key":"CreateSetIterator"},{"type":"clause","id":"sec-createsetiterator","aoid":"CreateSetIterator","title":"CreateSetIterator Abstract Operation","titleHTML":"CreateSetIterator Abstract Operation","number":"23.2.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateSetIterator Abstract Operation"},{"type":"term","term":"%SetIteratorPrototype%","refId":"sec-%setiteratorprototype%-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%SetIteratorPrototype%"},{"type":"clause","id":"sec-%setiteratorprototype%.next","aoid":null,"title":"%SetIteratorPrototype%.next ( )","titleHTML":"%SetIteratorPrototype%.next ( )","number":"23.2.5.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%SetIteratorPrototype%.next ( )"},{"type":"clause","id":"sec-%setiteratorprototype%-@@tostringtag","aoid":null,"title":"%SetIteratorPrototype% [ @@toStringTag ]","titleHTML":"%SetIteratorPrototype% [ @@toStringTag ]","number":"23.2.5.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%SetIteratorPrototype% [ @@toStringTag ]"},{"type":"clause","id":"sec-%setiteratorprototype%-object","aoid":null,"title":"The %SetIteratorPrototype% Object","titleHTML":"The %SetIteratorPrototype% Object","number":"23.2.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The %SetIteratorPrototype% Object"},{"type":"table","id":"table-51","number":52,"caption":"Table 52: Internal Slots of Set Iterator Instances","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 52: Internal Slots of Set Iterator Instances"},{"type":"clause","id":"sec-properties-of-set-iterator-instances","aoid":null,"title":"Properties of Set Iterator Instances","titleHTML":"Properties of Set Iterator Instances","number":"23.2.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Set Iterator Instances"},{"type":"clause","id":"sec-set-iterator-objects","aoid":null,"title":"Set Iterator Objects","titleHTML":"Set Iterator Objects","number":"23.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set Iterator Objects"},{"type":"clause","id":"sec-set-objects","aoid":null,"title":"Set Objects","titleHTML":"Set Objects","number":"23.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Set Objects"},{"type":"term","term":"%WeakMap%","refId":"sec-weakmap-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%WeakMap%"},{"type":"clause","id":"sec-weakmap-iterable","aoid":null,"title":"WeakMap ( [ iterable ] )","titleHTML":"WeakMap ( [ <var>iterable</var> ] )","number":"23.3.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakMap ( [ iterable ] )"},{"type":"clause","id":"sec-weakmap-constructor","aoid":null,"title":"The WeakMap Constructor","titleHTML":"The WeakMap Constructor","number":"23.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The WeakMap Constructor"},{"type":"clause","id":"sec-weakmap.prototype","aoid":null,"title":"WeakMap.prototype","titleHTML":"WeakMap.prototype","number":"23.3.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakMap.prototype"},{"type":"clause","id":"sec-properties-of-the-weakmap-constructor","aoid":null,"title":"Properties of the WeakMap Constructor","titleHTML":"Properties of the WeakMap Constructor","number":"23.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the WeakMap Constructor"},{"type":"term","term":"%WeakMapPrototype%","refId":"sec-properties-of-the-weakmap-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%WeakMapPrototype%"},{"type":"clause","id":"sec-weakmap.prototype.constructor","aoid":null,"title":"WeakMap.prototype.constructor","titleHTML":"WeakMap.prototype.constructor","number":"23.3.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakMap.prototype.constructor"},{"type":"clause","id":"sec-weakmap.prototype.delete","aoid":null,"title":"WeakMap.prototype.delete ( key )","titleHTML":"WeakMap.prototype.delete ( <var>key</var> )","number":"23.3.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakMap.prototype.delete ( key )"},{"type":"clause","id":"sec-weakmap.prototype.get","aoid":null,"title":"WeakMap.prototype.get ( key )","titleHTML":"WeakMap.prototype.get ( <var>key</var> )","number":"23.3.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakMap.prototype.get ( key )"},{"type":"clause","id":"sec-weakmap.prototype.has","aoid":null,"title":"WeakMap.prototype.has ( key )","titleHTML":"WeakMap.prototype.has ( <var>key</var> )","number":"23.3.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakMap.prototype.has ( key )"},{"type":"clause","id":"sec-weakmap.prototype.set","aoid":null,"title":"WeakMap.prototype.set ( key, value )","titleHTML":"WeakMap.prototype.set ( <var>key</var>, <var>value</var> )","number":"23.3.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakMap.prototype.set ( key, value )"},{"type":"clause","id":"sec-weakmap.prototype-@@tostringtag","aoid":null,"title":"WeakMap.prototype [ @@toStringTag ]","titleHTML":"WeakMap.prototype [ @@toStringTag ]","number":"23.3.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakMap.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-the-weakmap-prototype-object","aoid":null,"title":"Properties of the WeakMap Prototype Object","titleHTML":"Properties of the WeakMap Prototype Object","number":"23.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the WeakMap Prototype Object"},{"type":"clause","id":"sec-properties-of-weakmap-instances","aoid":null,"title":"Properties of WeakMap Instances","titleHTML":"Properties of WeakMap Instances","number":"23.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of WeakMap Instances"},{"type":"clause","id":"sec-weakmap-objects","aoid":null,"title":"WeakMap Objects","titleHTML":"WeakMap Objects","number":"23.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakMap Objects"},{"type":"term","term":"%WeakSet%","refId":"sec-weakset-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%WeakSet%"},{"type":"clause","id":"sec-weakset-iterable","aoid":null,"title":"WeakSet ( [ iterable ] )","titleHTML":"WeakSet ( [ <var>iterable</var> ] )","number":"23.4.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakSet ( [ iterable ] )"},{"type":"clause","id":"sec-weakset-constructor","aoid":null,"title":"The WeakSet Constructor","titleHTML":"The WeakSet Constructor","number":"23.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The WeakSet Constructor"},{"type":"clause","id":"sec-weakset.prototype","aoid":null,"title":"WeakSet.prototype","titleHTML":"WeakSet.prototype","number":"23.4.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakSet.prototype"},{"type":"clause","id":"sec-properties-of-the-weakset-constructor","aoid":null,"title":"Properties of the WeakSet Constructor","titleHTML":"Properties of the WeakSet Constructor","number":"23.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the WeakSet Constructor"},{"type":"term","term":"%WeakSetPrototype%","refId":"sec-properties-of-the-weakset-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%WeakSetPrototype%"},{"type":"clause","id":"sec-weakset.prototype.add","aoid":null,"title":"WeakSet.prototype.add ( value )","titleHTML":"WeakSet.prototype.add ( <var>value</var> )","number":"23.4.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakSet.prototype.add ( value )"},{"type":"clause","id":"sec-weakset.prototype.constructor","aoid":null,"title":"WeakSet.prototype.constructor","titleHTML":"WeakSet.prototype.constructor","number":"23.4.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakSet.prototype.constructor"},{"type":"clause","id":"sec-weakset.prototype.delete","aoid":null,"title":"WeakSet.prototype.delete ( value )","titleHTML":"WeakSet.prototype.delete ( <var>value</var> )","number":"23.4.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakSet.prototype.delete ( value )"},{"type":"clause","id":"sec-weakset.prototype.has","aoid":null,"title":"WeakSet.prototype.has ( value )","titleHTML":"WeakSet.prototype.has ( <var>value</var> )","number":"23.4.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakSet.prototype.has ( value )"},{"type":"clause","id":"sec-weakset.prototype-@@tostringtag","aoid":null,"title":"WeakSet.prototype [ @@toStringTag ]","titleHTML":"WeakSet.prototype [ @@toStringTag ]","number":"23.4.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakSet.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-the-weakset-prototype-object","aoid":null,"title":"Properties of the WeakSet Prototype Object","titleHTML":"Properties of the WeakSet Prototype Object","number":"23.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the WeakSet Prototype Object"},{"type":"clause","id":"sec-properties-of-weakset-instances","aoid":null,"title":"Properties of WeakSet Instances","titleHTML":"Properties of WeakSet Instances","number":"23.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of WeakSet Instances"},{"type":"clause","id":"sec-weakset-objects","aoid":null,"title":"WeakSet Objects","titleHTML":"WeakSet Objects","number":"23.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"WeakSet Objects"},{"type":"clause","id":"sec-keyed-collection","aoid":null,"title":"Keyed Collection","titleHTML":"Keyed Collection","number":"23","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Keyed Collection"},{"type":"op","aoid":"AllocateArrayBuffer","refId":"sec-allocatearraybuffer","location":"","key":"AllocateArrayBuffer"},{"type":"clause","id":"sec-allocatearraybuffer","aoid":"AllocateArrayBuffer","title":"AllocateArrayBuffer ( constructor, byteLength )","titleHTML":"AllocateArrayBuffer ( <var>constructor</var>, <var>byteLength</var> )","number":"24.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"AllocateArrayBuffer ( constructor, byteLength )"},{"type":"op","aoid":"IsDetachedBuffer","refId":"sec-isdetachedbuffer","location":"","key":"IsDetachedBuffer"},{"type":"clause","id":"sec-isdetachedbuffer","aoid":"IsDetachedBuffer","title":"IsDetachedBuffer ( arrayBuffer )","titleHTML":"IsDetachedBuffer ( <var>arrayBuffer</var> )","number":"24.1.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsDetachedBuffer ( arrayBuffer )"},{"type":"op","aoid":"DetachArrayBuffer","refId":"sec-detacharraybuffer","location":"","key":"DetachArrayBuffer"},{"type":"clause","id":"sec-detacharraybuffer","aoid":"DetachArrayBuffer","title":"DetachArrayBuffer ( arrayBuffer )","titleHTML":"DetachArrayBuffer ( <var>arrayBuffer</var> )","number":"24.1.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DetachArrayBuffer ( arrayBuffer )"},{"type":"op","aoid":"CloneArrayBuffer","refId":"sec-clonearraybuffer","location":"","key":"CloneArrayBuffer"},{"type":"clause","id":"sec-clonearraybuffer","aoid":"CloneArrayBuffer","title":"CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength [ , cloneConstructor ] )","titleHTML":"CloneArrayBuffer ( <var>srcBuffer</var>, <var>srcByteOffset</var>, <var>srcLength</var> [ , <var>cloneConstructor</var> ] )","number":"24.1.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength [ , cloneConstructor ] )"},{"type":"op","aoid":"GetValueFromBuffer","refId":"sec-getvaluefrombuffer","location":"","key":"GetValueFromBuffer"},{"type":"clause","id":"sec-getvaluefrombuffer","aoid":"GetValueFromBuffer","title":"GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian ] )","titleHTML":"GetValueFromBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var> [ , <var>isLittleEndian</var> ] )","number":"24.1.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian ] )"},{"type":"op","aoid":"SetValueInBuffer","refId":"sec-setvalueinbuffer","location":"","key":"SetValueInBuffer"},{"type":"clause","id":"sec-setvalueinbuffer","aoid":"SetValueInBuffer","title":"SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )","titleHTML":"SetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var> [ , <var>isLittleEndian</var> ] )","number":"24.1.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )"},{"type":"clause","id":"sec-abstract-operations-for-arraybuffer-objects","aoid":null,"title":"Abstract Operations For ArrayBuffer Objects","titleHTML":"Abstract Operations For ArrayBuffer Objects","number":"24.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Abstract Operations For ArrayBuffer Objects"},{"type":"term","term":"%ArrayBuffer%","refId":"sec-arraybuffer-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ArrayBuffer%"},{"type":"clause","id":"sec-arraybuffer-length","aoid":null,"title":"ArrayBuffer ( [ length ] )","titleHTML":"ArrayBuffer ( [ <var>length</var> ] )","number":"24.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayBuffer ( [ length ] )"},{"type":"clause","id":"sec-arraybuffer-constructor","aoid":null,"title":"The ArrayBuffer Constructor","titleHTML":"The ArrayBuffer Constructor","number":"24.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The ArrayBuffer Constructor"},{"type":"clause","id":"sec-arraybuffer.isview","aoid":null,"title":"ArrayBuffer.isView ( arg )","titleHTML":"ArrayBuffer.isView ( <var>arg</var> )","number":"24.1.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayBuffer.isView ( arg )"},{"type":"clause","id":"sec-arraybuffer.prototype","aoid":null,"title":"ArrayBuffer.prototype","titleHTML":"ArrayBuffer.prototype","number":"24.1.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayBuffer.prototype"},{"type":"clause","id":"sec-get-arraybuffer-@@species","aoid":null,"title":"get ArrayBuffer [ @@species ]","titleHTML":"get ArrayBuffer [ @@species ]","number":"24.1.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get ArrayBuffer [ @@species ]"},{"type":"clause","id":"sec-properties-of-the-arraybuffer-constructor","aoid":null,"title":"Properties of the ArrayBuffer Constructor","titleHTML":"Properties of the ArrayBuffer Constructor","number":"24.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the ArrayBuffer Constructor"},{"type":"term","term":"%ArrayBufferPrototype%","refId":"sec-properties-of-the-arraybuffer-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%ArrayBufferPrototype%"},{"type":"clause","id":"sec-get-arraybuffer.prototype.bytelength","aoid":null,"title":"get ArrayBuffer.prototype.byteLength","titleHTML":"get ArrayBuffer.prototype.byteLength","number":"24.1.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get ArrayBuffer.prototype.byteLength"},{"type":"clause","id":"sec-arraybuffer.prototype.constructor","aoid":null,"title":"ArrayBuffer.prototype.constructor","titleHTML":"ArrayBuffer.prototype.constructor","number":"24.1.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayBuffer.prototype.constructor"},{"type":"clause","id":"sec-arraybuffer.prototype.slice","aoid":null,"title":"ArrayBuffer.prototype.slice ( start, end )","titleHTML":"ArrayBuffer.prototype.slice ( <var>start</var>, <var>end</var> )","number":"24.1.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayBuffer.prototype.slice ( start, end )"},{"type":"clause","id":"sec-arraybuffer.prototype-@@tostringtag","aoid":null,"title":"ArrayBuffer.prototype [ @@toStringTag ]","titleHTML":"ArrayBuffer.prototype [ @@toStringTag ]","number":"24.1.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayBuffer.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-the-arraybuffer-prototype-object","aoid":null,"title":"Properties of the ArrayBuffer Prototype Object","titleHTML":"Properties of the ArrayBuffer Prototype Object","number":"24.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the ArrayBuffer Prototype Object"},{"type":"clause","id":"sec-properties-of-the-arraybuffer-instances","aoid":null,"title":"Properties of the ArrayBuffer Instances","titleHTML":"Properties of the ArrayBuffer Instances","number":"24.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the ArrayBuffer Instances"},{"type":"clause","id":"sec-arraybuffer-objects","aoid":null,"title":"ArrayBuffer Objects","titleHTML":"ArrayBuffer Objects","number":"24.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"ArrayBuffer Objects"},{"type":"op","aoid":"GetViewValue","refId":"sec-getviewvalue","location":"","key":"GetViewValue"},{"type":"clause","id":"sec-getviewvalue","aoid":"GetViewValue","title":"GetViewValue ( view, requestIndex, isLittleEndian, type )","titleHTML":"GetViewValue ( <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, <var>type</var> )","number":"24.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetViewValue ( view, requestIndex, isLittleEndian, type )"},{"type":"op","aoid":"SetViewValue","refId":"sec-setviewvalue","location":"","key":"SetViewValue"},{"type":"clause","id":"sec-setviewvalue","aoid":"SetViewValue","title":"SetViewValue ( view, requestIndex, isLittleEndian, type, value )","titleHTML":"SetViewValue ( <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, <var>type</var>, <var>value</var> )","number":"24.2.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"SetViewValue ( view, requestIndex, isLittleEndian, type, value )"},{"type":"clause","id":"sec-abstract-operations-for-dataview-objects","aoid":null,"title":"Abstract Operations For DataView Objects","titleHTML":"Abstract Operations For DataView Objects","number":"24.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Abstract Operations For DataView Objects"},{"type":"term","term":"%DataView%","refId":"sec-dataview-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%DataView%"},{"type":"clause","id":"sec-dataview-buffer-byteoffset-bytelength","aoid":null,"title":"DataView ( buffer [ , byteOffset [ , byteLength  ] ] )","titleHTML":"DataView ( <var>buffer</var> [ , <var>byteOffset</var> [ , <var>byteLength</var>  ] ] )","number":"24.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView ( buffer [ , byteOffset [ , byteLength  ] ] )"},{"type":"clause","id":"sec-dataview-constructor","aoid":null,"title":"The DataView Constructor","titleHTML":"The DataView Constructor","number":"24.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The DataView Constructor"},{"type":"clause","id":"sec-dataview.prototype","aoid":null,"title":"DataView.prototype","titleHTML":"DataView.prototype","number":"24.2.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype"},{"type":"clause","id":"sec-properties-of-the-dataview-constructor","aoid":null,"title":"Properties of the DataView Constructor","titleHTML":"Properties of the DataView Constructor","number":"24.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the DataView Constructor"},{"type":"term","term":"%DataViewPrototype%","refId":"sec-properties-of-the-dataview-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%DataViewPrototype%"},{"type":"clause","id":"sec-get-dataview.prototype.buffer","aoid":null,"title":"get DataView.prototype.buffer","titleHTML":"get DataView.prototype.buffer","number":"24.2.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get DataView.prototype.buffer"},{"type":"clause","id":"sec-get-dataview.prototype.bytelength","aoid":null,"title":"get DataView.prototype.byteLength","titleHTML":"get DataView.prototype.byteLength","number":"24.2.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get DataView.prototype.byteLength"},{"type":"clause","id":"sec-get-dataview.prototype.byteoffset","aoid":null,"title":"get DataView.prototype.byteOffset","titleHTML":"get DataView.prototype.byteOffset","number":"24.2.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get DataView.prototype.byteOffset"},{"type":"clause","id":"sec-dataview.prototype.constructor","aoid":null,"title":"DataView.prototype.constructor","titleHTML":"DataView.prototype.constructor","number":"24.2.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.constructor"},{"type":"clause","id":"sec-dataview.prototype.getfloat32","aoid":null,"title":"DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )","titleHTML":"DataView.prototype.getFloat32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.getfloat64","aoid":null,"title":"DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )","titleHTML":"DataView.prototype.getFloat64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.getint8","aoid":null,"title":"DataView.prototype.getInt8 ( byteOffset )","titleHTML":"DataView.prototype.getInt8 ( <var>byteOffset</var> )","number":"24.2.4.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.getInt8 ( byteOffset )"},{"type":"clause","id":"sec-dataview.prototype.getint16","aoid":null,"title":"DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )","titleHTML":"DataView.prototype.getInt16 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.getint32","aoid":null,"title":"DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )","titleHTML":"DataView.prototype.getInt32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.getuint8","aoid":null,"title":"DataView.prototype.getUint8 ( byteOffset )","titleHTML":"DataView.prototype.getUint8 ( <var>byteOffset</var> )","number":"24.2.4.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.getUint8 ( byteOffset )"},{"type":"clause","id":"sec-dataview.prototype.getuint16","aoid":null,"title":"DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )","titleHTML":"DataView.prototype.getUint16 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.getuint32","aoid":null,"title":"DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )","titleHTML":"DataView.prototype.getUint32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.setfloat32","aoid":null,"title":"DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )","titleHTML":"DataView.prototype.setFloat32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.setfloat64","aoid":null,"title":"DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )","titleHTML":"DataView.prototype.setFloat64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.setint8","aoid":null,"title":"DataView.prototype.setInt8 ( byteOffset, value )","titleHTML":"DataView.prototype.setInt8 ( <var>byteOffset</var>, <var>value</var> )","number":"24.2.4.15","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.setInt8 ( byteOffset, value )"},{"type":"clause","id":"sec-dataview.prototype.setint16","aoid":null,"title":"DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )","titleHTML":"DataView.prototype.setInt16 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.16","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.setint32","aoid":null,"title":"DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )","titleHTML":"DataView.prototype.setInt32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.17","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.setuint8","aoid":null,"title":"DataView.prototype.setUint8 ( byteOffset, value )","titleHTML":"DataView.prototype.setUint8 ( <var>byteOffset</var>, <var>value</var> )","number":"24.2.4.18","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.setUint8 ( byteOffset, value )"},{"type":"clause","id":"sec-dataview.prototype.setuint16","aoid":null,"title":"DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )","titleHTML":"DataView.prototype.setUint16 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.19","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype.setuint32","aoid":null,"title":"DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )","titleHTML":"DataView.prototype.setUint32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )","number":"24.2.4.20","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )"},{"type":"clause","id":"sec-dataview.prototype-@@tostringtag","aoid":null,"title":"DataView.prototype [ @@toStringTag ]","titleHTML":"DataView.prototype [ @@toStringTag ]","number":"24.2.4.21","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-the-dataview-prototype-object","aoid":null,"title":"Properties of the DataView Prototype Object","titleHTML":"Properties of the DataView Prototype Object","number":"24.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the DataView Prototype Object"},{"type":"clause","id":"sec-properties-of-dataview-instances","aoid":null,"title":"Properties of DataView Instances","titleHTML":"Properties of DataView Instances","number":"24.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of DataView Instances"},{"type":"clause","id":"sec-dataview-objects","aoid":null,"title":"DataView Objects","titleHTML":"DataView Objects","number":"24.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"DataView Objects"},{"type":"term","term":"%JSON%","refId":"sec-json-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%JSON%"},{"type":"op","aoid":"InternalizeJSONProperty","refId":"sec-internalizejsonproperty","location":"","key":"InternalizeJSONProperty"},{"type":"clause","id":"sec-internalizejsonproperty","aoid":"InternalizeJSONProperty","title":"Runtime Semantics: InternalizeJSONProperty( holder, name)","titleHTML":"Runtime Semantics: InternalizeJSONProperty( <var>holder</var>, <var>name</var>)","number":"24.3.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: InternalizeJSONProperty( holder, name)"},{"type":"clause","id":"sec-json.parse","aoid":null,"title":"JSON.parse ( text [ , reviver ] )","titleHTML":"JSON.parse ( <var>text</var> [ , <var>reviver</var> ] )","number":"24.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"JSON.parse ( text [ , reviver ] )"},{"type":"op","aoid":"SerializeJSONProperty","refId":"sec-serializejsonproperty","location":"","key":"SerializeJSONProperty"},{"type":"clause","id":"sec-serializejsonproperty","aoid":"SerializeJSONProperty","title":"Runtime Semantics: SerializeJSONProperty ( key, holder )","titleHTML":"Runtime Semantics: SerializeJSONProperty ( <var>key</var>, <var>holder</var> )","number":"24.3.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: SerializeJSONProperty ( key, holder )"},{"type":"op","aoid":"QuoteJSONString","refId":"sec-quotejsonstring","location":"","key":"QuoteJSONString"},{"type":"clause","id":"sec-quotejsonstring","aoid":"QuoteJSONString","title":"Runtime Semantics: QuoteJSONString ( value )","titleHTML":"Runtime Semantics: QuoteJSONString ( <var>value</var> )","number":"24.3.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: QuoteJSONString ( value )"},{"type":"op","aoid":"SerializeJSONObject","refId":"sec-serializejsonobject","location":"","key":"SerializeJSONObject"},{"type":"clause","id":"sec-serializejsonobject","aoid":"SerializeJSONObject","title":"Runtime Semantics: SerializeJSONObject ( value )","titleHTML":"Runtime Semantics: SerializeJSONObject ( <var>value</var> )","number":"24.3.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: SerializeJSONObject ( value )"},{"type":"op","aoid":"SerializeJSONArray","refId":"sec-serializejsonarray","location":"","key":"SerializeJSONArray"},{"type":"clause","id":"sec-serializejsonarray","aoid":"SerializeJSONArray","title":"Runtime Semantics: SerializeJSONArray ( value )","titleHTML":"Runtime Semantics: SerializeJSONArray ( <var>value</var> )","number":"24.3.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: SerializeJSONArray ( value )"},{"type":"clause","id":"sec-json.stringify","aoid":null,"title":"JSON.stringify ( value [ , replacer [ , space ] ] )","titleHTML":"JSON.stringify ( <var>value</var> [ , <var>replacer</var> [ , <var>space</var> ] ] )","number":"24.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"JSON.stringify ( value [ , replacer [ , space ] ] )"},{"type":"clause","id":"sec-json-@@tostringtag","aoid":null,"title":"JSON [ @@toStringTag ]","titleHTML":"JSON [ @@toStringTag ]","number":"24.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"JSON [ @@toStringTag ]"},{"type":"clause","id":"sec-json-object","aoid":null,"title":"The JSON Object","titleHTML":"The JSON Object","number":"24.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The JSON Object"},{"type":"clause","id":"sec-structured-data","aoid":null,"title":"Structured Data","titleHTML":"Structured Data","number":"24","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Structured Data"},{"type":"table","id":"table-52","number":53,"caption":"Table 53: <i>Iterable</i> Interface Required Properties","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 53: <i>Iterable</i> Interface Required Properties"},{"type":"clause","id":"sec-iterable-interface","aoid":null,"title":"The  Iterable Interface","titleHTML":"The  <i>Iterable</i> Interface","number":"25.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The  Iterable Interface"},{"type":"table","id":"table-53","number":54,"caption":"Table 54: <i>Iterator</i> Interface Required Properties","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 54: <i>Iterator</i> Interface Required Properties"},{"type":"table","id":"table-54","number":55,"caption":"Table 55: <i>Iterator</i> Interface Optional Properties","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 55: <i>Iterator</i> Interface Optional Properties"},{"type":"clause","id":"sec-iterator-interface","aoid":null,"title":"The  Iterator Interface","titleHTML":"The  <i>Iterator</i> Interface","number":"25.1.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The  Iterator Interface"},{"type":"table","id":"table-55","number":56,"caption":"Table 56: <i>IteratorResult</i> Interface Properties","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 56: <i>IteratorResult</i> Interface Properties"},{"type":"clause","id":"sec-iteratorresult-interface","aoid":null,"title":"The IteratorResult Interface","titleHTML":"The IteratorResult Interface","number":"25.1.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The IteratorResult Interface"},{"type":"clause","id":"sec-common-iteration-interfaces","aoid":null,"title":"Common Iteration Interfaces","titleHTML":"Common Iteration Interfaces","number":"25.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Common Iteration Interfaces"},{"type":"term","term":"%IteratorPrototype%","refId":"sec-%iteratorprototype%-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%IteratorPrototype%"},{"type":"clause","id":"sec-%iteratorprototype%-@@iterator","aoid":null,"title":"%IteratorPrototype% [ @@iterator ] ( )","titleHTML":"%IteratorPrototype% [ @@iterator ] ( )","number":"25.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%IteratorPrototype% [ @@iterator ] ( )"},{"type":"clause","id":"sec-%iteratorprototype%-object","aoid":null,"title":"The %IteratorPrototype% Object","titleHTML":"The %IteratorPrototype% Object","number":"25.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The %IteratorPrototype% Object"},{"type":"clause","id":"sec-iteration","aoid":null,"title":"Iteration","titleHTML":"Iteration","number":"25.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Iteration"},{"type":"figure","id":"figure-2","number":2,"caption":"Figure 2 (Informative): Generator Objects Relationships","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Figure 2 (Informative): Generator Objects Relationships"},{"type":"term","term":"%GeneratorFunction%","refId":"sec-generatorfunction-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%GeneratorFunction%"},{"type":"clause","id":"sec-generatorfunction","aoid":null,"title":"GeneratorFunction (p1, p2, â¦ , pn, body)","titleHTML":"GeneratorFunction (<var>p1</var>, <var>p2</var>, â¦ , <var>pn</var>, <var>body</var>)","number":"25.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorFunction (p1, p2, â¦ , pn, body)"},{"type":"clause","id":"sec-generatorfunction-constructor","aoid":null,"title":"The GeneratorFunction Constructor","titleHTML":"The GeneratorFunction Constructor","number":"25.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The GeneratorFunction Constructor"},{"type":"clause","id":"sec-generatorfunction.length","aoid":null,"title":"GeneratorFunction.length","titleHTML":"GeneratorFunction.length","number":"25.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorFunction.length"},{"type":"clause","id":"sec-generatorfunction.prototype","aoid":null,"title":"GeneratorFunction.prototype","titleHTML":"GeneratorFunction.prototype","number":"25.2.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorFunction.prototype"},{"type":"clause","id":"sec-properties-of-the-generatorfunction-constructor","aoid":null,"title":"Properties of the GeneratorFunction Constructor","titleHTML":"Properties of the GeneratorFunction Constructor","number":"25.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the GeneratorFunction Constructor"},{"type":"clause","id":"sec-generatorfunction.prototype.constructor","aoid":null,"title":"GeneratorFunction.prototype.constructor","titleHTML":"GeneratorFunction.prototype.constructor","number":"25.2.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorFunction.prototype.constructor"},{"type":"clause","id":"sec-generatorfunction.prototype.prototype","aoid":null,"title":"GeneratorFunction.prototype.prototype","titleHTML":"GeneratorFunction.prototype.prototype","number":"25.2.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorFunction.prototype.prototype"},{"type":"clause","id":"sec-generatorfunction.prototype-@@tostringtag","aoid":null,"title":"GeneratorFunction.prototype [ @@toStringTag ]","titleHTML":"GeneratorFunction.prototype [ @@toStringTag ]","number":"25.2.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorFunction.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-the-generatorfunction-prototype-object","aoid":null,"title":"Properties of the GeneratorFunction Prototype Object","titleHTML":"Properties of the GeneratorFunction Prototype Object","number":"25.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the GeneratorFunction Prototype Object"},{"type":"clause","id":"sec-generatorfunction-instances-length","aoid":null,"title":"length","titleHTML":"length","number":"25.2.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"length"},{"type":"clause","id":"sec-generatorfunction-instances-name","aoid":null,"title":"name","titleHTML":"name","number":"25.2.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"name"},{"type":"clause","id":"sec-generatorfunction-instances-prototype","aoid":null,"title":"prototype","titleHTML":"prototype","number":"25.2.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"prototype"},{"type":"clause","id":"sec-generatorfunction-instances","aoid":null,"title":"GeneratorFunction Instances","titleHTML":"GeneratorFunction Instances","number":"25.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorFunction Instances"},{"type":"clause","id":"sec-generatorfunction-objects","aoid":null,"title":"GeneratorFunction Objects","titleHTML":"GeneratorFunction Objects","number":"25.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorFunction Objects"},{"type":"term","term":"%GeneratorPrototype%","refId":"sec-properties-of-generator-prototype","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%GeneratorPrototype%"},{"type":"clause","id":"sec-generator.prototype.constructor","aoid":null,"title":"Generator.prototype.constructor","titleHTML":"Generator.prototype.constructor","number":"25.3.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Generator.prototype.constructor"},{"type":"clause","id":"sec-generator.prototype.next","aoid":null,"title":"Generator.prototype.next ( value )","titleHTML":"Generator.prototype.next ( <var>value</var> )","number":"25.3.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Generator.prototype.next ( value )"},{"type":"clause","id":"sec-generator.prototype.return","aoid":null,"title":"Generator.prototype.return ( value )","titleHTML":"Generator.prototype.return ( <var>value</var> )","number":"25.3.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Generator.prototype.return ( value )"},{"type":"clause","id":"sec-generator.prototype.throw","aoid":null,"title":"Generator.prototype.throw ( exception )","titleHTML":"Generator.prototype.throw ( <var>exception</var> )","number":"25.3.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Generator.prototype.throw ( exception )"},{"type":"clause","id":"sec-generator.prototype-@@tostringtag","aoid":null,"title":"Generator.prototype [ @@toStringTag ]","titleHTML":"Generator.prototype [ @@toStringTag ]","number":"25.3.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Generator.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-generator-prototype","aoid":null,"title":"Properties of Generator Prototype","titleHTML":"Properties of Generator Prototype","number":"25.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Generator Prototype"},{"type":"table","id":"table-56","number":57,"caption":"Table 57: Internal Slots of Generator Instances","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 57: Internal Slots of Generator Instances"},{"type":"clause","id":"sec-properties-of-generator-instances","aoid":null,"title":"Properties of Generator Instances","titleHTML":"Properties of Generator Instances","number":"25.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Generator Instances"},{"type":"op","aoid":"GeneratorStart","refId":"sec-generatorstart","location":"","key":"GeneratorStart"},{"type":"clause","id":"sec-generatorstart","aoid":"GeneratorStart","title":"GeneratorStart (generator, generatorBody)","titleHTML":"GeneratorStart (<var>generator</var>, <var>generatorBody</var>)","number":"25.3.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorStart (generator, generatorBody)"},{"type":"op","aoid":"GeneratorValidate","refId":"sec-generatorvalidate","location":"","key":"GeneratorValidate"},{"type":"clause","id":"sec-generatorvalidate","aoid":"GeneratorValidate","title":"GeneratorValidate ( generator )","titleHTML":"GeneratorValidate ( <var>generator</var> )","number":"25.3.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorValidate ( generator )"},{"type":"op","aoid":"GeneratorResume","refId":"sec-generatorresume","location":"","key":"GeneratorResume"},{"type":"clause","id":"sec-generatorresume","aoid":"GeneratorResume","title":"GeneratorResume ( generator, value )","titleHTML":"GeneratorResume ( <var>generator</var>, <var>value</var> )","number":"25.3.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorResume ( generator, value )"},{"type":"op","aoid":"GeneratorResumeAbrupt","refId":"sec-generatorresumeabrupt","location":"","key":"GeneratorResumeAbrupt"},{"type":"clause","id":"sec-generatorresumeabrupt","aoid":"GeneratorResumeAbrupt","title":"GeneratorResumeAbrupt (generator, abruptCompletion)","titleHTML":"GeneratorResumeAbrupt (<var>generator</var>, <var>abruptCompletion</var>)","number":"25.3.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorResumeAbrupt (generator, abruptCompletion)"},{"type":"op","aoid":"GeneratorYield","refId":"sec-generatoryield","location":"","key":"GeneratorYield"},{"type":"clause","id":"sec-generatoryield","aoid":"GeneratorYield","title":"GeneratorYield ( iterNextObj )","titleHTML":"GeneratorYield ( <var>iterNextObj</var> )","number":"25.3.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GeneratorYield ( iterNextObj )"},{"type":"clause","id":"sec-generator-abstract-operations","aoid":null,"title":"Generator Abstract Operations","titleHTML":"Generator Abstract Operations","number":"25.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Generator Abstract Operations"},{"type":"clause","id":"sec-generator-objects","aoid":null,"title":"Generator Objects","titleHTML":"Generator Objects","number":"25.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Generator Objects"},{"type":"table","id":"table-57","number":58,"caption":"Table 58: PromiseCapability Record Fields","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 58: PromiseCapability Record Fields"},{"type":"op","aoid":"IfAbruptRejectPromise","refId":"sec-ifabruptrejectpromise","location":"","key":"IfAbruptRejectPromise"},{"type":"clause","id":"sec-ifabruptrejectpromise","aoid":"IfAbruptRejectPromise","title":"IfAbruptRejectPromise ( value, capability )","titleHTML":"IfAbruptRejectPromise ( <var>value</var>, <var>capability</var> )","number":"25.4.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IfAbruptRejectPromise ( value, capability )"},{"type":"clause","id":"sec-promisecapability-records","aoid":null,"title":"PromiseCapability Records","titleHTML":"PromiseCapability Records","number":"25.4.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PromiseCapability Records"},{"type":"table","id":"table-58","number":59,"caption":"Table 59: PromiseReaction Record Fields","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 59: PromiseReaction Record Fields"},{"type":"clause","id":"sec-promisereaction-records","aoid":null,"title":"PromiseReaction Records","titleHTML":"PromiseReaction Records","number":"25.4.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PromiseReaction Records"},{"type":"clause","id":"sec-promise-reject-functions","aoid":null,"title":"Promise Reject Functions","titleHTML":"Promise Reject Functions","number":"25.4.1.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise Reject Functions"},{"type":"clause","id":"sec-promise-resolve-functions","aoid":null,"title":"Promise Resolve Functions","titleHTML":"Promise Resolve Functions","number":"25.4.1.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise Resolve Functions"},{"type":"op","aoid":"CreateResolvingFunctions","refId":"sec-createresolvingfunctions","location":"","key":"CreateResolvingFunctions"},{"type":"clause","id":"sec-createresolvingfunctions","aoid":"CreateResolvingFunctions","title":"CreateResolvingFunctions ( promise )","titleHTML":"CreateResolvingFunctions ( <var>promise</var> )","number":"25.4.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"CreateResolvingFunctions ( promise )"},{"type":"op","aoid":"FulfillPromise","refId":"sec-fulfillpromise","location":"","key":"FulfillPromise"},{"type":"clause","id":"sec-fulfillpromise","aoid":"FulfillPromise","title":"FulfillPromise ( promise, value)","titleHTML":"FulfillPromise ( <var>promise</var>, <var>value</var>)","number":"25.4.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FulfillPromise ( promise, value)"},{"type":"clause","id":"sec-getcapabilitiesexecutor-functions","aoid":null,"title":"GetCapabilitiesExecutor Functions","titleHTML":"GetCapabilitiesExecutor Functions","number":"25.4.1.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"GetCapabilitiesExecutor Functions"},{"type":"op","aoid":"NewPromiseCapability","refId":"sec-newpromisecapability","location":"","key":"NewPromiseCapability"},{"type":"clause","id":"sec-newpromisecapability","aoid":"NewPromiseCapability","title":"NewPromiseCapability ( C )","titleHTML":"NewPromiseCapability ( <var>C</var> )","number":"25.4.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"NewPromiseCapability ( C )"},{"type":"op","aoid":"IsPromise","refId":"sec-ispromise","location":"","key":"IsPromise"},{"type":"clause","id":"sec-ispromise","aoid":"IsPromise","title":"IsPromise ( x )","titleHTML":"IsPromise ( <var>x</var> )","number":"25.4.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"IsPromise ( x )"},{"type":"op","aoid":"RejectPromise","refId":"sec-rejectpromise","location":"","key":"RejectPromise"},{"type":"clause","id":"sec-rejectpromise","aoid":"RejectPromise","title":"RejectPromise ( promise, reason )","titleHTML":"RejectPromise ( <var>promise</var>, <var>reason</var> )","number":"25.4.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RejectPromise ( promise, reason )"},{"type":"op","aoid":"TriggerPromiseReactions","refId":"sec-triggerpromisereactions","location":"","key":"TriggerPromiseReactions"},{"type":"clause","id":"sec-triggerpromisereactions","aoid":"TriggerPromiseReactions","title":"TriggerPromiseReactions ( reactions, argument )","titleHTML":"TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )","number":"25.4.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"TriggerPromiseReactions ( reactions, argument )"},{"type":"op","aoid":"HostPromiseRejectionTracker","refId":"sec-host-promise-rejection-tracker","location":"","key":"HostPromiseRejectionTracker"},{"type":"clause","id":"sec-host-promise-rejection-tracker","aoid":"HostPromiseRejectionTracker","title":"HostPromiseRejectionTracker ( promise, operation )","titleHTML":"HostPromiseRejectionTracker ( <var>promise</var>, <var>operation</var> )","number":"25.4.1.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HostPromiseRejectionTracker ( promise, operation )"},{"type":"clause","id":"sec-promise-abstract-operations","aoid":null,"title":"Promise Abstract Operations","titleHTML":"Promise Abstract Operations","number":"25.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise Abstract Operations"},{"type":"op","aoid":"PromiseReactionJob","refId":"sec-promisereactionjob","location":"","key":"PromiseReactionJob"},{"type":"clause","id":"sec-promisereactionjob","aoid":"PromiseReactionJob","title":"PromiseReactionJob ( reaction, argument )","titleHTML":"PromiseReactionJob ( <var>reaction</var>, <var>argument</var> )","number":"25.4.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PromiseReactionJob ( reaction, argument )"},{"type":"op","aoid":"PromiseResolveThenableJob","refId":"sec-promiseresolvethenablejob","location":"","key":"PromiseResolveThenableJob"},{"type":"clause","id":"sec-promiseresolvethenablejob","aoid":"PromiseResolveThenableJob","title":"PromiseResolveThenableJob ( promiseToResolve, thenable, then)","titleHTML":"PromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var>)","number":"25.4.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PromiseResolveThenableJob ( promiseToResolve, thenable, then)"},{"type":"clause","id":"sec-promise-jobs","aoid":null,"title":"Promise Jobs","titleHTML":"Promise Jobs","number":"25.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise Jobs"},{"type":"term","term":"%Promise%","refId":"sec-promise-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Promise%"},{"type":"clause","id":"sec-promise-executor","aoid":null,"title":"Promise ( executor )","titleHTML":"Promise ( <var>executor</var> )","number":"25.4.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise ( executor )"},{"type":"clause","id":"sec-promise-constructor","aoid":null,"title":"The Promise Constructor","titleHTML":"The Promise Constructor","number":"25.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Promise Constructor"},{"type":"op","aoid":"PerformPromiseAll","refId":"sec-performpromiseall","location":"","key":"PerformPromiseAll"},{"type":"clause","id":"sec-performpromiseall","aoid":"PerformPromiseAll","title":"Runtime Semantics: PerformPromiseAll( iteratorRecord, constructor, resultCapability )","titleHTML":"Runtime Semantics: PerformPromiseAll( <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var> )","number":"25.4.4.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: PerformPromiseAll( iteratorRecord, constructor, resultCapability )"},{"type":"clause","id":"sec-promise.all-resolve-element-functions","aoid":null,"title":"Promise.all Resolve Element Functions","titleHTML":"<code>Promise.all</code> Resolve Element Functions","number":"25.4.4.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise.all Resolve Element Functions"},{"type":"clause","id":"sec-promise.all","aoid":null,"title":"Promise.all ( iterable )","titleHTML":"Promise.all ( <var>iterable</var> )","number":"25.4.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise.all ( iterable )"},{"type":"clause","id":"sec-promise.prototype","aoid":null,"title":"Promise.prototype","titleHTML":"Promise.prototype","number":"25.4.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise.prototype"},{"type":"op","aoid":"PerformPromiseRace","refId":"sec-performpromiserace","location":"","key":"PerformPromiseRace"},{"type":"clause","id":"sec-performpromiserace","aoid":"PerformPromiseRace","title":"Runtime Semantics: PerformPromiseRace ( iteratorRecord, constructor, resultCapability )","titleHTML":"Runtime Semantics: PerformPromiseRace ( <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var> )","number":"25.4.4.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: PerformPromiseRace ( iteratorRecord, constructor, resultCapability )"},{"type":"clause","id":"sec-promise.race","aoid":null,"title":"Promise.race ( iterable )","titleHTML":"Promise.race ( <var>iterable</var> )","number":"25.4.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise.race ( iterable )"},{"type":"clause","id":"sec-promise.reject","aoid":null,"title":"Promise.reject ( r )","titleHTML":"Promise.reject ( <var>r</var> )","number":"25.4.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise.reject ( r )"},{"type":"clause","id":"sec-promise.resolve","aoid":null,"title":"Promise.resolve ( x )","titleHTML":"Promise.resolve ( <var>x</var> )","number":"25.4.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise.resolve ( x )"},{"type":"clause","id":"sec-get-promise-@@species","aoid":null,"title":"get Promise [ @@species ]","titleHTML":"get Promise [ @@species ]","number":"25.4.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get Promise [ @@species ]"},{"type":"clause","id":"sec-properties-of-the-promise-constructor","aoid":null,"title":"Properties of the Promise Constructor","titleHTML":"Properties of the Promise Constructor","number":"25.4.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Promise Constructor"},{"type":"term","term":"%PromisePrototype%","refId":"sec-properties-of-the-promise-prototype-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%PromisePrototype%"},{"type":"clause","id":"sec-promise.prototype.catch","aoid":null,"title":"Promise.prototype.catch ( onRejected )","titleHTML":"Promise.prototype.catch ( <var>onRejected</var> )","number":"25.4.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise.prototype.catch ( onRejected )"},{"type":"clause","id":"sec-promise.prototype.constructor","aoid":null,"title":"Promise.prototype.constructor","titleHTML":"Promise.prototype.constructor","number":"25.4.5.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise.prototype.constructor"},{"type":"op","aoid":"PerformPromiseThen","refId":"sec-performpromisethen","location":"","key":"PerformPromiseThen"},{"type":"clause","id":"sec-performpromisethen","aoid":"PerformPromiseThen","title":"PerformPromiseThen ( promise, onFulfilled, onRejected, resultCapability )","titleHTML":"PerformPromiseThen ( <var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>, <var>resultCapability</var> )","number":"25.4.5.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"PerformPromiseThen ( promise, onFulfilled, onRejected, resultCapability )"},{"type":"clause","id":"sec-promise.prototype.then","aoid":null,"title":"Promise.prototype.then ( onFulfilled, onRejected )","titleHTML":"Promise.prototype.then ( <var>onFulfilled</var>, <var>onRejected</var> )","number":"25.4.5.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise.prototype.then ( onFulfilled, onRejected )"},{"type":"clause","id":"sec-promise.prototype-@@tostringtag","aoid":null,"title":"Promise.prototype [ @@toStringTag ]","titleHTML":"Promise.prototype [ @@toStringTag ]","number":"25.4.5.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise.prototype [ @@toStringTag ]"},{"type":"clause","id":"sec-properties-of-the-promise-prototype-object","aoid":null,"title":"Properties of the Promise Prototype Object","titleHTML":"Properties of the Promise Prototype Object","number":"25.4.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Promise Prototype Object"},{"type":"table","id":"table-59","number":60,"caption":"Table 60: Internal Slots of Promise Instances","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 60: Internal Slots of Promise Instances"},{"type":"clause","id":"sec-properties-of-promise-instances","aoid":null,"title":"Properties of Promise Instances","titleHTML":"Properties of Promise Instances","number":"25.4.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of Promise Instances"},{"type":"clause","id":"sec-promise-objects","aoid":null,"title":"Promise Objects","titleHTML":"Promise Objects","number":"25.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Promise Objects"},{"type":"clause","id":"sec-control-abstraction-objects","aoid":null,"title":"Control Abstraction Objects","titleHTML":"Control Abstraction Objects","number":"25","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Control Abstraction Objects"},{"type":"term","term":"%Reflect%","refId":"sec-reflect-object","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Reflect%"},{"type":"clause","id":"sec-reflect.apply","aoid":null,"title":"Reflect.apply ( target, thisArgument, argumentsList )","titleHTML":"Reflect.apply ( <var>target</var>, <var>thisArgument</var>, <var>argumentsList</var> )","number":"26.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.apply ( target, thisArgument, argumentsList )"},{"type":"clause","id":"sec-reflect.construct","aoid":null,"title":"Reflect.construct ( target, argumentsList [ , newTarget ] )","titleHTML":"Reflect.construct ( <var>target</var>, <var>argumentsList</var> [ , <var>newTarget</var> ] )","number":"26.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.construct ( target, argumentsList [ , newTarget ] )"},{"type":"clause","id":"sec-reflect.defineproperty","aoid":null,"title":"Reflect.defineProperty ( target, propertyKey, attributes )","titleHTML":"Reflect.defineProperty ( <var>target</var>, <var>propertyKey</var>, <var>attributes</var> )","number":"26.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.defineProperty ( target, propertyKey, attributes )"},{"type":"clause","id":"sec-reflect.deleteproperty","aoid":null,"title":"Reflect.deleteProperty ( target, propertyKey )","titleHTML":"Reflect.deleteProperty ( <var>target</var>, <var>propertyKey</var> )","number":"26.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.deleteProperty ( target, propertyKey )"},{"type":"clause","id":"sec-reflect.get","aoid":null,"title":"Reflect.get ( target, propertyKey [ , receiver ])","titleHTML":"Reflect.get ( <var>target</var>, <var>propertyKey</var> [ , <var>receiver</var> ])","number":"26.1.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.get ( target, propertyKey [ , receiver ])"},{"type":"clause","id":"sec-reflect.getownpropertydescriptor","aoid":null,"title":"Reflect.getOwnPropertyDescriptor ( target, propertyKey )","titleHTML":"Reflect.getOwnPropertyDescriptor ( <var>target</var>, <var>propertyKey</var> )","number":"26.1.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.getOwnPropertyDescriptor ( target, propertyKey )"},{"type":"clause","id":"sec-reflect.getprototypeof","aoid":null,"title":"Reflect.getPrototypeOf ( target )","titleHTML":"Reflect.getPrototypeOf ( <var>target</var> )","number":"26.1.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.getPrototypeOf ( target )"},{"type":"clause","id":"sec-reflect.has","aoid":null,"title":"Reflect.has ( target, propertyKey )","titleHTML":"Reflect.has ( <var>target</var>, <var>propertyKey</var> )","number":"26.1.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.has ( target, propertyKey )"},{"type":"clause","id":"sec-reflect.isextensible","aoid":null,"title":"Reflect.isExtensible (target)","titleHTML":"Reflect.isExtensible (<var>target</var>)","number":"26.1.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.isExtensible (target)"},{"type":"clause","id":"sec-reflect.ownkeys","aoid":null,"title":"Reflect.ownKeys ( target )","titleHTML":"Reflect.ownKeys ( <var>target</var> )","number":"26.1.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.ownKeys ( target )"},{"type":"clause","id":"sec-reflect.preventextensions","aoid":null,"title":"Reflect.preventExtensions ( target )","titleHTML":"Reflect.preventExtensions ( <var>target</var> )","number":"26.1.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.preventExtensions ( target )"},{"type":"clause","id":"sec-reflect.set","aoid":null,"title":"Reflect.set ( target, propertyKey, V [ , receiver ] )","titleHTML":"Reflect.set ( <var>target</var>, <var>propertyKey</var>, <var>V</var> [ , <var>receiver</var> ] )","number":"26.1.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.set ( target, propertyKey, V [ , receiver ] )"},{"type":"clause","id":"sec-reflect.setprototypeof","aoid":null,"title":"Reflect.setPrototypeOf ( target, proto )","titleHTML":"Reflect.setPrototypeOf ( <var>target</var>, <var>proto</var> )","number":"26.1.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflect.setPrototypeOf ( target, proto )"},{"type":"clause","id":"sec-reflect-object","aoid":null,"title":"The Reflect Object","titleHTML":"The Reflect Object","number":"26.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Reflect Object"},{"type":"term","term":"%Proxy%","refId":"sec-proxy-constructor","namespace":"https://tc39.github.io/ecma262/","location":"","key":"%Proxy%"},{"type":"clause","id":"sec-proxy-target-handler","aoid":null,"title":"Proxy ( target, handler )","titleHTML":"Proxy ( <var>target</var>, <var>handler</var> )","number":"26.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Proxy ( target, handler )"},{"type":"clause","id":"sec-proxy-constructor","aoid":null,"title":"The Proxy Constructor","titleHTML":"The Proxy Constructor","number":"26.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Proxy Constructor"},{"type":"clause","id":"sec-proxy-revocation-functions","aoid":null,"title":"Proxy Revocation Functions","titleHTML":"Proxy Revocation Functions","number":"26.2.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Proxy Revocation Functions"},{"type":"clause","id":"sec-proxy.revocable","aoid":null,"title":"Proxy.revocable ( target, handler )","titleHTML":"Proxy.revocable ( <var>target</var>, <var>handler</var> )","number":"26.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Proxy.revocable ( target, handler )"},{"type":"clause","id":"sec-properties-of-the-proxy-constructor","aoid":null,"title":"Properties of the Proxy Constructor","titleHTML":"Properties of the Proxy Constructor","number":"26.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Properties of the Proxy Constructor"},{"type":"clause","id":"sec-proxy-objects","aoid":null,"title":"Proxy Objects","titleHTML":"Proxy Objects","number":"26.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Proxy Objects"},{"type":"clause","id":"sec-@@tostringtag","aoid":null,"title":"@@toStringTag","titleHTML":"@@toStringTag","number":"26.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"@@toStringTag"},{"type":"clause","id":"sec-@@iterator","aoid":null,"title":"[ @@iterator ] ( )","titleHTML":"[ @@iterator ] ( )","number":"26.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"[ @@iterator ] ( )"},{"type":"clause","id":"sec-module-namespace-objects","aoid":null,"title":"Module Namespace Objects","titleHTML":"Module Namespace Objects","number":"26.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Module Namespace Objects"},{"type":"clause","id":"sec-reflection","aoid":null,"title":"Reflection","titleHTML":"Reflection","number":"26","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Reflection"},{"type":"clause","id":"sec-lexical-grammar","aoid":null,"title":"Lexical Grammar","titleHTML":"Lexical Grammar","number":"A.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Lexical Grammar"},{"type":"clause","id":"sec-expressions","aoid":null,"title":"Expressions","titleHTML":"Expressions","number":"A.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Expressions"},{"type":"clause","id":"sec-statements","aoid":null,"title":"Statements","titleHTML":"Statements","number":"A.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Statements"},{"type":"clause","id":"sec-functions-and-classes","aoid":null,"title":"Functions and Classes","titleHTML":"Functions and Classes","number":"A.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Functions and Classes"},{"type":"clause","id":"sec-scripts-and-modules","aoid":null,"title":"Scripts and Modules","titleHTML":"Scripts and Modules","number":"A.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Scripts and Modules"},{"type":"clause","id":"sec-number-conversions","aoid":null,"title":"Number Conversions","titleHTML":"Number Conversions","number":"A.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Number Conversions"},{"type":"clause","id":"sec-universal-resource-identifier-character-classes","aoid":null,"title":"Universal Resource Identifier Character Classes","titleHTML":"Universal Resource Identifier Character Classes","number":"A.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Universal Resource Identifier Character Classes"},{"type":"clause","id":"sec-regular-expressions","aoid":null,"title":"Regular Expressions","titleHTML":"Regular Expressions","number":"A.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Regular Expressions"},{"type":"clause","id":"sec-grammar-summary","aoid":null,"title":"Grammar Summary","titleHTML":"Grammar Summary","number":"A","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Grammar Summary"},{"type":"clause","id":"sec-additional-syntax-numeric-literals-status-semantics","aoid":null,"title":"Static Semantics","titleHTML":"Static Semantics","number":"B.1.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics"},{"type":"clause","id":"sec-additional-syntax-numeric-literals","aoid":null,"title":"Numeric Literals","titleHTML":"Numeric Literals","number":"B.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Numeric Literals"},{"type":"clause","id":"sec-additional-syntax-string-literals-static-semantics","aoid":null,"title":"Static Semantics","titleHTML":"Static Semantics","number":"B.1.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Static Semantics"},{"type":"clause","id":"sec-additional-syntax-string-literals","aoid":null,"title":"String Literals","titleHTML":"String Literals","number":"B.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String Literals"},{"type":"clause","id":"sec-html-like-comments","aoid":null,"title":"HTML-like Comments","titleHTML":"HTML-like Comments","number":"B.1.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"HTML-like Comments"},{"type":"op","aoid":"CharacterRangeOrUnion","refId":"sec-runtime-semantics-characterrangeorunion-abstract-operation","location":"","key":"CharacterRangeOrUnion"},{"type":"clause","id":"sec-runtime-semantics-characterrangeorunion-abstract-operation","aoid":"CharacterRangeOrUnion","title":"Runtime Semantics: CharacterRangeOrUnion Abstract Operation","titleHTML":"Runtime Semantics: CharacterRangeOrUnion Abstract Operation","number":"B.1.4.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: CharacterRangeOrUnion Abstract Operation"},{"type":"clause","id":"sec-regular-expression-patterns-semantics","aoid":null,"title":"Pattern Semantics","titleHTML":"Pattern Semantics","number":"B.1.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Pattern Semantics"},{"type":"clause","id":"sec-regular-expressions-patterns","aoid":null,"title":"Regular Expressions Patterns","titleHTML":"Regular Expressions Patterns","number":"B.1.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Regular Expressions Patterns"},{"type":"clause","id":"sec-additional-syntax","aoid":null,"title":"Additional Syntax","titleHTML":"Additional Syntax","number":"B.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additional Syntax"},{"type":"table","id":"table-60","number":61,"caption":"Table 61: Additional Well-known Intrinsic Objects","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Table 61: Additional Well-known Intrinsic Objects"},{"type":"clause","id":"sec-escape-string","aoid":null,"title":"escape (string)","titleHTML":"escape (<var>string</var>)","number":"B.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"escape (string)"},{"type":"clause","id":"sec-unescape-string","aoid":null,"title":"unescape (string)","titleHTML":"unescape (<var>string</var>)","number":"B.2.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"unescape (string)"},{"type":"clause","id":"sec-additional-properties-of-the-global-object","aoid":null,"title":"Additional Properties of the Global Object","titleHTML":"Additional Properties of the Global Object","number":"B.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additional Properties of the Global Object"},{"type":"clause","id":"sec-get-object.prototype.__proto__","aoid":null,"title":"get Object.prototype.__proto__","titleHTML":"get Object.prototype.__proto__","number":"B.2.2.1.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"get Object.prototype.__proto__"},{"type":"clause","id":"sec-set-object.prototype.__proto__","aoid":null,"title":"set Object.prototype.__proto__","titleHTML":"set Object.prototype.__proto__","number":"B.2.2.1.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"set Object.prototype.__proto__"},{"type":"clause","id":"sec-object.prototype.__proto__","aoid":null,"title":"Object.prototype.__proto__","titleHTML":"Object.prototype.__proto__","number":"B.2.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.__proto__"},{"type":"clause","id":"sec-object.prototype.__defineGetter__","aoid":null,"title":"Object.prototype.__defineGetter__ (P, getter)","titleHTML":"Object.prototype.__defineGetter__ (<var>P</var>, <var>getter</var>)","number":"B.2.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.__defineGetter__ (P, getter)"},{"type":"clause","id":"sec-object.prototype.__defineSetter__","aoid":null,"title":"Object.prototype.__defineSetter__ (P, setter)","titleHTML":"Object.prototype.__defineSetter__ (<var>P</var>, <var>setter</var>)","number":"B.2.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.__defineSetter__ (P, setter)"},{"type":"clause","id":"sec-object.prototype.__lookupGetter__","aoid":null,"title":"Object.prototype.__lookupGetter__ (P)","titleHTML":"Object.prototype.__lookupGetter__ (<var>P</var>)","number":"B.2.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.__lookupGetter__ (P)"},{"type":"clause","id":"sec-object.prototype.__lookupSetter__","aoid":null,"title":"Object.prototype.__lookupSetter__ (P)","titleHTML":"Object.prototype.__lookupSetter__ (<var>P</var>)","number":"B.2.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Object.prototype.__lookupSetter__ (P)"},{"type":"clause","id":"sec-additional-properties-of-the-object.prototype-object","aoid":null,"title":"Additional Properties of the Object.prototype Object","titleHTML":"Additional Properties of the Object.prototype Object","number":"B.2.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additional Properties of the Object.prototype Object"},{"type":"clause","id":"sec-string.prototype.substr","aoid":null,"title":"String.prototype.substr (start, length)","titleHTML":"String.prototype.substr (<var>start</var>, <var>length</var>)","number":"B.2.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.substr (start, length)"},{"type":"op","aoid":"CreateHTML","refId":"sec-createhtml","location":"","key":"CreateHTML"},{"type":"clause","id":"sec-createhtml","aoid":"CreateHTML","title":"Runtime Semantics: CreateHTML ( string, tag, attribute, value )","titleHTML":"Runtime Semantics: CreateHTML ( <var>string</var>, <var>tag</var>, <var>attribute</var>, <var>value</var> )","number":"B.2.3.2.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Runtime Semantics: CreateHTML ( string, tag, attribute, value )"},{"type":"clause","id":"sec-string.prototype.anchor","aoid":null,"title":"String.prototype.anchor ( name )","titleHTML":"String.prototype.anchor ( <var>name</var> )","number":"B.2.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.anchor ( name )"},{"type":"clause","id":"sec-string.prototype.big","aoid":null,"title":"String.prototype.big ()","titleHTML":"String.prototype.big ()","number":"B.2.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.big ()"},{"type":"clause","id":"sec-string.prototype.blink","aoid":null,"title":"String.prototype.blink ()","titleHTML":"String.prototype.blink ()","number":"B.2.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.blink ()"},{"type":"clause","id":"sec-string.prototype.bold","aoid":null,"title":"String.prototype.bold ()","titleHTML":"String.prototype.bold ()","number":"B.2.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.bold ()"},{"type":"clause","id":"sec-string.prototype.fixed","aoid":null,"title":"String.prototype.fixed ()","titleHTML":"String.prototype.fixed ()","number":"B.2.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.fixed ()"},{"type":"clause","id":"sec-string.prototype.fontcolor","aoid":null,"title":"String.prototype.fontcolor ( color )","titleHTML":"String.prototype.fontcolor ( <var>color</var> )","number":"B.2.3.7","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.fontcolor ( color )"},{"type":"clause","id":"sec-string.prototype.fontsize","aoid":null,"title":"String.prototype.fontsize ( size )","titleHTML":"String.prototype.fontsize ( <var>size</var> )","number":"B.2.3.8","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.fontsize ( size )"},{"type":"clause","id":"sec-string.prototype.italics","aoid":null,"title":"String.prototype.italics ()","titleHTML":"String.prototype.italics ()","number":"B.2.3.9","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.italics ()"},{"type":"clause","id":"sec-string.prototype.link","aoid":null,"title":"String.prototype.link ( url )","titleHTML":"String.prototype.link ( <var>url</var> )","number":"B.2.3.10","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.link ( url )"},{"type":"clause","id":"sec-string.prototype.small","aoid":null,"title":"String.prototype.small ()","titleHTML":"String.prototype.small ()","number":"B.2.3.11","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.small ()"},{"type":"clause","id":"sec-string.prototype.strike","aoid":null,"title":"String.prototype.strike ()","titleHTML":"String.prototype.strike ()","number":"B.2.3.12","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.strike ()"},{"type":"clause","id":"sec-string.prototype.sub","aoid":null,"title":"String.prototype.sub ()","titleHTML":"String.prototype.sub ()","number":"B.2.3.13","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.sub ()"},{"type":"clause","id":"sec-string.prototype.sup","aoid":null,"title":"String.prototype.sup ()","titleHTML":"String.prototype.sup ()","number":"B.2.3.14","namespace":"https://tc39.github.io/ecma262/","location":"","key":"String.prototype.sup ()"},{"type":"clause","id":"sec-additional-properties-of-the-string.prototype-object","aoid":null,"title":"Additional Properties of the String.prototype Object","titleHTML":"Additional Properties of the String.prototype Object","number":"B.2.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additional Properties of the String.prototype Object"},{"type":"clause","id":"sec-date.prototype.getyear","aoid":null,"title":"Date.prototype.getYear ( )","titleHTML":"Date.prototype.getYear ( )","number":"B.2.4.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.getYear ( )"},{"type":"clause","id":"sec-date.prototype.setyear","aoid":null,"title":"Date.prototype.setYear (year)","titleHTML":"Date.prototype.setYear (<var>year</var>)","number":"B.2.4.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.setYear (year)"},{"type":"clause","id":"sec-date.prototype.togmtstring","aoid":null,"title":"Date.prototype.toGMTString ( )","titleHTML":"Date.prototype.toGMTString ( )","number":"B.2.4.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Date.prototype.toGMTString ( )"},{"type":"clause","id":"sec-additional-properties-of-the-date.prototype-object","aoid":null,"title":"Additional Properties of the Date.prototype Object","titleHTML":"Additional Properties of the Date.prototype Object","number":"B.2.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additional Properties of the Date.prototype Object"},{"type":"clause","id":"sec-regexp.prototype.compile","aoid":null,"title":"RegExp.prototype.compile (pattern, flags )","titleHTML":"RegExp.prototype.compile (<var>pattern</var>, <var>flags</var> )","number":"B.2.5.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"RegExp.prototype.compile (pattern, flags )"},{"type":"clause","id":"sec-additional-properties-of-the-regexp.prototype-object","aoid":null,"title":"Additional Properties of the RegExp.prototype Object","titleHTML":"Additional Properties of the RegExp.prototype Object","number":"B.2.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additional Properties of the RegExp.prototype Object"},{"type":"clause","id":"sec-additional-built-in-properties","aoid":null,"title":"Additional Built-in Properties","titleHTML":"Additional Built-in Properties","number":"B.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additional Built-in Properties"},{"type":"clause","id":"sec-__proto__-property-names-in-object-initializers","aoid":null,"title":"__proto__ Property Names in Object Initializers","titleHTML":"__proto__ Property Names in Object Initializers","number":"B.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"__proto__ Property Names in Object Initializers"},{"type":"clause","id":"sec-labelled-function-declarations","aoid":null,"title":"Labelled Function Declarations","titleHTML":"Labelled Function Declarations","number":"B.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Labelled Function Declarations"},{"type":"clause","id":"sec-web-compat-functiondeclarationinstantiation","aoid":null,"title":"Changes to FunctionDeclarationInstantiation","titleHTML":"Changes to FunctionDeclarationInstantiation","number":"B.3.3.1","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Changes to FunctionDeclarationInstantiation"},{"type":"clause","id":"sec-web-compat-globaldeclarationinstantiation","aoid":null,"title":"Changes to GlobalDeclarationInstantiation","titleHTML":"Changes to GlobalDeclarationInstantiation","number":"B.3.3.2","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Changes to GlobalDeclarationInstantiation"},{"type":"clause","id":"sec-web-compat-evaldeclarationinstantiation","aoid":null,"title":"Changes to EvalDeclarationInstantiation","titleHTML":"Changes to EvalDeclarationInstantiation","number":"B.3.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Changes to EvalDeclarationInstantiation"},{"type":"clause","id":"sec-block-duplicates-allowed-static-semantics","aoid":null,"title":"Changes to Block Static Semantics: Early Errors","titleHTML":"Changes to Block Static Semantics: Early Errors","number":"B.3.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Changes to Block Static Semantics: Early Errors"},{"type":"clause","id":"sec-web-compat-blockdeclarationinstantiation","aoid":null,"title":"Changes to BlockDeclarationInstantiation","titleHTML":"Changes to BlockDeclarationInstantiation","number":"B.3.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Changes to BlockDeclarationInstantiation"},{"type":"clause","id":"sec-block-level-function-declarations-web-legacy-compatibility-semantics","aoid":null,"title":"Block-Level Function Declarations Web Legacy Compatibility Semantics","titleHTML":"Block-Level Function Declarations Web Legacy Compatibility Semantics","number":"B.3.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Block-Level Function Declarations Web Legacy Compatibility Semantics"},{"type":"clause","id":"sec-functiondeclarations-in-ifstatement-statement-clauses","aoid":null,"title":"FunctionDeclarations in IfStatement Statement Clauses","titleHTML":"FunctionDeclarations in IfStatement Statement Clauses","number":"B.3.4","namespace":"https://tc39.github.io/ecma262/","location":"","key":"FunctionDeclarations in IfStatement Statement Clauses"},{"type":"clause","id":"sec-variablestatements-in-catch-blocks","aoid":null,"title":"VariableStatements in Catch Blocks","titleHTML":"VariableStatements in Catch Blocks","number":"B.3.5","namespace":"https://tc39.github.io/ecma262/","location":"","key":"VariableStatements in Catch Blocks"},{"type":"clause","id":"sec-initializers-in-forin-statement-heads","aoid":null,"title":"Initializers in ForIn Statement Heads","titleHTML":"Initializers in ForIn Statement Heads","number":"B.3.6","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Initializers in ForIn Statement Heads"},{"type":"clause","id":"sec-other-additional-features","aoid":null,"title":"Other Additional Features","titleHTML":"Other Additional Features","number":"B.3","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Other Additional Features"},{"type":"clause","id":"sec-additional-ecmascript-features-for-web-browsers","aoid":null,"title":"Additional ECMAScript Features for Web Browsers","titleHTML":"Additional ECMAScript Features for Web Browsers","number":"B","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additional ECMAScript Features for Web Browsers"},{"type":"clause","id":"sec-strict-mode-of-ecmascript","aoid":null,"title":"The Strict Mode of ECMAScript","titleHTML":"The Strict Mode of ECMAScript","number":"C","namespace":"https://tc39.github.io/ecma262/","location":"","key":"The Strict Mode of ECMAScript"},{"type":"clause","id":"sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact","aoid":null,"title":"Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact","titleHTML":"Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact","number":"D","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact"},{"type":"clause","id":"sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions","aoid":null,"title":"Additions and Changes That Introduce Incompatibilities with Prior Editions","titleHTML":"Additions and Changes That Introduce Incompatibilities with Prior Editions","number":"E","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Additions and Changes That Introduce Incompatibilities with Prior Editions"},{"type":"clause","id":"sec-bibliography","aoid":null,"title":"Bibliography","titleHTML":"Bibliography","number":"F","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Bibliography"},{"type":"clause","id":"sec-copyright-and-software-license","aoid":null,"title":"Copyright & Software License","titleHTML":"Copyright &amp; Software License","number":"G","namespace":"https://tc39.github.io/ecma262/","location":"","key":"Copyright & Software License"}]</script></head><body><div id="menu-toggle">â°</div><div id="menu"><div id="menu-search"><input id="menu-search-box" placeholder="Search..." type="text"><div id="menu-search-results" class="inactive"></div></div><div id="menu-toc"><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-intro" title="Introduction"><span class="secnum"></span> Introduction</a></li><li><span class="item-toggle-none"></span><a href="#sec-scope" title="Scope"><span class="secnum">1</span> Scope</a></li><li><span class="item-toggle-none"></span><a href="#sec-conformance" title="Conformance"><span class="secnum">2</span> Conformance</a></li><li><span class="item-toggle-none"></span><a href="#sec-normative-references" title="Normative References"><span class="secnum">3</span> Normative References</a></li><li><span class="item-toggle">â¢</span><a href="#sec-overview" title="Overview"><span class="secnum">4</span> Overview</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-web-scripting" title="Web Scripting"><span class="secnum">4.1</span> Web Scripting</a></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-overview" title="ECMAScript Overview"><span class="secnum">4.2</span> ECMAScript Overview</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-objects" title="Objects"><span class="secnum">4.2.1</span> Objects</a></li><li><span class="item-toggle-none"></span><a href="#sec-strict-variant-of-ecmascript" title="The Strict Variant of ECMAScript"><span class="secnum">4.2.2</span> The Strict Variant of ECMAScript</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-terms-and-definitions" title="Terms and Definitions"><span class="secnum">4.3</span> Terms and Definitions</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-type" title="type"><span class="secnum">4.3.1</span> type</a></li><li><span class="item-toggle-none"></span><a href="#sec-primitive-value" title="primitive value"><span class="secnum">4.3.2</span> primitive value</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-object" title="object"><span class="secnum">4.3.3</span> object</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor" title="constructor"><span class="secnum">4.3.4</span> constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-prototype" title="prototype"><span class="secnum">4.3.5</span> prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-ordinary-object" title="ordinary object"><span class="secnum">4.3.6</span> ordinary object</a></li><li><span class="item-toggle-none"></span><a href="#sec-exotic-object" title="exotic object"><span class="secnum">4.3.7</span> exotic object</a></li><li><span class="item-toggle-none"></span><a href="#sec-standard-object" title="standard object"><span class="secnum">4.3.8</span> standard object</a></li><li><span class="item-toggle-none"></span><a href="#sec-built-in-object" title="built-in object"><span class="secnum">4.3.9</span> built-in object</a></li><li><span class="item-toggle-none"></span><a href="#sec-undefined-value" title="undefined value"><span class="secnum">4.3.10</span> undefined value</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-undefined-type" title="Undefined type"><span class="secnum">4.3.11</span> Undefined type</a></li><li><span class="item-toggle-none"></span><a href="#sec-null-value" title="null value"><span class="secnum">4.3.12</span> null value</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-null-type" title="Null type"><span class="secnum">4.3.13</span> Null type</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-boolean-value" title="Boolean value"><span class="secnum">4.3.14</span> Boolean value</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-boolean-type" title="Boolean type"><span class="secnum">4.3.15</span> Boolean type</a></li><li><span class="item-toggle-none"></span><a href="#sec-boolean-object" title="Boolean object"><span class="secnum">4.3.16</span> Boolean object</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-string-value" title="String value"><span class="secnum">4.3.17</span> String value</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-string-type" title="String type"><span class="secnum">4.3.18</span> String type</a></li><li><span class="item-toggle-none"></span><a href="#sec-string-object" title="String object"><span class="secnum">4.3.19</span> String object</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-number-value" title="Number value"><span class="secnum">4.3.20</span> Number value</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-number-type" title="Number type"><span class="secnum">4.3.21</span> Number type</a></li><li><span class="item-toggle-none"></span><a href="#sec-number-object" title="Number object"><span class="secnum">4.3.22</span> Number object</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-infinity" title="Infinity"><span class="secnum">4.3.23</span> Infinity</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-nan" title="NaN"><span class="secnum">4.3.24</span> NaN</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol-value" title="Symbol value"><span class="secnum">4.3.25</span> Symbol value</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-symbol-type" title="Symbol type"><span class="secnum">4.3.26</span> Symbol type</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol-object" title="Symbol object"><span class="secnum">4.3.27</span> Symbol object</a></li><li><span class="item-toggle-none"></span><a href="#sec-terms-and-definitions-function" title="function"><span class="secnum">4.3.28</span> function</a></li><li><span class="item-toggle-none"></span><a href="#sec-built-in-function" title="built-in function"><span class="secnum">4.3.29</span> built-in function</a></li><li><span class="item-toggle-none"></span><a href="#sec-property" title="property"><span class="secnum">4.3.30</span> property</a></li><li><span class="item-toggle-none"></span><a href="#sec-method" title="method"><span class="secnum">4.3.31</span> method</a></li><li><span class="item-toggle-none"></span><a href="#sec-built-in-method" title="built-in method"><span class="secnum">4.3.32</span> built-in method</a></li><li><span class="item-toggle-none"></span><a href="#sec-attribute" title="attribute"><span class="secnum">4.3.33</span> attribute</a></li><li><span class="item-toggle-none"></span><a href="#sec-own-property" title="own property"><span class="secnum">4.3.34</span> own property</a></li><li><span class="item-toggle-none"></span><a href="#sec-inherited-property" title="inherited property"><span class="secnum">4.3.35</span> inherited property</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-organization-of-this-specification" title="Organization of This Specification"><span class="secnum">4.4</span> Organization of This Specification</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-notational-conventions" title="Notational Conventions"><span class="secnum">5</span> Notational Conventions</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-syntactic-and-lexical-grammars" title="Syntactic and Lexical Grammars"><span class="secnum">5.1</span> Syntactic and Lexical Grammars</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-context-free-grammars" title="Context-Free Grammars"><span class="secnum">5.1.1</span> Context-Free Grammars</a></li><li><span class="item-toggle-none"></span><a href="#sec-lexical-and-regexp-grammars" title="The Lexical and RegExp Grammars"><span class="secnum">5.1.2</span> The Lexical and RegExp Grammars</a></li><li><span class="item-toggle-none"></span><a href="#sec-numeric-string-grammar" title="The Numeric String Grammar"><span class="secnum">5.1.3</span> The Numeric String Grammar</a></li><li><span class="item-toggle-none"></span><a href="#sec-syntactic-grammar" title="The Syntactic Grammar"><span class="secnum">5.1.4</span> The Syntactic Grammar</a></li><li><span class="item-toggle-none"></span><a href="#sec-grammar-notation" title="Grammar Notation"><span class="secnum">5.1.5</span> Grammar Notation</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-algorithm-conventions" title="Algorithm Conventions"><span class="secnum">5.2</span> Algorithm Conventions</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantic-rules" title="Static Semantic Rules"><span class="secnum">5.3</span> Static Semantic Rules</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-data-types-and-values" title="ECMAScript Data Types and Values"><span class="secnum">6</span> ECMAScript Data Types and Values</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-language-types" title="ECMAScript Language Types"><span class="secnum">6.1</span> ECMAScript Language Types</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ecmascript-language-types-undefined-type" title="The Undefined Type"><span class="secnum">6.1.1</span> The Undefined Type</a></li><li><span class="item-toggle-none"></span><a href="#sec-ecmascript-language-types-null-type" title="The Null Type"><span class="secnum">6.1.2</span> The Null Type</a></li><li><span class="item-toggle-none"></span><a href="#sec-ecmascript-language-types-boolean-type" title="The Boolean Type"><span class="secnum">6.1.3</span> The Boolean Type</a></li><li><span class="item-toggle-none"></span><a href="#sec-ecmascript-language-types-string-type" title="The String Type"><span class="secnum">6.1.4</span> The String Type</a></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-language-types-symbol-type" title="The Symbol Type"><span class="secnum">6.1.5</span> The Symbol Type</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-well-known-symbols" title="Well-Known Symbols"><span class="secnum">6.1.5.1</span> Well-Known Symbols</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-ecmascript-language-types-number-type" title="The Number Type"><span class="secnum">6.1.6</span> The Number Type</a></li><li><span class="item-toggle">â¢</span><a href="#sec-object-type" title="The Object Type"><span class="secnum">6.1.7</span> The Object Type</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-property-attributes" title="Property Attributes"><span class="secnum">6.1.7.1</span> Property Attributes</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-internal-methods-and-internal-slots" title="Object Internal Methods and Internal Slots"><span class="secnum">6.1.7.2</span> Object Internal Methods and Internal Slots</a></li><li><span class="item-toggle-none"></span><a href="#sec-invariants-of-the-essential-internal-methods" title="Invariants of the Essential Internal Methods"><span class="secnum">6.1.7.3</span> Invariants of the Essential Internal Methods</a></li><li><span class="item-toggle-none"></span><a href="#sec-well-known-intrinsic-objects" title="Well-Known Intrinsic Objects"><span class="secnum">6.1.7.4</span> Well-Known Intrinsic Objects</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-specification-types" title="ECMAScript Specification Types"><span class="secnum">6.2</span> ECMAScript Specification Types</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-list-and-record-specification-type" title="The List and Record Specification Types"><span class="secnum">6.2.1</span> The List and Record Specification Types</a></li><li><span class="item-toggle">â¢</span><a href="#sec-completion-record-specification-type" title="The Completion Record Specification Type"><span class="secnum">6.2.2</span> The Completion Record Specification Type</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-normalcompletion" title="NormalCompletion"><span class="secnum">6.2.2.1</span> NormalCompletion</a></li><li><span class="item-toggle-none"></span><a href="#sec-implicit-completion-values" title="Implicit Completion Values"><span class="secnum">6.2.2.2</span> Implicit Completion Values</a></li><li><span class="item-toggle-none"></span><a href="#sec-throw-an-exception" title="Throw an Exception"><span class="secnum">6.2.2.3</span> Throw an Exception</a></li><li><span class="item-toggle-none"></span><a href="#sec-returnifabrupt" title="ReturnIfAbrupt"><span class="secnum">6.2.2.4</span> ReturnIfAbrupt</a></li><li><span class="item-toggle-none"></span><a href="#sec-updateempty" title="UpdateEmpty ( completionRecord, value)"><span class="secnum">6.2.2.5</span> UpdateEmpty ( <var>completionRecord</var>, <var>value</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-reference-specification-type" title="The Reference Specification Type"><span class="secnum">6.2.3</span> The Reference Specification Type</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-getvalue" title="GetValue (V)"><span class="secnum">6.2.3.1</span> GetValue (<var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-putvalue" title="PutValue (V, W)"><span class="secnum">6.2.3.2</span> PutValue (<var>V</var>, <var>W</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-getthisvalue" title="GetThisValue (V)"><span class="secnum">6.2.3.3</span> GetThisValue (<var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-initializereferencedbinding" title="InitializeReferencedBinding (V, W)"><span class="secnum">6.2.3.4</span> InitializeReferencedBinding (<var>V</var>, <var>W</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-property-descriptor-specification-type" title="The Property Descriptor Specification Type"><span class="secnum">6.2.4</span> The Property Descriptor Specification Type</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-isaccessordescriptor" title="IsAccessorDescriptor ( Desc )"><span class="secnum">6.2.4.1</span> IsAccessorDescriptor ( <var>Desc</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-isdatadescriptor" title="IsDataDescriptor ( Desc )"><span class="secnum">6.2.4.2</span> IsDataDescriptor ( <var>Desc</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-isgenericdescriptor" title="IsGenericDescriptor ( Desc )"><span class="secnum">6.2.4.3</span> IsGenericDescriptor ( <var>Desc</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-frompropertydescriptor" title="FromPropertyDescriptor ( Desc )"><span class="secnum">6.2.4.4</span> FromPropertyDescriptor ( <var>Desc</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-topropertydescriptor" title="ToPropertyDescriptor ( Obj )"><span class="secnum">6.2.4.5</span> ToPropertyDescriptor ( <var>Obj</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-completepropertydescriptor" title="CompletePropertyDescriptor ( Desc )"><span class="secnum">6.2.4.6</span> CompletePropertyDescriptor ( <var>Desc</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-lexical-environment-and-environment-record-specification-types" title="The Lexical Environment and Environment Record Specification Types"><span class="secnum">6.2.5</span> The Lexical Environment and Environment Record Specification Types</a></li><li><span class="item-toggle">â¢</span><a href="#sec-data-blocks" title="Data Blocks"><span class="secnum">6.2.6</span> Data Blocks</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-createbytedatablock" title="CreateByteDataBlock (size)"><span class="secnum">6.2.6.1</span> CreateByteDataBlock (<var>size</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-copydatablockbytes" title="CopyDataBlockBytes (toBlock, toIndex, fromBlock, fromIndex, count)"><span class="secnum">6.2.6.2</span> CopyDataBlockBytes (<var>toBlock</var>, <var>toIndex</var>, <var>fromBlock</var>, <var>fromIndex</var>, <var>count</var>)</a></li></ol></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-abstract-operations" title="Abstract Operations"><span class="secnum">7</span> Abstract Operations</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-type-conversion" title="Type Conversion"><span class="secnum">7.1</span> Type Conversion</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-toprimitive" title="ToPrimitive ( input [ , PreferredType ] )"><span class="secnum">7.1.1</span> ToPrimitive ( <var>input</var> [ , <var>PreferredType</var> ] )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinarytoprimitive" title="OrdinaryToPrimitive ( O, hint )"><span class="secnum">7.1.1.1</span> OrdinaryToPrimitive ( <var>O</var>, <var>hint</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-toboolean" title="ToBoolean ( argument )"><span class="secnum">7.1.2</span> ToBoolean ( <var>argument</var> )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-tonumber" title="ToNumber ( argument )"><span class="secnum">7.1.3</span> ToNumber ( <var>argument</var> )</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-tonumber-applied-to-the-string-type" title="ToNumber Applied to the String Type"><span class="secnum">7.1.3.1</span> ToNumber Applied to the String Type</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-mv-s" title="Runtime Semantics: MV"><span class="secnum">7.1.3.1.1</span> RS: MV</a></li></ol></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-tointeger" title="ToInteger ( argument )"><span class="secnum">7.1.4</span> ToInteger ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-toint32" title="ToInt32 ( argument )"><span class="secnum">7.1.5</span> ToInt32 ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-touint32" title="ToUint32 ( argument )"><span class="secnum">7.1.6</span> ToUint32 ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-toint16" title="ToInt16 ( argument )"><span class="secnum">7.1.7</span> ToInt16 ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-touint16" title="ToUint16 ( argument )"><span class="secnum">7.1.8</span> ToUint16 ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-toint8" title="ToInt8 ( argument )"><span class="secnum">7.1.9</span> ToInt8 ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-touint8" title="ToUint8 ( argument )"><span class="secnum">7.1.10</span> ToUint8 ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-touint8clamp" title="ToUint8Clamp ( argument )"><span class="secnum">7.1.11</span> ToUint8Clamp ( <var>argument</var> )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-tostring" title="ToString ( argument )"><span class="secnum">7.1.12</span> ToString ( <var>argument</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-tostring-applied-to-the-number-type" title="ToString Applied to the Number Type"><span class="secnum">7.1.12.1</span> ToString Applied to the Number Type</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-toobject" title="ToObject ( argument )"><span class="secnum">7.1.13</span> ToObject ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-topropertykey" title="ToPropertyKey ( argument )"><span class="secnum">7.1.14</span> ToPropertyKey ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-tolength" title="ToLength ( argument )"><span class="secnum">7.1.15</span> ToLength ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-canonicalnumericindexstring" title="CanonicalNumericIndexString ( argument )"><span class="secnum">7.1.16</span> CanonicalNumericIndexString ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-toindex" title="ToIndex ( value )"><span class="secnum">7.1.17</span> ToIndex ( <var>value</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-testing-and-comparison-operations" title="Testing and Comparison Operations"><span class="secnum">7.2</span> Testing and Comparison Operations</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-requireobjectcoercible" title="RequireObjectCoercible ( argument )"><span class="secnum">7.2.1</span> RequireObjectCoercible ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-isarray" title="IsArray ( argument )"><span class="secnum">7.2.2</span> IsArray ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-iscallable" title="IsCallable ( argument )"><span class="secnum">7.2.3</span> IsCallable ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-isconstructor" title="IsConstructor ( argument )"><span class="secnum">7.2.4</span> IsConstructor ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-isextensible-o" title="IsExtensible (O)"><span class="secnum">7.2.5</span> IsExtensible (<var>O</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-isinteger" title="IsInteger ( argument )"><span class="secnum">7.2.6</span> IsInteger ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-ispropertykey" title="IsPropertyKey ( argument )"><span class="secnum">7.2.7</span> IsPropertyKey ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-isregexp" title="IsRegExp ( argument )"><span class="secnum">7.2.8</span> IsRegExp ( <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-samevalue" title="SameValue (x, y)"><span class="secnum">7.2.9</span> SameValue (<var>x</var>, <var>y</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-samevaluezero" title="SameValueZero (x, y)"><span class="secnum">7.2.10</span> SameValueZero (<var>x</var>, <var>y</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-samevaluenonnumber" title="SameValueNonNumber (x, y)"><span class="secnum">7.2.11</span> SameValueNonNumber (<var>x</var>, <var>y</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-abstract-relational-comparison" title="Abstract Relational Comparison"><span class="secnum">7.2.12</span> Abstract Relational Comparison</a></li><li><span class="item-toggle-none"></span><a href="#sec-abstract-equality-comparison" title="Abstract Equality Comparison"><span class="secnum">7.2.13</span> Abstract Equality Comparison</a></li><li><span class="item-toggle-none"></span><a href="#sec-strict-equality-comparison" title="Strict Equality Comparison"><span class="secnum">7.2.14</span> Strict Equality Comparison</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-operations-on-objects" title="Operations on Objects"><span class="secnum">7.3</span> Operations on Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-get-o-p" title="Get (O, P)"><span class="secnum">7.3.1</span> Get (<var>O</var>, <var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-getv" title="GetV (V, P)"><span class="secnum">7.3.2</span> GetV (<var>V</var>, <var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-set-o-p-v-throw" title="Set (O, P, V, Throw)"><span class="secnum">7.3.3</span> Set (<var>O</var>, <var>P</var>, <var>V</var>, <var>Throw</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-createdataproperty" title="CreateDataProperty (O, P, V)"><span class="secnum">7.3.4</span> CreateDataProperty (<var>O</var>, <var>P</var>, <var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-createmethodproperty" title="CreateMethodProperty (O, P, V)"><span class="secnum">7.3.5</span> CreateMethodProperty (<var>O</var>, <var>P</var>, <var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-createdatapropertyorthrow" title="CreateDataPropertyOrThrow (O, P, V)"><span class="secnum">7.3.6</span> CreateDataPropertyOrThrow (<var>O</var>, <var>P</var>, <var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-definepropertyorthrow" title="DefinePropertyOrThrow (O, P, desc)"><span class="secnum">7.3.7</span> DefinePropertyOrThrow (<var>O</var>, <var>P</var>, <var>desc</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-deletepropertyorthrow" title="DeletePropertyOrThrow (O, P)"><span class="secnum">7.3.8</span> DeletePropertyOrThrow (<var>O</var>, <var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-getmethod" title="GetMethod (V, P)"><span class="secnum">7.3.9</span> GetMethod (<var>V</var>, <var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-hasproperty" title="HasProperty (O, P)"><span class="secnum">7.3.10</span> HasProperty (<var>O</var>, <var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-hasownproperty" title="HasOwnProperty (O, P)"><span class="secnum">7.3.11</span> HasOwnProperty (<var>O</var>, <var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-call" title="Call (F, V [ , argumentsList ])"><span class="secnum">7.3.12</span> Call (<var>F</var>, <var>V</var> [ , <var>argumentsList</var> ])</a></li><li><span class="item-toggle-none"></span><a href="#sec-construct" title="Construct (F [ , argumentsList [ , newTarget ]])"><span class="secnum">7.3.13</span> Construct (<var>F</var> [ , <var>argumentsList</var> [ , <var>newTarget</var> ]])</a></li><li><span class="item-toggle-none"></span><a href="#sec-setintegritylevel" title="SetIntegrityLevel (O, level)"><span class="secnum">7.3.14</span> SetIntegrityLevel (<var>O</var>, <var>level</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-testintegritylevel" title="TestIntegrityLevel (O, level)"><span class="secnum">7.3.15</span> TestIntegrityLevel (<var>O</var>, <var>level</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-createarrayfromlist" title="CreateArrayFromList (elements)"><span class="secnum">7.3.16</span> CreateArrayFromList (<var>elements</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-createlistfromarraylike" title="CreateListFromArrayLike (obj [ , elementTypes ] )"><span class="secnum">7.3.17</span> CreateListFromArrayLike (<var>obj</var> [ , <var>elementTypes</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-invoke" title="Invoke (V, P [ , argumentsList ])"><span class="secnum">7.3.18</span> Invoke (<var>V</var>, <var>P</var> [ , <var>argumentsList</var> ])</a></li><li><span class="item-toggle-none"></span><a href="#sec-ordinaryhasinstance" title="OrdinaryHasInstance (C, O)"><span class="secnum">7.3.19</span> OrdinaryHasInstance (<var>C</var>, <var>O</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-speciesconstructor" title="SpeciesConstructor ( O, defaultConstructor )"><span class="secnum">7.3.20</span> SpeciesConstructor ( <var>O</var>, <var>defaultConstructor</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-enumerableownproperties" title="EnumerableOwnProperties ( O, kind )"><span class="secnum">7.3.21</span> EnumerableOwnProperties ( <var>O</var>, <var>kind</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-getfunctionrealm" title="GetFunctionRealm ( obj )"><span class="secnum">7.3.22</span> GetFunctionRealm ( <var>obj</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-operations-on-iterator-objects" title="Operations on Iterator Objects"><span class="secnum">7.4</span> Operations on Iterator Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-getiterator" title="GetIterator ( obj [ , method ] )"><span class="secnum">7.4.1</span> GetIterator ( <var>obj</var> [ , <var>method</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-iteratornext" title="IteratorNext ( iterator [ , value ] )"><span class="secnum">7.4.2</span> IteratorNext ( <var>iterator</var> [ , <var>value</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-iteratorcomplete" title="IteratorComplete ( iterResult )"><span class="secnum">7.4.3</span> IteratorComplete ( <var>iterResult</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-iteratorvalue" title="IteratorValue ( iterResult )"><span class="secnum">7.4.4</span> IteratorValue ( <var>iterResult</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-iteratorstep" title="IteratorStep ( iterator )"><span class="secnum">7.4.5</span> IteratorStep ( <var>iterator</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-iteratorclose" title="IteratorClose ( iterator, completion )"><span class="secnum">7.4.6</span> IteratorClose ( <var>iterator</var>, <var>completion</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-createiterresultobject" title="CreateIterResultObject ( value, done )"><span class="secnum">7.4.7</span> CreateIterResultObject ( <var>value</var>, <var>done</var> )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-createlistiterator" title="CreateListIterator ( list )"><span class="secnum">7.4.8</span> CreateListIterator ( <var>list</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-listiterator-next" title="ListIterator next( )"><span class="secnum">7.4.8.1</span> ListIterator next( )</a></li></ol></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-executable-code-and-execution-contexts" title="Executable Code and Execution Contexts"><span class="secnum">8</span> Executable Code and Execution Contexts</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-lexical-environments" title="Lexical Environments"><span class="secnum">8.1</span> Lexical Environments</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-environment-records" title="Environment Records"><span class="secnum">8.1.1</span> Environment Records</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-declarative-environment-records" title="Declarative Environment Records"><span class="secnum">8.1.1.1</span> Declarative Environment Records</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-declarative-environment-records-hasbinding-n" title="HasBinding (N)"><span class="secnum">8.1.1.1.1</span> HasBinding (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-declarative-environment-records-createmutablebinding-n-d" title="CreateMutableBinding (N, D)"><span class="secnum">8.1.1.1.2</span> CreateMutableBinding (<var>N</var>, <var>D</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-declarative-environment-records-createimmutablebinding-n-s" title="CreateImmutableBinding (N, S)"><span class="secnum">8.1.1.1.3</span> CreateImmutableBinding (<var>N</var>, <var>S</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-declarative-environment-records-initializebinding-n-v" title="InitializeBinding (N, V)"><span class="secnum">8.1.1.1.4</span> InitializeBinding (<var>N</var>, <var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-declarative-environment-records-setmutablebinding-n-v-s" title="SetMutableBinding (N, V, S)"><span class="secnum">8.1.1.1.5</span> SetMutableBinding (<var>N</var>, <var>V</var>, <var>S</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-declarative-environment-records-getbindingvalue-n-s" title="GetBindingValue (N, S)"><span class="secnum">8.1.1.1.6</span> GetBindingValue (<var>N</var>, <var>S</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-declarative-environment-records-deletebinding-n" title="DeleteBinding (N)"><span class="secnum">8.1.1.1.7</span> DeleteBinding (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-declarative-environment-records-hasthisbinding" title="HasThisBinding ()"><span class="secnum">8.1.1.1.8</span> HasThisBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-declarative-environment-records-hassuperbinding" title="HasSuperBinding ()"><span class="secnum">8.1.1.1.9</span> HasSuperBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-declarative-environment-records-withbaseobject" title="WithBaseObject ()"><span class="secnum">8.1.1.1.10</span> WithBaseObject ()</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-object-environment-records" title="Object Environment Records"><span class="secnum">8.1.1.2</span> Object Environment Records</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-object-environment-records-hasbinding-n" title="HasBinding (N)"><span class="secnum">8.1.1.2.1</span> HasBinding (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-environment-records-createmutablebinding-n-d" title="CreateMutableBinding (N, D)"><span class="secnum">8.1.1.2.2</span> CreateMutableBinding (<var>N</var>, <var>D</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-environment-records-createimmutablebinding-n-s" title="CreateImmutableBinding (N, S)"><span class="secnum">8.1.1.2.3</span> CreateImmutableBinding (<var>N</var>, <var>S</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-environment-records-initializebinding-n-v" title="InitializeBinding (N, V)"><span class="secnum">8.1.1.2.4</span> InitializeBinding (<var>N</var>, <var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-environment-records-setmutablebinding-n-v-s" title="SetMutableBinding (N, V, S)"><span class="secnum">8.1.1.2.5</span> SetMutableBinding (<var>N</var>, <var>V</var>, <var>S</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-environment-records-getbindingvalue-n-s" title="GetBindingValue (N, S)"><span class="secnum">8.1.1.2.6</span> GetBindingValue (<var>N</var>, <var>S</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-environment-records-deletebinding-n" title="DeleteBinding (N)"><span class="secnum">8.1.1.2.7</span> DeleteBinding (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-environment-records-hasthisbinding" title="HasThisBinding ()"><span class="secnum">8.1.1.2.8</span> HasThisBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-environment-records-hassuperbinding" title="HasSuperBinding ()"><span class="secnum">8.1.1.2.9</span> HasSuperBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-environment-records-withbaseobject" title="WithBaseObject ()"><span class="secnum">8.1.1.2.10</span> WithBaseObject ()</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-function-environment-records" title="Function Environment Records"><span class="secnum">8.1.1.3</span> Function Environment Records</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-bindthisvalue" title="BindThisValue (V)"><span class="secnum">8.1.1.3.1</span> BindThisValue (<var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-environment-records-hasthisbinding" title="HasThisBinding ()"><span class="secnum">8.1.1.3.2</span> HasThisBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-environment-records-hassuperbinding" title="HasSuperBinding ()"><span class="secnum">8.1.1.3.3</span> HasSuperBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-environment-records-getthisbinding" title="GetThisBinding ()"><span class="secnum">8.1.1.3.4</span> GetThisBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-getsuperbase" title="GetSuperBase ()"><span class="secnum">8.1.1.3.5</span> GetSuperBase ()</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-global-environment-records" title="Global Environment Records"><span class="secnum">8.1.1.4</span> Global Environment Records</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-hasbinding-n" title="HasBinding (N)"><span class="secnum">8.1.1.4.1</span> HasBinding (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-createmutablebinding-n-d" title="CreateMutableBinding (N, D)"><span class="secnum">8.1.1.4.2</span> CreateMutableBinding (<var>N</var>, <var>D</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-createimmutablebinding-n-s" title="CreateImmutableBinding (N, S)"><span class="secnum">8.1.1.4.3</span> CreateImmutableBinding (<var>N</var>, <var>S</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-initializebinding-n-v" title="InitializeBinding (N, V)"><span class="secnum">8.1.1.4.4</span> InitializeBinding (<var>N</var>, <var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-setmutablebinding-n-v-s" title="SetMutableBinding (N, V, S)"><span class="secnum">8.1.1.4.5</span> SetMutableBinding (<var>N</var>, <var>V</var>, <var>S</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-getbindingvalue-n-s" title="GetBindingValue (N, S)"><span class="secnum">8.1.1.4.6</span> GetBindingValue (<var>N</var>, <var>S</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-deletebinding-n" title="DeleteBinding (N)"><span class="secnum">8.1.1.4.7</span> DeleteBinding (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-hasthisbinding" title="HasThisBinding ()"><span class="secnum">8.1.1.4.8</span> HasThisBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-hassuperbinding" title="HasSuperBinding ()"><span class="secnum">8.1.1.4.9</span> HasSuperBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-withbaseobject" title="WithBaseObject ()"><span class="secnum">8.1.1.4.10</span> WithBaseObject ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-global-environment-records-getthisbinding" title="GetThisBinding ()"><span class="secnum">8.1.1.4.11</span> GetThisBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-hasvardeclaration" title="HasVarDeclaration (N)"><span class="secnum">8.1.1.4.12</span> HasVarDeclaration (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-haslexicaldeclaration" title="HasLexicalDeclaration (N)"><span class="secnum">8.1.1.4.13</span> HasLexicalDeclaration (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-hasrestrictedglobalproperty" title="HasRestrictedGlobalProperty (N)"><span class="secnum">8.1.1.4.14</span> HasRestrictedGlobalProperty (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-candeclareglobalvar" title="CanDeclareGlobalVar (N)"><span class="secnum">8.1.1.4.15</span> CanDeclareGlobalVar (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-candeclareglobalfunction" title="CanDeclareGlobalFunction (N)"><span class="secnum">8.1.1.4.16</span> CanDeclareGlobalFunction (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-createglobalvarbinding" title="CreateGlobalVarBinding (N, D)"><span class="secnum">8.1.1.4.17</span> CreateGlobalVarBinding (<var>N</var>, <var>D</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-createglobalfunctionbinding" title="CreateGlobalFunctionBinding (N, V, D)"><span class="secnum">8.1.1.4.18</span> CreateGlobalFunctionBinding (<var>N</var>, <var>V</var>, <var>D</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-module-environment-records" title="Module Environment Records"><span class="secnum">8.1.1.5</span> Module Environment Records</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-module-environment-records-getbindingvalue-n-s" title="GetBindingValue (N, S)"><span class="secnum">8.1.1.5.1</span> GetBindingValue (<var>N</var>, <var>S</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-environment-records-deletebinding-n" title="DeleteBinding (N)"><span class="secnum">8.1.1.5.2</span> DeleteBinding (<var>N</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-environment-records-hasthisbinding" title="HasThisBinding ()"><span class="secnum">8.1.1.5.3</span> HasThisBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-environment-records-getthisbinding" title="GetThisBinding ()"><span class="secnum">8.1.1.5.4</span> GetThisBinding ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-createimportbinding" title="CreateImportBinding (N, M, N2)"><span class="secnum">8.1.1.5.5</span> CreateImportBinding (<var>N</var>, <var>M</var>, <var>N2</var>)</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-lexical-environment-operations" title="Lexical Environment Operations"><span class="secnum">8.1.2</span> Lexical Environment Operations</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-getidentifierreference" title="GetIdentifierReference (lex, name, strict)"><span class="secnum">8.1.2.1</span> GetIdentifierReference (<var>lex</var>, <var>name</var>, <var>strict</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-newdeclarativeenvironment" title="NewDeclarativeEnvironment (E)"><span class="secnum">8.1.2.2</span> NewDeclarativeEnvironment (<var>E</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-newobjectenvironment" title="NewObjectEnvironment (O, E)"><span class="secnum">8.1.2.3</span> NewObjectEnvironment (<var>O</var>, <var>E</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-newfunctionenvironment" title="NewFunctionEnvironment ( F, newTarget )"><span class="secnum">8.1.2.4</span> NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-newglobalenvironment" title="NewGlobalEnvironment ( G, thisValue )"><span class="secnum">8.1.2.5</span> NewGlobalEnvironment ( <var>G</var>, <var>thisValue</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-newmoduleenvironment" title="NewModuleEnvironment (E)"><span class="secnum">8.1.2.6</span> NewModuleEnvironment (<var>E</var>)</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-code-realms" title="Realms"><span class="secnum">8.2</span> Realms</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-createrealm" title="CreateRealm ( )"><span class="secnum">8.2.1</span> CreateRealm ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-createintrinsics" title="CreateIntrinsics ( realmRec )"><span class="secnum">8.2.2</span> CreateIntrinsics ( <var>realmRec</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-setrealmglobalobject" title="SetRealmGlobalObject ( realmRec, globalObj, thisValue )"><span class="secnum">8.2.3</span> SetRealmGlobalObject ( <var>realmRec</var>, <var>globalObj</var>, <var>thisValue</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-setdefaultglobalbindings" title="SetDefaultGlobalBindings ( realmRec )"><span class="secnum">8.2.4</span> SetDefaultGlobalBindings ( <var>realmRec</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-execution-contexts" title="Execution Contexts"><span class="secnum">8.3</span> Execution Contexts</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-getactivescriptormodule" title="GetActiveScriptOrModule ()"><span class="secnum">8.3.1</span> GetActiveScriptOrModule ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-resolvebinding" title="ResolveBinding ( name [ , env ] )"><span class="secnum">8.3.2</span> ResolveBinding ( <var>name</var> [ , <var>env</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-getthisenvironment" title="GetThisEnvironment ( )"><span class="secnum">8.3.3</span> GetThisEnvironment ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-resolvethisbinding" title="ResolveThisBinding ( )"><span class="secnum">8.3.4</span> ResolveThisBinding ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-getnewtarget" title="GetNewTarget ( )"><span class="secnum">8.3.5</span> GetNewTarget ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-getglobalobject" title="GetGlobalObject ( )"><span class="secnum">8.3.6</span> GetGlobalObject ( )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-jobs-and-job-queues" title="Jobs and Job Queues"><span class="secnum">8.4</span> Jobs and Job Queues</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-enqueuejob" title="EnqueueJob (queueName, job, arguments)"><span class="secnum">8.4.1</span> EnqueueJob (<var>queueName</var>, <var>job</var>, <var>arguments</var>)</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-initializehostdefinedrealm" title="InitializeHostDefinedRealm ( )"><span class="secnum">8.5</span> InitializeHostDefinedRealm ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-runjobs" title="RunJobs ( )"><span class="secnum">8.6</span> RunJobs ( )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-and-exotic-objects-behaviours" title="Ordinary and Exotic Objects Behaviours"><span class="secnum">9</span> Ordinary and Exotic Objects Behaviours</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots" title="Ordinary Object Internal Methods and Internal Slots"><span class="secnum">9.1</span> Ordinary Object Internal Methods and Internal Slots</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof" title="[[GetPrototypeOf]] ( )"><span class="secnum">9.1.1</span> [[GetPrototypeOf]] ( )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinarygetprototypeof" title="OrdinaryGetPrototypeOf (O)"><span class="secnum">9.1.1.1</span> OrdinaryGetPrototypeOf (<var>O</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-setprototypeof-v" title="[[SetPrototypeOf]] (V)"><span class="secnum">9.1.2</span> [[SetPrototypeOf]] (<var>V</var>)</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinarysetprototypeof" title="OrdinarySetPrototypeOf (O, V)"><span class="secnum">9.1.2.1</span> OrdinarySetPrototypeOf (<var>O</var>, <var>V</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-isextensible" title="[[IsExtensible]] ( )"><span class="secnum">9.1.3</span> [[IsExtensible]] ( )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinaryisextensible" title="OrdinaryIsExtensible (O)"><span class="secnum">9.1.3.1</span> OrdinaryIsExtensible (<var>O</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-preventextensions" title="[[PreventExtensions]] ( )"><span class="secnum">9.1.4</span> [[PreventExtensions]] ( )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinarypreventextensions" title="OrdinaryPreventExtensions (O)"><span class="secnum">9.1.4.1</span> OrdinaryPreventExtensions (<var>O</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-getownproperty-p" title="[[GetOwnProperty]] (P)"><span class="secnum">9.1.5</span> [[GetOwnProperty]] (<var>P</var>)</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinarygetownproperty" title="OrdinaryGetOwnProperty (O, P)"><span class="secnum">9.1.5.1</span> OrdinaryGetOwnProperty (<var>O</var>, <var>P</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc" title="[[DefineOwnProperty]] (P, Desc)"><span class="secnum">9.1.6</span> [[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinarydefineownproperty" title="OrdinaryDefineOwnProperty (O, P, Desc)"><span class="secnum">9.1.6.1</span> OrdinaryDefineOwnProperty (<var>O</var>, <var>P</var>, <var>Desc</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-iscompatiblepropertydescriptor" title="IsCompatiblePropertyDescriptor (Extensible, Desc, Current)"><span class="secnum">9.1.6.2</span> IsCompatiblePropertyDescriptor (<var>Extensible</var>, <var>Desc</var>, <var>Current</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-validateandapplypropertydescriptor" title="ValidateAndApplyPropertyDescriptor (O, P, extensible, Desc, current)"><span class="secnum">9.1.6.3</span> ValidateAndApplyPropertyDescriptor (<var>O</var>, <var>P</var>, <var>extensible</var>, <var>Desc</var>, <var>current</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p" title="[[HasProperty]](P)"><span class="secnum">9.1.7</span> [[HasProperty]](<var>P</var>)</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinaryhasproperty" title="OrdinaryHasProperty (O, P)"><span class="secnum">9.1.7.1</span> OrdinaryHasProperty (<var>O</var>, <var>P</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver" title="[[Get]] (P, Receiver)"><span class="secnum">9.1.8</span> [[Get]] (<var>P</var>, <var>Receiver</var>)</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinaryget" title="OrdinaryGet (O, P, Receiver)"><span class="secnum">9.1.8.1</span> OrdinaryGet (<var>O</var>, <var>P</var>, <var>Receiver</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-set-p-v-receiver" title="[[Set]] ( P, V, Receiver)"><span class="secnum">9.1.9</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinaryset" title="OrdinarySet (O, P, V, Receiver)"><span class="secnum">9.1.9.1</span> OrdinarySet (<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-delete-p" title="[[Delete]] (P)"><span class="secnum">9.1.10</span> [[Delete]] (<var>P</var>)</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinarydelete" title="OrdinaryDelete (O, P)"><span class="secnum">9.1.10.1</span> OrdinaryDelete (<var>O</var>, <var>P</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys" title="[[OwnPropertyKeys]] ( )"><span class="secnum">9.1.11</span> [[OwnPropertyKeys]] ( )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ordinaryownpropertykeys" title="OrdinaryOwnPropertyKeys (O)"><span class="secnum">9.1.11.1</span> OrdinaryOwnPropertyKeys (<var>O</var>)</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-objectcreate" title="ObjectCreate (proto [ , internalSlotsList ])"><span class="secnum">9.1.12</span> ObjectCreate (<var>proto</var> [ , <var>internalSlotsList</var> ])</a></li><li><span class="item-toggle-none"></span><a href="#sec-ordinarycreatefromconstructor" title="OrdinaryCreateFromConstructor ( constructor, intrinsicDefaultProto [ , internalSlotsList ] )"><span class="secnum">9.1.13</span> OrdinaryCreateFromConstructor ( <var>constructor</var>, <var>intrinsicDefaultProto</var> [ , <var>internalSlotsList</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-getprototypefromconstructor" title="GetPrototypeFromConstructor ( constructor, intrinsicDefaultProto )"><span class="secnum">9.1.14</span> GetPrototypeFromConstructor ( <var>constructor</var>, <var>intrinsicDefaultProto</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-function-objects" title="ECMAScript Function Objects"><span class="secnum">9.2</span> ECMAScript Function Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-function-objects-call-thisargument-argumentslist" title="[[Call]] ( thisArgument, argumentsList)"><span class="secnum">9.2.1</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var>)</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-prepareforordinarycall" title="PrepareForOrdinaryCall ( F, newTarget )"><span class="secnum">9.2.1.1</span> PrepareForOrdinaryCall ( <var>F</var>, <var>newTarget</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-ordinarycallbindthis" title="OrdinaryCallBindThis ( F, calleeContext, thisArgument )"><span class="secnum">9.2.1.2</span> OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-ordinarycallevaluatebody" title="OrdinaryCallEvaluateBody ( F, argumentsList )"><span class="secnum">9.2.1.3</span> OrdinaryCallEvaluateBody ( <var>F</var>, <var>argumentsList</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-ecmascript-function-objects-construct-argumentslist-newtarget" title="[[Construct]] ( argumentsList, newTarget)"><span class="secnum">9.2.2</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-functionallocate" title="FunctionAllocate (functionPrototype, strict, functionKind)"><span class="secnum">9.2.3</span> FunctionAllocate (<var>functionPrototype</var>, <var>strict</var>, <var>functionKind</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-functioninitialize" title="FunctionInitialize (F, kind, ParameterList, Body, Scope)"><span class="secnum">9.2.4</span> FunctionInitialize (<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-functioncreate" title="FunctionCreate (kind, ParameterList, Body, Scope, Strict [ , prototype ])"><span class="secnum">9.2.5</span> FunctionCreate (<var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>Strict</var> [ , <var>prototype</var> ])</a></li><li><span class="item-toggle-none"></span><a href="#sec-generatorfunctioncreate" title="GeneratorFunctionCreate (kind, ParameterList, Body, Scope, Strict)"><span class="secnum">9.2.6</span> GeneratorFunctionCreate (<var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>Strict</var>)</a></li><li><span class="item-toggle">â¢</span><a href="#sec-addrestrictedfunctionproperties" title="AddRestrictedFunctionProperties ( F, realm )"><span class="secnum">9.2.7</span> AddRestrictedFunctionProperties ( <var>F</var>, <var>realm</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-%throwtypeerror%" title="%ThrowTypeError% ( )"><span class="secnum">9.2.7.1</span> %ThrowTypeError% ( )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-makeconstructor" title="MakeConstructor (F [ , writablePrototype [ , prototype ] ] )"><span class="secnum">9.2.8</span> MakeConstructor (<var>F</var> [ , <var>writablePrototype</var> [ , <var>prototype</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-makeclassconstructor" title="MakeClassConstructor ( F)"><span class="secnum">9.2.9</span> MakeClassConstructor ( <var>F</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-makemethod" title="MakeMethod ( F, homeObject)"><span class="secnum">9.2.10</span> MakeMethod ( <var>F</var>, <var>homeObject</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-setfunctionname" title="SetFunctionName (F, name [ , prefix ])"><span class="secnum">9.2.11</span> SetFunctionName (<var>F</var>, <var>name</var> [ , <var>prefix</var> ])</a></li><li><span class="item-toggle-none"></span><a href="#sec-functiondeclarationinstantiation" title="FunctionDeclarationInstantiation (func, argumentsList)"><span class="secnum">9.2.12</span> FunctionDeclarationInstantiation (<var>func</var>, <var>argumentsList</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-built-in-function-objects" title="Built-in Function Objects"><span class="secnum">9.3</span> Built-in Function Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-built-in-function-objects-call-thisargument-argumentslist" title="[[Call]] ( thisArgument, argumentsList)"><span class="secnum">9.3.1</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-built-in-function-objects-construct-argumentslist-newtarget" title="[[Construct]] (argumentsList, newTarget)"><span class="secnum">9.3.2</span> [[Construct]] (<var>argumentsList</var>, <var>newTarget</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-createbuiltinfunction" title="CreateBuiltinFunction (realm, steps, prototype [ , internalSlotsList ])"><span class="secnum">9.3.3</span> CreateBuiltinFunction (<var>realm</var>, <var>steps</var>, <var>prototype</var> [ , <var>internalSlotsList</var> ])</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-built-in-exotic-object-internal-methods-and-slots" title="Built-in Exotic Object Internal Methods and Slots"><span class="secnum">9.4</span> Built-in Exotic Object Internal Methods and Slots</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-bound-function-exotic-objects" title="Bound Function Exotic Objects"><span class="secnum">9.4.1</span> Bound Function Exotic Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-bound-function-exotic-objects-call-thisargument-argumentslist" title="[[Call]] ( thisArgument, argumentsList)"><span class="secnum">9.4.1.1</span> [[Call]] ( <var>thisArgument</var>, <var>argumentsList</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-bound-function-exotic-objects-construct-argumentslist-newtarget" title="[[Construct]] (argumentsList, newTarget)"><span class="secnum">9.4.1.2</span> [[Construct]] (<var>argumentsList</var>, <var>newTarget</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-boundfunctioncreate" title="BoundFunctionCreate (targetFunction, boundThis, boundArgs)"><span class="secnum">9.4.1.3</span> BoundFunctionCreate (<var>targetFunction</var>, <var>boundThis</var>, <var>boundArgs</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-array-exotic-objects" title="Array Exotic Objects"><span class="secnum">9.4.2</span> Array Exotic Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-array-exotic-objects-defineownproperty-p-desc" title="[[DefineOwnProperty]] ( P, Desc)"><span class="secnum">9.4.2.1</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-arraycreate" title="ArrayCreate (length [ , proto ])"><span class="secnum">9.4.2.2</span> ArrayCreate (<var>length</var> [ , <var>proto</var> ])</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrayspeciescreate" title="ArraySpeciesCreate (originalArray, length)"><span class="secnum">9.4.2.3</span> ArraySpeciesCreate (<var>originalArray</var>, <var>length</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-arraysetlength" title="ArraySetLength (A, Desc)"><span class="secnum">9.4.2.4</span> ArraySetLength (<var>A</var>, <var>Desc</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-string-exotic-objects" title="String Exotic Objects"><span class="secnum">9.4.3</span> String Exotic Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-string-exotic-objects-getownproperty-p" title="[[GetOwnProperty]] ( P )"><span class="secnum">9.4.3.1</span> [[GetOwnProperty]] ( <var>P</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string-exotic-objects-ownpropertykeys" title="[[OwnPropertyKeys]] ( )"><span class="secnum">9.4.3.2</span> [[OwnPropertyKeys]] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-stringcreate" title="StringCreate ( value, prototype)"><span class="secnum">9.4.3.3</span> StringCreate ( <var>value</var>, <var>prototype</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-arguments-exotic-objects" title="Arguments Exotic Objects"><span class="secnum">9.4.4</span> Arguments Exotic Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-arguments-exotic-objects-getownproperty-p" title="[[GetOwnProperty]] (P)"><span class="secnum">9.4.4.1</span> [[GetOwnProperty]] (<var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-arguments-exotic-objects-defineownproperty-p-desc" title="[[DefineOwnProperty]] (P, Desc)"><span class="secnum">9.4.4.2</span> [[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-arguments-exotic-objects-get-p-receiver" title="[[Get]] (P, Receiver)"><span class="secnum">9.4.4.3</span> [[Get]] (<var>P</var>, <var>Receiver</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-arguments-exotic-objects-set-p-v-receiver" title="[[Set]] ( P, V, Receiver)"><span class="secnum">9.4.4.4</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-arguments-exotic-objects-delete-p" title="[[Delete]] (P)"><span class="secnum">9.4.4.5</span> [[Delete]] (<var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-createunmappedargumentsobject" title="CreateUnmappedArgumentsObject (argumentsList)"><span class="secnum">9.4.4.6</span> CreateUnmappedArgumentsObject (<var>argumentsList</var>)</a></li><li><span class="item-toggle">â¢</span><a href="#sec-createmappedargumentsobject" title="CreateMappedArgumentsObject ( func, formals, argumentsList, env )"><span class="secnum">9.4.4.7</span> CreateMappedArgumentsObject ( <var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-makearggetter" title="MakeArgGetter ( name, env)"><span class="secnum">9.4.4.7.1</span> MakeArgGetter ( <var>name</var>, <var>env</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-makeargsetter" title="MakeArgSetter ( name, env)"><span class="secnum">9.4.4.7.2</span> MakeArgSetter ( <var>name</var>, <var>env</var>)</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-integer-indexed-exotic-objects" title="Integer Indexed Exotic Objects"><span class="secnum">9.4.5</span> Integer Indexed Exotic Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-integer-indexed-exotic-objects-getownproperty-p" title="[[GetOwnProperty]] ( P )"><span class="secnum">9.4.5.1</span> [[GetOwnProperty]] ( <var>P</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-integer-indexed-exotic-objects-hasproperty-p" title="[[HasProperty]](P)"><span class="secnum">9.4.5.2</span> [[HasProperty]](<var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-integer-indexed-exotic-objects-defineownproperty-p-desc" title="[[DefineOwnProperty]] ( P, Desc)"><span class="secnum">9.4.5.3</span> [[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-integer-indexed-exotic-objects-get-p-receiver" title="[[Get]] (P, Receiver)"><span class="secnum">9.4.5.4</span> [[Get]] (<var>P</var>, <var>Receiver</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-integer-indexed-exotic-objects-set-p-v-receiver" title="[[Set]] ( P, V, Receiver)"><span class="secnum">9.4.5.5</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-integer-indexed-exotic-objects-ownpropertykeys" title="[[OwnPropertyKeys]] ()"><span class="secnum">9.4.5.6</span> [[OwnPropertyKeys]] ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-integerindexedobjectcreate" title="IntegerIndexedObjectCreate (prototype, internalSlotsList)"><span class="secnum">9.4.5.7</span> IntegerIndexedObjectCreate (<var>prototype</var>, <var>internalSlotsList</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-integerindexedelementget" title="IntegerIndexedElementGet ( O, index )"><span class="secnum">9.4.5.8</span> IntegerIndexedElementGet ( <var>O</var>, <var>index</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-integerindexedelementset" title="IntegerIndexedElementSet ( O, index, value )"><span class="secnum">9.4.5.9</span> IntegerIndexedElementSet ( <var>O</var>, <var>index</var>, <var>value</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-module-namespace-exotic-objects" title="Module Namespace Exotic Objects"><span class="secnum">9.4.6</span> Module Namespace Exotic Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-getprototypeof" title="[[GetPrototypeOf]] ( )"><span class="secnum">9.4.6.1</span> [[GetPrototypeOf]] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-setprototypeof-v" title="[[SetPrototypeOf]] (V)"><span class="secnum">9.4.6.2</span> [[SetPrototypeOf]] (<var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-isextensible" title="[[IsExtensible]] ( )"><span class="secnum">9.4.6.3</span> [[IsExtensible]] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-preventextensions" title="[[PreventExtensions]] ( )"><span class="secnum">9.4.6.4</span> [[PreventExtensions]] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-getownproperty-p" title="[[GetOwnProperty]] (P)"><span class="secnum">9.4.6.5</span> [[GetOwnProperty]] (<var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-defineownproperty-p-desc" title="[[DefineOwnProperty]] (P, Desc)"><span class="secnum">9.4.6.6</span> [[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-hasproperty-p" title="[[HasProperty]] (P)"><span class="secnum">9.4.6.7</span> [[HasProperty]] (<var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-get-p-receiver" title="[[Get]] (P, Receiver)"><span class="secnum">9.4.6.8</span> [[Get]] (<var>P</var>, <var>Receiver</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-set-p-v-receiver" title="[[Set]] ( P, V, Receiver)"><span class="secnum">9.4.6.9</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-delete-p" title="[[Delete]] (P)"><span class="secnum">9.4.6.10</span> [[Delete]] (<var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-namespace-exotic-objects-ownpropertykeys" title="[[OwnPropertyKeys]] ( )"><span class="secnum">9.4.6.11</span> [[OwnPropertyKeys]] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-modulenamespacecreate" title="ModuleNamespaceCreate (module, exports)"><span class="secnum">9.4.6.12</span> ModuleNamespaceCreate (<var>module</var>, <var>exports</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-immutable-prototype-exotic-objects" title="Immutable Prototype Exotic Objects"><span class="secnum">9.4.7</span> Immutable Prototype Exotic Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-immutable-prototype-exotic-objects-setprototypeof-v" title="[[SetPrototypeOf]] (V)"><span class="secnum">9.4.7.1</span> [[SetPrototypeOf]] (<var>V</var>)</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-proxy-object-internal-methods-and-internal-slots" title="Proxy Object Internal Methods and Internal Slots"><span class="secnum">9.5</span> Proxy Object Internal Methods and Internal Slots</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-getprototypeof" title="[[GetPrototypeOf]] ( )"><span class="secnum">9.5.1</span> [[GetPrototypeOf]] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v" title="[[SetPrototypeOf]] (V)"><span class="secnum">9.5.2</span> [[SetPrototypeOf]] (<var>V</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-isextensible" title="[[IsExtensible]] ( )"><span class="secnum">9.5.3</span> [[IsExtensible]] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-preventextensions" title="[[PreventExtensions]] ( )"><span class="secnum">9.5.4</span> [[PreventExtensions]] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p" title="[[GetOwnProperty]] (P)"><span class="secnum">9.5.5</span> [[GetOwnProperty]] (<var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc" title="[[DefineOwnProperty]] (P, Desc)"><span class="secnum">9.5.6</span> [[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p" title="[[HasProperty]] (P)"><span class="secnum">9.5.7</span> [[HasProperty]] (<var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver" title="[[Get]] (P, Receiver)"><span class="secnum">9.5.8</span> [[Get]] (<var>P</var>, <var>Receiver</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver" title="[[Set]] ( P, V, Receiver)"><span class="secnum">9.5.9</span> [[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-delete-p" title="[[Delete]] (P)"><span class="secnum">9.5.10</span> [[Delete]] (<var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys" title="[[OwnPropertyKeys]] ( )"><span class="secnum">9.5.11</span> [[OwnPropertyKeys]] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist" title="[[Call]] (thisArgument, argumentsList)"><span class="secnum">9.5.12</span> [[Call]] (<var>thisArgument</var>, <var>argumentsList</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget" title="[[Construct]] ( argumentsList, newTarget)"><span class="secnum">9.5.13</span> [[Construct]] ( <var>argumentsList</var>, <var>newTarget</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-proxycreate" title="ProxyCreate (target, handler)"><span class="secnum">9.5.14</span> ProxyCreate (<var>target</var>, <var>handler</var>)</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-language-source-code" title="ECMAScript Language: Source Code"><span class="secnum">10</span> ECMAScript Language: Source Code</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-source-text" title="Source Text"><span class="secnum">10.1</span> Source Text</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-utf16encoding" title="Static Semantics: UTF16Encoding ( cp )"><span class="secnum">10.1.1</span> SS: UTF16Encoding ( <var>cp</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-utf16decode" title="Static Semantics: UTF16Decode( lead, trail )"><span class="secnum">10.1.2</span> SS: UTF16Decode( <var>lead</var>, <var>trail</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-types-of-source-code" title="Types of Source Code"><span class="secnum">10.2</span> Types of Source Code</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-strict-mode-code" title="Strict Mode Code"><span class="secnum">10.2.1</span> Strict Mode Code</a></li><li><span class="item-toggle-none"></span><a href="#sec-non-ecmascript-functions" title="Non-ECMAScript Functions"><span class="secnum">10.2.2</span> Non-ECMAScript Functions</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-language-lexical-grammar" title="ECMAScript Language: Lexical Grammar"><span class="secnum">11</span> ECMAScript Language: Lexical Grammar</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-unicode-format-control-characters" title="Unicode Format-Control Characters"><span class="secnum">11.1</span> Unicode Format-Control Characters</a></li><li><span class="item-toggle-none"></span><a href="#sec-white-space" title="White Space"><span class="secnum">11.2</span> White Space</a></li><li><span class="item-toggle-none"></span><a href="#sec-line-terminators" title="Line Terminators"><span class="secnum">11.3</span> Line Terminators</a></li><li><span class="item-toggle-none"></span><a href="#sec-comments" title="Comments"><span class="secnum">11.4</span> Comments</a></li><li><span class="item-toggle-none"></span><a href="#sec-tokens" title="Tokens"><span class="secnum">11.5</span> Tokens</a></li><li><span class="item-toggle">â¢</span><a href="#sec-names-and-keywords" title="Names and Keywords"><span class="secnum">11.6</span> Names and Keywords</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-identifier-names" title="Identifier Names"><span class="secnum">11.6.1</span> Identifier Names</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-identifier-names-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">11.6.1.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-identifier-names-static-semantics-stringvalue" title="Static Semantics: StringValue"><span class="secnum">11.6.1.2</span> SS: StringValue</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-reserved-words" title="Reserved Words"><span class="secnum">11.6.2</span> Reserved Words</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-keywords" title="Keywords"><span class="secnum">11.6.2.1</span> Keywords</a></li><li><span class="item-toggle-none"></span><a href="#sec-future-reserved-words" title="Future Reserved Words"><span class="secnum">11.6.2.2</span> Future Reserved Words</a></li></ol></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-punctuators" title="Punctuators"><span class="secnum">11.7</span> Punctuators</a></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-language-lexical-grammar-literals" title="Literals"><span class="secnum">11.8</span> Literals</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-null-literals" title="Null Literals"><span class="secnum">11.8.1</span> Null Literals</a></li><li><span class="item-toggle-none"></span><a href="#sec-boolean-literals" title="Boolean Literals"><span class="secnum">11.8.2</span> Boolean Literals</a></li><li><span class="item-toggle">â¢</span><a href="#sec-literals-numeric-literals" title="Numeric Literals"><span class="secnum">11.8.3</span> Numeric Literals</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-mv" title="Static Semantics: MV"><span class="secnum">11.8.3.1</span> SS: MV</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-literals-string-literals" title="String Literals"><span class="secnum">11.8.4</span> String Literals</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-string-literals-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">11.8.4.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-string-literals-static-semantics-stringvalue" title="Static Semantics: StringValue"><span class="secnum">11.8.4.2</span> SS: StringValue</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-sv" title="Static Semantics: SV"><span class="secnum">11.8.4.3</span> SS: SV</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-literals-regular-expression-literals" title="Regular Expression Literals"><span class="secnum">11.8.5</span> Regular Expression Literals</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-literals-regular-expression-literals-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">11.8.5.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-bodytext" title="Static Semantics: BodyText"><span class="secnum">11.8.5.2</span> SS: BodyText</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-flagtext" title="Static Semantics: FlagText"><span class="secnum">11.8.5.3</span> SS: FlagText</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-template-literal-lexical-components" title="Template Literal Lexical Components"><span class="secnum">11.8.6</span> Template Literal Lexical Components</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-tv-and-trv" title="Static Semantics: TV and TRV"><span class="secnum">11.8.6.1</span> SS: TV and TRV</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-automatic-semicolon-insertion" title="Automatic Semicolon Insertion"><span class="secnum">11.9</span> Automatic Semicolon Insertion</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-rules-of-automatic-semicolon-insertion" title="Rules of Automatic Semicolon Insertion"><span class="secnum">11.9.1</span> Rules of Automatic Semicolon Insertion</a></li><li><span class="item-toggle-none"></span><a href="#sec-examples-of-automatic-semicolon-insertion" title="Examples of Automatic Semicolon Insertion"><span class="secnum">11.9.2</span> Examples of Automatic Semicolon Insertion</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-language-expressions" title="ECMAScript Language: Expressions"><span class="secnum">12</span> ECMAScript Language: Expressions</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-identifiers" title="Identifiers"><span class="secnum">12.1</span> Identifiers</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-identifiers-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">12.1.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-identifiers-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">12.1.2</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-identifiers-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.1.3</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-identifiers-static-semantics-stringvalue" title="Static Semantics: StringValue"><span class="secnum">12.1.4</span> SS: StringValue</a></li><li><span class="item-toggle">â¢</span><a href="#sec-identifiers-runtime-semantics-bindinginitialization" title="Runtime Semantics: BindingInitialization"><span class="secnum">12.1.5</span> RS: BindingInitialization</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-initializeboundname" title="Runtime Semantics: InitializeBoundName(name, value, environment)"><span class="secnum">12.1.5.1</span> RS: InitializeBoundName(<var>name</var>, <var>value</var>, <var>environment</var>)</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-identifiers-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.1.6</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-primary-expression" title="Primary Expression"><span class="secnum">12.2</span> Primary Expression</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-primary-expression-semantics" title="Semantics"><span class="secnum">12.2.1</span> Semantics</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-coveredparenthesizedexpression" title="Static Semantics: CoveredParenthesizedExpression"><span class="secnum">12.2.1.1</span> SS: CoveredParenthesizedExpression</a></li><li><span class="item-toggle-none"></span><a href="#sec-semantics-static-semantics-hasname" title="Static Semantics: HasName"><span class="secnum">12.2.1.2</span> SS: HasName</a></li><li><span class="item-toggle-none"></span><a href="#sec-semantics-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.2.1.3</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-semantics-static-semantics-isidentifierref" title="Static Semantics: IsIdentifierRef"><span class="secnum">12.2.1.4</span> SS: IsIdentifierRef</a></li><li><span class="item-toggle-none"></span><a href="#sec-semantics-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.2.1.5</span> SS: IsValidSimpleAssignmentTarget</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-this-keyword" title="The this Keyword"><span class="secnum">12.2.2</span> The <code>this</code> Keyword</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-this-keyword-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.2.2.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-identifier-reference" title="Identifier Reference"><span class="secnum">12.2.3</span> Identifier Reference</a></li><li><span class="item-toggle">â¢</span><a href="#sec-primary-expression-literals" title="Literals"><span class="secnum">12.2.4</span> Literals</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-literals-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.2.4.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-array-initializer" title="Array Initializer"><span class="secnum">12.2.5</span> Array Initializer</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-elisionwidth" title="Static Semantics: ElisionWidth"><span class="secnum">12.2.5.1</span> SS: ElisionWidth</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-arrayaccumulation" title="Runtime Semantics: ArrayAccumulation"><span class="secnum">12.2.5.2</span> RS: ArrayAccumulation</a></li><li><span class="item-toggle-none"></span><a href="#sec-array-initializer-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.2.5.3</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-object-initializer" title="Object Initializer"><span class="secnum">12.2.6</span> Object Initializer</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-object-initializer-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">12.2.6.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-initializer-static-semantics-computedpropertycontains" title="Static Semantics: ComputedPropertyContains"><span class="secnum">12.2.6.2</span> SS: ComputedPropertyContains</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-initializer-static-semantics-contains" title="Static Semantics: Contains"><span class="secnum">12.2.6.3</span> SS: Contains</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-iscomputedpropertykey" title="Static Semantics: IsComputedPropertyKey"><span class="secnum">12.2.6.4</span> SS: IsComputedPropertyKey</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-initializer-static-semantics-propname" title="Static Semantics: PropName"><span class="secnum">12.2.6.5</span> SS: PropName</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-propertynamelist" title="Static Semantics: PropertyNameList"><span class="secnum">12.2.6.6</span> SS: PropertyNameList</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-initializer-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.2.6.7</span> RS: Evaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-object-initializer-runtime-semantics-propertydefinitionevaluation" title="Runtime Semantics: PropertyDefinitionEvaluation"><span class="secnum">12.2.6.8</span> RS: PropertyDefinitionEvaluation</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-function-defining-expressions" title="Function Defining Expressions"><span class="secnum">12.2.7</span> Function Defining Expressions</a></li><li><span class="item-toggle">â¢</span><a href="#sec-primary-expression-regular-expression-literals" title="Regular Expression Literals"><span class="secnum">12.2.8</span> Regular Expression Literals</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-primary-expression-regular-expression-literals-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">12.2.8.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-regular-expression-literals-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.2.8.2</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-template-literals" title="Template Literals"><span class="secnum">12.2.9</span> Template Literals</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-templatestrings" title="Static Semantics: TemplateStrings"><span class="secnum">12.2.9.1</span> SS: TemplateStrings</a></li><li><span class="item-toggle-none"></span><a href="#sec-template-literals-runtime-semantics-argumentlistevaluation" title="Runtime Semantics: ArgumentListEvaluation"><span class="secnum">12.2.9.2</span> RS: ArgumentListEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-gettemplateobject" title="Runtime Semantics: GetTemplateObject ( templateLiteral )"><span class="secnum">12.2.9.3</span> RS: GetTemplateObject ( <var>templateLiteral</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-substitutionevaluation" title="Runtime Semantics: SubstitutionEvaluation"><span class="secnum">12.2.9.4</span> RS: SubstitutionEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-template-literals-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.2.9.5</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-grouping-operator" title="The Grouping Operator"><span class="secnum">12.2.10</span> The Grouping Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-grouping-operator-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">12.2.10.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-grouping-operator-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.2.10.2</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.2.10.3</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-grouping-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.2.10.4</span> RS: Evaluation</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-left-hand-side-expressions" title="Left-Hand-Side Expressions"><span class="secnum">12.3</span> Left-Hand-Side Expressions</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-static-semantics" title="Static Semantics"><span class="secnum">12.3.1</span> Static Semantics</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-static-semantics-contains" title="Static Semantics: Contains"><span class="secnum">12.3.1.1</span> SS: Contains</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.3.1.2</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-static-semantics-isdestructuring" title="Static Semantics: IsDestructuring"><span class="secnum">12.3.1.3</span> SS: IsDestructuring</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-static-semantics-isidentifierref" title="Static Semantics: IsIdentifierRef"><span class="secnum">12.3.1.4</span> SS: IsIdentifierRef</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.3.1.5</span> SS: IsValidSimpleAssignmentTarget</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-property-accessors" title="Property Accessors"><span class="secnum">12.3.2</span> Property Accessors</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-property-accessors-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.3.2.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-new-operator" title="The new Operator"><span class="secnum">12.3.3</span> The <code>new</code> Operator</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-new-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.3.3.1</span> RS: Evaluation</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-evaluatenew" title="Runtime Semantics: EvaluateNew(constructProduction, arguments)"><span class="secnum">12.3.3.1.1</span> RS: EvaluateNew(<var>constructProduction</var>, <var>arguments</var>)</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-function-calls" title="Function Calls"><span class="secnum">12.3.4</span> Function Calls</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-function-calls-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.3.4.1</span> RS: Evaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-evaluatecall" title="Runtime Semantics: EvaluateCall( ref, arguments, tailPosition )"><span class="secnum">12.3.4.2</span> RS: EvaluateCall( <var>ref</var>, <var>arguments</var>, <var>tailPosition</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-evaluatedirectcall" title="Runtime Semantics: EvaluateDirectCall( func, thisValue, arguments, tailPosition )"><span class="secnum">12.3.4.3</span> RS: EvaluateDirectCall( <var>func</var>, <var>thisValue</var>, <var>arguments</var>, <var>tailPosition</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-super-keyword" title="The super Keyword"><span class="secnum">12.3.5</span> The <code>super</code> Keyword</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-super-keyword-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.3.5.1</span> RS: Evaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-getsuperconstructor" title="Runtime Semantics: GetSuperConstructor ( )"><span class="secnum">12.3.5.2</span> RS: GetSuperConstructor ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-makesuperpropertyreference" title="Runtime Semantics: MakeSuperPropertyReference(propertyKey, strict)"><span class="secnum">12.3.5.3</span> RS: MakeSuperPropertyReference(<var>propertyKey</var>, <var>strict</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-argument-lists" title="Argument Lists"><span class="secnum">12.3.6</span> Argument Lists</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-argument-lists-runtime-semantics-argumentlistevaluation" title="Runtime Semantics: ArgumentListEvaluation"><span class="secnum">12.3.6.1</span> RS: ArgumentListEvaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-tagged-templates" title="Tagged Templates"><span class="secnum">12.3.7</span> Tagged Templates</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-tagged-templates-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.3.7.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-meta-properties" title="Meta Properties"><span class="secnum">12.3.8</span> Meta Properties</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-meta-properties-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.3.8.1</span> RS: Evaluation</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-update-expressions" title="Update Expressions"><span class="secnum">12.4</span> Update Expressions</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-update-expressions-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">12.4.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-update-expressions-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.4.2</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-update-expressions-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.4.3</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle">â¢</span><a href="#sec-postfix-increment-operator" title="Postfix Increment Operator"><span class="secnum">12.4.4</span> Postfix Increment Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-postfix-increment-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.4.4.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-postfix-decrement-operator" title="Postfix Decrement Operator"><span class="secnum">12.4.5</span> Postfix Decrement Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-postfix-decrement-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.4.5.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-prefix-increment-operator" title="Prefix Increment Operator"><span class="secnum">12.4.6</span> Prefix Increment Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-prefix-increment-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.4.6.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-prefix-decrement-operator" title="Prefix Decrement Operator"><span class="secnum">12.4.7</span> Prefix Decrement Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-prefix-decrement-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.4.7.1</span> RS: Evaluation</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-unary-operators" title="Unary Operators"><span class="secnum">12.5</span> Unary Operators</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-unary-operators-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.5.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.5.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle">â¢</span><a href="#sec-delete-operator" title="The delete Operator"><span class="secnum">12.5.3</span> The <code>delete</code> Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-delete-operator-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">12.5.3.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-delete-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.5.3.2</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-void-operator" title="The void Operator"><span class="secnum">12.5.4</span> The <code>void</code> Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-void-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.5.4.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-typeof-operator" title="The typeof Operator"><span class="secnum">12.5.5</span> The <code>typeof</code> Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-typeof-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.5.5.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-unary-plus-operator" title="Unary + Operator"><span class="secnum">12.5.6</span> Unary <code>+</code> Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-unary-plus-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.5.6.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-unary-minus-operator" title="Unary - Operator"><span class="secnum">12.5.7</span> Unary <code>-</code> Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-unary-minus-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.5.7.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-bitwise-not-operator" title="Bitwise NOT Operator ( ~ )"><span class="secnum">12.5.8</span> Bitwise NOT Operator ( <code>~</code> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-bitwise-not-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.5.8.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-logical-not-operator" title="Logical NOT Operator ( ! )"><span class="secnum">12.5.9</span> Logical NOT Operator ( <code>!</code> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-logical-not-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.5.9.1</span> RS: Evaluation</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-exp-operator" title="Exponentiation Operator"><span class="secnum">12.6</span> Exponentiation Operator</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-exp-operator-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.6.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-exp-operator-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.6.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-exp-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.6.3</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-multiplicative-operators" title="Multiplicative Operators"><span class="secnum">12.7</span> Multiplicative Operators</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-multiplicative-operators-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.7.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.7.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle">â¢</span><a href="#sec-multiplicative-operators-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.7.3</span> RS: Evaluation</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-applying-the-mul-operator" title="Applying the * Operator"><span class="secnum">12.7.3.1</span> Applying the <code>*</code> Operator</a></li><li><span class="item-toggle-none"></span><a href="#sec-applying-the-div-operator" title="Applying the / Operator"><span class="secnum">12.7.3.2</span> Applying the <code>/</code> Operator</a></li><li><span class="item-toggle-none"></span><a href="#sec-applying-the-mod-operator" title="Applying the % Operator"><span class="secnum">12.7.3.3</span> Applying the <code>%</code> Operator</a></li><li><span class="item-toggle-none"></span><a href="#sec-applying-the-exp-operator" title="Applying the ** Operator"><span class="secnum">12.7.3.4</span> Applying the <code>**</code> Operator</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-additive-operators" title="Additive Operators"><span class="secnum">12.8</span> Additive Operators</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-additive-operators-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.8.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.8.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle">â¢</span><a href="#sec-addition-operator-plus" title="The Addition Operator ( + )"><span class="secnum">12.8.3</span> The Addition Operator ( <code>+</code> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-addition-operator-plus-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.8.3.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-subtraction-operator-minus" title="The Subtraction Operator ( - )"><span class="secnum">12.8.4</span> The Subtraction Operator ( <code>-</code> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-subtraction-operator-minus-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.8.4.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-applying-the-additive-operators-to-numbers" title="Applying the Additive Operators to Numbers"><span class="secnum">12.8.5</span> Applying the Additive Operators to Numbers</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-bitwise-shift-operators" title="Bitwise Shift Operators"><span class="secnum">12.9</span> Bitwise Shift Operators</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-bitwise-shift-operators-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.9.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.9.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle">â¢</span><a href="#sec-left-shift-operator" title="The Left Shift Operator ( &lt;&lt; )"><span class="secnum">12.9.3</span> The Left Shift Operator ( <code>&lt;&lt;</code> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-left-shift-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.9.3.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-signed-right-shift-operator" title="The Signed Right Shift Operator ( &gt;&gt; )"><span class="secnum">12.9.4</span> The Signed Right Shift Operator ( <code>&gt;&gt;</code> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-signed-right-shift-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.9.4.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-unsigned-right-shift-operator" title="The Unsigned Right Shift Operator ( &gt;&gt;&gt; )"><span class="secnum">12.9.5</span> The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-unsigned-right-shift-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.9.5.1</span> RS: Evaluation</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-relational-operators" title="Relational Operators"><span class="secnum">12.10</span> Relational Operators</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-relational-operators-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.10.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.10.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-relational-operators-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.10.3</span> RS: Evaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-instanceofoperator" title="Runtime Semantics: InstanceofOperator(O, C)"><span class="secnum">12.10.4</span> RS: InstanceofOperator(<var>O</var>, <var>C</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-equality-operators" title="Equality Operators"><span class="secnum">12.11</span> Equality Operators</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-equality-operators-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.11.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.11.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-equality-operators-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.11.3</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-binary-bitwise-operators" title="Binary Bitwise Operators"><span class="secnum">12.12</span> Binary Bitwise Operators</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-binary-bitwise-operators-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.12.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.12.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-binary-bitwise-operators-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.12.3</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-binary-logical-operators" title="Binary Logical Operators"><span class="secnum">12.13</span> Binary Logical Operators</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-binary-logical-operators-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.13.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.13.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-binary-logical-operators-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.13.3</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-conditional-operator" title="Conditional Operator ( ? : )"><span class="secnum">12.14</span> Conditional Operator ( <code>? :</code> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-conditional-operator-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.14.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.14.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-conditional-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.14.3</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-assignment-operators" title="Assignment Operators"><span class="secnum">12.15</span> Assignment Operators</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-assignment-operators-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">12.15.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-assignment-operators-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.15.2</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.15.3</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-assignment-operators-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.15.4</span> RS: Evaluation</a></li><li><span class="item-toggle">â¢</span><a href="#sec-destructuring-assignment" title="Destructuring Assignment"><span class="secnum">12.15.5</span> Destructuring Assignment</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-destructuring-assignment-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">12.15.5.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-destructuringassignmentevaluation" title="Runtime Semantics: DestructuringAssignmentEvaluation"><span class="secnum">12.15.5.2</span> RS: DestructuringAssignmentEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-iteratordestructuringassignmentevaluation" title="Runtime Semantics: IteratorDestructuringAssignmentEvaluation"><span class="secnum">12.15.5.3</span> RS: IteratorDestructuringAssignmentEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-keyeddestructuringassignmentevaluation" title="Runtime Semantics: KeyedDestructuringAssignmentEvaluation"><span class="secnum">12.15.5.4</span> RS: KeyedDestructuringAssignmentEvaluation</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-comma-operator" title="Comma Operator ( , )"><span class="secnum">12.16</span> Comma Operator ( <code>,</code> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-comma-operator-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">12.16.1</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget" title="Static Semantics: IsValidSimpleAssignmentTarget"><span class="secnum">12.16.2</span> SS: IsValidSimpleAssignmentTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-comma-operator-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">12.16.3</span> RS: Evaluation</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-language-statements-and-declarations" title="ECMAScript Language: Statements and Declarations"><span class="secnum">13</span> ECMAScript Language: Statements and Declarations</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-statement-semantics" title="Statement Semantics"><span class="secnum">13.1</span> Statement Semantics</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-statement-semantics-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.1.1</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-statement-semantics-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.1.2</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-statement-semantics-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.1.3</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-declarationpart" title="Static Semantics: DeclarationPart"><span class="secnum">13.1.4</span> SS: DeclarationPart</a></li><li><span class="item-toggle-none"></span><a href="#sec-statement-semantics-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.1.5</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-statement-semantics-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.1.6</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-statement-semantics-runtime-semantics-labelledevaluation" title="Runtime Semantics: LabelledEvaluation"><span class="secnum">13.1.7</span> RS: LabelledEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-statement-semantics-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.1.8</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-block" title="Block"><span class="secnum">13.2</span> Block</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.2.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.2.2</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.2.3</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.2.4</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-lexicallydeclarednames" title="Static Semantics: LexicallyDeclaredNames"><span class="secnum">13.2.5</span> SS: LexicallyDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-lexicallyscopeddeclarations" title="Static Semantics: LexicallyScopedDeclarations"><span class="secnum">13.2.6</span> SS: LexicallyScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-toplevellexicallydeclarednames" title="Static Semantics: TopLevelLexicallyDeclaredNames"><span class="secnum">13.2.7</span> SS: TopLevelLexicallyDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-toplevellexicallyscopeddeclarations" title="Static Semantics: TopLevelLexicallyScopedDeclarations"><span class="secnum">13.2.8</span> SS: TopLevelLexicallyScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-toplevelvardeclarednames" title="Static Semantics: TopLevelVarDeclaredNames"><span class="secnum">13.2.9</span> SS: TopLevelVarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-toplevelvarscopeddeclarations" title="Static Semantics: TopLevelVarScopedDeclarations"><span class="secnum">13.2.10</span> SS: TopLevelVarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.2.11</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.2.12</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.2.13</span> RS: Evaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-blockdeclarationinstantiation" title="Runtime Semantics: BlockDeclarationInstantiation( code, env )"><span class="secnum">13.2.14</span> RS: BlockDeclarationInstantiation( <var>code</var>, <var>env</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-declarations-and-the-variable-statement" title="Declarations and the Variable Statement"><span class="secnum">13.3</span> Declarations and the Variable Statement</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-let-and-const-declarations" title="Let and Const Declarations"><span class="secnum">13.3.1</span> Let and Const Declarations</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-let-and-const-declarations-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.3.1.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-let-and-const-declarations-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">13.3.1.2</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-let-and-const-declarations-static-semantics-isconstantdeclaration" title="Static Semantics: IsConstantDeclaration"><span class="secnum">13.3.1.3</span> SS: IsConstantDeclaration</a></li><li><span class="item-toggle-none"></span><a href="#sec-let-and-const-declarations-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.3.1.4</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-variable-statement" title="Variable Statement"><span class="secnum">13.3.2</span> Variable Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-variable-statement-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">13.3.2.1</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-variable-statement-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.3.2.2</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-variable-statement-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.3.2.3</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-variable-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.3.2.4</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-destructuring-binding-patterns" title="Destructuring Binding Patterns"><span class="secnum">13.3.3</span> Destructuring Binding Patterns</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-destructuring-binding-patterns-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">13.3.3.1</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-destructuring-binding-patterns-static-semantics-containsexpression" title="Static Semantics: ContainsExpression"><span class="secnum">13.3.3.2</span> SS: ContainsExpression</a></li><li><span class="item-toggle-none"></span><a href="#sec-destructuring-binding-patterns-static-semantics-hasinitializer" title="Static Semantics: HasInitializer"><span class="secnum">13.3.3.3</span> SS: HasInitializer</a></li><li><span class="item-toggle-none"></span><a href="#sec-destructuring-binding-patterns-static-semantics-issimpleparameterlist" title="Static Semantics: IsSimpleParameterList"><span class="secnum">13.3.3.4</span> SS: IsSimpleParameterList</a></li><li><span class="item-toggle-none"></span><a href="#sec-destructuring-binding-patterns-runtime-semantics-bindinginitialization" title="Runtime Semantics: BindingInitialization"><span class="secnum">13.3.3.5</span> RS: BindingInitialization</a></li><li><span class="item-toggle-none"></span><a href="#sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization" title="Runtime Semantics: IteratorBindingInitialization"><span class="secnum">13.3.3.6</span> RS: IteratorBindingInitialization</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-keyedbindinginitialization" title="Runtime Semantics: KeyedBindingInitialization"><span class="secnum">13.3.3.7</span> RS: KeyedBindingInitialization</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-empty-statement" title="Empty Statement"><span class="secnum">13.4</span> Empty Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-empty-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.4.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-expression-statement" title="Expression Statement"><span class="secnum">13.5</span> Expression Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-expression-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.5.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-if-statement" title="The if Statement"><span class="secnum">13.6</span> The <code>if</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-if-statement-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.6.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-if-statement-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.6.2</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-if-statement-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.6.3</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-if-statement-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.6.4</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-if-statement-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.6.5</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-if-statement-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.6.6</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-if-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.6.7</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-iteration-statements" title="Iteration Statements"><span class="secnum">13.7</span> Iteration Statements</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-iteration-statements-semantics" title="Semantics"><span class="secnum">13.7.1</span> Semantics</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-semantics-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.7.1.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-loopcontinues" title="Runtime Semantics: LoopContinues(completion, labelSet)"><span class="secnum">13.7.1.2</span> RS: LoopContinues(<var>completion</var>, <var>labelSet</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-do-while-statement" title="The do-while Statement"><span class="secnum">13.7.2</span> The <code>do</code>-<code>while</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-do-while-statement-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.7.2.1</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-do-while-statement-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.7.2.2</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-do-while-statement-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.7.2.3</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-do-while-statement-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.7.2.4</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-do-while-statement-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.7.2.5</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-do-while-statement-runtime-semantics-labelledevaluation" title="Runtime Semantics: LabelledEvaluation"><span class="secnum">13.7.2.6</span> RS: LabelledEvaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-while-statement" title="The while Statement"><span class="secnum">13.7.3</span> The <code>while</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-while-statement-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.7.3.1</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-while-statement-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.7.3.2</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-while-statement-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.7.3.3</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-while-statement-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.7.3.4</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-while-statement-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.7.3.5</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-while-statement-runtime-semantics-labelledevaluation" title="Runtime Semantics: LabelledEvaluation"><span class="secnum">13.7.3.6</span> RS: LabelledEvaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-for-statement" title="The for Statement"><span class="secnum">13.7.4</span> The <code>for</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-for-statement-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.7.4.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-statement-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.7.4.2</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-statement-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.7.4.3</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-statement-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.7.4.4</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-statement-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.7.4.5</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-statement-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.7.4.6</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-statement-runtime-semantics-labelledevaluation" title="Runtime Semantics: LabelledEvaluation"><span class="secnum">13.7.4.7</span> RS: LabelledEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-forbodyevaluation" title="Runtime Semantics: ForBodyEvaluation( test, increment, stmt, perIterationBindings, labelSet )"><span class="secnum">13.7.4.8</span> RS: ForBodyEvaluation( <var>test</var>, <var>increment</var>, <var>stmt</var>, <var>perIterationBindings</var>, <var>labelSet</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-createperiterationenvironment" title="Runtime Semantics: CreatePerIterationEnvironment( perIterationBindings )"><span class="secnum">13.7.4.9</span> RS: CreatePerIterationEnvironment( <var>perIterationBindings</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-for-in-and-for-of-statements" title="The for-in and for-of Statements"><span class="secnum">13.7.5</span> The <code>for</code>-<code>in</code> and <code>for</code>-<code>of</code> Statements</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.7.5.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">13.7.5.2</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.7.5.3</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.7.5.4</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.7.5.5</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-static-semantics-isdestructuring" title="Static Semantics: IsDestructuring"><span class="secnum">13.7.5.6</span> SS: IsDestructuring</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.7.5.7</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.7.5.8</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization" title="Runtime Semantics: BindingInitialization"><span class="secnum">13.7.5.9</span> RS: BindingInitialization</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-bindinginstantiation" title="Runtime Semantics: BindingInstantiation"><span class="secnum">13.7.5.10</span> RS: BindingInstantiation</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation" title="Runtime Semantics: LabelledEvaluation"><span class="secnum">13.7.5.11</span> RS: LabelledEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind" title="Runtime Semantics: ForIn/OfHeadEvaluation ( TDZnames, expr, iterationKind)"><span class="secnum">13.7.5.12</span> RS: ForIn/OfHeadEvaluation ( <var>TDZnames</var>, <var>expr</var>, <var>iterationKind</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset" title="Runtime Semantics: ForIn/OfBodyEvaluation ( lhs, stmt, iterator, lhsKind, labelSet )"><span class="secnum">13.7.5.13</span> RS: ForIn/OfBodyEvaluation ( <var>lhs</var>, <var>stmt</var>, <var>iterator</var>, <var>lhsKind</var>, <var>labelSet</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-for-in-and-for-of-statements-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.7.5.14</span> RS: Evaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-enumerate-object-properties" title="EnumerateObjectProperties (O)"><span class="secnum">13.7.5.15</span> EnumerateObjectProperties (<var>O</var>)</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-continue-statement" title="The continue Statement"><span class="secnum">13.8</span> The <code>continue</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-continue-statement-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.8.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-continue-statement-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.8.2</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-continue-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.8.3</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-break-statement" title="The break Statement"><span class="secnum">13.9</span> The <code>break</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-break-statement-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.9.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-break-statement-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.9.2</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-break-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.9.3</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-return-statement" title="The return Statement"><span class="secnum">13.10</span> The <code>return</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-return-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.10.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-with-statement" title="The with Statement"><span class="secnum">13.11</span> The <code>with</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-with-statement-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.11.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-with-statement-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.11.2</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-with-statement-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.11.3</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-with-statement-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.11.4</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-with-statement-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.11.5</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-with-statement-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.11.6</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-with-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.11.7</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-switch-statement" title="The switch Statement"><span class="secnum">13.12</span> The <code>switch</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-switch-statement-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.12.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-switch-statement-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.12.2</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-switch-statement-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.12.3</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-switch-statement-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.12.4</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-switch-statement-static-semantics-lexicallydeclarednames" title="Static Semantics: LexicallyDeclaredNames"><span class="secnum">13.12.5</span> SS: LexicallyDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-switch-statement-static-semantics-lexicallyscopeddeclarations" title="Static Semantics: LexicallyScopedDeclarations"><span class="secnum">13.12.6</span> SS: LexicallyScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-switch-statement-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.12.7</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-switch-statement-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.12.8</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-caseblockevaluation" title="Runtime Semantics: CaseBlockEvaluation"><span class="secnum">13.12.9</span> RS: CaseBlockEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-caseselectorevaluation" title="Runtime Semantics: CaseSelectorEvaluation"><span class="secnum">13.12.10</span> RS: CaseSelectorEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-switch-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.12.11</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-labelled-statements" title="Labelled Statements"><span class="secnum">13.13</span> Labelled Statements</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.13.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.13.2</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.13.3</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.13.4</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-islabelledfunction" title="Static Semantics: IsLabelledFunction ( stmt )"><span class="secnum">13.13.5</span> SS: IsLabelledFunction ( <var>stmt</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-lexicallydeclarednames" title="Static Semantics: LexicallyDeclaredNames"><span class="secnum">13.13.6</span> SS: LexicallyDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-lexicallyscopeddeclarations" title="Static Semantics: LexicallyScopedDeclarations"><span class="secnum">13.13.7</span> SS: LexicallyScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-toplevellexicallydeclarednames" title="Static Semantics: TopLevelLexicallyDeclaredNames"><span class="secnum">13.13.8</span> SS: TopLevelLexicallyDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations" title="Static Semantics: TopLevelLexicallyScopedDeclarations"><span class="secnum">13.13.9</span> SS: TopLevelLexicallyScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-toplevelvardeclarednames" title="Static Semantics: TopLevelVarDeclaredNames"><span class="secnum">13.13.10</span> SS: TopLevelVarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations" title="Static Semantics: TopLevelVarScopedDeclarations"><span class="secnum">13.13.11</span> SS: TopLevelVarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.13.12</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.13.13</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-runtime-semantics-labelledevaluation" title="Runtime Semantics: LabelledEvaluation"><span class="secnum">13.13.14</span> RS: LabelledEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-statements-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.13.15</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-throw-statement" title="The throw Statement"><span class="secnum">13.14</span> The <code>throw</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-throw-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.14.1</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-try-statement" title="The try Statement"><span class="secnum">13.15</span> The <code>try</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-try-statement-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">13.15.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-try-statement-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">13.15.2</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-try-statement-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">13.15.3</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-try-statement-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">13.15.4</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-try-statement-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">13.15.5</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-try-statement-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">13.15.6</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-catchclauseevaluation" title="Runtime Semantics: CatchClauseEvaluation"><span class="secnum">13.15.7</span> RS: CatchClauseEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-try-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.15.8</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-debugger-statement" title="The debugger Statement"><span class="secnum">13.16</span> The <code>debugger</code> Statement</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-debugger-statement-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">13.16.1</span> RS: Evaluation</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-language-functions-and-classes" title="ECMAScript Language: Functions and Classes"><span class="secnum">14</span> ECMAScript Language: Functions and Classes</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-function-definitions" title="Function Definitions"><span class="secnum">14.1</span> Function Definitions</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-directive-prologues-and-the-use-strict-directive" title="Directive Prologues and the Use Strict Directive"><span class="secnum">14.1.1</span> Directive Prologues and the Use Strict Directive</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">14.1.2</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">14.1.3</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-contains" title="Static Semantics: Contains"><span class="secnum">14.1.4</span> SS: Contains</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-containsexpression" title="Static Semantics: ContainsExpression"><span class="secnum">14.1.5</span> SS: ContainsExpression</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-containsusestrict" title="Static Semantics: ContainsUseStrict"><span class="secnum">14.1.6</span> SS: ContainsUseStrict</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-expectedargumentcount" title="Static Semantics: ExpectedArgumentCount"><span class="secnum">14.1.7</span> SS: ExpectedArgumentCount</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-hasinitializer" title="Static Semantics: HasInitializer"><span class="secnum">14.1.8</span> SS: HasInitializer</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-hasname" title="Static Semantics: HasName"><span class="secnum">14.1.9</span> SS: HasName</a></li><li><span class="item-toggle-none"></span><a href="#sec-isanonymousfunctiondefinition" title="Static Semantics: IsAnonymousFunctionDefinition ( production )"><span class="secnum">14.1.10</span> SS: IsAnonymousFunctionDefinition ( <var>production</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-isconstantdeclaration" title="Static Semantics: IsConstantDeclaration"><span class="secnum">14.1.11</span> SS: IsConstantDeclaration</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">14.1.12</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-issimpleparameterlist" title="Static Semantics: IsSimpleParameterList"><span class="secnum">14.1.13</span> SS: IsSimpleParameterList</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-lexicallydeclarednames" title="Static Semantics: LexicallyDeclaredNames"><span class="secnum">14.1.14</span> SS: LexicallyDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-lexicallyscopeddeclarations" title="Static Semantics: LexicallyScopedDeclarations"><span class="secnum">14.1.15</span> SS: LexicallyScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">14.1.16</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">14.1.17</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-runtime-semantics-evaluatebody" title="Runtime Semantics: EvaluateBody"><span class="secnum">14.1.18</span> RS: EvaluateBody</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-runtime-semantics-iteratorbindinginitialization" title="Runtime Semantics: IteratorBindingInitialization"><span class="secnum">14.1.19</span> RS: IteratorBindingInitialization</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-runtime-semantics-instantiatefunctionobject" title="Runtime Semantics: InstantiateFunctionObject"><span class="secnum">14.1.20</span> RS: InstantiateFunctionObject</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-definitions-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">14.1.21</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-arrow-function-definitions" title="Arrow Function Definitions"><span class="secnum">14.2</span> Arrow Function Definitions</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">14.2.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">14.2.2</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-contains" title="Static Semantics: Contains"><span class="secnum">14.2.3</span> SS: Contains</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-containsexpression" title="Static Semantics: ContainsExpression"><span class="secnum">14.2.4</span> SS: ContainsExpression</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-containsusestrict" title="Static Semantics: ContainsUseStrict"><span class="secnum">14.2.5</span> SS: ContainsUseStrict</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-expectedargumentcount" title="Static Semantics: ExpectedArgumentCount"><span class="secnum">14.2.6</span> SS: ExpectedArgumentCount</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-hasname" title="Static Semantics: HasName"><span class="secnum">14.2.7</span> SS: HasName</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-issimpleparameterlist" title="Static Semantics: IsSimpleParameterList"><span class="secnum">14.2.8</span> SS: IsSimpleParameterList</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-coveredformalslist" title="Static Semantics: CoveredFormalsList"><span class="secnum">14.2.9</span> SS: CoveredFormalsList</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-lexicallydeclarednames" title="Static Semantics: LexicallyDeclaredNames"><span class="secnum">14.2.10</span> SS: LexicallyDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations" title="Static Semantics: LexicallyScopedDeclarations"><span class="secnum">14.2.11</span> SS: LexicallyScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">14.2.12</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">14.2.13</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization" title="Runtime Semantics: IteratorBindingInitialization"><span class="secnum">14.2.14</span> RS: IteratorBindingInitialization</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-runtime-semantics-evaluatebody" title="Runtime Semantics: EvaluateBody"><span class="secnum">14.2.15</span> RS: EvaluateBody</a></li><li><span class="item-toggle-none"></span><a href="#sec-arrow-function-definitions-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">14.2.16</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-method-definitions" title="Method Definitions"><span class="secnum">14.3</span> Method Definitions</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-method-definitions-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">14.3.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-method-definitions-static-semantics-computedpropertycontains" title="Static Semantics: ComputedPropertyContains"><span class="secnum">14.3.2</span> SS: ComputedPropertyContains</a></li><li><span class="item-toggle-none"></span><a href="#sec-method-definitions-static-semantics-expectedargumentcount" title="Static Semantics: ExpectedArgumentCount"><span class="secnum">14.3.3</span> SS: ExpectedArgumentCount</a></li><li><span class="item-toggle-none"></span><a href="#sec-method-definitions-static-semantics-hasdirectsuper" title="Static Semantics: HasDirectSuper"><span class="secnum">14.3.4</span> SS: HasDirectSuper</a></li><li><span class="item-toggle-none"></span><a href="#sec-method-definitions-static-semantics-propname" title="Static Semantics: PropName"><span class="secnum">14.3.5</span> SS: PropName</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-specialmethod" title="Static Semantics: SpecialMethod"><span class="secnum">14.3.6</span> SS: SpecialMethod</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-definemethod" title="Runtime Semantics: DefineMethod"><span class="secnum">14.3.7</span> RS: DefineMethod</a></li><li><span class="item-toggle-none"></span><a href="#sec-method-definitions-runtime-semantics-propertydefinitionevaluation" title="Runtime Semantics: PropertyDefinitionEvaluation"><span class="secnum">14.3.8</span> RS: PropertyDefinitionEvaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-generator-function-definitions" title="Generator Function Definitions"><span class="secnum">14.4</span> Generator Function Definitions</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">14.4.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">14.4.2</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-static-semantics-computedpropertycontains" title="Static Semantics: ComputedPropertyContains"><span class="secnum">14.4.3</span> SS: ComputedPropertyContains</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-static-semantics-contains" title="Static Semantics: Contains"><span class="secnum">14.4.4</span> SS: Contains</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-static-semantics-hasdirectsuper" title="Static Semantics: HasDirectSuper"><span class="secnum">14.4.5</span> SS: HasDirectSuper</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-static-semantics-hasname" title="Static Semantics: HasName"><span class="secnum">14.4.6</span> SS: HasName</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-static-semantics-isconstantdeclaration" title="Static Semantics: IsConstantDeclaration"><span class="secnum">14.4.7</span> SS: IsConstantDeclaration</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">14.4.8</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-static-semantics-propname" title="Static Semantics: PropName"><span class="secnum">14.4.9</span> SS: PropName</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-runtime-semantics-evaluatebody" title="Runtime Semantics: EvaluateBody"><span class="secnum">14.4.10</span> RS: EvaluateBody</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject" title="Runtime Semantics: InstantiateFunctionObject"><span class="secnum">14.4.11</span> RS: InstantiateFunctionObject</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation" title="Runtime Semantics: PropertyDefinitionEvaluation"><span class="secnum">14.4.12</span> RS: PropertyDefinitionEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator-function-definitions-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">14.4.13</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-class-definitions" title="Class Definitions"><span class="secnum">14.5</span> Class Definitions</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-class-definitions-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">14.5.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-class-definitions-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">14.5.2</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-constructormethod" title="Static Semantics: ConstructorMethod"><span class="secnum">14.5.3</span> SS: ConstructorMethod</a></li><li><span class="item-toggle-none"></span><a href="#sec-class-definitions-static-semantics-contains" title="Static Semantics: Contains"><span class="secnum">14.5.4</span> SS: Contains</a></li><li><span class="item-toggle-none"></span><a href="#sec-class-definitions-static-semantics-computedpropertycontains" title="Static Semantics: ComputedPropertyContains"><span class="secnum">14.5.5</span> SS: ComputedPropertyContains</a></li><li><span class="item-toggle-none"></span><a href="#sec-class-definitions-static-semantics-hasname" title="Static Semantics: HasName"><span class="secnum">14.5.6</span> SS: HasName</a></li><li><span class="item-toggle-none"></span><a href="#sec-class-definitions-static-semantics-isconstantdeclaration" title="Static Semantics: IsConstantDeclaration"><span class="secnum">14.5.7</span> SS: IsConstantDeclaration</a></li><li><span class="item-toggle-none"></span><a href="#sec-class-definitions-static-semantics-isfunctiondefinition" title="Static Semantics: IsFunctionDefinition"><span class="secnum">14.5.8</span> SS: IsFunctionDefinition</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-isstatic" title="Static Semantics: IsStatic"><span class="secnum">14.5.9</span> SS: IsStatic</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-nonconstructormethoddefinitions" title="Static Semantics: NonConstructorMethodDefinitions"><span class="secnum">14.5.10</span> SS: NonConstructorMethodDefinitions</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-prototypepropertynamelist" title="Static Semantics: PrototypePropertyNameList"><span class="secnum">14.5.11</span> SS: PrototypePropertyNameList</a></li><li><span class="item-toggle-none"></span><a href="#sec-class-definitions-static-semantics-propname" title="Static Semantics: PropName"><span class="secnum">14.5.12</span> SS: PropName</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-classdefinitionevaluation" title="Runtime Semantics: ClassDefinitionEvaluation"><span class="secnum">14.5.13</span> RS: ClassDefinitionEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-bindingclassdeclarationevaluation" title="Runtime Semantics: BindingClassDeclarationEvaluation"><span class="secnum">14.5.14</span> RS: BindingClassDeclarationEvaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-class-definitions-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">14.5.15</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-tail-position-calls" title="Tail Position Calls"><span class="secnum">14.6</span> Tail Position Calls</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-isintailposition" title="Static Semantics: IsInTailPosition(nonterminal)"><span class="secnum">14.6.1</span> SS: IsInTailPosition(<var>nonterminal</var>)</a></li><li><span class="item-toggle">â¢</span><a href="#sec-static-semantics-hasproductionintailposition" title="Static Semantics: HasProductionInTailPosition"><span class="secnum">14.6.2</span> SS: HasProductionInTailPosition</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-statement-rules" title="Statement Rules"><span class="secnum">14.6.2.1</span> Statement Rules</a></li><li><span class="item-toggle-none"></span><a href="#sec-expression-rules" title="Expression Rules"><span class="secnum">14.6.2.2</span> Expression Rules</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-preparefortailcall" title="Runtime Semantics: PrepareForTailCall ( )"><span class="secnum">14.6.3</span> RS: PrepareForTailCall ( )</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-ecmascript-language-scripts-and-modules" title="ECMAScript Language: Scripts and Modules"><span class="secnum">15</span> ECMAScript Language: Scripts and Modules</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-scripts" title="Scripts"><span class="secnum">15.1</span> Scripts</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-scripts-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">15.1.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-isstrict" title="Static Semantics: IsStrict"><span class="secnum">15.1.2</span> SS: IsStrict</a></li><li><span class="item-toggle-none"></span><a href="#sec-scripts-static-semantics-lexicallydeclarednames" title="Static Semantics: LexicallyDeclaredNames"><span class="secnum">15.1.3</span> SS: LexicallyDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-scripts-static-semantics-lexicallyscopeddeclarations" title="Static Semantics: LexicallyScopedDeclarations"><span class="secnum">15.1.4</span> SS: LexicallyScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-scripts-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">15.1.5</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-scripts-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">15.1.6</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-script-semantics-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">15.1.7</span> RS: Evaluation</a></li><li><span class="item-toggle-none"></span><a href="#sec-script-records" title="Script Records"><span class="secnum">15.1.8</span> Script Records</a></li><li><span class="item-toggle-none"></span><a href="#sec-parse-script" title="ParseScript ( sourceText, realm, hostDefined )"><span class="secnum">15.1.9</span> ParseScript ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-scriptevaluation" title="ScriptEvaluation ( scriptRecord )"><span class="secnum">15.1.10</span> ScriptEvaluation ( <var>scriptRecord</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-globaldeclarationinstantiation" title="Runtime Semantics: GlobalDeclarationInstantiation (script, env)"><span class="secnum">15.1.11</span> RS: GlobalDeclarationInstantiation (<var>script</var>, <var>env</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-scriptevaluationjob" title="Runtime Semantics: ScriptEvaluationJob ( sourceText, hostDefined )"><span class="secnum">15.1.12</span> RS: ScriptEvaluationJob ( <var>sourceText</var>, <var>hostDefined</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-modules" title="Modules"><span class="secnum">15.2</span> Modules</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-module-semantics" title="Module Semantics"><span class="secnum">15.2.1</span> Module Semantics</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">15.2.1.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-containsduplicatelabels" title="Static Semantics: ContainsDuplicateLabels"><span class="secnum">15.2.1.2</span> SS: ContainsDuplicateLabels</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-containsundefinedbreaktarget" title="Static Semantics: ContainsUndefinedBreakTarget"><span class="secnum">15.2.1.3</span> SS: ContainsUndefinedBreakTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-containsundefinedcontinuetarget" title="Static Semantics: ContainsUndefinedContinueTarget"><span class="secnum">15.2.1.4</span> SS: ContainsUndefinedContinueTarget</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-exportedbindings" title="Static Semantics: ExportedBindings"><span class="secnum">15.2.1.5</span> SS: ExportedBindings</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-exportednames" title="Static Semantics: ExportedNames"><span class="secnum">15.2.1.6</span> SS: ExportedNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-exportentries" title="Static Semantics: ExportEntries"><span class="secnum">15.2.1.7</span> SS: ExportEntries</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-importentries" title="Static Semantics: ImportEntries"><span class="secnum">15.2.1.8</span> SS: ImportEntries</a></li><li><span class="item-toggle-none"></span><a href="#sec-importedlocalnames" title="Static Semantics: ImportedLocalNames ( importEntries )"><span class="secnum">15.2.1.9</span> SS: ImportedLocalNames ( <var>importEntries</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-modulerequests" title="Static Semantics: ModuleRequests"><span class="secnum">15.2.1.10</span> SS: ModuleRequests</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-lexicallydeclarednames" title="Static Semantics: LexicallyDeclaredNames"><span class="secnum">15.2.1.11</span> SS: LexicallyDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-lexicallyscopeddeclarations" title="Static Semantics: LexicallyScopedDeclarations"><span class="secnum">15.2.1.12</span> SS: LexicallyScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-vardeclarednames" title="Static Semantics: VarDeclaredNames"><span class="secnum">15.2.1.13</span> SS: VarDeclaredNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-static-semantics-varscopeddeclarations" title="Static Semantics: VarScopedDeclarations"><span class="secnum">15.2.1.14</span> SS: VarScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-abstract-module-records" title="Abstract Module Records"><span class="secnum">15.2.1.15</span> Abstract Module Records</a></li><li><span class="item-toggle">â¢</span><a href="#sec-source-text-module-records" title="Source Text Module Records"><span class="secnum">15.2.1.16</span> Source Text Module Records</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-parsemodule" title="ParseModule ( sourceText, realm, hostDefined )"><span class="secnum">15.2.1.16.1</span> ParseModule ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-getexportednames" title="GetExportedNames( exportStarSet ) Concrete Method"><span class="secnum">15.2.1.16.2</span> GetExportedNames( <var>exportStarSet</var> ) Concrete Method</a></li><li><span class="item-toggle-none"></span><a href="#sec-resolveexport" title="ResolveExport( exportName, resolveSet, exportStarSet ) Concrete Method"><span class="secnum">15.2.1.16.3</span> ResolveExport( <var>exportName</var>, <var>resolveSet</var>, <var>exportStarSet</var> ) Concrete Method</a></li><li><span class="item-toggle-none"></span><a href="#sec-moduledeclarationinstantiation" title="ModuleDeclarationInstantiation( ) Concrete Method"><span class="secnum">15.2.1.16.4</span> ModuleDeclarationInstantiation( ) Concrete Method</a></li><li><span class="item-toggle-none"></span><a href="#sec-moduleevaluation" title="ModuleEvaluation() Concrete Method"><span class="secnum">15.2.1.16.5</span> ModuleEvaluation() Concrete Method</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-hostresolveimportedmodule" title="Runtime Semantics: HostResolveImportedModule (referencingModule, specifier )"><span class="secnum">15.2.1.17</span> RS: HostResolveImportedModule (<var>referencingModule</var>, <var>specifier</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-getmodulenamespace" title="Runtime Semantics: GetModuleNamespace( module )"><span class="secnum">15.2.1.18</span> RS: GetModuleNamespace( <var>module</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-toplevelmoduleevaluationjob" title="Runtime Semantics: TopLevelModuleEvaluationJob ( sourceText, hostDefined )"><span class="secnum">15.2.1.19</span> RS: TopLevelModuleEvaluationJob ( <var>sourceText</var>, <var>hostDefined</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-module-semantics-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">15.2.1.20</span> RS: Evaluation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-imports" title="Imports"><span class="secnum">15.2.2</span> Imports</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-imports-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">15.2.2.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-imports-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">15.2.2.2</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-imports-static-semantics-importentries" title="Static Semantics: ImportEntries"><span class="secnum">15.2.2.3</span> SS: ImportEntries</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-importentriesformodule" title="Static Semantics: ImportEntriesForModule"><span class="secnum">15.2.2.4</span> SS: ImportEntriesForModule</a></li><li><span class="item-toggle-none"></span><a href="#sec-imports-static-semantics-modulerequests" title="Static Semantics: ModuleRequests"><span class="secnum">15.2.2.5</span> SS: ModuleRequests</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-exports" title="Exports"><span class="secnum">15.2.3</span> Exports</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-exports-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">15.2.3.1</span> SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-exports-static-semantics-boundnames" title="Static Semantics: BoundNames"><span class="secnum">15.2.3.2</span> SS: BoundNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-exports-static-semantics-exportedbindings" title="Static Semantics: ExportedBindings"><span class="secnum">15.2.3.3</span> SS: ExportedBindings</a></li><li><span class="item-toggle-none"></span><a href="#sec-exports-static-semantics-exportednames" title="Static Semantics: ExportedNames"><span class="secnum">15.2.3.4</span> SS: ExportedNames</a></li><li><span class="item-toggle-none"></span><a href="#sec-exports-static-semantics-exportentries" title="Static Semantics: ExportEntries"><span class="secnum">15.2.3.5</span> SS: ExportEntries</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-exportentriesformodule" title="Static Semantics: ExportEntriesForModule"><span class="secnum">15.2.3.6</span> SS: ExportEntriesForModule</a></li><li><span class="item-toggle-none"></span><a href="#sec-exports-static-semantics-isconstantdeclaration" title="Static Semantics: IsConstantDeclaration"><span class="secnum">15.2.3.7</span> SS: IsConstantDeclaration</a></li><li><span class="item-toggle-none"></span><a href="#sec-exports-static-semantics-lexicallyscopeddeclarations" title="Static Semantics: LexicallyScopedDeclarations"><span class="secnum">15.2.3.8</span> SS: LexicallyScopedDeclarations</a></li><li><span class="item-toggle-none"></span><a href="#sec-exports-static-semantics-modulerequests" title="Static Semantics: ModuleRequests"><span class="secnum">15.2.3.9</span> SS: ModuleRequests</a></li><li><span class="item-toggle-none"></span><a href="#sec-static-semantics-referencedbindings" title="Static Semantics: ReferencedBindings"><span class="secnum">15.2.3.10</span> SS: ReferencedBindings</a></li><li><span class="item-toggle-none"></span><a href="#sec-exports-runtime-semantics-evaluation" title="Runtime Semantics: Evaluation"><span class="secnum">15.2.3.11</span> RS: Evaluation</a></li></ol></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-error-handling-and-language-extensions" title="Error Handling and Language Extensions"><span class="secnum">16</span> Error Handling and Language Extensions</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-host-report-errors" title="HostReportErrors ( errorList )"><span class="secnum">16.1</span> HostReportErrors ( <var>errorList</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-forbidden-extensions" title="Forbidden Extensions"><span class="secnum">16.2</span> Forbidden Extensions</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-ecmascript-standard-built-in-objects" title="ECMAScript Standard Built-in Objects"><span class="secnum">17</span> ECMAScript Standard Built-in Objects</a></li><li><span class="item-toggle">â¢</span><a href="#sec-global-object" title="The Global Object"><span class="secnum">18</span> The Global Object</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-value-properties-of-the-global-object" title="Value Properties of the Global Object"><span class="secnum">18.1</span> Value Properties of the Global Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-value-properties-of-the-global-object-infinity" title="Infinity"><span class="secnum">18.1.1</span> Infinity</a></li><li><span class="item-toggle-none"></span><a href="#sec-value-properties-of-the-global-object-nan" title="NaN"><span class="secnum">18.1.2</span> NaN</a></li><li><span class="item-toggle-none"></span><a href="#sec-undefined" title="undefined"><span class="secnum">18.1.3</span> undefined</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-function-properties-of-the-global-object" title="Function Properties of the Global Object"><span class="secnum">18.2</span> Function Properties of the Global Object</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-eval-x" title="eval (x)"><span class="secnum">18.2.1</span> eval (<var>x</var>)</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-performeval" title="Runtime Semantics: PerformEval( x, evalRealm, strictCaller, direct)"><span class="secnum">18.2.1.1</span> RS: PerformEval( <var>x</var>, <var>evalRealm</var>, <var>strictCaller</var>, <var>direct</var>)</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-performeval-rules-outside-methods" title="Additional Early Error Rules for Eval Outside Methods"><span class="secnum">18.2.1.1.1</span> Additional Early Error Rules for Eval Outside Methods</a></li><li><span class="item-toggle-none"></span><a href="#sec-performeval-rules-outside-constructors" title="Additional Early Error Rules for Eval Outside Constructors"><span class="secnum">18.2.1.1.2</span> Additional Early Error Rules for Eval Outside Constructors</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-hostensurecancompilestrings" title="HostEnsureCanCompileStrings( callerRealm, calleeRealm )"><span class="secnum">18.2.1.2</span> HostEnsureCanCompileStrings( <var>callerRealm</var>, <var>calleeRealm</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-evaldeclarationinstantiation" title="Runtime Semantics: EvalDeclarationInstantiation( body, varEnv, lexEnv, strict)"><span class="secnum">18.2.1.3</span> RS: EvalDeclarationInstantiation( <var>body</var>, <var>varEnv</var>, <var>lexEnv</var>, <var>strict</var>)</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-isfinite-number" title="isFinite (number)"><span class="secnum">18.2.2</span> isFinite (<var>number</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-isnan-number" title="isNaN (number)"><span class="secnum">18.2.3</span> isNaN (<var>number</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-parsefloat-string" title="parseFloat (string)"><span class="secnum">18.2.4</span> parseFloat (<var>string</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-parseint-string-radix" title="parseInt (string, radix)"><span class="secnum">18.2.5</span> parseInt (<var>string</var>, <var>radix</var>)</a></li><li><span class="item-toggle">â¢</span><a href="#sec-uri-handling-functions" title="URI Handling Functions"><span class="secnum">18.2.6</span> URI Handling Functions</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-uri-syntax-and-semantics" title="URI Syntax and Semantics"><span class="secnum">18.2.6.1</span> URI Syntax and Semantics</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-encode" title="Runtime Semantics: Encode ( string, unescapedSet )"><span class="secnum">18.2.6.1.1</span> RS: Encode ( <var>string</var>, <var>unescapedSet</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-decode" title="Runtime Semantics: Decode ( string, reservedSet )"><span class="secnum">18.2.6.1.2</span> RS: Decode ( <var>string</var>, <var>reservedSet</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-decodeuri-encodeduri" title="decodeURI (encodedURI)"><span class="secnum">18.2.6.2</span> decodeURI (<var>encodedURI</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-decodeuricomponent-encodeduricomponent" title="decodeURIComponent (encodedURIComponent)"><span class="secnum">18.2.6.3</span> decodeURIComponent (<var>encodedURIComponent</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-encodeuri-uri" title="encodeURI (uri)"><span class="secnum">18.2.6.4</span> encodeURI (<var>uri</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-encodeuricomponent-uricomponent" title="encodeURIComponent (uriComponent)"><span class="secnum">18.2.6.5</span> encodeURIComponent (<var>uriComponent</var>)</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-constructor-properties-of-the-global-object" title="Constructor Properties of the Global Object"><span class="secnum">18.3</span> Constructor Properties of the Global Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-array" title="Array ( . . . )"><span class="secnum">18.3.1</span> Array ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-arraybuffer" title="ArrayBuffer ( . . . )"><span class="secnum">18.3.2</span> ArrayBuffer ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-boolean" title="Boolean ( . . . )"><span class="secnum">18.3.3</span> Boolean ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-dataview" title="DataView ( . . . )"><span class="secnum">18.3.4</span> DataView ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-date" title="Date ( . . . )"><span class="secnum">18.3.5</span> Date ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-error" title="Error ( . . . )"><span class="secnum">18.3.6</span> Error ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-evalerror" title="EvalError ( . . . )"><span class="secnum">18.3.7</span> EvalError ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-float32array" title="Float32Array ( . . . )"><span class="secnum">18.3.8</span> Float32Array ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-float64array" title="Float64Array ( . . . )"><span class="secnum">18.3.9</span> Float64Array ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-function" title="Function ( . . . )"><span class="secnum">18.3.10</span> Function ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-int8array" title="Int8Array ( . . . )"><span class="secnum">18.3.11</span> Int8Array ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-int16array" title="Int16Array ( . . . )"><span class="secnum">18.3.12</span> Int16Array ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-int32array" title="Int32Array ( . . . )"><span class="secnum">18.3.13</span> Int32Array ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-map" title="Map ( . . . )"><span class="secnum">18.3.14</span> Map ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-number" title="Number ( . . . )"><span class="secnum">18.3.15</span> Number ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-object" title="Object ( . . . )"><span class="secnum">18.3.16</span> Object ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-proxy" title="Proxy ( . . . )"><span class="secnum">18.3.17</span> Proxy ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-promise" title="Promise ( . . . )"><span class="secnum">18.3.18</span> Promise ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-rangeerror" title="RangeError ( . . . )"><span class="secnum">18.3.19</span> RangeError ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-referenceerror" title="ReferenceError ( . . . )"><span class="secnum">18.3.20</span> ReferenceError ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-regexp" title="RegExp ( . . . )"><span class="secnum">18.3.21</span> RegExp ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-set" title="Set ( . . . )"><span class="secnum">18.3.22</span> Set ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-string" title="String ( . . . )"><span class="secnum">18.3.23</span> String ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-symbol" title="Symbol ( . . . )"><span class="secnum">18.3.24</span> Symbol ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-syntaxerror" title="SyntaxError ( . . . )"><span class="secnum">18.3.25</span> SyntaxError ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-typeerror" title="TypeError ( . . . )"><span class="secnum">18.3.26</span> TypeError ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-uint8array" title="Uint8Array ( . . . )"><span class="secnum">18.3.27</span> Uint8Array ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-uint8clampedarray" title="Uint8ClampedArray ( . . . )"><span class="secnum">18.3.28</span> Uint8ClampedArray ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-uint16array" title="Uint16Array ( . . . )"><span class="secnum">18.3.29</span> Uint16Array ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-uint32array" title="Uint32Array ( . . . )"><span class="secnum">18.3.30</span> Uint32Array ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-urierror" title="URIError ( . . . )"><span class="secnum">18.3.31</span> URIError ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-weakmap" title="WeakMap ( . . . )"><span class="secnum">18.3.32</span> WeakMap ( . . . )</a></li><li><span class="item-toggle-none"></span><a href="#sec-constructor-properties-of-the-global-object-weakset" title="WeakSet ( . . . )"><span class="secnum">18.3.33</span> WeakSet ( . . . )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-other-properties-of-the-global-object" title="Other Properties of the Global Object"><span class="secnum">18.4</span> Other Properties of the Global Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-json" title="JSON"><span class="secnum">18.4.1</span> JSON</a></li><li><span class="item-toggle-none"></span><a href="#sec-math" title="Math"><span class="secnum">18.4.2</span> Math</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect" title="Reflect"><span class="secnum">18.4.3</span> Reflect</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-fundamental-objects" title="Fundamental Objects"><span class="secnum">19</span> Fundamental Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-object-objects" title="Object Objects"><span class="secnum">19.1</span> Object Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-object-constructor" title="The Object Constructor"><span class="secnum">19.1.1</span> The Object Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-object-value" title="Object ( [ value ] )"><span class="secnum">19.1.1.1</span> Object ( [ <var>value</var> ] )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-object-constructor" title="Properties of the Object Constructor"><span class="secnum">19.1.2</span> Properties of the Object Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-object.assign" title="Object.assign ( target, ...sources )"><span class="secnum">19.1.2.1</span> Object.assign ( <var>target</var>, ...<var>sources</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.create" title="Object.create ( O, Properties )"><span class="secnum">19.1.2.2</span> Object.create ( <var>O</var>, <var>Properties</var> )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-object.defineproperties" title="Object.defineProperties ( O, Properties )"><span class="secnum">19.1.2.3</span> Object.defineProperties ( <var>O</var>, <var>Properties</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-objectdefineproperties" title="Runtime Semantics: ObjectDefineProperties ( O, Properties )"><span class="secnum">19.1.2.3.1</span> RS: ObjectDefineProperties ( <var>O</var>, <var>Properties</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-object.defineproperty" title="Object.defineProperty ( O, P, Attributes )"><span class="secnum">19.1.2.4</span> Object.defineProperty ( <var>O</var>, <var>P</var>, <var>Attributes</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.freeze" title="Object.freeze ( O )"><span class="secnum">19.1.2.5</span> Object.freeze ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.getownpropertydescriptor" title="Object.getOwnPropertyDescriptor ( O, P )"><span class="secnum">19.1.2.6</span> Object.getOwnPropertyDescriptor ( <var>O</var>, <var>P</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.getownpropertydescriptors" title="Object.getOwnPropertyDescriptors ( O )"><span class="secnum">19.1.2.7</span> Object.getOwnPropertyDescriptors ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.getownpropertynames" title="Object.getOwnPropertyNames ( O )"><span class="secnum">19.1.2.8</span> Object.getOwnPropertyNames ( <var>O</var> )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-object.getownpropertysymbols" title="Object.getOwnPropertySymbols ( O )"><span class="secnum">19.1.2.9</span> Object.getOwnPropertySymbols ( <var>O</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-getownpropertykeys" title="Runtime Semantics: GetOwnPropertyKeys ( O, Type )"><span class="secnum">19.1.2.9.1</span> RS: GetOwnPropertyKeys ( <var>O</var>, <var>Type</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-object.getprototypeof" title="Object.getPrototypeOf ( O )"><span class="secnum">19.1.2.10</span> Object.getPrototypeOf ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.is" title="Object.is ( value1, value2 )"><span class="secnum">19.1.2.11</span> Object.is ( <var>value1</var>, <var>value2</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.isextensible" title="Object.isExtensible ( O )"><span class="secnum">19.1.2.12</span> Object.isExtensible ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.isfrozen" title="Object.isFrozen ( O )"><span class="secnum">19.1.2.13</span> Object.isFrozen ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.issealed" title="Object.isSealed ( O )"><span class="secnum">19.1.2.14</span> Object.isSealed ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.keys" title="Object.keys ( O )"><span class="secnum">19.1.2.15</span> Object.keys ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.values" title="Object.values ( O )"><span class="secnum">19.1.2.16</span> Object.values ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.entries" title="Object.entries ( O )"><span class="secnum">19.1.2.17</span> Object.entries ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.preventextensions" title="Object.preventExtensions ( O )"><span class="secnum">19.1.2.18</span> Object.preventExtensions ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype" title="Object.prototype"><span class="secnum">19.1.2.19</span> Object.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.seal" title="Object.seal ( O )"><span class="secnum">19.1.2.20</span> Object.seal ( <var>O</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.setprototypeof" title="Object.setPrototypeOf ( O, proto )"><span class="secnum">19.1.2.21</span> Object.setPrototypeOf ( <var>O</var>, <var>proto</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-object-prototype-object" title="Properties of the Object Prototype Object"><span class="secnum">19.1.3</span> Properties of the Object Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.constructor" title="Object.prototype.constructor"><span class="secnum">19.1.3.1</span> Object.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.hasownproperty" title="Object.prototype.hasOwnProperty ( V )"><span class="secnum">19.1.3.2</span> Object.prototype.hasOwnProperty ( <var>V</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.isprototypeof" title="Object.prototype.isPrototypeOf ( V )"><span class="secnum">19.1.3.3</span> Object.prototype.isPrototypeOf ( <var>V</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.propertyisenumerable" title="Object.prototype.propertyIsEnumerable ( V )"><span class="secnum">19.1.3.4</span> Object.prototype.propertyIsEnumerable ( <var>V</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.tolocalestring" title="Object.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )"><span class="secnum">19.1.3.5</span> Object.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.tostring" title="Object.prototype.toString ( )"><span class="secnum">19.1.3.6</span> Object.prototype.toString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.valueof" title="Object.prototype.valueOf ( )"><span class="secnum">19.1.3.7</span> Object.prototype.valueOf ( )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-object-instances" title="Properties of Object Instances"><span class="secnum">19.1.4</span> Properties of Object Instances</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-function-objects" title="Function Objects"><span class="secnum">19.2</span> Function Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-function-constructor" title="The Function Constructor"><span class="secnum">19.2.1</span> The Function Constructor</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-function-p1-p2-pn-body" title="Function ( p1, p2, â¦ , pn, body )"><span class="secnum">19.2.1.1</span> Function ( <var>p1</var>, <var>p2</var>, â¦ , <var>pn</var>, <var>body</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-createdynamicfunction" title="Runtime Semantics: CreateDynamicFunction(constructor, newTarget, kind, args)"><span class="secnum">19.2.1.1.1</span> RS: CreateDynamicFunction(<var>constructor</var>, <var>newTarget</var>, <var>kind</var>, <var>args</var>)</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-function-constructor" title="Properties of the Function Constructor"><span class="secnum">19.2.2</span> Properties of the Function Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-function.length" title="Function.length"><span class="secnum">19.2.2.1</span> Function.length</a></li><li><span class="item-toggle-none"></span><a href="#sec-function.prototype" title="Function.prototype"><span class="secnum">19.2.2.2</span> Function.prototype</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-function-prototype-object" title="Properties of the Function Prototype Object"><span class="secnum">19.2.3</span> Properties of the Function Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-function.prototype.apply" title="Function.prototype.apply ( thisArg, argArray )"><span class="secnum">19.2.3.1</span> Function.prototype.apply ( <var>thisArg</var>, <var>argArray</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-function.prototype.bind" title="Function.prototype.bind ( thisArg, ...args)"><span class="secnum">19.2.3.2</span> Function.prototype.bind ( <var>thisArg</var>, ...<var>args</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-function.prototype.call" title="Function.prototype.call (thisArg, ...args)"><span class="secnum">19.2.3.3</span> Function.prototype.call (<var>thisArg</var>, ...<var>args</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-function.prototype.constructor" title="Function.prototype.constructor"><span class="secnum">19.2.3.4</span> Function.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-function.prototype.tostring" title="Function.prototype.toString ( )"><span class="secnum">19.2.3.5</span> Function.prototype.toString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-function.prototype-@@hasinstance" title="Function.prototype [ @@hasInstance ] ( V )"><span class="secnum">19.2.3.6</span> Function.prototype [ @@hasInstance ] ( <var>V</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-function-instances" title="Function Instances"><span class="secnum">19.2.4</span> Function Instances</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-function-instances-length" title="length"><span class="secnum">19.2.4.1</span> length</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-instances-name" title="name"><span class="secnum">19.2.4.2</span> name</a></li><li><span class="item-toggle-none"></span><a href="#sec-function-instances-prototype" title="prototype"><span class="secnum">19.2.4.3</span> prototype</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-boolean-objects" title="Boolean Objects"><span class="secnum">19.3</span> Boolean Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-boolean-constructor" title="The Boolean Constructor"><span class="secnum">19.3.1</span> The Boolean Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-boolean-constructor-boolean-value" title="Boolean ( value )"><span class="secnum">19.3.1.1</span> Boolean ( <var>value</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-boolean-constructor" title="Properties of the Boolean Constructor"><span class="secnum">19.3.2</span> Properties of the Boolean Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-boolean.prototype" title="Boolean.prototype"><span class="secnum">19.3.2.1</span> Boolean.prototype</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-boolean-prototype-object" title="Properties of the Boolean Prototype Object"><span class="secnum">19.3.3</span> Properties of the Boolean Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-thisbooleanvalue" title="thisBooleanValue ( value )"><span class="secnum">19.3.3.1</span> thisBooleanValue ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-boolean.prototype.constructor" title="Boolean.prototype.constructor"><span class="secnum">19.3.3.2</span> Boolean.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-boolean.prototype.tostring" title="Boolean.prototype.toString ( )"><span class="secnum">19.3.3.3</span> Boolean.prototype.toString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-boolean.prototype.valueof" title="Boolean.prototype.valueOf ( )"><span class="secnum">19.3.3.4</span> Boolean.prototype.valueOf ( )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-boolean-instances" title="Properties of Boolean Instances"><span class="secnum">19.3.4</span> Properties of Boolean Instances</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-symbol-objects" title="Symbol Objects"><span class="secnum">19.4</span> Symbol Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-symbol-constructor" title="The Symbol Constructor"><span class="secnum">19.4.1</span> The Symbol Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-symbol-description" title="Symbol ( [ description ] )"><span class="secnum">19.4.1.1</span> Symbol ( [ <var>description</var> ] )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-symbol-constructor" title="Properties of the Symbol Constructor"><span class="secnum">19.4.2</span> Properties of the Symbol Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-symbol.for" title="Symbol.for ( key )"><span class="secnum">19.4.2.1</span> Symbol.for ( <var>key</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.hasinstance" title="Symbol.hasInstance"><span class="secnum">19.4.2.2</span> Symbol.hasInstance</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.isconcatspreadable" title="Symbol.isConcatSpreadable"><span class="secnum">19.4.2.3</span> Symbol.isConcatSpreadable</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.iterator" title="Symbol.iterator"><span class="secnum">19.4.2.4</span> Symbol.iterator</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.keyfor" title="Symbol.keyFor ( sym )"><span class="secnum">19.4.2.5</span> Symbol.keyFor ( <var>sym</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.match" title="Symbol.match"><span class="secnum">19.4.2.6</span> Symbol.match</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.prototype" title="Symbol.prototype"><span class="secnum">19.4.2.7</span> Symbol.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.replace" title="Symbol.replace"><span class="secnum">19.4.2.8</span> Symbol.replace</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.search" title="Symbol.search"><span class="secnum">19.4.2.9</span> Symbol.search</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.species" title="Symbol.species"><span class="secnum">19.4.2.10</span> Symbol.species</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.split" title="Symbol.split"><span class="secnum">19.4.2.11</span> Symbol.split</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.toprimitive" title="Symbol.toPrimitive"><span class="secnum">19.4.2.12</span> Symbol.toPrimitive</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.tostringtag" title="Symbol.toStringTag"><span class="secnum">19.4.2.13</span> Symbol.toStringTag</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.unscopables" title="Symbol.unscopables"><span class="secnum">19.4.2.14</span> Symbol.unscopables</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-symbol-prototype-object" title="Properties of the Symbol Prototype Object"><span class="secnum">19.4.3</span> Properties of the Symbol Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-symbol.prototype.constructor" title="Symbol.prototype.constructor"><span class="secnum">19.4.3.1</span> Symbol.prototype.constructor</a></li><li><span class="item-toggle">â¢</span><a href="#sec-symbol.prototype.tostring" title="Symbol.prototype.toString ( )"><span class="secnum">19.4.3.2</span> Symbol.prototype.toString ( )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-symboldescriptivestring" title="Runtime Semantics: SymbolDescriptiveString ( sym )"><span class="secnum">19.4.3.2.1</span> RS: SymbolDescriptiveString ( <var>sym</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.prototype.valueof" title="Symbol.prototype.valueOf ( )"><span class="secnum">19.4.3.3</span> Symbol.prototype.valueOf ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.prototype-@@toprimitive" title="Symbol.prototype [ @@toPrimitive ] ( hint )"><span class="secnum">19.4.3.4</span> Symbol.prototype [ @@toPrimitive ] ( <var>hint</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-symbol.prototype-@@tostringtag" title="Symbol.prototype [ @@toStringTag ]"><span class="secnum">19.4.3.5</span> Symbol.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-symbol-instances" title="Properties of Symbol Instances"><span class="secnum">19.4.4</span> Properties of Symbol Instances</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-error-objects" title="Error Objects"><span class="secnum">19.5</span> Error Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-error-constructor" title="The Error Constructor"><span class="secnum">19.5.1</span> The Error Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-error-message" title="Error ( message )"><span class="secnum">19.5.1.1</span> Error ( <var>message</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-error-constructor" title="Properties of the Error Constructor"><span class="secnum">19.5.2</span> Properties of the Error Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-error.prototype" title="Error.prototype"><span class="secnum">19.5.2.1</span> Error.prototype</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-error-prototype-object" title="Properties of the Error Prototype Object"><span class="secnum">19.5.3</span> Properties of the Error Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-error.prototype.constructor" title="Error.prototype.constructor"><span class="secnum">19.5.3.1</span> Error.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-error.prototype.message" title="Error.prototype.message"><span class="secnum">19.5.3.2</span> Error.prototype.message</a></li><li><span class="item-toggle-none"></span><a href="#sec-error.prototype.name" title="Error.prototype.name"><span class="secnum">19.5.3.3</span> Error.prototype.name</a></li><li><span class="item-toggle-none"></span><a href="#sec-error.prototype.tostring" title="Error.prototype.toString ( )"><span class="secnum">19.5.3.4</span> Error.prototype.toString ( )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-error-instances" title="Properties of Error Instances"><span class="secnum">19.5.4</span> Properties of Error Instances</a></li><li><span class="item-toggle">â¢</span><a href="#sec-native-error-types-used-in-this-standard" title="Native Error Types Used in This Standard"><span class="secnum">19.5.5</span> Native Error Types Used in This Standard</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-native-error-types-used-in-this-standard-evalerror" title="EvalError"><span class="secnum">19.5.5.1</span> EvalError</a></li><li><span class="item-toggle-none"></span><a href="#sec-native-error-types-used-in-this-standard-rangeerror" title="RangeError"><span class="secnum">19.5.5.2</span> RangeError</a></li><li><span class="item-toggle-none"></span><a href="#sec-native-error-types-used-in-this-standard-referenceerror" title="ReferenceError"><span class="secnum">19.5.5.3</span> ReferenceError</a></li><li><span class="item-toggle-none"></span><a href="#sec-native-error-types-used-in-this-standard-syntaxerror" title="SyntaxError"><span class="secnum">19.5.5.4</span> SyntaxError</a></li><li><span class="item-toggle-none"></span><a href="#sec-native-error-types-used-in-this-standard-typeerror" title="TypeError"><span class="secnum">19.5.5.5</span> TypeError</a></li><li><span class="item-toggle-none"></span><a href="#sec-native-error-types-used-in-this-standard-urierror" title="URIError"><span class="secnum">19.5.5.6</span> URIError</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-nativeerror-object-structure" title="NativeError Object Structure"><span class="secnum">19.5.6</span> <var>NativeError</var> Object Structure</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-nativeerror-constructors" title="NativeError Constructors"><span class="secnum">19.5.6.1</span> <var>NativeError</var> Constructors</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-nativeerror" title="NativeError ( message )"><span class="secnum">19.5.6.1.1</span> NativeError ( <var>message</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-nativeerror-constructors" title="Properties of the NativeError Constructors"><span class="secnum">19.5.6.2</span> Properties of the <var>NativeError</var> Constructors</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-nativeerror.prototype" title="NativeError.prototype"><span class="secnum">19.5.6.2.1</span> NativeError.prototype</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-nativeerror-prototype-objects" title="Properties of the NativeError Prototype Objects"><span class="secnum">19.5.6.3</span> Properties of the <var>NativeError</var> Prototype Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-nativeerror.prototype.constructor" title="NativeError.prototype.constructor"><span class="secnum">19.5.6.3.1</span> <var>NativeError</var>.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-nativeerror.prototype.message" title="NativeError.prototype.message"><span class="secnum">19.5.6.3.2</span> <var>NativeError</var>.prototype.message</a></li><li><span class="item-toggle-none"></span><a href="#sec-nativeerror.prototype.name" title="NativeError.prototype.name"><span class="secnum">19.5.6.3.3</span> <var>NativeError</var>.prototype.name</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-nativeerror-instances" title="Properties of NativeError Instances"><span class="secnum">19.5.6.4</span> Properties of <var>NativeError</var> Instances</a></li></ol></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-numbers-and-dates" title="Numbers and Dates"><span class="secnum">20</span> Numbers and Dates</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-number-objects" title="Number Objects"><span class="secnum">20.1</span> Number Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-number-constructor" title="The Number Constructor"><span class="secnum">20.1.1</span> The Number Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-number-constructor-number-value" title="Number ( value )"><span class="secnum">20.1.1.1</span> Number ( <var>value</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-number-constructor" title="Properties of the Number Constructor"><span class="secnum">20.1.2</span> Properties of the Number Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-number.epsilon" title="Number.EPSILON"><span class="secnum">20.1.2.1</span> Number.EPSILON</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.isfinite" title="Number.isFinite ( number )"><span class="secnum">20.1.2.2</span> Number.isFinite ( <var>number</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.isinteger" title="Number.isInteger ( number )"><span class="secnum">20.1.2.3</span> Number.isInteger ( <var>number</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.isnan" title="Number.isNaN ( number )"><span class="secnum">20.1.2.4</span> Number.isNaN ( <var>number</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.issafeinteger" title="Number.isSafeInteger ( number )"><span class="secnum">20.1.2.5</span> Number.isSafeInteger ( <var>number</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.max_safe_integer" title="Number.MAX_SAFE_INTEGER"><span class="secnum">20.1.2.6</span> Number.MAX_SAFE_INTEGER</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.max_value" title="Number.MAX_VALUE"><span class="secnum">20.1.2.7</span> Number.MAX_VALUE</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.min_safe_integer" title="Number.MIN_SAFE_INTEGER"><span class="secnum">20.1.2.8</span> Number.MIN_SAFE_INTEGER</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.min_value" title="Number.MIN_VALUE"><span class="secnum">20.1.2.9</span> Number.MIN_VALUE</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.nan" title="Number.NaN"><span class="secnum">20.1.2.10</span> Number.NaN</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.negative_infinity" title="Number.NEGATIVE_INFINITY"><span class="secnum">20.1.2.11</span> Number.NEGATIVE_INFINITY</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.parsefloat" title="Number.parseFloat ( string )"><span class="secnum">20.1.2.12</span> Number.parseFloat ( <var>string</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.parseint" title="Number.parseInt ( string, radix )"><span class="secnum">20.1.2.13</span> Number.parseInt ( <var>string</var>, <var>radix</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.positive_infinity" title="Number.POSITIVE_INFINITY"><span class="secnum">20.1.2.14</span> Number.POSITIVE_INFINITY</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.prototype" title="Number.prototype"><span class="secnum">20.1.2.15</span> Number.prototype</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-number-prototype-object" title="Properties of the Number Prototype Object"><span class="secnum">20.1.3</span> Properties of the Number Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-number.prototype.constructor" title="Number.prototype.constructor"><span class="secnum">20.1.3.1</span> Number.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.prototype.toexponential" title="Number.prototype.toExponential ( fractionDigits )"><span class="secnum">20.1.3.2</span> Number.prototype.toExponential ( <var>fractionDigits</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.prototype.tofixed" title="Number.prototype.toFixed ( fractionDigits )"><span class="secnum">20.1.3.3</span> Number.prototype.toFixed ( <var>fractionDigits</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.prototype.tolocalestring" title="Number.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )"><span class="secnum">20.1.3.4</span> Number.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.prototype.toprecision" title="Number.prototype.toPrecision ( precision )"><span class="secnum">20.1.3.5</span> Number.prototype.toPrecision ( <var>precision</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.prototype.tostring" title="Number.prototype.toString ( [ radix ] )"><span class="secnum">20.1.3.6</span> Number.prototype.toString ( [ <var>radix</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-number.prototype.valueof" title="Number.prototype.valueOf ( )"><span class="secnum">20.1.3.7</span> Number.prototype.valueOf ( )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-number-instances" title="Properties of Number Instances"><span class="secnum">20.1.4</span> Properties of Number Instances</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-math-object" title="The Math Object"><span class="secnum">20.2</span> The Math Object</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-value-properties-of-the-math-object" title="Value Properties of the Math Object"><span class="secnum">20.2.1</span> Value Properties of the Math Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-math.e" title="Math.E"><span class="secnum">20.2.1.1</span> Math.E</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.ln10" title="Math.LN10"><span class="secnum">20.2.1.2</span> Math.LN10</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.ln2" title="Math.LN2"><span class="secnum">20.2.1.3</span> Math.LN2</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.log10e" title="Math.LOG10E"><span class="secnum">20.2.1.4</span> Math.LOG10E</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.log2e" title="Math.LOG2E"><span class="secnum">20.2.1.5</span> Math.LOG2E</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.pi" title="Math.PI"><span class="secnum">20.2.1.6</span> Math.PI</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.sqrt1_2" title="Math.SQRT1_2"><span class="secnum">20.2.1.7</span> Math.SQRT1_2</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.sqrt2" title="Math.SQRT2"><span class="secnum">20.2.1.8</span> Math.SQRT2</a></li><li><span class="item-toggle-none"></span><a href="#sec-math-@@tostringtag" title="Math [ @@toStringTag ]"><span class="secnum">20.2.1.9</span> Math [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-function-properties-of-the-math-object" title="Function Properties of the Math Object"><span class="secnum">20.2.2</span> Function Properties of the Math Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-math.abs" title="Math.abs ( x )"><span class="secnum">20.2.2.1</span> Math.abs ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.acos" title="Math.acos ( x )"><span class="secnum">20.2.2.2</span> Math.acos ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.acosh" title="Math.acosh ( x )"><span class="secnum">20.2.2.3</span> Math.acosh ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.asin" title="Math.asin ( x )"><span class="secnum">20.2.2.4</span> Math.asin ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.asinh" title="Math.asinh ( x )"><span class="secnum">20.2.2.5</span> Math.asinh ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.atan" title="Math.atan ( x )"><span class="secnum">20.2.2.6</span> Math.atan ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.atanh" title="Math.atanh ( x )"><span class="secnum">20.2.2.7</span> Math.atanh ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.atan2" title="Math.atan2 ( y, x )"><span class="secnum">20.2.2.8</span> Math.atan2 ( <var>y</var>, <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.cbrt" title="Math.cbrt ( x )"><span class="secnum">20.2.2.9</span> Math.cbrt ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.ceil" title="Math.ceil ( x )"><span class="secnum">20.2.2.10</span> Math.ceil ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.clz32" title="Math.clz32 ( x )"><span class="secnum">20.2.2.11</span> Math.clz32 ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.cos" title="Math.cos ( x )"><span class="secnum">20.2.2.12</span> Math.cos ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.cosh" title="Math.cosh ( x )"><span class="secnum">20.2.2.13</span> Math.cosh ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.exp" title="Math.exp ( x )"><span class="secnum">20.2.2.14</span> Math.exp ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.expm1" title="Math.expm1 ( x )"><span class="secnum">20.2.2.15</span> Math.expm1 ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.floor" title="Math.floor ( x )"><span class="secnum">20.2.2.16</span> Math.floor ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.fround" title="Math.fround ( x )"><span class="secnum">20.2.2.17</span> Math.fround ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.hypot" title="Math.hypot ( value1, value2, ...values )"><span class="secnum">20.2.2.18</span> Math.hypot ( <var>value1</var>, <var>value2</var>, ...<var>values</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.imul" title="Math.imul ( x, y )"><span class="secnum">20.2.2.19</span> Math.imul ( <var>x</var>, <var>y</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.log" title="Math.log ( x )"><span class="secnum">20.2.2.20</span> Math.log ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.log1p" title="Math.log1p ( x )"><span class="secnum">20.2.2.21</span> Math.log1p ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.log10" title="Math.log10 ( x )"><span class="secnum">20.2.2.22</span> Math.log10 ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.log2" title="Math.log2 ( x )"><span class="secnum">20.2.2.23</span> Math.log2 ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.max" title="Math.max ( value1, value2, ...values )"><span class="secnum">20.2.2.24</span> Math.max ( <var>value1</var>, <var>value2</var>, ...<var>values</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.min" title="Math.min ( value1, value2, ...values )"><span class="secnum">20.2.2.25</span> Math.min ( <var>value1</var>, <var>value2</var>, ...<var>values</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.pow" title="Math.pow ( base, exponent )"><span class="secnum">20.2.2.26</span> Math.pow ( <var>base</var>, <var>exponent</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.random" title="Math.random ( )"><span class="secnum">20.2.2.27</span> Math.random ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.round" title="Math.round ( x )"><span class="secnum">20.2.2.28</span> Math.round ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.sign" title="Math.sign (x)"><span class="secnum">20.2.2.29</span> Math.sign (<var>x</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.sin" title="Math.sin ( x )"><span class="secnum">20.2.2.30</span> Math.sin ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.sinh" title="Math.sinh ( x )"><span class="secnum">20.2.2.31</span> Math.sinh ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.sqrt" title="Math.sqrt ( x )"><span class="secnum">20.2.2.32</span> Math.sqrt ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.tan" title="Math.tan ( x )"><span class="secnum">20.2.2.33</span> Math.tan ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.tanh" title="Math.tanh ( x )"><span class="secnum">20.2.2.34</span> Math.tanh ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-math.trunc" title="Math.trunc ( x )"><span class="secnum">20.2.2.35</span> Math.trunc ( <var>x</var> )</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-date-objects" title="Date Objects"><span class="secnum">20.3</span> Date Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-overview-of-date-objects-and-definitions-of-abstract-operations" title="Overview of Date Objects and Definitions of Abstract Operations"><span class="secnum">20.3.1</span> Overview of Date Objects and Definitions of Abstract Operations</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-time-values-and-time-range" title="Time Values and Time Range"><span class="secnum">20.3.1.1</span> Time Values and Time Range</a></li><li><span class="item-toggle-none"></span><a href="#sec-day-number-and-time-within-day" title="Day Number and Time within Day"><span class="secnum">20.3.1.2</span> Day Number and Time within Day</a></li><li><span class="item-toggle-none"></span><a href="#sec-year-number" title="Year Number"><span class="secnum">20.3.1.3</span> Year Number</a></li><li><span class="item-toggle-none"></span><a href="#sec-month-number" title="Month Number"><span class="secnum">20.3.1.4</span> Month Number</a></li><li><span class="item-toggle-none"></span><a href="#sec-date-number" title="Date Number"><span class="secnum">20.3.1.5</span> Date Number</a></li><li><span class="item-toggle-none"></span><a href="#sec-week-day" title="Week Day"><span class="secnum">20.3.1.6</span> Week Day</a></li><li><span class="item-toggle-none"></span><a href="#sec-local-time-zone-adjustment" title="Local Time Zone Adjustment"><span class="secnum">20.3.1.7</span> Local Time Zone Adjustment</a></li><li><span class="item-toggle-none"></span><a href="#sec-daylight-saving-time-adjustment" title="Daylight Saving Time Adjustment"><span class="secnum">20.3.1.8</span> Daylight Saving Time Adjustment</a></li><li><span class="item-toggle-none"></span><a href="#sec-localtime" title="LocalTime ( t )"><span class="secnum">20.3.1.9</span> LocalTime ( <var>t</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-utc-t" title="UTC ( t )"><span class="secnum">20.3.1.10</span> UTC ( <var>t</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-hours-minutes-second-and-milliseconds" title="Hours, Minutes, Second, and Milliseconds"><span class="secnum">20.3.1.11</span> Hours, Minutes, Second, and Milliseconds</a></li><li><span class="item-toggle-none"></span><a href="#sec-maketime" title="MakeTime (hour, min, sec, ms)"><span class="secnum">20.3.1.12</span> MakeTime (<var>hour</var>, <var>min</var>, <var>sec</var>, <var>ms</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-makeday" title="MakeDay (year, month, date)"><span class="secnum">20.3.1.13</span> MakeDay (<var>year</var>, <var>month</var>, <var>date</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-makedate" title="MakeDate (day, time)"><span class="secnum">20.3.1.14</span> MakeDate (<var>day</var>, <var>time</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-timeclip" title="TimeClip (time)"><span class="secnum">20.3.1.15</span> TimeClip (<var>time</var>)</a></li><li><span class="item-toggle">â¢</span><a href="#sec-date-time-string-format" title="Date Time String Format"><span class="secnum">20.3.1.16</span> Date Time String Format</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-extended-years" title="Extended Years"><span class="secnum">20.3.1.16.1</span> Extended Years</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-date-constructor" title="The Date Constructor"><span class="secnum">20.3.2</span> The Date Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-date-year-month-date-hours-minutes-seconds-ms" title="Date ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )"><span class="secnum">20.3.2.1</span> Date ( <var>year</var>, <var>month</var> [ , <var>date</var> [ , <var>hours</var> [ , <var>minutes</var> [ , <var>seconds</var> [ , <var>ms</var> ] ] ] ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date-value" title="Date ( value )"><span class="secnum">20.3.2.2</span> Date ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date-constructor-date" title="Date ( )"><span class="secnum">20.3.2.3</span> Date ( )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-date-constructor" title="Properties of the Date Constructor"><span class="secnum">20.3.3</span> Properties of the Date Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-date.now" title="Date.now ( )"><span class="secnum">20.3.3.1</span> Date.now ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.parse" title="Date.parse ( string )"><span class="secnum">20.3.3.2</span> Date.parse ( <var>string</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype" title="Date.prototype"><span class="secnum">20.3.3.3</span> Date.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.utc" title="Date.UTC ( year, month [ , date [ , hours [ , minutes [ , seconds [ , ms ] ] ] ] ] )"><span class="secnum">20.3.3.4</span> Date.UTC ( <var>year</var>, <var>month</var> [ , <var>date</var> [ , <var>hours</var> [ , <var>minutes</var> [ , <var>seconds</var> [ , <var>ms</var> ] ] ] ] ] )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-date-prototype-object" title="Properties of the Date Prototype Object"><span class="secnum">20.3.4</span> Properties of the Date Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.constructor" title="Date.prototype.constructor"><span class="secnum">20.3.4.1</span> Date.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getdate" title="Date.prototype.getDate ( )"><span class="secnum">20.3.4.2</span> Date.prototype.getDate ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getday" title="Date.prototype.getDay ( )"><span class="secnum">20.3.4.3</span> Date.prototype.getDay ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getfullyear" title="Date.prototype.getFullYear ( )"><span class="secnum">20.3.4.4</span> Date.prototype.getFullYear ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.gethours" title="Date.prototype.getHours ( )"><span class="secnum">20.3.4.5</span> Date.prototype.getHours ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getmilliseconds" title="Date.prototype.getMilliseconds ( )"><span class="secnum">20.3.4.6</span> Date.prototype.getMilliseconds ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getminutes" title="Date.prototype.getMinutes ( )"><span class="secnum">20.3.4.7</span> Date.prototype.getMinutes ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getmonth" title="Date.prototype.getMonth ( )"><span class="secnum">20.3.4.8</span> Date.prototype.getMonth ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getseconds" title="Date.prototype.getSeconds ( )"><span class="secnum">20.3.4.9</span> Date.prototype.getSeconds ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.gettime" title="Date.prototype.getTime ( )"><span class="secnum">20.3.4.10</span> Date.prototype.getTime ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.gettimezoneoffset" title="Date.prototype.getTimezoneOffset ( )"><span class="secnum">20.3.4.11</span> Date.prototype.getTimezoneOffset ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getutcdate" title="Date.prototype.getUTCDate ( )"><span class="secnum">20.3.4.12</span> Date.prototype.getUTCDate ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getutcday" title="Date.prototype.getUTCDay ( )"><span class="secnum">20.3.4.13</span> Date.prototype.getUTCDay ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getutcfullyear" title="Date.prototype.getUTCFullYear ( )"><span class="secnum">20.3.4.14</span> Date.prototype.getUTCFullYear ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getutchours" title="Date.prototype.getUTCHours ( )"><span class="secnum">20.3.4.15</span> Date.prototype.getUTCHours ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getutcmilliseconds" title="Date.prototype.getUTCMilliseconds ( )"><span class="secnum">20.3.4.16</span> Date.prototype.getUTCMilliseconds ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getutcminutes" title="Date.prototype.getUTCMinutes ( )"><span class="secnum">20.3.4.17</span> Date.prototype.getUTCMinutes ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getutcmonth" title="Date.prototype.getUTCMonth ( )"><span class="secnum">20.3.4.18</span> Date.prototype.getUTCMonth ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getutcseconds" title="Date.prototype.getUTCSeconds ( )"><span class="secnum">20.3.4.19</span> Date.prototype.getUTCSeconds ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setdate" title="Date.prototype.setDate ( date )"><span class="secnum">20.3.4.20</span> Date.prototype.setDate ( <var>date</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setfullyear" title="Date.prototype.setFullYear ( year [ , month [ , date ] ] )"><span class="secnum">20.3.4.21</span> Date.prototype.setFullYear ( <var>year</var> [ , <var>month</var> [ , <var>date</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.sethours" title="Date.prototype.setHours ( hour [ , min [ , sec [ , ms ] ] ] )"><span class="secnum">20.3.4.22</span> Date.prototype.setHours ( <var>hour</var> [ , <var>min</var> [ , <var>sec</var> [ , <var>ms</var> ] ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setmilliseconds" title="Date.prototype.setMilliseconds ( ms )"><span class="secnum">20.3.4.23</span> Date.prototype.setMilliseconds ( <var>ms</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setminutes" title="Date.prototype.setMinutes ( min [ , sec [ , ms ] ] )"><span class="secnum">20.3.4.24</span> Date.prototype.setMinutes ( <var>min</var> [ , <var>sec</var> [ , <var>ms</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setmonth" title="Date.prototype.setMonth ( month [ , date ] )"><span class="secnum">20.3.4.25</span> Date.prototype.setMonth ( <var>month</var> [ , <var>date</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setseconds" title="Date.prototype.setSeconds ( sec [ , ms ] )"><span class="secnum">20.3.4.26</span> Date.prototype.setSeconds ( <var>sec</var> [ , <var>ms</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.settime" title="Date.prototype.setTime ( time )"><span class="secnum">20.3.4.27</span> Date.prototype.setTime ( <var>time</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setutcdate" title="Date.prototype.setUTCDate ( date )"><span class="secnum">20.3.4.28</span> Date.prototype.setUTCDate ( <var>date</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setutcfullyear" title="Date.prototype.setUTCFullYear ( year [ , month [ , date ] ] )"><span class="secnum">20.3.4.29</span> Date.prototype.setUTCFullYear ( <var>year</var> [ , <var>month</var> [ , <var>date</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setutchours" title="Date.prototype.setUTCHours ( hour [ , min [ , sec [ , ms ] ] ] )"><span class="secnum">20.3.4.30</span> Date.prototype.setUTCHours ( <var>hour</var> [ , <var>min</var> [ , <var>sec</var> [ , <var>ms</var> ] ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setutcmilliseconds" title="Date.prototype.setUTCMilliseconds ( ms )"><span class="secnum">20.3.4.31</span> Date.prototype.setUTCMilliseconds ( <var>ms</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setutcminutes" title="Date.prototype.setUTCMinutes ( min [ , sec [ , ms ] ] )"><span class="secnum">20.3.4.32</span> Date.prototype.setUTCMinutes ( <var>min</var> [ , <var>sec</var> [ , <var>ms</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setutcmonth" title="Date.prototype.setUTCMonth ( month [ , date ] )"><span class="secnum">20.3.4.33</span> Date.prototype.setUTCMonth ( <var>month</var> [ , <var>date</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setutcseconds" title="Date.prototype.setUTCSeconds ( sec [ , ms ] )"><span class="secnum">20.3.4.34</span> Date.prototype.setUTCSeconds ( <var>sec</var> [ , <var>ms</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.todatestring" title="Date.prototype.toDateString ( )"><span class="secnum">20.3.4.35</span> Date.prototype.toDateString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.toisostring" title="Date.prototype.toISOString ( )"><span class="secnum">20.3.4.36</span> Date.prototype.toISOString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.tojson" title="Date.prototype.toJSON ( key )"><span class="secnum">20.3.4.37</span> Date.prototype.toJSON ( <var>key</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.tolocaledatestring" title="Date.prototype.toLocaleDateString ( [ reserved1 [ , reserved2 ] ] )"><span class="secnum">20.3.4.38</span> Date.prototype.toLocaleDateString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.tolocalestring" title="Date.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )"><span class="secnum">20.3.4.39</span> Date.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.tolocaletimestring" title="Date.prototype.toLocaleTimeString ( [ reserved1 [ , reserved2 ] ] )"><span class="secnum">20.3.4.40</span> Date.prototype.toLocaleTimeString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-date.prototype.tostring" title="Date.prototype.toString ( )"><span class="secnum">20.3.4.41</span> Date.prototype.toString ( )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-todatestring" title="Runtime Semantics: ToDateString(tv)"><span class="secnum">20.3.4.41.1</span> RS: ToDateString(<var>tv</var>)</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.totimestring" title="Date.prototype.toTimeString ( )"><span class="secnum">20.3.4.42</span> Date.prototype.toTimeString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.toutcstring" title="Date.prototype.toUTCString ( )"><span class="secnum">20.3.4.43</span> Date.prototype.toUTCString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.valueof" title="Date.prototype.valueOf ( )"><span class="secnum">20.3.4.44</span> Date.prototype.valueOf ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype-@@toprimitive" title="Date.prototype [ @@toPrimitive ] ( hint )"><span class="secnum">20.3.4.45</span> Date.prototype [ @@toPrimitive ] ( <var>hint</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-date-instances" title="Properties of Date Instances"><span class="secnum">20.3.5</span> Properties of Date Instances</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-text-processing" title="Text Processing"><span class="secnum">21</span> Text Processing</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-string-objects" title="String Objects"><span class="secnum">21.1</span> String Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-string-constructor" title="The String Constructor"><span class="secnum">21.1.1</span> The String Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-string-constructor-string-value" title="String ( value )"><span class="secnum">21.1.1.1</span> String ( <var>value</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-string-constructor" title="Properties of the String Constructor"><span class="secnum">21.1.2</span> Properties of the String Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-string.fromcharcode" title="String.fromCharCode ( ...codeUnits )"><span class="secnum">21.1.2.1</span> String.fromCharCode ( ...<var>codeUnits</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.fromcodepoint" title="String.fromCodePoint ( ...codePoints )"><span class="secnum">21.1.2.2</span> String.fromCodePoint ( ...<var>codePoints</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype" title="String.prototype"><span class="secnum">21.1.2.3</span> String.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.raw" title="String.raw ( template, ...substitutions )"><span class="secnum">21.1.2.4</span> String.raw ( <var>template</var>, ...<var>substitutions</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-string-prototype-object" title="Properties of the String Prototype Object"><span class="secnum">21.1.3</span> Properties of the String Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.charat" title="String.prototype.charAt ( pos )"><span class="secnum">21.1.3.1</span> String.prototype.charAt ( <var>pos</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.charcodeat" title="String.prototype.charCodeAt ( pos )"><span class="secnum">21.1.3.2</span> String.prototype.charCodeAt ( <var>pos</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.codepointat" title="String.prototype.codePointAt ( pos )"><span class="secnum">21.1.3.3</span> String.prototype.codePointAt ( <var>pos</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.concat" title="String.prototype.concat ( ...args )"><span class="secnum">21.1.3.4</span> String.prototype.concat ( ...<var>args</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.constructor" title="String.prototype.constructor"><span class="secnum">21.1.3.5</span> String.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.endswith" title="String.prototype.endsWith ( searchString [ , endPosition ] )"><span class="secnum">21.1.3.6</span> String.prototype.endsWith ( <var>searchString</var> [ , <var>endPosition</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.includes" title="String.prototype.includes ( searchString [ , position ] )"><span class="secnum">21.1.3.7</span> String.prototype.includes ( <var>searchString</var> [ , <var>position</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.indexof" title="String.prototype.indexOf ( searchString [ , position ] )"><span class="secnum">21.1.3.8</span> String.prototype.indexOf ( <var>searchString</var> [ , <var>position</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.lastindexof" title="String.prototype.lastIndexOf ( searchString [ , position ] )"><span class="secnum">21.1.3.9</span> String.prototype.lastIndexOf ( <var>searchString</var> [ , <var>position</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.localecompare" title="String.prototype.localeCompare ( that [ , reserved1 [ , reserved2 ] ] )"><span class="secnum">21.1.3.10</span> String.prototype.localeCompare ( <var>that</var> [ , <var>reserved1</var> [ , <var>reserved2</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.match" title="String.prototype.match ( regexp )"><span class="secnum">21.1.3.11</span> String.prototype.match ( <var>regexp</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.normalize" title="String.prototype.normalize ( [ form ] )"><span class="secnum">21.1.3.12</span> String.prototype.normalize ( [ <var>form</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.padend" title="String.prototype.padEnd( maxLength [ , fillString ] )"><span class="secnum">21.1.3.13</span> String.prototype.padEnd( <var>maxLength</var> [ , <var>fillString</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.padstart" title="String.prototype.padStart( maxLength [ , fillString ] )"><span class="secnum">21.1.3.14</span> String.prototype.padStart( <var>maxLength</var> [ , <var>fillString</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.repeat" title="String.prototype.repeat ( count )"><span class="secnum">21.1.3.15</span> String.prototype.repeat ( <var>count</var> )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-string.prototype.replace" title="String.prototype.replace (searchValue, replaceValue )"><span class="secnum">21.1.3.16</span> String.prototype.replace (<var>searchValue</var>, <var>replaceValue</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-getsubstitution" title="Runtime Semantics: GetSubstitution(matched, str, position, captures, replacement)"><span class="secnum">21.1.3.16.1</span> RS: GetSubstitution(<var>matched</var>, <var>str</var>, <var>position</var>, <var>captures</var>, <var>replacement</var>)</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.search" title="String.prototype.search ( regexp )"><span class="secnum">21.1.3.17</span> String.prototype.search ( <var>regexp</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.slice" title="String.prototype.slice ( start, end )"><span class="secnum">21.1.3.18</span> String.prototype.slice ( <var>start</var>, <var>end</var> )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-string.prototype.split" title="String.prototype.split ( separator, limit )"><span class="secnum">21.1.3.19</span> String.prototype.split ( <var>separator</var>, <var>limit</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-splitmatch" title="Runtime Semantics: SplitMatch ( S, q, R )"><span class="secnum">21.1.3.19.1</span> RS: SplitMatch ( <var>S</var>, <var>q</var>, <var>R</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.startswith" title="String.prototype.startsWith ( searchString [ , position ] )"><span class="secnum">21.1.3.20</span> String.prototype.startsWith ( <var>searchString</var> [ , <var>position</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.substring" title="String.prototype.substring ( start, end )"><span class="secnum">21.1.3.21</span> String.prototype.substring ( <var>start</var>, <var>end</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.tolocalelowercase" title="String.prototype.toLocaleLowerCase ( [ reserved1 [ , reserved2 ] ] )"><span class="secnum">21.1.3.22</span> String.prototype.toLocaleLowerCase ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.tolocaleuppercase" title="String.prototype.toLocaleUpperCase ([ reserved1 [ , reserved2 ] ] )"><span class="secnum">21.1.3.23</span> String.prototype.toLocaleUpperCase ([ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.tolowercase" title="String.prototype.toLowerCase ( )"><span class="secnum">21.1.3.24</span> String.prototype.toLowerCase ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.tostring" title="String.prototype.toString ( )"><span class="secnum">21.1.3.25</span> String.prototype.toString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.touppercase" title="String.prototype.toUpperCase ( )"><span class="secnum">21.1.3.26</span> String.prototype.toUpperCase ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.trim" title="String.prototype.trim ( )"><span class="secnum">21.1.3.27</span> String.prototype.trim ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.valueof" title="String.prototype.valueOf ( )"><span class="secnum">21.1.3.28</span> String.prototype.valueOf ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype-@@iterator" title="String.prototype [ @@iterator ] ( )"><span class="secnum">21.1.3.29</span> String.prototype [ @@iterator ] ( )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-string-instances" title="Properties of String Instances"><span class="secnum">21.1.4</span> Properties of String Instances</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-properties-of-string-instances-length" title="length"><span class="secnum">21.1.4.1</span> length</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-string-iterator-objects" title="String Iterator Objects"><span class="secnum">21.1.5</span> String Iterator Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-createstringiterator" title="CreateStringIterator Abstract Operation"><span class="secnum">21.1.5.1</span> CreateStringIterator Abstract Operation</a></li><li><span class="item-toggle">â¢</span><a href="#sec-%stringiteratorprototype%-object" title="The %StringIteratorPrototype% Object"><span class="secnum">21.1.5.2</span> The %StringIteratorPrototype% Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-%stringiteratorprototype%.next" title="%StringIteratorPrototype%.next ( )"><span class="secnum">21.1.5.2.1</span> %StringIteratorPrototype%.next ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%stringiteratorprototype%-@@tostringtag" title="%StringIteratorPrototype% [ @@toStringTag ]"><span class="secnum">21.1.5.2.2</span> %StringIteratorPrototype% [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-string-iterator-instances" title="Properties of String Iterator Instances"><span class="secnum">21.1.5.3</span> Properties of String Iterator Instances</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-regexp-regular-expression-objects" title="RegExp (Regular Expression) Objects"><span class="secnum">21.2</span> RegExp (Regular Expression) Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-patterns" title="Patterns"><span class="secnum">21.2.1</span> Patterns</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-patterns-static-semantics-early-errors" title="Static Semantics: Early Errors"><span class="secnum">21.2.1.1</span> SS: Early Errors</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-pattern-semantics" title="Pattern Semantics"><span class="secnum">21.2.2</span> Pattern Semantics</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-notation" title="Notation"><span class="secnum">21.2.2.1</span> Notation</a></li><li><span class="item-toggle-none"></span><a href="#sec-pattern" title="Pattern"><span class="secnum">21.2.2.2</span> Pattern</a></li><li><span class="item-toggle-none"></span><a href="#sec-disjunction" title="Disjunction"><span class="secnum">21.2.2.3</span> Disjunction</a></li><li><span class="item-toggle-none"></span><a href="#sec-alternative" title="Alternative"><span class="secnum">21.2.2.4</span> Alternative</a></li><li><span class="item-toggle">â¢</span><a href="#sec-term" title="Term"><span class="secnum">21.2.2.5</span> Term</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-repeatmatcher-abstract-operation" title="Runtime Semantics: RepeatMatcher Abstract Operation"><span class="secnum">21.2.2.5.1</span> RS: RepeatMatcher Abstract Operation</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-assertion" title="Assertion"><span class="secnum">21.2.2.6</span> Assertion</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-wordcharacters-abstract-operation" title="Runtime Semantics: WordCharacters Abstract Operation"><span class="secnum">21.2.2.6.1</span> RS: WordCharacters Abstract Operation</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-iswordchar-abstract-operation" title="Runtime Semantics: IsWordChar Abstract Operation"><span class="secnum">21.2.2.6.2</span> RS: IsWordChar Abstract Operation</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-quantifier" title="Quantifier"><span class="secnum">21.2.2.7</span> Quantifier</a></li><li><span class="item-toggle">â¢</span><a href="#sec-atom" title="Atom"><span class="secnum">21.2.2.8</span> Atom</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-charactersetmatcher-abstract-operation" title="Runtime Semantics: CharacterSetMatcher Abstract Operation"><span class="secnum">21.2.2.8.1</span> RS: CharacterSetMatcher Abstract Operation</a></li><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-canonicalize-ch" title="Runtime Semantics: Canonicalize ( ch )"><span class="secnum">21.2.2.8.2</span> RS: Canonicalize ( <var>ch</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-atomescape" title="AtomEscape"><span class="secnum">21.2.2.9</span> AtomEscape</a></li><li><span class="item-toggle-none"></span><a href="#sec-characterescape" title="CharacterEscape"><span class="secnum">21.2.2.10</span> CharacterEscape</a></li><li><span class="item-toggle-none"></span><a href="#sec-decimalescape" title="DecimalEscape"><span class="secnum">21.2.2.11</span> DecimalEscape</a></li><li><span class="item-toggle-none"></span><a href="#sec-characterclassescape" title="CharacterClassEscape"><span class="secnum">21.2.2.12</span> CharacterClassEscape</a></li><li><span class="item-toggle-none"></span><a href="#sec-characterclass" title="CharacterClass"><span class="secnum">21.2.2.13</span> CharacterClass</a></li><li><span class="item-toggle-none"></span><a href="#sec-classranges" title="ClassRanges"><span class="secnum">21.2.2.14</span> ClassRanges</a></li><li><span class="item-toggle">â¢</span><a href="#sec-nonemptyclassranges" title="NonemptyClassRanges"><span class="secnum">21.2.2.15</span> NonemptyClassRanges</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-characterrange-abstract-operation" title="Runtime Semantics: CharacterRange Abstract Operation"><span class="secnum">21.2.2.15.1</span> RS: CharacterRange Abstract Operation</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-nonemptyclassrangesnodash" title="NonemptyClassRangesNoDash"><span class="secnum">21.2.2.16</span> NonemptyClassRangesNoDash</a></li><li><span class="item-toggle-none"></span><a href="#sec-classatom" title="ClassAtom"><span class="secnum">21.2.2.17</span> ClassAtom</a></li><li><span class="item-toggle-none"></span><a href="#sec-classatomnodash" title="ClassAtomNoDash"><span class="secnum">21.2.2.18</span> ClassAtomNoDash</a></li><li><span class="item-toggle-none"></span><a href="#sec-classescape" title="ClassEscape"><span class="secnum">21.2.2.19</span> ClassEscape</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-regexp-constructor" title="The RegExp Constructor"><span class="secnum">21.2.3</span> The RegExp Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-regexp-pattern-flags" title="RegExp ( pattern, flags )"><span class="secnum">21.2.3.1</span> RegExp ( <var>pattern</var>, <var>flags</var> )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-abstract-operations-for-the-regexp-constructor" title="Abstract Operations for the RegExp Constructor"><span class="secnum">21.2.3.2</span> Abstract Operations for the RegExp Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-regexpalloc" title="Runtime Semantics: RegExpAlloc ( newTarget )"><span class="secnum">21.2.3.2.1</span> RS: RegExpAlloc ( <var>newTarget</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-regexpinitialize" title="Runtime Semantics: RegExpInitialize ( obj, pattern, flags )"><span class="secnum">21.2.3.2.2</span> RS: RegExpInitialize ( <var>obj</var>, <var>pattern</var>, <var>flags</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-regexpcreate" title="Runtime Semantics: RegExpCreate ( P, F )"><span class="secnum">21.2.3.2.3</span> RS: RegExpCreate ( <var>P</var>, <var>F</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-escaperegexppattern" title="Runtime Semantics: EscapeRegExpPattern ( P, F )"><span class="secnum">21.2.3.2.4</span> RS: EscapeRegExpPattern ( <var>P</var>, <var>F</var> )</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-regexp-constructor" title="Properties of the RegExp Constructor"><span class="secnum">21.2.4</span> Properties of the RegExp Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-regexp.prototype" title="RegExp.prototype"><span class="secnum">21.2.4.1</span> RegExp.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-regexp-@@species" title="get RegExp [ @@species ]"><span class="secnum">21.2.4.2</span> get RegExp [ @@species ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-regexp-prototype-object" title="Properties of the RegExp Prototype Object"><span class="secnum">21.2.5</span> Properties of the RegExp Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-regexp.prototype.constructor" title="RegExp.prototype.constructor"><span class="secnum">21.2.5.1</span> RegExp.prototype.constructor</a></li><li><span class="item-toggle">â¢</span><a href="#sec-regexp.prototype.exec" title="RegExp.prototype.exec ( string )"><span class="secnum">21.2.5.2</span> RegExp.prototype.exec ( <var>string</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-regexpexec" title="Runtime Semantics: RegExpExec ( R, S )"><span class="secnum">21.2.5.2.1</span> RS: RegExpExec ( <var>R</var>, <var>S</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-regexpbuiltinexec" title="Runtime Semantics: RegExpBuiltinExec ( R, S )"><span class="secnum">21.2.5.2.2</span> RS: RegExpBuiltinExec ( <var>R</var>, <var>S</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-advancestringindex" title="AdvanceStringIndex ( S, index, unicode )"><span class="secnum">21.2.5.2.3</span> AdvanceStringIndex ( <var>S</var>, <var>index</var>, <var>unicode</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-get-regexp.prototype.flags" title="get RegExp.prototype.flags"><span class="secnum">21.2.5.3</span> get RegExp.prototype.flags</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-regexp.prototype.global" title="get RegExp.prototype.global"><span class="secnum">21.2.5.4</span> get RegExp.prototype.global</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-regexp.prototype.ignorecase" title="get RegExp.prototype.ignoreCase"><span class="secnum">21.2.5.5</span> get RegExp.prototype.ignoreCase</a></li><li><span class="item-toggle-none"></span><a href="#sec-regexp.prototype-@@match" title="RegExp.prototype [ @@match ] ( string )"><span class="secnum">21.2.5.6</span> RegExp.prototype [ @@match ] ( <var>string</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-regexp.prototype.multiline" title="get RegExp.prototype.multiline"><span class="secnum">21.2.5.7</span> get RegExp.prototype.multiline</a></li><li><span class="item-toggle-none"></span><a href="#sec-regexp.prototype-@@replace" title="RegExp.prototype [ @@replace ] ( string, replaceValue )"><span class="secnum">21.2.5.8</span> RegExp.prototype [ @@replace ] ( <var>string</var>, <var>replaceValue</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-regexp.prototype-@@search" title="RegExp.prototype [ @@search ] ( string )"><span class="secnum">21.2.5.9</span> RegExp.prototype [ @@search ] ( <var>string</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-regexp.prototype.source" title="get RegExp.prototype.source"><span class="secnum">21.2.5.10</span> get RegExp.prototype.source</a></li><li><span class="item-toggle-none"></span><a href="#sec-regexp.prototype-@@split" title="RegExp.prototype [ @@split ] ( string, limit )"><span class="secnum">21.2.5.11</span> RegExp.prototype [ @@split ] ( <var>string</var>, <var>limit</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-regexp.prototype.sticky" title="get RegExp.prototype.sticky"><span class="secnum">21.2.5.12</span> get RegExp.prototype.sticky</a></li><li><span class="item-toggle-none"></span><a href="#sec-regexp.prototype.test" title="RegExp.prototype.test ( S )"><span class="secnum">21.2.5.13</span> RegExp.prototype.test ( <var>S</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-regexp.prototype.tostring" title="RegExp.prototype.toString ( )"><span class="secnum">21.2.5.14</span> RegExp.prototype.toString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-regexp.prototype.unicode" title="get RegExp.prototype.unicode"><span class="secnum">21.2.5.15</span> get RegExp.prototype.unicode</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-regexp-instances" title="Properties of RegExp Instances"><span class="secnum">21.2.6</span> Properties of RegExp Instances</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-lastindex" title="lastIndex"><span class="secnum">21.2.6.1</span> lastIndex</a></li></ol></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-indexed-collections" title="Indexed Collections"><span class="secnum">22</span> Indexed Collections</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-array-objects" title="Array Objects"><span class="secnum">22.1</span> Array Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-array-constructor" title="The Array Constructor"><span class="secnum">22.1.1</span> The Array Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-array-constructor-array" title="Array ( )"><span class="secnum">22.1.1.1</span> Array ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array-len" title="Array (len)"><span class="secnum">22.1.1.2</span> Array (<var>len</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-array-items" title="Array (...items )"><span class="secnum">22.1.1.3</span> Array (...<var>items</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-array-constructor" title="Properties of the Array Constructor"><span class="secnum">22.1.2</span> Properties of the Array Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-array.from" title="Array.from ( items [ , mapfn [ , thisArg ] ] )"><span class="secnum">22.1.2.1</span> Array.from ( <var>items</var> [ , <var>mapfn</var> [ , <var>thisArg</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.isarray" title="Array.isArray ( arg )"><span class="secnum">22.1.2.2</span> Array.isArray ( <var>arg</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.of" title="Array.of ( ...items )"><span class="secnum">22.1.2.3</span> Array.of ( ...<var>items</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype" title="Array.prototype"><span class="secnum">22.1.2.4</span> Array.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-array-@@species" title="get Array [ @@species ]"><span class="secnum">22.1.2.5</span> get Array [ @@species ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-array-prototype-object" title="Properties of the Array Prototype Object"><span class="secnum">22.1.3</span> Properties of the Array Prototype Object</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-array.prototype.concat" title="Array.prototype.concat ( ...arguments )"><span class="secnum">22.1.3.1</span> Array.prototype.concat ( ...<var>arguments</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-isconcatspreadable" title="Runtime Semantics: IsConcatSpreadable ( O )"><span class="secnum">22.1.3.1.1</span> RS: IsConcatSpreadable ( <var>O</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.constructor" title="Array.prototype.constructor"><span class="secnum">22.1.3.2</span> Array.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.copywithin" title="Array.prototype.copyWithin (target, start [ , end ] )"><span class="secnum">22.1.3.3</span> Array.prototype.copyWithin (<var>target</var>, <var>start</var> [ , <var>end</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.entries" title="Array.prototype.entries ( )"><span class="secnum">22.1.3.4</span> Array.prototype.entries ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.every" title="Array.prototype.every ( callbackfn [ , thisArg ] )"><span class="secnum">22.1.3.5</span> Array.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.fill" title="Array.prototype.fill (value [ , start [ , end ] ] )"><span class="secnum">22.1.3.6</span> Array.prototype.fill (<var>value</var> [ , <var>start</var> [ , <var>end</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.filter" title="Array.prototype.filter ( callbackfn [ , thisArg ] )"><span class="secnum">22.1.3.7</span> Array.prototype.filter ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.find" title="Array.prototype.find ( predicate [ , thisArg ] )"><span class="secnum">22.1.3.8</span> Array.prototype.find ( <var>predicate</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.findindex" title="Array.prototype.findIndex ( predicate [ , thisArg ] )"><span class="secnum">22.1.3.9</span> Array.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.foreach" title="Array.prototype.forEach ( callbackfn [ , thisArg ] )"><span class="secnum">22.1.3.10</span> Array.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.includes" title="Array.prototype.includes ( searchElement [ , fromIndex ] )"><span class="secnum">22.1.3.11</span> Array.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.indexof" title="Array.prototype.indexOf ( searchElement [ , fromIndex ] )"><span class="secnum">22.1.3.12</span> Array.prototype.indexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.join" title="Array.prototype.join (separator)"><span class="secnum">22.1.3.13</span> Array.prototype.join (<var>separator</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.keys" title="Array.prototype.keys ( )"><span class="secnum">22.1.3.14</span> Array.prototype.keys ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.lastindexof" title="Array.prototype.lastIndexOf ( searchElement [ , fromIndex ] )"><span class="secnum">22.1.3.15</span> Array.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.map" title="Array.prototype.map ( callbackfn [ , thisArg ] )"><span class="secnum">22.1.3.16</span> Array.prototype.map ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.pop" title="Array.prototype.pop ( )"><span class="secnum">22.1.3.17</span> Array.prototype.pop ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.push" title="Array.prototype.push ( ...items )"><span class="secnum">22.1.3.18</span> Array.prototype.push ( ...<var>items</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.reduce" title="Array.prototype.reduce ( callbackfn [ , initialValue ] )"><span class="secnum">22.1.3.19</span> Array.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.reduceright" title="Array.prototype.reduceRight ( callbackfn [ , initialValue ] )"><span class="secnum">22.1.3.20</span> Array.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.reverse" title="Array.prototype.reverse ( )"><span class="secnum">22.1.3.21</span> Array.prototype.reverse ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.shift" title="Array.prototype.shift ( )"><span class="secnum">22.1.3.22</span> Array.prototype.shift ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.slice" title="Array.prototype.slice (start, end)"><span class="secnum">22.1.3.23</span> Array.prototype.slice (<var>start</var>, <var>end</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.some" title="Array.prototype.some ( callbackfn [ , thisArg ] )"><span class="secnum">22.1.3.24</span> Array.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-array.prototype.sort" title="Array.prototype.sort (comparefn)"><span class="secnum">22.1.3.25</span> Array.prototype.sort (<var>comparefn</var>)</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-sortcompare" title="Runtime Semantics: SortCompare( x, y )"><span class="secnum">22.1.3.25.1</span> RS: SortCompare( <var>x</var>, <var>y</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.splice" title="Array.prototype.splice (start, deleteCount, ...items )"><span class="secnum">22.1.3.26</span> Array.prototype.splice (<var>start</var>, <var>deleteCount</var>, ...<var>items</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.tolocalestring" title="Array.prototype.toLocaleString ( [ reserved1 [ , reserved2 ] ] )"><span class="secnum">22.1.3.27</span> Array.prototype.toLocaleString ( [ <var>reserved1</var> [ , <var>reserved2</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.tostring" title="Array.prototype.toString ( )"><span class="secnum">22.1.3.28</span> Array.prototype.toString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.unshift" title="Array.prototype.unshift ( ...items )"><span class="secnum">22.1.3.29</span> Array.prototype.unshift ( ...<var>items</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype.values" title="Array.prototype.values ( )"><span class="secnum">22.1.3.30</span> Array.prototype.values ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype-@@iterator" title="Array.prototype [ @@iterator ] ( )"><span class="secnum">22.1.3.31</span> Array.prototype [ @@iterator ] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-array.prototype-@@unscopables" title="Array.prototype [ @@unscopables ]"><span class="secnum">22.1.3.32</span> Array.prototype [ @@unscopables ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-array-instances" title="Properties of Array Instances"><span class="secnum">22.1.4</span> Properties of Array Instances</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-properties-of-array-instances-length" title="length"><span class="secnum">22.1.4.1</span> length</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-array-iterator-objects" title="Array Iterator Objects"><span class="secnum">22.1.5</span> Array Iterator Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-createarrayiterator" title="CreateArrayIterator Abstract Operation"><span class="secnum">22.1.5.1</span> CreateArrayIterator Abstract Operation</a></li><li><span class="item-toggle">â¢</span><a href="#sec-%arrayiteratorprototype%-object" title="The %ArrayIteratorPrototype% Object"><span class="secnum">22.1.5.2</span> The %ArrayIteratorPrototype% Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-%arrayiteratorprototype%.next" title="%ArrayIteratorPrototype%.next( )"><span class="secnum">22.1.5.2.1</span> %ArrayIteratorPrototype%.next( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%arrayiteratorprototype%-@@tostringtag" title="%ArrayIteratorPrototype% [ @@toStringTag ]"><span class="secnum">22.1.5.2.2</span> %ArrayIteratorPrototype% [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-array-iterator-instances" title="Properties of Array Iterator Instances"><span class="secnum">22.1.5.3</span> Properties of Array Iterator Instances</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-typedarray-objects" title="TypedArray Objects"><span class="secnum">22.2</span> TypedArray Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-%typedarray%-intrinsic-object" title="The %TypedArray% Intrinsic Object"><span class="secnum">22.2.1</span> The %TypedArray% Intrinsic Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%" title="%TypedArray%()"><span class="secnum">22.2.1.1</span> %TypedArray%()</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-%typedarray%-intrinsic-object" title="Properties of the %TypedArray% Intrinsic Object"><span class="secnum">22.2.2</span> Properties of the %TypedArray% Intrinsic Object</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-%typedarray%.from" title="%TypedArray%.from ( source [ , mapfn [ , thisArg ] ] )"><span class="secnum">22.2.2.1</span> %TypedArray%.from ( <var>source</var> [ , <var>mapfn</var> [ , <var>thisArg</var> ] ] )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-iterabletolist" title="Runtime Semantics: IterableToList( items, method )"><span class="secnum">22.2.2.1.1</span> RS: IterableToList( <var>items</var>, <var>method</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.of" title="%TypedArray%.of ( ...items )"><span class="secnum">22.2.2.2</span> %TypedArray%.of ( ...<var>items</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype" title="%TypedArray%.prototype"><span class="secnum">22.2.2.3</span> %TypedArray%.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-%typedarray%-@@species" title="get %TypedArray% [ @@species ]"><span class="secnum">22.2.2.4</span> get %TypedArray% [ @@species ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-%typedarrayprototype%-object" title="Properties of the %TypedArrayPrototype% Object"><span class="secnum">22.2.3</span> Properties of the %TypedArrayPrototype% Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-get-%typedarray%.prototype.buffer" title="get %TypedArray%.prototype.buffer"><span class="secnum">22.2.3.1</span> get %TypedArray%.prototype.buffer</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-%typedarray%.prototype.bytelength" title="get %TypedArray%.prototype.byteLength"><span class="secnum">22.2.3.2</span> get %TypedArray%.prototype.byteLength</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-%typedarray%.prototype.byteoffset" title="get %TypedArray%.prototype.byteOffset"><span class="secnum">22.2.3.3</span> get %TypedArray%.prototype.byteOffset</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.constructor" title="%TypedArray%.prototype.constructor"><span class="secnum">22.2.3.4</span> %TypedArray%.prototype.constructor</a></li><li><span class="item-toggle">â¢</span><a href="#sec-%typedarray%.prototype.copywithin" title="%TypedArray%.prototype.copyWithin (target, start [ , end ] )"><span class="secnum">22.2.3.5</span> %TypedArray%.prototype.copyWithin (<var>target</var>, <var>start</var> [ , <var>end</var> ] )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-validatetypedarray" title="Runtime Semantics: ValidateTypedArray ( O )"><span class="secnum">22.2.3.5.1</span> RS: ValidateTypedArray ( <var>O</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.entries" title="%TypedArray%.prototype.entries ( )"><span class="secnum">22.2.3.6</span> %TypedArray%.prototype.entries ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.every" title="%TypedArray%.prototype.every ( callbackfn [ , thisArg ] )"><span class="secnum">22.2.3.7</span> %TypedArray%.prototype.every ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.fill" title="%TypedArray%.prototype.fill (value [ , start [ , end ] ] )"><span class="secnum">22.2.3.8</span> %TypedArray%.prototype.fill (<var>value</var> [ , <var>start</var> [ , <var>end</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.filter" title="%TypedArray%.prototype.filter ( callbackfn [ , thisArg ] )"><span class="secnum">22.2.3.9</span> %TypedArray%.prototype.filter ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.find" title="%TypedArray%.prototype.find (predicate [ , thisArg ] )"><span class="secnum">22.2.3.10</span> %TypedArray%.prototype.find (<var>predicate</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.findindex" title="%TypedArray%.prototype.findIndex ( predicate [ , thisArg ] )"><span class="secnum">22.2.3.11</span> %TypedArray%.prototype.findIndex ( <var>predicate</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.foreach" title="%TypedArray%.prototype.forEach ( callbackfn [ , thisArg ] )"><span class="secnum">22.2.3.12</span> %TypedArray%.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.includes" title="%TypedArray%.prototype.includes ( searchElement [ , fromIndex ] )"><span class="secnum">22.2.3.13</span> %TypedArray%.prototype.includes ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.indexof" title="%TypedArray%.prototype.indexOf (searchElement [ , fromIndex ] )"><span class="secnum">22.2.3.14</span> %TypedArray%.prototype.indexOf (<var>searchElement</var> [ , <var>fromIndex</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.join" title="%TypedArray%.prototype.join ( separator )"><span class="secnum">22.2.3.15</span> %TypedArray%.prototype.join ( <var>separator</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.keys" title="%TypedArray%.prototype.keys ( )"><span class="secnum">22.2.3.16</span> %TypedArray%.prototype.keys ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.lastindexof" title="%TypedArray%.prototype.lastIndexOf ( searchElement [ , fromIndex ] )"><span class="secnum">22.2.3.17</span> %TypedArray%.prototype.lastIndexOf ( <var>searchElement</var> [ , <var>fromIndex</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-%typedarray%.prototype.length" title="get %TypedArray%.prototype.length"><span class="secnum">22.2.3.18</span> get %TypedArray%.prototype.length</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.map" title="%TypedArray%.prototype.map ( callbackfn [ , thisArg ] )"><span class="secnum">22.2.3.19</span> %TypedArray%.prototype.map ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.reduce" title="%TypedArray%.prototype.reduce ( callbackfn [ , initialValue ] )"><span class="secnum">22.2.3.20</span> %TypedArray%.prototype.reduce ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.reduceright" title="%TypedArray%.prototype.reduceRight ( callbackfn [ , initialValue ] )"><span class="secnum">22.2.3.21</span> %TypedArray%.prototype.reduceRight ( <var>callbackfn</var> [ , <var>initialValue</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.reverse" title="%TypedArray%.prototype.reverse ( )"><span class="secnum">22.2.3.22</span> %TypedArray%.prototype.reverse ( )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-%typedarray%.prototype.set-overloaded-offset" title="%TypedArray%.prototype.set ( overloaded [ , offset ])"><span class="secnum">22.2.3.23</span> %TypedArray%.prototype.set ( <var>overloaded</var> [ , <var>offset</var> ])</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.set-array-offset" title="%TypedArray%.prototype.set (array [ , offset ] )"><span class="secnum">22.2.3.23.1</span> %TypedArray%.prototype.set (<var>array</var> [ , <var>offset</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.set-typedarray-offset" title="%TypedArray%.prototype.set(typedArray [ , offset ] )"><span class="secnum">22.2.3.23.2</span> %TypedArray%.prototype.set(<var>typedArray</var> [ , <var>offset</var> ] )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.slice" title="%TypedArray%.prototype.slice ( start, end )"><span class="secnum">22.2.3.24</span> %TypedArray%.prototype.slice ( <var>start</var>, <var>end</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.some" title="%TypedArray%.prototype.some ( callbackfn [ , thisArg ] )"><span class="secnum">22.2.3.25</span> %TypedArray%.prototype.some ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.sort" title="%TypedArray%.prototype.sort ( comparefn )"><span class="secnum">22.2.3.26</span> %TypedArray%.prototype.sort ( <var>comparefn</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.subarray" title="%TypedArray%.prototype.subarray( begin, end )"><span class="secnum">22.2.3.27</span> %TypedArray%.prototype.subarray( <var>begin</var>, <var>end</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.tolocalestring" title="%TypedArray%.prototype.toLocaleString ([ reserved1 [ , reserved2 ] ])"><span class="secnum">22.2.3.28</span> %TypedArray%.prototype.toLocaleString ([ <var>reserved1</var> [ , <var>reserved2</var> ] ])</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.tostring" title="%TypedArray%.prototype.toString ( )"><span class="secnum">22.2.3.29</span> %TypedArray%.prototype.toString ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype.values" title="%TypedArray%.prototype.values ( )"><span class="secnum">22.2.3.30</span> %TypedArray%.prototype.values ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%typedarray%.prototype-@@iterator" title="%TypedArray%.prototype [ @@iterator ] ( )"><span class="secnum">22.2.3.31</span> %TypedArray%.prototype [ @@iterator ] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-%typedarray%.prototype-@@tostringtag" title="get %TypedArray%.prototype [ @@toStringTag ]"><span class="secnum">22.2.3.32</span> get %TypedArray%.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-typedarray-constructors" title="The TypedArray Constructors"><span class="secnum">22.2.4</span> The <var>TypedArray</var> Constructors</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-typedarray" title="TypedArray ( )"><span class="secnum">22.2.4.1</span> <var>TypedArray</var> ( )</a></li><li><span class="item-toggle">â¢</span><a href="#sec-typedarray-length" title="TypedArray ( length )"><span class="secnum">22.2.4.2</span> <var>TypedArray</var> ( <var>length</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-allocatetypedarray" title="Runtime Semantics: AllocateTypedArray (constructorName, newTarget, defaultProto [ , length ])"><span class="secnum">22.2.4.2.1</span> RS: AllocateTypedArray (<var>constructorName</var>, <var>newTarget</var>, <var>defaultProto</var> [ , <var>length</var> ])</a></li><li><span class="item-toggle-none"></span><a href="#sec-allocatetypedarraybuffer" title="Runtime Semantics: AllocateTypedArrayBuffer ( O, length )"><span class="secnum">22.2.4.2.2</span> RS: AllocateTypedArrayBuffer ( <var>O</var>, <var>length</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-typedarray-typedarray" title="TypedArray ( typedArray )"><span class="secnum">22.2.4.3</span> <var>TypedArray</var> ( <var>typedArray</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-typedarray-object" title="TypedArray ( object )"><span class="secnum">22.2.4.4</span> <var>TypedArray</var> ( <var>object</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-typedarray-buffer-byteoffset-length" title="TypedArray ( buffer [ , byteOffset [ , length ] ] )"><span class="secnum">22.2.4.5</span> <var>TypedArray</var> ( <var>buffer</var> [ , <var>byteOffset</var> [ , <var>length</var> ] ] )</a></li><li><span class="item-toggle-none"></span><a href="#typedarray-create" title="TypedArrayCreate ( constructor, argumentList )"><span class="secnum">22.2.4.6</span> TypedArrayCreate ( <var>constructor</var>, <var>argumentList</var> )</a></li><li><span class="item-toggle-none"></span><a href="#typedarray-species-create" title="TypedArraySpeciesCreate ( exemplar, argumentList )"><span class="secnum">22.2.4.7</span> TypedArraySpeciesCreate ( <var>exemplar</var>, <var>argumentList</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-typedarray-constructors" title="Properties of the TypedArray Constructors"><span class="secnum">22.2.5</span> Properties of the <var>TypedArray</var> Constructors</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-typedarray.bytes_per_element" title="TypedArray.BYTES_PER_ELEMENT"><span class="secnum">22.2.5.1</span> <var>TypedArray</var>.BYTES_PER_ELEMENT</a></li><li><span class="item-toggle-none"></span><a href="#sec-typedarray.prototype" title="TypedArray.prototype"><span class="secnum">22.2.5.2</span> <var>TypedArray</var>.prototype</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-typedarray-prototype-objects" title="Properties of TypedArray Prototype Objects"><span class="secnum">22.2.6</span> Properties of <var>TypedArray</var> Prototype Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-typedarray.prototype.bytes_per_element" title="TypedArray.prototype.BYTES_PER_ELEMENT"><span class="secnum">22.2.6.1</span> <var>TypedArray</var>.prototype.BYTES_PER_ELEMENT</a></li><li><span class="item-toggle-none"></span><a href="#sec-typedarray.prototype.constructor" title="TypedArray.prototype.constructor"><span class="secnum">22.2.6.2</span> <var>TypedArray</var>.prototype.constructor</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-typedarray-instances" title="Properties of TypedArray Instances"><span class="secnum">22.2.7</span> Properties of <var>TypedArray</var> Instances</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-keyed-collection" title="Keyed Collection"><span class="secnum">23</span> Keyed Collection</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-map-objects" title="Map Objects"><span class="secnum">23.1</span> Map Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-map-constructor" title="The Map Constructor"><span class="secnum">23.1.1</span> The Map Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-map-iterable" title="Map ( [ iterable ] )"><span class="secnum">23.1.1.1</span> Map ( [ <var>iterable</var> ] )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-map-constructor" title="Properties of the Map Constructor"><span class="secnum">23.1.2</span> Properties of the Map Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-map.prototype" title="Map.prototype"><span class="secnum">23.1.2.1</span> Map.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-map-@@species" title="get Map [ @@species ]"><span class="secnum">23.1.2.2</span> get Map [ @@species ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-map-prototype-object" title="Properties of the Map Prototype Object"><span class="secnum">23.1.3</span> Properties of the Map Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-map.prototype.clear" title="Map.prototype.clear ( )"><span class="secnum">23.1.3.1</span> Map.prototype.clear ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype.constructor" title="Map.prototype.constructor"><span class="secnum">23.1.3.2</span> Map.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype.delete" title="Map.prototype.delete ( key )"><span class="secnum">23.1.3.3</span> Map.prototype.delete ( <var>key</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype.entries" title="Map.prototype.entries ( )"><span class="secnum">23.1.3.4</span> Map.prototype.entries ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype.foreach" title="Map.prototype.forEach ( callbackfn [ , thisArg ] )"><span class="secnum">23.1.3.5</span> Map.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype.get" title="Map.prototype.get ( key )"><span class="secnum">23.1.3.6</span> Map.prototype.get ( <var>key</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype.has" title="Map.prototype.has ( key )"><span class="secnum">23.1.3.7</span> Map.prototype.has ( <var>key</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype.keys" title="Map.prototype.keys ( )"><span class="secnum">23.1.3.8</span> Map.prototype.keys ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype.set" title="Map.prototype.set ( key, value )"><span class="secnum">23.1.3.9</span> Map.prototype.set ( <var>key</var>, <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-map.prototype.size" title="get Map.prototype.size"><span class="secnum">23.1.3.10</span> get Map.prototype.size</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype.values" title="Map.prototype.values ( )"><span class="secnum">23.1.3.11</span> Map.prototype.values ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype-@@iterator" title="Map.prototype [ @@iterator ] ( )"><span class="secnum">23.1.3.12</span> Map.prototype [ @@iterator ] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-map.prototype-@@tostringtag" title="Map.prototype [ @@toStringTag ]"><span class="secnum">23.1.3.13</span> Map.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-map-instances" title="Properties of Map Instances"><span class="secnum">23.1.4</span> Properties of Map Instances</a></li><li><span class="item-toggle">â¢</span><a href="#sec-map-iterator-objects" title="Map Iterator Objects"><span class="secnum">23.1.5</span> Map Iterator Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-createmapiterator" title="CreateMapIterator Abstract Operation"><span class="secnum">23.1.5.1</span> CreateMapIterator Abstract Operation</a></li><li><span class="item-toggle">â¢</span><a href="#sec-%mapiteratorprototype%-object" title="The %MapIteratorPrototype% Object"><span class="secnum">23.1.5.2</span> The %MapIteratorPrototype% Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-%mapiteratorprototype%.next" title="%MapIteratorPrototype%.next ( )"><span class="secnum">23.1.5.2.1</span> %MapIteratorPrototype%.next ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%mapiteratorprototype%-@@tostringtag" title="%MapIteratorPrototype% [ @@toStringTag ]"><span class="secnum">23.1.5.2.2</span> %MapIteratorPrototype% [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-map-iterator-instances" title="Properties of Map Iterator Instances"><span class="secnum">23.1.5.3</span> Properties of Map Iterator Instances</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-set-objects" title="Set Objects"><span class="secnum">23.2</span> Set Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-set-constructor" title="The Set Constructor"><span class="secnum">23.2.1</span> The Set Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-set-iterable" title="Set ( [ iterable ] )"><span class="secnum">23.2.1.1</span> Set ( [ <var>iterable</var> ] )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-set-constructor" title="Properties of the Set Constructor"><span class="secnum">23.2.2</span> Properties of the Set Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-set.prototype" title="Set.prototype"><span class="secnum">23.2.2.1</span> Set.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-set-@@species" title="get Set [ @@species ]"><span class="secnum">23.2.2.2</span> get Set [ @@species ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-set-prototype-object" title="Properties of the Set Prototype Object"><span class="secnum">23.2.3</span> Properties of the Set Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-set.prototype.add" title="Set.prototype.add ( value )"><span class="secnum">23.2.3.1</span> Set.prototype.add ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-set.prototype.clear" title="Set.prototype.clear ( )"><span class="secnum">23.2.3.2</span> Set.prototype.clear ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-set.prototype.constructor" title="Set.prototype.constructor"><span class="secnum">23.2.3.3</span> Set.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-set.prototype.delete" title="Set.prototype.delete ( value )"><span class="secnum">23.2.3.4</span> Set.prototype.delete ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-set.prototype.entries" title="Set.prototype.entries ( )"><span class="secnum">23.2.3.5</span> Set.prototype.entries ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-set.prototype.foreach" title="Set.prototype.forEach ( callbackfn [ , thisArg ] )"><span class="secnum">23.2.3.6</span> Set.prototype.forEach ( <var>callbackfn</var> [ , <var>thisArg</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-set.prototype.has" title="Set.prototype.has ( value )"><span class="secnum">23.2.3.7</span> Set.prototype.has ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-set.prototype.keys" title="Set.prototype.keys ( )"><span class="secnum">23.2.3.8</span> Set.prototype.keys ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-set.prototype.size" title="get Set.prototype.size"><span class="secnum">23.2.3.9</span> get Set.prototype.size</a></li><li><span class="item-toggle-none"></span><a href="#sec-set.prototype.values" title="Set.prototype.values ( )"><span class="secnum">23.2.3.10</span> Set.prototype.values ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-set.prototype-@@iterator" title="Set.prototype [ @@iterator ] ( )"><span class="secnum">23.2.3.11</span> Set.prototype [ @@iterator ] ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-set.prototype-@@tostringtag" title="Set.prototype [ @@toStringTag ]"><span class="secnum">23.2.3.12</span> Set.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-set-instances" title="Properties of Set Instances"><span class="secnum">23.2.4</span> Properties of Set Instances</a></li><li><span class="item-toggle">â¢</span><a href="#sec-set-iterator-objects" title="Set Iterator Objects"><span class="secnum">23.2.5</span> Set Iterator Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-createsetiterator" title="CreateSetIterator Abstract Operation"><span class="secnum">23.2.5.1</span> CreateSetIterator Abstract Operation</a></li><li><span class="item-toggle">â¢</span><a href="#sec-%setiteratorprototype%-object" title="The %SetIteratorPrototype% Object"><span class="secnum">23.2.5.2</span> The %SetIteratorPrototype% Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-%setiteratorprototype%.next" title="%SetIteratorPrototype%.next ( )"><span class="secnum">23.2.5.2.1</span> %SetIteratorPrototype%.next ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-%setiteratorprototype%-@@tostringtag" title="%SetIteratorPrototype% [ @@toStringTag ]"><span class="secnum">23.2.5.2.2</span> %SetIteratorPrototype% [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-set-iterator-instances" title="Properties of Set Iterator Instances"><span class="secnum">23.2.5.3</span> Properties of Set Iterator Instances</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-weakmap-objects" title="WeakMap Objects"><span class="secnum">23.3</span> WeakMap Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-weakmap-constructor" title="The WeakMap Constructor"><span class="secnum">23.3.1</span> The WeakMap Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-weakmap-iterable" title="WeakMap ( [ iterable ] )"><span class="secnum">23.3.1.1</span> WeakMap ( [ <var>iterable</var> ] )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-weakmap-constructor" title="Properties of the WeakMap Constructor"><span class="secnum">23.3.2</span> Properties of the WeakMap Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-weakmap.prototype" title="WeakMap.prototype"><span class="secnum">23.3.2.1</span> WeakMap.prototype</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-weakmap-prototype-object" title="Properties of the WeakMap Prototype Object"><span class="secnum">23.3.3</span> Properties of the WeakMap Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-weakmap.prototype.constructor" title="WeakMap.prototype.constructor"><span class="secnum">23.3.3.1</span> WeakMap.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-weakmap.prototype.delete" title="WeakMap.prototype.delete ( key )"><span class="secnum">23.3.3.2</span> WeakMap.prototype.delete ( <var>key</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-weakmap.prototype.get" title="WeakMap.prototype.get ( key )"><span class="secnum">23.3.3.3</span> WeakMap.prototype.get ( <var>key</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-weakmap.prototype.has" title="WeakMap.prototype.has ( key )"><span class="secnum">23.3.3.4</span> WeakMap.prototype.has ( <var>key</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-weakmap.prototype.set" title="WeakMap.prototype.set ( key, value )"><span class="secnum">23.3.3.5</span> WeakMap.prototype.set ( <var>key</var>, <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-weakmap.prototype-@@tostringtag" title="WeakMap.prototype [ @@toStringTag ]"><span class="secnum">23.3.3.6</span> WeakMap.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-weakmap-instances" title="Properties of WeakMap Instances"><span class="secnum">23.3.4</span> Properties of WeakMap Instances</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-weakset-objects" title="WeakSet Objects"><span class="secnum">23.4</span> WeakSet Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-weakset-constructor" title="The WeakSet Constructor"><span class="secnum">23.4.1</span> The WeakSet Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-weakset-iterable" title="WeakSet ( [ iterable ] )"><span class="secnum">23.4.1.1</span> WeakSet ( [ <var>iterable</var> ] )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-weakset-constructor" title="Properties of the WeakSet Constructor"><span class="secnum">23.4.2</span> Properties of the WeakSet Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-weakset.prototype" title="WeakSet.prototype"><span class="secnum">23.4.2.1</span> WeakSet.prototype</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-weakset-prototype-object" title="Properties of the WeakSet Prototype Object"><span class="secnum">23.4.3</span> Properties of the WeakSet Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-weakset.prototype.add" title="WeakSet.prototype.add ( value )"><span class="secnum">23.4.3.1</span> WeakSet.prototype.add ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-weakset.prototype.constructor" title="WeakSet.prototype.constructor"><span class="secnum">23.4.3.2</span> WeakSet.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-weakset.prototype.delete" title="WeakSet.prototype.delete ( value )"><span class="secnum">23.4.3.3</span> WeakSet.prototype.delete ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-weakset.prototype.has" title="WeakSet.prototype.has ( value )"><span class="secnum">23.4.3.4</span> WeakSet.prototype.has ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-weakset.prototype-@@tostringtag" title="WeakSet.prototype [ @@toStringTag ]"><span class="secnum">23.4.3.5</span> WeakSet.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-weakset-instances" title="Properties of WeakSet Instances"><span class="secnum">23.4.4</span> Properties of WeakSet Instances</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-structured-data" title="Structured Data"><span class="secnum">24</span> Structured Data</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-arraybuffer-objects" title="ArrayBuffer Objects"><span class="secnum">24.1</span> ArrayBuffer Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-abstract-operations-for-arraybuffer-objects" title="Abstract Operations For ArrayBuffer Objects"><span class="secnum">24.1.1</span> Abstract Operations For ArrayBuffer Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-allocatearraybuffer" title="AllocateArrayBuffer ( constructor, byteLength )"><span class="secnum">24.1.1.1</span> AllocateArrayBuffer ( <var>constructor</var>, <var>byteLength</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-isdetachedbuffer" title="IsDetachedBuffer ( arrayBuffer )"><span class="secnum">24.1.1.2</span> IsDetachedBuffer ( <var>arrayBuffer</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-detacharraybuffer" title="DetachArrayBuffer ( arrayBuffer )"><span class="secnum">24.1.1.3</span> DetachArrayBuffer ( <var>arrayBuffer</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-clonearraybuffer" title="CloneArrayBuffer ( srcBuffer, srcByteOffset, srcLength [ , cloneConstructor ] )"><span class="secnum">24.1.1.4</span> CloneArrayBuffer ( <var>srcBuffer</var>, <var>srcByteOffset</var>, <var>srcLength</var> [ , <var>cloneConstructor</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-getvaluefrombuffer" title="GetValueFromBuffer ( arrayBuffer, byteIndex, type [ , isLittleEndian ] )"><span class="secnum">24.1.1.5</span> GetValueFromBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var> [ , <var>isLittleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-setvalueinbuffer" title="SetValueInBuffer ( arrayBuffer, byteIndex, type, value [ , isLittleEndian ] )"><span class="secnum">24.1.1.6</span> SetValueInBuffer ( <var>arrayBuffer</var>, <var>byteIndex</var>, <var>type</var>, <var>value</var> [ , <var>isLittleEndian</var> ] )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-arraybuffer-constructor" title="The ArrayBuffer Constructor"><span class="secnum">24.1.2</span> The ArrayBuffer Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-arraybuffer-length" title="ArrayBuffer ( [ length ] )"><span class="secnum">24.1.2.1</span> ArrayBuffer ( [ <var>length</var> ] )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-arraybuffer-constructor" title="Properties of the ArrayBuffer Constructor"><span class="secnum">24.1.3</span> Properties of the ArrayBuffer Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-arraybuffer.isview" title="ArrayBuffer.isView ( arg )"><span class="secnum">24.1.3.1</span> ArrayBuffer.isView ( <var>arg</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-arraybuffer.prototype" title="ArrayBuffer.prototype"><span class="secnum">24.1.3.2</span> ArrayBuffer.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-arraybuffer-@@species" title="get ArrayBuffer [ @@species ]"><span class="secnum">24.1.3.3</span> get ArrayBuffer [ @@species ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-arraybuffer-prototype-object" title="Properties of the ArrayBuffer Prototype Object"><span class="secnum">24.1.4</span> Properties of the ArrayBuffer Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-get-arraybuffer.prototype.bytelength" title="get ArrayBuffer.prototype.byteLength"><span class="secnum">24.1.4.1</span> get ArrayBuffer.prototype.byteLength</a></li><li><span class="item-toggle-none"></span><a href="#sec-arraybuffer.prototype.constructor" title="ArrayBuffer.prototype.constructor"><span class="secnum">24.1.4.2</span> ArrayBuffer.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-arraybuffer.prototype.slice" title="ArrayBuffer.prototype.slice ( start, end )"><span class="secnum">24.1.4.3</span> ArrayBuffer.prototype.slice ( <var>start</var>, <var>end</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-arraybuffer.prototype-@@tostringtag" title="ArrayBuffer.prototype [ @@toStringTag ]"><span class="secnum">24.1.4.4</span> ArrayBuffer.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-the-arraybuffer-instances" title="Properties of the ArrayBuffer Instances"><span class="secnum">24.1.5</span> Properties of the ArrayBuffer Instances</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-dataview-objects" title="DataView Objects"><span class="secnum">24.2</span> DataView Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-abstract-operations-for-dataview-objects" title="Abstract Operations For DataView Objects"><span class="secnum">24.2.1</span> Abstract Operations For DataView Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-getviewvalue" title="GetViewValue ( view, requestIndex, isLittleEndian, type )"><span class="secnum">24.2.1.1</span> GetViewValue ( <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, <var>type</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-setviewvalue" title="SetViewValue ( view, requestIndex, isLittleEndian, type, value )"><span class="secnum">24.2.1.2</span> SetViewValue ( <var>view</var>, <var>requestIndex</var>, <var>isLittleEndian</var>, <var>type</var>, <var>value</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-dataview-constructor" title="The DataView Constructor"><span class="secnum">24.2.2</span> The DataView Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-dataview-buffer-byteoffset-bytelength" title="DataView ( buffer [ , byteOffset [ , byteLength  ] ] )"><span class="secnum">24.2.2.1</span> DataView ( <var>buffer</var> [ , <var>byteOffset</var> [ , <var>byteLength</var>  ] ] )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-dataview-constructor" title="Properties of the DataView Constructor"><span class="secnum">24.2.3</span> Properties of the DataView Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype" title="DataView.prototype"><span class="secnum">24.2.3.1</span> DataView.prototype</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-dataview-prototype-object" title="Properties of the DataView Prototype Object"><span class="secnum">24.2.4</span> Properties of the DataView Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-get-dataview.prototype.buffer" title="get DataView.prototype.buffer"><span class="secnum">24.2.4.1</span> get DataView.prototype.buffer</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-dataview.prototype.bytelength" title="get DataView.prototype.byteLength"><span class="secnum">24.2.4.2</span> get DataView.prototype.byteLength</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-dataview.prototype.byteoffset" title="get DataView.prototype.byteOffset"><span class="secnum">24.2.4.3</span> get DataView.prototype.byteOffset</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.constructor" title="DataView.prototype.constructor"><span class="secnum">24.2.4.4</span> DataView.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.getfloat32" title="DataView.prototype.getFloat32 ( byteOffset [ , littleEndian ] )"><span class="secnum">24.2.4.5</span> DataView.prototype.getFloat32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.getfloat64" title="DataView.prototype.getFloat64 ( byteOffset [ , littleEndian ] )"><span class="secnum">24.2.4.6</span> DataView.prototype.getFloat64 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.getint8" title="DataView.prototype.getInt8 ( byteOffset )"><span class="secnum">24.2.4.7</span> DataView.prototype.getInt8 ( <var>byteOffset</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.getint16" title="DataView.prototype.getInt16 ( byteOffset [ , littleEndian ] )"><span class="secnum">24.2.4.8</span> DataView.prototype.getInt16 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.getint32" title="DataView.prototype.getInt32 ( byteOffset [ , littleEndian ] )"><span class="secnum">24.2.4.9</span> DataView.prototype.getInt32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.getuint8" title="DataView.prototype.getUint8 ( byteOffset )"><span class="secnum">24.2.4.10</span> DataView.prototype.getUint8 ( <var>byteOffset</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.getuint16" title="DataView.prototype.getUint16 ( byteOffset [ , littleEndian ] )"><span class="secnum">24.2.4.11</span> DataView.prototype.getUint16 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.getuint32" title="DataView.prototype.getUint32 ( byteOffset [ , littleEndian ] )"><span class="secnum">24.2.4.12</span> DataView.prototype.getUint32 ( <var>byteOffset</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.setfloat32" title="DataView.prototype.setFloat32 ( byteOffset, value [ , littleEndian ] )"><span class="secnum">24.2.4.13</span> DataView.prototype.setFloat32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.setfloat64" title="DataView.prototype.setFloat64 ( byteOffset, value [ , littleEndian ] )"><span class="secnum">24.2.4.14</span> DataView.prototype.setFloat64 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.setint8" title="DataView.prototype.setInt8 ( byteOffset, value )"><span class="secnum">24.2.4.15</span> DataView.prototype.setInt8 ( <var>byteOffset</var>, <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.setint16" title="DataView.prototype.setInt16 ( byteOffset, value [ , littleEndian ] )"><span class="secnum">24.2.4.16</span> DataView.prototype.setInt16 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.setint32" title="DataView.prototype.setInt32 ( byteOffset, value [ , littleEndian ] )"><span class="secnum">24.2.4.17</span> DataView.prototype.setInt32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.setuint8" title="DataView.prototype.setUint8 ( byteOffset, value )"><span class="secnum">24.2.4.18</span> DataView.prototype.setUint8 ( <var>byteOffset</var>, <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.setuint16" title="DataView.prototype.setUint16 ( byteOffset, value [ , littleEndian ] )"><span class="secnum">24.2.4.19</span> DataView.prototype.setUint16 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype.setuint32" title="DataView.prototype.setUint32 ( byteOffset, value [ , littleEndian ] )"><span class="secnum">24.2.4.20</span> DataView.prototype.setUint32 ( <var>byteOffset</var>, <var>value</var> [ , <var>littleEndian</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-dataview.prototype-@@tostringtag" title="DataView.prototype [ @@toStringTag ]"><span class="secnum">24.2.4.21</span> DataView.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-dataview-instances" title="Properties of DataView Instances"><span class="secnum">24.2.5</span> Properties of DataView Instances</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-json-object" title="The JSON Object"><span class="secnum">24.3</span> The JSON Object</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-json.parse" title="JSON.parse ( text [ , reviver ] )"><span class="secnum">24.3.1</span> JSON.parse ( <var>text</var> [ , <var>reviver</var> ] )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-internalizejsonproperty" title="Runtime Semantics: InternalizeJSONProperty( holder, name)"><span class="secnum">24.3.1.1</span> RS: InternalizeJSONProperty( <var>holder</var>, <var>name</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-json.stringify" title="JSON.stringify ( value [ , replacer [ , space ] ] )"><span class="secnum">24.3.2</span> JSON.stringify ( <var>value</var> [ , <var>replacer</var> [ , <var>space</var> ] ] )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-serializejsonproperty" title="Runtime Semantics: SerializeJSONProperty ( key, holder )"><span class="secnum">24.3.2.1</span> RS: SerializeJSONProperty ( <var>key</var>, <var>holder</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-quotejsonstring" title="Runtime Semantics: QuoteJSONString ( value )"><span class="secnum">24.3.2.2</span> RS: QuoteJSONString ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-serializejsonobject" title="Runtime Semantics: SerializeJSONObject ( value )"><span class="secnum">24.3.2.3</span> RS: SerializeJSONObject ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-serializejsonarray" title="Runtime Semantics: SerializeJSONArray ( value )"><span class="secnum">24.3.2.4</span> RS: SerializeJSONArray ( <var>value</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-json-@@tostringtag" title="JSON [ @@toStringTag ]"><span class="secnum">24.3.3</span> JSON [ @@toStringTag ]</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-control-abstraction-objects" title="Control Abstraction Objects"><span class="secnum">25</span> Control Abstraction Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-iteration" title="Iteration"><span class="secnum">25.1</span> Iteration</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-common-iteration-interfaces" title="Common Iteration Interfaces"><span class="secnum">25.1.1</span> Common Iteration Interfaces</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-iterable-interface" title="The  Iterable Interface"><span class="secnum">25.1.1.1</span> The  <i>Iterable</i> Interface</a></li><li><span class="item-toggle-none"></span><a href="#sec-iterator-interface" title="The  Iterator Interface"><span class="secnum">25.1.1.2</span> The  <i>Iterator</i> Interface</a></li><li><span class="item-toggle-none"></span><a href="#sec-iteratorresult-interface" title="The IteratorResult Interface"><span class="secnum">25.1.1.3</span> The IteratorResult Interface</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-%iteratorprototype%-object" title="The %IteratorPrototype% Object"><span class="secnum">25.1.2</span> The %IteratorPrototype% Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-%iteratorprototype%-@@iterator" title="%IteratorPrototype% [ @@iterator ] ( )"><span class="secnum">25.1.2.1</span> %IteratorPrototype% [ @@iterator ] ( )</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-generatorfunction-objects" title="GeneratorFunction Objects"><span class="secnum">25.2</span> GeneratorFunction Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-generatorfunction-constructor" title="The GeneratorFunction Constructor"><span class="secnum">25.2.1</span> The GeneratorFunction Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-generatorfunction" title="GeneratorFunction (p1, p2, â¦ , pn, body)"><span class="secnum">25.2.1.1</span> GeneratorFunction (<var>p1</var>, <var>p2</var>, â¦ , <var>pn</var>, <var>body</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-generatorfunction-constructor" title="Properties of the GeneratorFunction Constructor"><span class="secnum">25.2.2</span> Properties of the GeneratorFunction Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-generatorfunction.length" title="GeneratorFunction.length"><span class="secnum">25.2.2.1</span> GeneratorFunction.length</a></li><li><span class="item-toggle-none"></span><a href="#sec-generatorfunction.prototype" title="GeneratorFunction.prototype"><span class="secnum">25.2.2.2</span> GeneratorFunction.prototype</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-generatorfunction-prototype-object" title="Properties of the GeneratorFunction Prototype Object"><span class="secnum">25.2.3</span> Properties of the GeneratorFunction Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-generatorfunction.prototype.constructor" title="GeneratorFunction.prototype.constructor"><span class="secnum">25.2.3.1</span> GeneratorFunction.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-generatorfunction.prototype.prototype" title="GeneratorFunction.prototype.prototype"><span class="secnum">25.2.3.2</span> GeneratorFunction.prototype.prototype</a></li><li><span class="item-toggle-none"></span><a href="#sec-generatorfunction.prototype-@@tostringtag" title="GeneratorFunction.prototype [ @@toStringTag ]"><span class="secnum">25.2.3.3</span> GeneratorFunction.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-generatorfunction-instances" title="GeneratorFunction Instances"><span class="secnum">25.2.4</span> GeneratorFunction Instances</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-generatorfunction-instances-length" title="length"><span class="secnum">25.2.4.1</span> length</a></li><li><span class="item-toggle-none"></span><a href="#sec-generatorfunction-instances-name" title="name"><span class="secnum">25.2.4.2</span> name</a></li><li><span class="item-toggle-none"></span><a href="#sec-generatorfunction-instances-prototype" title="prototype"><span class="secnum">25.2.4.3</span> prototype</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-generator-objects" title="Generator Objects"><span class="secnum">25.3</span> Generator Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-generator-prototype" title="Properties of Generator Prototype"><span class="secnum">25.3.1</span> Properties of Generator Prototype</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-generator.prototype.constructor" title="Generator.prototype.constructor"><span class="secnum">25.3.1.1</span> Generator.prototype.constructor</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator.prototype.next" title="Generator.prototype.next ( value )"><span class="secnum">25.3.1.2</span> Generator.prototype.next ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator.prototype.return" title="Generator.prototype.return ( value )"><span class="secnum">25.3.1.3</span> Generator.prototype.return ( <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator.prototype.throw" title="Generator.prototype.throw ( exception )"><span class="secnum">25.3.1.4</span> Generator.prototype.throw ( <var>exception</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-generator.prototype-@@tostringtag" title="Generator.prototype [ @@toStringTag ]"><span class="secnum">25.3.1.5</span> Generator.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-generator-instances" title="Properties of Generator Instances"><span class="secnum">25.3.2</span> Properties of Generator Instances</a></li><li><span class="item-toggle">â¢</span><a href="#sec-generator-abstract-operations" title="Generator Abstract Operations"><span class="secnum">25.3.3</span> Generator Abstract Operations</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-generatorstart" title="GeneratorStart (generator, generatorBody)"><span class="secnum">25.3.3.1</span> GeneratorStart (<var>generator</var>, <var>generatorBody</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-generatorvalidate" title="GeneratorValidate ( generator )"><span class="secnum">25.3.3.2</span> GeneratorValidate ( <var>generator</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-generatorresume" title="GeneratorResume ( generator, value )"><span class="secnum">25.3.3.3</span> GeneratorResume ( <var>generator</var>, <var>value</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-generatorresumeabrupt" title="GeneratorResumeAbrupt (generator, abruptCompletion)"><span class="secnum">25.3.3.4</span> GeneratorResumeAbrupt (<var>generator</var>, <var>abruptCompletion</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-generatoryield" title="GeneratorYield ( iterNextObj )"><span class="secnum">25.3.3.5</span> GeneratorYield ( <var>iterNextObj</var> )</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-promise-objects" title="Promise Objects"><span class="secnum">25.4</span> Promise Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-promise-abstract-operations" title="Promise Abstract Operations"><span class="secnum">25.4.1</span> Promise Abstract Operations</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-promisecapability-records" title="PromiseCapability Records"><span class="secnum">25.4.1.1</span> PromiseCapability Records</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-ifabruptrejectpromise" title="IfAbruptRejectPromise ( value, capability )"><span class="secnum">25.4.1.1.1</span> IfAbruptRejectPromise ( <var>value</var>, <var>capability</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-promisereaction-records" title="PromiseReaction Records"><span class="secnum">25.4.1.2</span> PromiseReaction Records</a></li><li><span class="item-toggle">â¢</span><a href="#sec-createresolvingfunctions" title="CreateResolvingFunctions ( promise )"><span class="secnum">25.4.1.3</span> CreateResolvingFunctions ( <var>promise</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-promise-reject-functions" title="Promise Reject Functions"><span class="secnum">25.4.1.3.1</span> Promise Reject Functions</a></li><li><span class="item-toggle-none"></span><a href="#sec-promise-resolve-functions" title="Promise Resolve Functions"><span class="secnum">25.4.1.3.2</span> Promise Resolve Functions</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-fulfillpromise" title="FulfillPromise ( promise, value)"><span class="secnum">25.4.1.4</span> FulfillPromise ( <var>promise</var>, <var>value</var>)</a></li><li><span class="item-toggle">â¢</span><a href="#sec-newpromisecapability" title="NewPromiseCapability ( C )"><span class="secnum">25.4.1.5</span> NewPromiseCapability ( <var>C</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-getcapabilitiesexecutor-functions" title="GetCapabilitiesExecutor Functions"><span class="secnum">25.4.1.5.1</span> GetCapabilitiesExecutor Functions</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-ispromise" title="IsPromise ( x )"><span class="secnum">25.4.1.6</span> IsPromise ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-rejectpromise" title="RejectPromise ( promise, reason )"><span class="secnum">25.4.1.7</span> RejectPromise ( <var>promise</var>, <var>reason</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-triggerpromisereactions" title="TriggerPromiseReactions ( reactions, argument )"><span class="secnum">25.4.1.8</span> TriggerPromiseReactions ( <var>reactions</var>, <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-host-promise-rejection-tracker" title="HostPromiseRejectionTracker ( promise, operation )"><span class="secnum">25.4.1.9</span> HostPromiseRejectionTracker ( <var>promise</var>, <var>operation</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-promise-jobs" title="Promise Jobs"><span class="secnum">25.4.2</span> Promise Jobs</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-promisereactionjob" title="PromiseReactionJob ( reaction, argument )"><span class="secnum">25.4.2.1</span> PromiseReactionJob ( <var>reaction</var>, <var>argument</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-promiseresolvethenablejob" title="PromiseResolveThenableJob ( promiseToResolve, thenable, then)"><span class="secnum">25.4.2.2</span> PromiseResolveThenableJob ( <var>promiseToResolve</var>, <var>thenable</var>, <var>then</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-promise-constructor" title="The Promise Constructor"><span class="secnum">25.4.3</span> The Promise Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-promise-executor" title="Promise ( executor )"><span class="secnum">25.4.3.1</span> Promise ( <var>executor</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-promise-constructor" title="Properties of the Promise Constructor"><span class="secnum">25.4.4</span> Properties of the Promise Constructor</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-promise.all" title="Promise.all ( iterable )"><span class="secnum">25.4.4.1</span> Promise.all ( <var>iterable</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-performpromiseall" title="Runtime Semantics: PerformPromiseAll( iteratorRecord, constructor, resultCapability )"><span class="secnum">25.4.4.1.1</span> RS: PerformPromiseAll( <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-promise.all-resolve-element-functions" title="Promise.all Resolve Element Functions"><span class="secnum">25.4.4.1.2</span> <code>Promise.all</code> Resolve Element Functions</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-promise.prototype" title="Promise.prototype"><span class="secnum">25.4.4.2</span> Promise.prototype</a></li><li><span class="item-toggle">â¢</span><a href="#sec-promise.race" title="Promise.race ( iterable )"><span class="secnum">25.4.4.3</span> Promise.race ( <var>iterable</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-performpromiserace" title="Runtime Semantics: PerformPromiseRace ( iteratorRecord, constructor, resultCapability )"><span class="secnum">25.4.4.3.1</span> RS: PerformPromiseRace ( <var>iteratorRecord</var>, <var>constructor</var>, <var>resultCapability</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-promise.reject" title="Promise.reject ( r )"><span class="secnum">25.4.4.4</span> Promise.reject ( <var>r</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-promise.resolve" title="Promise.resolve ( x )"><span class="secnum">25.4.4.5</span> Promise.resolve ( <var>x</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-get-promise-@@species" title="get Promise [ @@species ]"><span class="secnum">25.4.4.6</span> get Promise [ @@species ]</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-promise-prototype-object" title="Properties of the Promise Prototype Object"><span class="secnum">25.4.5</span> Properties of the Promise Prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-promise.prototype.catch" title="Promise.prototype.catch ( onRejected )"><span class="secnum">25.4.5.1</span> Promise.prototype.catch ( <var>onRejected</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-promise.prototype.constructor" title="Promise.prototype.constructor"><span class="secnum">25.4.5.2</span> Promise.prototype.constructor</a></li><li><span class="item-toggle">â¢</span><a href="#sec-promise.prototype.then" title="Promise.prototype.then ( onFulfilled, onRejected )"><span class="secnum">25.4.5.3</span> Promise.prototype.then ( <var>onFulfilled</var>, <var>onRejected</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-performpromisethen" title="PerformPromiseThen ( promise, onFulfilled, onRejected, resultCapability )"><span class="secnum">25.4.5.3.1</span> PerformPromiseThen ( <var>promise</var>, <var>onFulfilled</var>, <var>onRejected</var>, <var>resultCapability</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-promise.prototype-@@tostringtag" title="Promise.prototype [ @@toStringTag ]"><span class="secnum">25.4.5.4</span> Promise.prototype [ @@toStringTag ]</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-properties-of-promise-instances" title="Properties of Promise Instances"><span class="secnum">25.4.6</span> Properties of Promise Instances</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-reflection" title="Reflection"><span class="secnum">26</span> Reflection</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-reflect-object" title="The Reflect Object"><span class="secnum">26.1</span> The Reflect Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-reflect.apply" title="Reflect.apply ( target, thisArgument, argumentsList )"><span class="secnum">26.1.1</span> Reflect.apply ( <var>target</var>, <var>thisArgument</var>, <var>argumentsList</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.construct" title="Reflect.construct ( target, argumentsList [ , newTarget ] )"><span class="secnum">26.1.2</span> Reflect.construct ( <var>target</var>, <var>argumentsList</var> [ , <var>newTarget</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.defineproperty" title="Reflect.defineProperty ( target, propertyKey, attributes )"><span class="secnum">26.1.3</span> Reflect.defineProperty ( <var>target</var>, <var>propertyKey</var>, <var>attributes</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.deleteproperty" title="Reflect.deleteProperty ( target, propertyKey )"><span class="secnum">26.1.4</span> Reflect.deleteProperty ( <var>target</var>, <var>propertyKey</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.get" title="Reflect.get ( target, propertyKey [ , receiver ])"><span class="secnum">26.1.5</span> Reflect.get ( <var>target</var>, <var>propertyKey</var> [ , <var>receiver</var> ])</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.getownpropertydescriptor" title="Reflect.getOwnPropertyDescriptor ( target, propertyKey )"><span class="secnum">26.1.6</span> Reflect.getOwnPropertyDescriptor ( <var>target</var>, <var>propertyKey</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.getprototypeof" title="Reflect.getPrototypeOf ( target )"><span class="secnum">26.1.7</span> Reflect.getPrototypeOf ( <var>target</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.has" title="Reflect.has ( target, propertyKey )"><span class="secnum">26.1.8</span> Reflect.has ( <var>target</var>, <var>propertyKey</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.isextensible" title="Reflect.isExtensible (target)"><span class="secnum">26.1.9</span> Reflect.isExtensible (<var>target</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.ownkeys" title="Reflect.ownKeys ( target )"><span class="secnum">26.1.10</span> Reflect.ownKeys ( <var>target</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.preventextensions" title="Reflect.preventExtensions ( target )"><span class="secnum">26.1.11</span> Reflect.preventExtensions ( <var>target</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.set" title="Reflect.set ( target, propertyKey, V [ , receiver ] )"><span class="secnum">26.1.12</span> Reflect.set ( <var>target</var>, <var>propertyKey</var>, <var>V</var> [ , <var>receiver</var> ] )</a></li><li><span class="item-toggle-none"></span><a href="#sec-reflect.setprototypeof" title="Reflect.setPrototypeOf ( target, proto )"><span class="secnum">26.1.13</span> Reflect.setPrototypeOf ( <var>target</var>, <var>proto</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-proxy-objects" title="Proxy Objects"><span class="secnum">26.2</span> Proxy Objects</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-proxy-constructor" title="The Proxy Constructor"><span class="secnum">26.2.1</span> The Proxy Constructor</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-proxy-target-handler" title="Proxy ( target, handler )"><span class="secnum">26.2.1.1</span> Proxy ( <var>target</var>, <var>handler</var> )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-properties-of-the-proxy-constructor" title="Properties of the Proxy Constructor"><span class="secnum">26.2.2</span> Properties of the Proxy Constructor</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-proxy.revocable" title="Proxy.revocable ( target, handler )"><span class="secnum">26.2.2.1</span> Proxy.revocable ( <var>target</var>, <var>handler</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-proxy-revocation-functions" title="Proxy Revocation Functions"><span class="secnum">26.2.2.1.1</span> Proxy Revocation Functions</a></li></ol></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-module-namespace-objects" title="Module Namespace Objects"><span class="secnum">26.3</span> Module Namespace Objects</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-@@tostringtag" title="@@toStringTag"><span class="secnum">26.3.1</span> @@toStringTag</a></li><li><span class="item-toggle-none"></span><a href="#sec-@@iterator" title="[ @@iterator ] ( )"><span class="secnum">26.3.2</span> [ @@iterator ] ( )</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-grammar-summary" title="Grammar Summary"><span class="secnum">A</span> Grammar Summary</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-lexical-grammar" title="Lexical Grammar"><span class="secnum">A.1</span> Lexical Grammar</a></li><li><span class="item-toggle-none"></span><a href="#sec-expressions" title="Expressions"><span class="secnum">A.2</span> Expressions</a></li><li><span class="item-toggle-none"></span><a href="#sec-statements" title="Statements"><span class="secnum">A.3</span> Statements</a></li><li><span class="item-toggle-none"></span><a href="#sec-functions-and-classes" title="Functions and Classes"><span class="secnum">A.4</span> Functions and Classes</a></li><li><span class="item-toggle-none"></span><a href="#sec-scripts-and-modules" title="Scripts and Modules"><span class="secnum">A.5</span> Scripts and Modules</a></li><li><span class="item-toggle-none"></span><a href="#sec-number-conversions" title="Number Conversions"><span class="secnum">A.6</span> Number Conversions</a></li><li><span class="item-toggle-none"></span><a href="#sec-universal-resource-identifier-character-classes" title="Universal Resource Identifier Character Classes"><span class="secnum">A.7</span> Universal Resource Identifier Character Classes</a></li><li><span class="item-toggle-none"></span><a href="#sec-regular-expressions" title="Regular Expressions"><span class="secnum">A.8</span> Regular Expressions</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-additional-ecmascript-features-for-web-browsers" title="Additional ECMAScript Features for Web Browsers"><span class="secnum">B</span> Additional ECMAScript Features for Web Browsers</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-additional-syntax" title="Additional Syntax"><span class="secnum">B.1</span> Additional Syntax</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-additional-syntax-numeric-literals" title="Numeric Literals"><span class="secnum">B.1.1</span> Numeric Literals</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-additional-syntax-numeric-literals-status-semantics" title="Static Semantics"><span class="secnum">B.1.1.1</span> Static Semantics</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-additional-syntax-string-literals" title="String Literals"><span class="secnum">B.1.2</span> String Literals</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-additional-syntax-string-literals-static-semantics" title="Static Semantics"><span class="secnum">B.1.2.1</span> Static Semantics</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-html-like-comments" title="HTML-like Comments"><span class="secnum">B.1.3</span> HTML-like Comments</a></li><li><span class="item-toggle">â¢</span><a href="#sec-regular-expressions-patterns" title="Regular Expressions Patterns"><span class="secnum">B.1.4</span> Regular Expressions Patterns</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-regular-expression-patterns-semantics" title="Pattern Semantics"><span class="secnum">B.1.4.1</span> Pattern Semantics</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-runtime-semantics-characterrangeorunion-abstract-operation" title="Runtime Semantics: CharacterRangeOrUnion Abstract Operation"><span class="secnum">B.1.4.1.1</span> RS: CharacterRangeOrUnion Abstract Operation</a></li></ol></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-additional-built-in-properties" title="Additional Built-in Properties"><span class="secnum">B.2</span> Additional Built-in Properties</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-additional-properties-of-the-global-object" title="Additional Properties of the Global Object"><span class="secnum">B.2.1</span> Additional Properties of the Global Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-escape-string" title="escape (string)"><span class="secnum">B.2.1.1</span> escape (<var>string</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-unescape-string" title="unescape (string)"><span class="secnum">B.2.1.2</span> unescape (<var>string</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-additional-properties-of-the-object.prototype-object" title="Additional Properties of the Object.prototype Object"><span class="secnum">B.2.2</span> Additional Properties of the Object.prototype Object</a><ol class="toc"><li><span class="item-toggle">â¢</span><a href="#sec-object.prototype.__proto__" title="Object.prototype.__proto__"><span class="secnum">B.2.2.1</span> Object.prototype.__proto__</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-get-object.prototype.__proto__" title="get Object.prototype.__proto__"><span class="secnum">B.2.2.1.1</span> get Object.prototype.__proto__</a></li><li><span class="item-toggle-none"></span><a href="#sec-set-object.prototype.__proto__" title="set Object.prototype.__proto__"><span class="secnum">B.2.2.1.2</span> set Object.prototype.__proto__</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.__defineGetter__" title="Object.prototype.__defineGetter__ (P, getter)"><span class="secnum">B.2.2.2</span> Object.prototype.__defineGetter__ (<var>P</var>, <var>getter</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.__defineSetter__" title="Object.prototype.__defineSetter__ (P, setter)"><span class="secnum">B.2.2.3</span> Object.prototype.__defineSetter__ (<var>P</var>, <var>setter</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.__lookupGetter__" title="Object.prototype.__lookupGetter__ (P)"><span class="secnum">B.2.2.4</span> Object.prototype.__lookupGetter__ (<var>P</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-object.prototype.__lookupSetter__" title="Object.prototype.__lookupSetter__ (P)"><span class="secnum">B.2.2.5</span> Object.prototype.__lookupSetter__ (<var>P</var>)</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-additional-properties-of-the-string.prototype-object" title="Additional Properties of the String.prototype Object"><span class="secnum">B.2.3</span> Additional Properties of the String.prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.substr" title="String.prototype.substr (start, length)"><span class="secnum">B.2.3.1</span> String.prototype.substr (<var>start</var>, <var>length</var>)</a></li><li><span class="item-toggle">â¢</span><a href="#sec-string.prototype.anchor" title="String.prototype.anchor ( name )"><span class="secnum">B.2.3.2</span> String.prototype.anchor ( <var>name</var> )</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-createhtml" title="Runtime Semantics: CreateHTML ( string, tag, attribute, value )"><span class="secnum">B.2.3.2.1</span> RS: CreateHTML ( <var>string</var>, <var>tag</var>, <var>attribute</var>, <var>value</var> )</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.big" title="String.prototype.big ()"><span class="secnum">B.2.3.3</span> String.prototype.big ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.blink" title="String.prototype.blink ()"><span class="secnum">B.2.3.4</span> String.prototype.blink ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.bold" title="String.prototype.bold ()"><span class="secnum">B.2.3.5</span> String.prototype.bold ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.fixed" title="String.prototype.fixed ()"><span class="secnum">B.2.3.6</span> String.prototype.fixed ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.fontcolor" title="String.prototype.fontcolor ( color )"><span class="secnum">B.2.3.7</span> String.prototype.fontcolor ( <var>color</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.fontsize" title="String.prototype.fontsize ( size )"><span class="secnum">B.2.3.8</span> String.prototype.fontsize ( <var>size</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.italics" title="String.prototype.italics ()"><span class="secnum">B.2.3.9</span> String.prototype.italics ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.link" title="String.prototype.link ( url )"><span class="secnum">B.2.3.10</span> String.prototype.link ( <var>url</var> )</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.small" title="String.prototype.small ()"><span class="secnum">B.2.3.11</span> String.prototype.small ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.strike" title="String.prototype.strike ()"><span class="secnum">B.2.3.12</span> String.prototype.strike ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.sub" title="String.prototype.sub ()"><span class="secnum">B.2.3.13</span> String.prototype.sub ()</a></li><li><span class="item-toggle-none"></span><a href="#sec-string.prototype.sup" title="String.prototype.sup ()"><span class="secnum">B.2.3.14</span> String.prototype.sup ()</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-additional-properties-of-the-date.prototype-object" title="Additional Properties of the Date.prototype Object"><span class="secnum">B.2.4</span> Additional Properties of the Date.prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.getyear" title="Date.prototype.getYear ( )"><span class="secnum">B.2.4.1</span> Date.prototype.getYear ( )</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.setyear" title="Date.prototype.setYear (year)"><span class="secnum">B.2.4.2</span> Date.prototype.setYear (<var>year</var>)</a></li><li><span class="item-toggle-none"></span><a href="#sec-date.prototype.togmtstring" title="Date.prototype.toGMTString ( )"><span class="secnum">B.2.4.3</span> Date.prototype.toGMTString ( )</a></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-additional-properties-of-the-regexp.prototype-object" title="Additional Properties of the RegExp.prototype Object"><span class="secnum">B.2.5</span> Additional Properties of the RegExp.prototype Object</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-regexp.prototype.compile" title="RegExp.prototype.compile (pattern, flags )"><span class="secnum">B.2.5.1</span> RegExp.prototype.compile (<var>pattern</var>, <var>flags</var> )</a></li></ol></li></ol></li><li><span class="item-toggle">â¢</span><a href="#sec-other-additional-features" title="Other Additional Features"><span class="secnum">B.3</span> Other Additional Features</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-__proto__-property-names-in-object-initializers" title="__proto__ Property Names in Object Initializers"><span class="secnum">B.3.1</span> __proto__ Property Names in Object Initializers</a></li><li><span class="item-toggle-none"></span><a href="#sec-labelled-function-declarations" title="Labelled Function Declarations"><span class="secnum">B.3.2</span> Labelled Function Declarations</a></li><li><span class="item-toggle">â¢</span><a href="#sec-block-level-function-declarations-web-legacy-compatibility-semantics" title="Block-Level Function Declarations Web Legacy Compatibility Semantics"><span class="secnum">B.3.3</span> Block-Level Function Declarations Web Legacy Compatibility Semantics</a><ol class="toc"><li><span class="item-toggle-none"></span><a href="#sec-web-compat-functiondeclarationinstantiation" title="Changes to FunctionDeclarationInstantiation"><span class="secnum">B.3.3.1</span> Changes to FunctionDeclarationInstantiation</a></li><li><span class="item-toggle-none"></span><a href="#sec-web-compat-globaldeclarationinstantiation" title="Changes to GlobalDeclarationInstantiation"><span class="secnum">B.3.3.2</span> Changes to GlobalDeclarationInstantiation</a></li><li><span class="item-toggle-none"></span><a href="#sec-web-compat-evaldeclarationinstantiation" title="Changes to EvalDeclarationInstantiation"><span class="secnum">B.3.3.3</span> Changes to EvalDeclarationInstantiation</a></li><li><span class="item-toggle-none"></span><a href="#sec-block-duplicates-allowed-static-semantics" title="Changes to Block Static Semantics: Early Errors"><span class="secnum">B.3.3.4</span> Changes to Block SS: Early Errors</a></li><li><span class="item-toggle-none"></span><a href="#sec-web-compat-blockdeclarationinstantiation" title="Changes to BlockDeclarationInstantiation"><span class="secnum">B.3.3.5</span> Changes to BlockDeclarationInstantiation</a></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-functiondeclarations-in-ifstatement-statement-clauses" title="FunctionDeclarations in IfStatement Statement Clauses"><span class="secnum">B.3.4</span> FunctionDeclarations in IfStatement Statement Clauses</a></li><li><span class="item-toggle-none"></span><a href="#sec-variablestatements-in-catch-blocks" title="VariableStatements in Catch Blocks"><span class="secnum">B.3.5</span> VariableStatements in Catch Blocks</a></li><li><span class="item-toggle-none"></span><a href="#sec-initializers-in-forin-statement-heads" title="Initializers in ForIn Statement Heads"><span class="secnum">B.3.6</span> Initializers in ForIn Statement Heads</a></li></ol></li></ol></li><li><span class="item-toggle-none"></span><a href="#sec-strict-mode-of-ecmascript" title="The Strict Mode of ECMAScript"><span class="secnum">C</span> The Strict Mode of ECMAScript</a></li><li><span class="item-toggle-none"></span><a href="#sec-corrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact" title="Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact"><span class="secnum">D</span> Corrections and Clarifications in ECMAScript 2015 with Possible Compatibility Impact</a></li><li><span class="item-toggle-none"></span><a href="#sec-additions-and-changes-that-introduce-incompatibilities-with-prior-editions" title="Additions and Changes That Introduce Incompatibilities with Prior Editions"><span class="secnum">E</span> Additions and Changes That Introduce Incompatibilities with Prior Editions</a></li><li><span class="item-toggle-none"></span><a href="#sec-bibliography" title="Bibliography"><span class="secnum">F</span> Bibliography</a></li><li><span class="item-toggle-none"></span><a href="#sec-copyright-and-software-license" title="Copyright &amp; Software License"><span class="secnum">G</span> Copyright &amp; Software License</a></li></ol></div></div><h1 class="shortname">Draft ECMA-262</h1><h1 class="version">September 29, 2016</h1><h1 class="title">ECMAScriptÂ® 2017 Language Specification</h1>
<emu-intro id="sec-intro">
  <h1><span class="secnum"></span>Introduction<span class="utils"><span class="anchor"><a href="#sec-intro">#</a></span></span></h1>
  <p>This Ecma Standard defines the ECMAScript 2017 Language. It is the 
eighth edition of the ECMAScript Language Specification. Since 
publication of the first edition in 1997, ECMAScript has grown to be one
 of the world's most widely used general-purpose programming languages. 
It is best known as the language embedded in web browsers but has also 
been widely adopted for server and embedded applications.</p>
  <p>ECMAScript is based on several originating technologies, the most 
well-known being JavaScript (Netscape) and JScript (Microsoft). The 
language was invented by Brendan Eich at Netscape and first appeared in 
that company's Navigator 2.0 browser. It has appeared in all subsequent 
browsers from Netscape and in all browsers from Microsoft starting with 
Internet Explorer 3.0.</p>
  <p>The development of the ECMAScript Language Specification started in
 November 1996. The first edition of this Ecma Standard was adopted by 
the Ecma General Assembly of June 1997.</p>
  <p>That Ecma Standard was submitted to ISO/IEC JTC 1 for adoption 
under the fast-track procedure, and approved as international standard 
ISO/IEC 16262, in April 1998. The Ecma General Assembly of June 1998 
approved the second edition of ECMA-262 to keep it fully aligned with 
ISO/IEC 16262. Changes between the first and the second edition are 
editorial in nature.</p>
  <p>The third edition of the Standard introduced powerful regular 
expressions, better string handling, new control statements, try/catch 
exception handling, tighter definition of errors, formatting for numeric
 output and minor changes in anticipation of future language growth. The
 third edition of the ECMAScript standard was adopted by the Ecma 
General Assembly of December 1999 and published as ISO/IEC 16262:2002 in
 June 2002.</p>
  <p>After publication of the third edition, ECMAScript achieved massive
 adoption in conjunction with the World Wide Web where it has become the
 programming language that is supported by essentially all web browsers.
 Significant work was done to develop a fourth edition of ECMAScript. 
However, that work was not completed and not published as the fourth 
edition of ECMAScript but some of it was incorporated into the 
development of the sixth edition.</p>
  <p>The fifth edition of ECMAScript (published as ECMA-262 5<sup>th</sup>
 edition) codified de facto interpretations of the language 
specification that have become common among browser implementations and 
added support for new features that had emerged since the publication of
 the third edition. Such features include accessor properties, 
reflective creation and inspection of objects, program control of 
property attributes, additional array manipulation functions, support 
for the JSON object encoding format, and a strict mode that provides 
enhanced error checking and program security. The Fifth Edition was 
adopted by the Ecma General Assembly of December 2009.</p>
  <p>The fifth Edition was submitted to ISO/IEC JTC 1 for adoption under
 the fast-track procedure, and approved as international standard 
ISO/IEC 16262:2011. Edition 5.1 of the ECMAScript Standard incorporated 
minor corrections and is the same text as ISO/IEC 16262:2011. The 5.1 
Edition was adopted by the Ecma General Assembly of June 2011.</p>
  <p>Focused development of the sixth edition started in 2009, as the 
fifth edition was being prepared for publication. However, this was 
preceded by significant experimentation and language enhancement design 
efforts dating to the publication of the third edition in 1999. In a 
very real sense, the completion of the sixth edition is the culmination 
of a fifteen year effort. The goals for this addition included providing
 better support for large applications, library creation, and for use of
 ECMAScript as a compilation target for other languages. Some of its 
major enhancements included modules, class declarations, lexical block 
scoping, iterators and generators, promises for asynchronous 
programming, destructuring patterns, and proper tail calls. The 
ECMAScript library of built-ins was expanded to support additional data 
abstractions including maps, sets, and arrays of binary numeric values 
as well as additional support for Unicode supplemental characters in 
strings and regular expressions. The built-ins were also made extensible
 via subclassing. The sixth edition provides the foundation for regular,
 incremental language and library enhancements. The sixth edition was 
adopted by the General Assembly of June 2015.</p>
  <p>This ECMAScript specification is the first ECMAScript edition 
released under Ecma TC39's new yearly release cadence and open 
development process. A plain-text source document was built from the 
ECMAScript 2015 source document to serve as the base for further 
development entirely on GitHub. Over the year of this standard's 
development, hundreds of pull requests and issues were filed 
representing thousands of bug fixes, editorial fixes and other 
improvements. Additionally, numerous software tools were developed to 
aid in this effort including Ecmarkup, Ecmarkdown, and Grammarkdown. 
This specification also includes support for a new exponentiation 
operator and adds a new method to Array.prototype called <code>includes</code>.</p>
  <p>Dozens of individuals representing many organizations have made 
very significant contributions within Ecma TC39 to the development of 
this edition and to the prior editions. In addition, a vibrant community
 has emerged supporting TC39's ECMAScript efforts. This community has 
reviewed numerous drafts, filed thousands of bug reports, performed 
implementation experiments, contributed test suites, and educated the 
world-wide developer community about ECMAScript. Unfortunately, it is 
impossible to identify and acknowledge every person and organization who
 has contributed to this effort.</p>
  <p>
    Allen Wirfs-Brock<br>
    ECMA-262, 6<sup>th</sup> Edition Project Editor
  
  </p>
  <p>
    Brian Terlson<br>
    ECMA-262, 7<sup>th</sup> Edition Project Editor
  
  </p>
</emu-intro>

<!-- es6num="1" -->
<emu-clause id="sec-scope">
  <h1><span class="secnum">1</span>Scope<span class="utils"><span class="anchor"><a href="#sec-scope">#</a></span></span></h1>
  <p>This Standard defines the ECMAScript 2017 general-purpose programming language.</p>
</emu-clause>

<!-- es6num="2" -->
<emu-clause id="sec-conformance">
  <h1><span class="secnum">2</span>Conformance<span class="utils"><span class="anchor"><a href="#sec-conformance">#</a></span></span></h1>
  <p>A conforming implementation of ECMAScript must provide and support 
all the types, values, objects, properties, functions, and program 
syntax and semantics described in this specification.</p>
  <p>A conforming implementation of ECMAScript must interpret source 
text input in conformance with the latest version of the Unicode 
Standard and ISO/IEC 10646.</p>
  <p>A conforming implementation of ECMAScript that provides an 
application programming interface that supports programs that need to 
adapt to the linguistic and cultural conventions used by different human
 languages and countries must implement the interface defined by the 
most recent edition of ECMA-402 that is compatible with this 
specification.</p>
  <p>A conforming implementation of ECMAScript may provide additional 
types, values, objects, properties, and functions beyond those described
 in this specification. In particular, a conforming implementation of 
ECMAScript may provide properties not described in this specification, 
and values for those properties, for objects that are described in this 
specification.</p>
  <p>A conforming implementation of ECMAScript may support program and 
regular expression syntax not described in this specification. In 
particular, a conforming implementation of ECMAScript may support 
program syntax that makes use of the âfuture reserved wordsâ listed in 
subclause  <emu-xref href="#sec-future-reserved-words"><a href="#sec-future-reserved-words">11.6.2.2</a></emu-xref> of this specification.</p>
  <p>A conforming implementation of ECMAScript must not implement any 
extension that is listed as a Forbidden Extension in subclause  <emu-xref href="#sec-forbidden-extensions"><a href="#sec-forbidden-extensions">16.2</a></emu-xref>.</p>
</emu-clause>

<!-- es6num="3" -->
<emu-clause id="sec-normative-references">
  <h1><span class="secnum">3</span>Normative References<span class="utils"><span class="anchor"><a href="#sec-normative-references">#</a></span></span></h1>
  <p>The following referenced documents are indispensable for the 
application of this document. For dated references, only the edition 
cited applies. For undated references, the latest edition of the 
referenced document (including any amendments) applies.</p>
  <p>ISO/IEC 10646:2003:  <i>Information Technology â Universal 
Multiple-Octet Coded Character Set (UCS) plus Amendment 1:2005, 
Amendment 2:2006, Amendment 3:2008, and Amendment 4:2008</i>, plus additional amendments and corrigenda, or successor</p>
  <p>ECMA-402,  <i>ECMAScript 2015 Internationalization API Specification</i>.
    
    <br>
    <a href="http://www.ecma-international.org/publications/standards/Ecma-402.htm">http://www.ecma-international.org/publications/standards/Ecma-402.htm</a></p>
  <p>ECMA-404,  <i>The JSON Data Interchange Format</i>.
    
    <br>
    <a href="http://www.ecma-international.org/publications/standards/Ecma-404.htm">http://www.ecma-international.org/publications/standards/Ecma-404.htm</a></p>
</emu-clause>

<!-- es6num="4" -->
<emu-clause id="sec-overview">
  <h1><span class="secnum">4</span>Overview<span class="utils"><span class="anchor"><a href="#sec-overview">#</a></span></span></h1>
  <p>This section contains a non-normative overview of the ECMAScript language.</p>
  <p>ECMAScript is an object-oriented programming language for 
performing computations and manipulating computational objects within a 
host environment. ECMAScript as defined here is not intended to be 
computationally self-sufficient; indeed, there are no provisions in this
 specification for input of external data or output of computed results.
 Instead, it is expected that the computational environment of an 
ECMAScript program will provide not only the objects and other 
facilities described in this specification but also certain 
environment-specific objects, whose description and behaviour are beyond
 the scope of this specification except to indicate that they may 
provide certain properties that can be accessed and certain functions 
that can be called from an ECMAScript program.</p>
  <p>ECMAScript was originally designed to be used as a scripting 
language, but has become widely used as a general-purpose programming 
language. A  <em>scripting language</em> is a programming language that 
is used to manipulate, customize, and automate the facilities of an 
existing system. In such systems, useful functionality is already 
available through a user interface, and the scripting language is a 
mechanism for exposing that functionality to program control. In this 
way, the existing system is said to provide a host environment of 
objects and facilities, which completes the capabilities of the 
scripting language. A scripting language is intended for use by both 
professional and non-professional programmers.</p>
  <p>ECMAScript was originally designed to be a  <em>Web scripting language</em>,
 providing a mechanism to enliven Web pages in browsers and to perform 
server computation as part of a Web-based client-server architecture. 
ECMAScript is now used to provide core scripting capabilities for a 
variety of host environments. Therefore the core language is specified 
in this document apart from any particular host environment.</p>
  <p>ECMAScript usage has moved beyond simple scripting and it is now 
used for the full spectrum of programming tasks in many different 
environments and scales. As the usage of ECMAScript has expanded, so has
 the features and facilities it provides. ECMAScript is now a fully 
featured general-purpose programming language.</p>
  <p>Some of the facilities of ECMAScript are similar to those used in 
other programming languages; in particular C, Javaâ¢, Self, and Scheme as
 described in:</p>
  <p>ISO/IEC 9899:1996,  <i>Programming Languages â C</i>.</p>
  <p>Gosling, James, Bill Joy and Guy Steele.  <i>The Java<sup>â¢</sup> Language Specification</i>. Addison Wesley Publishing Co., 1996.</p>
  <p>Ungar, David, and Smith, Randall B. Self: The Power of Simplicity.  <i>OOPSLA '87 Conference Proceedings</i>, pp. 227-241, Orlando, FL, October 1987.</p>
  <p><i>IEEE Standard for the Scheme Programming Language</i>. IEEE Std 1178-1990.</p>

  <!-- es6num="4.1" -->
  <emu-clause id="sec-web-scripting">
    <h1><span class="secnum">4.1</span>Web Scripting<span class="utils"><span class="anchor"><a href="#sec-web-scripting">#</a></span></span></h1>
    <p>A web browser provides an ECMAScript host environment for 
client-side computation including, for instance, objects that represent 
windows, menus, pop-ups, dialog boxes, text areas, anchors, frames, 
history, cookies, and input/output. Further, the host environment 
provides a means to attach scripting code to events such as change of 
focus, page and image loading, unloading, error and abort, selection, 
form submission, and mouse actions. Scripting code appears within the 
HTML and the displayed page is a combination of user interface elements 
and fixed and computed text and images. The scripting code is reactive 
to user interaction and there is no need for a main program.</p>
    <p>A web server provides a different host environment for 
server-side computation including objects representing requests, 
clients, and files; and mechanisms to lock and share data. By using 
browser-side and server-side scripting together, it is possible to 
distribute computation between the client and server while providing a 
customized user interface for a Web-based application.</p>
    <p>Each Web browser and server that supports ECMAScript supplies its
 own host environment, completing the ECMAScript execution environment.</p>
  </emu-clause>

  <!-- es6num="4.2" -->
  <emu-clause id="sec-ecmascript-overview">
    <h1><span class="secnum">4.2</span>ECMAScript Overview<span class="utils"><span class="anchor"><a href="#sec-ecmascript-overview">#</a></span></span></h1>
    <p>The following is an informal overview of ECMAScriptânot all parts
 of the language are described. This overview is not part of the 
standard proper.</p>
    <p>ECMAScript is object-based: basic language and host facilities 
are provided by objects, and an ECMAScript program is a cluster of 
communicating objects. In ECMAScript, an  <em>object</em> is a collection of zero or more  <em>properties</em> each with  <em>attributes</em> that determine how each property can be usedâfor example, when the Writable attribute for a property is set to <emu-val>false</emu-val>,
 any attempt by executed ECMAScript code to assign a different value to 
the property fails. Properties are containers that hold other objects,  <em>primitive values</em>, or  <em>functions</em>. A primitive value is a member of one of the following built-in types:  <b>Undefined</b>,  <b>Null</b>,  <b>Boolean</b>,  <b>Number</b>,  <b>String</b>, and  <b>Symbol;</b> an object is a member of the built-in type  <b>Object</b>; and a function is a callable object. A function that is associated with an object via a property is called a  <em>method</em>.</p>
    <p>ECMAScript defines a collection of  <em>built-in objects</em> that round out the definition of ECMAScript entities. These built-in objects include the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>; objects that are fundamental to the runtime semantics of the language including <code>Object</code>, <code>Function</code>, <code>Boolean</code>, <code>Symbol</code>, and various <code>Error</code> objects; objects that represent and manipulate numeric values including <code>Math</code>, <code>Number</code>, and <code>Date</code>; the text processing objects <code>String</code> and <code>RegExp</code>; objects that are indexed collections of values including <code>Array</code>
 and nine different kinds of Typed Arrays whose elements all have a 
specific numeric data representation; keyed collections including <code>Map</code> and <code>Set</code> objects; objects supporting structured data including the <code>JSON</code> object, <code>ArrayBuffer</code>, and <code>DataView</code>; objects supporting control abstractions including generator functions and <code>Promise</code> objects; and, reflection objects including <code>Proxy</code> and <code>Reflect</code>.</p>
    <p>ECMAScript also defines a set of built-in  <em>operators</em>. 
ECMAScript operators include various unary operations, multiplicative 
operators, additive operators, bitwise shift operators, relational 
operators, equality operators, binary bitwise operators, binary logical 
operators, assignment operators, and the comma operator.</p>
    <p>Large ECMAScript programs are supported by  <em>modules</em> 
which allow a program to be divided into multiple sequences of 
statements and declarations. Each module explicitly identifies 
declarations it uses that need to be provided by other modules and which
 of its declarations are available for use by other modules.</p>
    <p>ECMAScript syntax intentionally resembles Java syntax. ECMAScript
 syntax is relaxed to enable it to serve as an easy-to-use scripting 
language. For example, a variable is not required to have its type 
declared nor are types associated with properties, and defined functions
 are not required to have their declarations appear textually before 
calls to them.</p>

    <!-- es6num="4.2.1" -->
    <emu-clause id="sec-objects">
      <h1><span class="secnum">4.2.1</span>Objects<span class="utils"><span class="anchor"><a href="#sec-objects">#</a></span></span></h1>
      <p>Even though ECMAScript includes syntax for class definitions, 
ECMAScript objects are not fundamentally class-based such as those in 
C++, Smalltalk, or Java. Instead objects may be created in various ways 
including via a literal notation or via  <em>constructors</em> which 
create objects and then execute code that initializes all or part of 
them by assigning initial values to their properties. Each constructor 
is a function that has a property named <code>"prototype"</code> that is used to implement  <em>prototype-based inheritance</em> and  <em>shared properties</em>. Objects are created by using constructors in  <b>new</b> expressions; for example, <code>new Date(2009,11)</code> creates a new Date object. Invoking a constructor without using  <b>new</b> has consequences that depend on the constructor. For example, <code>Date()</code> produces a string representation of the current date and time rather than an object.</p>
      <p>Every object created by a constructor has an implicit reference (called the object's  <em>prototype</em>) to the value of its constructor's <code>"prototype"</code> property. Furthermore, a prototype may have a non-null implicit reference to its prototype, and so on; this is called the  <em>prototype chain</em>.
 When a reference is made to a property in an object, that reference is 
to the property of that name in the first object in the prototype chain 
that contains a property of that name. In other words, first the object 
mentioned directly is examined for such a property; if that object 
contains the named property, that is the property to which the reference
 refers; if that object does not contain the named property, the 
prototype for that object is examined next; and so on.</p>
      <emu-figure id="figure-1" caption="Object/Prototype Relationships"><figure><figcaption>Figure 1: Object/Prototype Relationships</figcaption>
        <object data="ECMAScript%C2%AE%202017%20Language%20Specification_files/figure-1.svg" type="image/svg+xml" height="354" width="719"> <img alt="An image of lots of boxes and arrows." src="ECMAScript%C2%AE%202017%20Language%20Specification_files/figure-1.png" height="354" width="719"> </object>
      </figure></emu-figure>
      <p>In a class-based object-oriented language, in general, state is
 carried by instances, methods are carried by classes, and inheritance 
is only of structure and behaviour. In ECMAScript, the state and methods
 are carried by objects, while structure, behaviour, and state are all 
inherited.</p>
      <p>All objects that do not directly contain a particular property 
that their prototype contains share that property and its value. Figure 1
 illustrates this:</p>
      <p><b>CF</b> is a constructor (and also an object). Five objects have been created by using <code>new</code> expressions:  <b>cf<sub>1</sub></b>,  <b>cf<sub>2</sub></b>,  <b>cf<sub>3</sub></b>,  <b>cf<sub>4</sub></b>, and  <b>cf<sub>5</sub></b>. Each of these objects contains properties named <code>q1</code> and <code>q2</code>. The dashed lines represent the implicit prototype relationship; so, for example,  <b>cf<sub>3</sub></b>'s prototype is  <b>CF<sub>p</sub></b>. The constructor,  <b>CF</b>, has two properties itself, named <code>P1</code> and <code>P2</code>, which are not visible to  <b>CF<sub>p</sub></b>,  <b>cf<sub>1</sub></b>,  <b>cf<sub>2</sub></b>,  <b>cf<sub>3</sub></b>,  <b>cf<sub>4</sub></b>, or  <b>cf<sub>5</sub></b>. The property named <code>CFP1</code> in  <b>CF<sub>p</sub></b> is shared by  <b>cf<sub>1</sub></b>,  <b>cf<sub>2</sub></b>,  <b>cf<sub>3</sub></b>,  <b>cf<sub>4</sub></b>, and  <b>cf<sub>5</sub></b> (but not by  <b>CF</b>), as are any properties found in  <b>CF<sub>p</sub></b>'s implicit prototype chain that are not named <code>q1</code>, <code>q2</code>, or <code>CFP1</code>. Notice that there is no implicit prototype link between  <b>CF</b> and  <b>CF<sub>p</sub></b>.</p>
      <p>Unlike most class-based object languages, properties can be 
added to objects dynamically by assigning values to them. That is, 
constructors are not required to name or assign values to all or any of 
the constructed object's properties. In the above diagram, one could add
 a new shared property for  <b>cf<sub>1</sub></b>,  <b>cf<sub>2</sub></b>,  <b>cf<sub>3</sub></b>,  <b>cf<sub>4</sub></b>, and  <b>cf<sub>5</sub></b> by assigning a new value to the property in  <b>CF<sub>p</sub></b>.</p>
      <p>Although ECMAScript objects are not inherently class-based, it 
is often convenient to define class-like abstractions based upon a 
common pattern of constructor functions, prototype objects, and methods.
 The ECMAScript built-in objects themselves follow such a class-like 
pattern. Beginning with ECMAScript 2015, the ECMAScript language 
includes syntactic class definitions that permit programmers to 
concisely define objects that conform to the same class-like abstraction
 pattern used by the built-in objects.</p>
    </emu-clause>

    <!-- es6num="4.2.2" -->
    <emu-clause id="sec-strict-variant-of-ecmascript">
      <h1><span class="secnum">4.2.2</span>The Strict Variant of ECMAScript<span class="utils"><span class="anchor"><a href="#sec-strict-variant-of-ecmascript">#</a></span></span></h1>
      <p>The ECMAScript Language recognizes the possibility that some 
users of the language may wish to restrict their usage of some features 
available in the language. They might do so in the interests of 
security, to avoid what they consider to be error-prone features, to get
 enhanced error checking, or for other reasons of their choosing. In 
support of this possibility, ECMAScript defines a strict variant of the 
language. The strict variant of the language excludes some specific 
syntactic and semantic features of the regular ECMAScript language and 
modifies the detailed semantics of some features. The strict variant 
also specifies additional error conditions that must be reported by 
throwing error exceptions in situations that are not specified as errors
 by the non-strict form of the language.</p>
      <p>The strict variant of ECMAScript is commonly referred to as the  <em>strict mode</em>
 of the language. Strict mode selection and use of the strict mode 
syntax and semantics of ECMAScript is explicitly made at the level of 
individual ECMAScript source text units. Because strict mode is selected
 at the level of a syntactic source text unit, strict mode only imposes 
restrictions that have local effect within such a source text unit. 
Strict mode does not restrict or modify any aspect of the ECMAScript 
semantics that must operate consistently across multiple source text 
units. A complete ECMAScript program may be composed of both strict mode
 and non-strict mode ECMAScript source text units. In this case, strict 
mode only applies when actually executing code that is defined within a 
strict mode source text unit.</p>
      <p>In order to conform to this specification, an ECMAScript 
implementation must implement both the full unrestricted ECMAScript 
language and the strict variant of the ECMAScript language as defined by
 this specification. In addition, an implementation must support the 
combination of unrestricted and strict mode source text units into a 
single composite program.</p>
    </emu-clause>
  </emu-clause>

  <!-- es6num="4.3" -->
  <emu-clause id="sec-terms-and-definitions">
    <h1><span class="secnum">4.3</span>Terms and Definitions<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions">#</a></span></span></h1>
    <p>For the purposes of this document, the following terms and definitions apply.</p>

    <!-- es6num="4.3.1" -->
    <emu-clause id="sec-type">
      <h1><span class="secnum">4.3.1</span>type<span class="utils"><span class="anchor"><a href="#sec-type">#</a></span></span></h1>
      <p>set of data values as defined in clause  <emu-xref href="#sec-ecmascript-data-types-and-values"><a href="#sec-ecmascript-data-types-and-values">6</a></emu-xref> of this specification</p>
    </emu-clause>

    <!-- es6num="4.3.2" -->
    <emu-clause id="sec-primitive-value">
      <h1><span class="secnum">4.3.2</span>primitive value<span class="utils"><span class="anchor"><a href="#sec-primitive-value">#</a></span></span></h1>
      <p>member of one of the types Undefined, Null, Boolean, Number, Symbol, or String as defined in clause  <emu-xref href="#sec-ecmascript-data-types-and-values"><a href="#sec-ecmascript-data-types-and-values">6</a></emu-xref></p>
      <emu-note><span class="note">Note</span>
        <p>A primitive value is a datum that is represented directly at the lowest level of the language implementation.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.3" -->
    <emu-clause id="sec-terms-and-definitions-object">
      <h1><span class="secnum">4.3.3</span>object<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-object">#</a></span></span></h1>
      <p>member of the type Object</p>
      <emu-note><span class="note">Note</span>
        <p>An object is a collection of properties and has a single prototype object. The prototype may be the null value.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.4" -->
    <emu-clause id="sec-constructor">
      <h1><span class="secnum">4.3.4</span>constructor<span class="utils"><span class="anchor"><a href="#sec-constructor">#</a></span></span></h1>
      <p>function object that creates and initializes objects</p>
      <emu-note><span class="note">Note</span>
        <p>The value of a constructor's <code>prototype</code> property is a prototype object that is used to implement inheritance and shared properties.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.5" -->
    <emu-clause id="sec-terms-and-definitions-prototype">
      <h1><span class="secnum">4.3.5</span>prototype<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-prototype">#</a></span></span></h1>
      <p>object that provides shared properties for other objects</p>
      <emu-note><span class="note">Note</span>
        <p>When a constructor creates an object, that object implicitly references the constructor's <code>prototype</code> property for the purpose of resolving property references. The constructor's <code>prototype</code> property can be referenced by the program expression  <code><var>constructor</var>.prototype</code>,
 and properties added to an object's prototype are shared, through 
inheritance, by all objects sharing the prototype. Alternatively, a new 
object may be created with an explicitly specified prototype by using 
the <code>Object.create</code> built-in function.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.6" -->
    <emu-clause id="sec-ordinary-object">
      <h1><span class="secnum">4.3.6</span>ordinary object<span class="utils"><span class="anchor"><a href="#sec-ordinary-object">#</a></span></span></h1>
      <p>object that has the default behaviour for the essential internal methods that must be supported by all objects</p>
    </emu-clause>

    <!-- es6num="4.3.7" -->
    <emu-clause id="sec-exotic-object">
      <h1><span class="secnum">4.3.7</span>exotic object<span class="utils"><span class="anchor"><a href="#sec-exotic-object">#</a></span></span></h1>
      <p>object that does not have the default behaviour for one or more of the essential internal methods</p>
      <emu-note><span class="note">Note</span>
        <p>Any object that is not an ordinary object is an exotic object.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.8" -->
    <emu-clause id="sec-standard-object">
      <h1><span class="secnum">4.3.8</span>standard object<span class="utils"><span class="anchor"><a href="#sec-standard-object">#</a></span></span></h1>
      <p>object whose semantics are defined by this specification</p>
    </emu-clause>

    <!-- es6num="4.3.9" -->
    <emu-clause id="sec-built-in-object">
      <h1><span class="secnum">4.3.9</span>built-in object<span class="utils"><span class="anchor"><a href="#sec-built-in-object">#</a></span></span></h1>
      <p>object specified and supplied by an ECMAScript implementation</p>
      <emu-note><span class="note">Note</span>
        <p>Standard built-in objects are defined in this specification. 
An ECMAScript implementation may specify and supply additional kinds of 
built-in objects. A  <em>built-in constructor</em> is a built-in object that is also a constructor.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.10" -->
    <emu-clause id="sec-undefined-value">
      <h1><span class="secnum">4.3.10</span>undefined value<span class="utils"><span class="anchor"><a href="#sec-undefined-value">#</a></span></span></h1>
      <p>primitive value used when a variable has not been assigned a value</p>
    </emu-clause>

    <!-- es6num="4.3.11" -->
    <emu-clause id="sec-terms-and-definitions-undefined-type">
      <h1><span class="secnum">4.3.11</span>Undefined type<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-undefined-type">#</a></span></span></h1>
      <p>type whose sole value is the <emu-val>undefined</emu-val> value</p>
    </emu-clause>

    <!-- es6num="4.3.12" -->
    <emu-clause id="sec-null-value">
      <h1><span class="secnum">4.3.12</span>null value<span class="utils"><span class="anchor"><a href="#sec-null-value">#</a></span></span></h1>
      <p>primitive value that represents the intentional absence of any object value</p>
    </emu-clause>

    <!-- es6num="4.3.13" -->
    <emu-clause id="sec-terms-and-definitions-null-type">
      <h1><span class="secnum">4.3.13</span>Null type<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-null-type">#</a></span></span></h1>
      <p>type whose sole value is the <emu-val>null</emu-val> value</p>
    </emu-clause>

    <!-- es6num="4.3.14" -->
    <emu-clause id="sec-terms-and-definitions-boolean-value">
      <h1><span class="secnum">4.3.14</span>Boolean value<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-boolean-value">#</a></span></span></h1>
      <p>member of the Boolean type</p>
      <emu-note><span class="note">Note</span>
        <p>There are only two Boolean values, <emu-val>true</emu-val> and <emu-val>false</emu-val></p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.15" -->
    <emu-clause id="sec-terms-and-definitions-boolean-type">
      <h1><span class="secnum">4.3.15</span>Boolean type<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-boolean-type">#</a></span></span></h1>
      <p>type consisting of the primitive values <emu-val>true</emu-val> and <emu-val>false</emu-val></p>
    </emu-clause>

    <!-- es6num="4.3.16" -->
    <emu-clause id="sec-boolean-object">
      <h1><span class="secnum">4.3.16</span>Boolean object<span class="utils"><span class="anchor"><a href="#sec-boolean-object">#</a></span></span></h1>
      <p>member of the Object type that is an instance of the standard built-in <code>Boolean</code> constructor</p>
      <emu-note><span class="note">Note</span>
        <p>A Boolean object is created by using the <code>Boolean</code> constructor in a <code>new</code>
 expression, supplying a Boolean value as an argument. The resulting 
object has an internal slot whose value is the Boolean value. A Boolean 
object can be coerced to a Boolean value.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.17" -->
    <emu-clause id="sec-terms-and-definitions-string-value">
      <h1><span class="secnum">4.3.17</span>String value<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-string-value">#</a></span></span></h1>
      <p>primitive value that is a finite ordered sequence of zero or more 16-bit unsigned integer</p>
      <emu-note><span class="note">Note</span>
        <p>A String value is a member of the String type. Each integer 
value in the sequence usually represents a single 16-bit unit of UTF-16 
text. However, ECMAScript does not place any restrictions or 
requirements on the values except that they must be 16-bit unsigned 
integers.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.18" -->
    <emu-clause id="sec-terms-and-definitions-string-type">
      <h1><span class="secnum">4.3.18</span>String type<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-string-type">#</a></span></span></h1>
      <p>set of all possible String values</p>
    </emu-clause>

    <!-- es6num="4.3.19" -->
    <emu-clause id="sec-string-object">
      <h1><span class="secnum">4.3.19</span>String object<span class="utils"><span class="anchor"><a href="#sec-string-object">#</a></span></span></h1>
      <p>member of the Object type that is an instance of the standard built-in <code>String</code> constructor</p>
      <emu-note><span class="note">Note</span>
        <p>A String object is created by using the <code>String</code> constructor in a <code>new</code>
 expression, supplying a String value as an argument. The resulting 
object has an internal slot whose value is the String value. A String 
object can be coerced to a String value by calling the <code>String</code> constructor as a function (<emu-xref href="#sec-string-constructor-string-value"><a href="#sec-string-constructor-string-value">21.1.1.1</a></emu-xref>).</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.20" -->
    <emu-clause id="sec-terms-and-definitions-number-value">
      <h1><span class="secnum">4.3.20</span>Number value<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-number-value">#</a></span></span></h1>
      <p>primitive value corresponding to a double-precision 64-bit binary format IEEE 754-2008 value</p>
      <emu-note><span class="note">Note</span>
        <p>A Number value is a member of the Number type and is a direct representation of a number.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.21" -->
    <emu-clause id="sec-terms-and-definitions-number-type">
      <h1><span class="secnum">4.3.21</span>Number type<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-number-type">#</a></span></span></h1>
      <p>set of all possible Number values including the special âNot-a-Numberâ (NaN) value, positive infinity, and negative infinity</p>
    </emu-clause>

    <!-- es6num="4.3.22" -->
    <emu-clause id="sec-number-object">
      <h1><span class="secnum">4.3.22</span>Number object<span class="utils"><span class="anchor"><a href="#sec-number-object">#</a></span></span></h1>
      <p>member of the Object type that is an instance of the standard built-in <code>Number</code> constructor</p>
      <emu-note><span class="note">Note</span>
        <p>A Number object is created by using the <code>Number</code> constructor in a <code>new</code>
 expression, supplying a number value as an argument. The resulting 
object has an internal slot whose value is the number value. A Number 
object can be coerced to a number value by calling the <code>Number</code> constructor as a function (<emu-xref href="#sec-number-constructor-number-value"><a href="#sec-number-constructor-number-value">20.1.1.1</a></emu-xref>).</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.23" -->
    <emu-clause id="sec-terms-and-definitions-infinity">
      <h1><span class="secnum">4.3.23</span>Infinity<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-infinity">#</a></span></span></h1>
      <p>number value that is the positive infinite number value</p>
    </emu-clause>

    <!-- es6num="4.3.24" -->
    <emu-clause id="sec-terms-and-definitions-nan">
      <h1><span class="secnum">4.3.24</span>NaN<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-nan">#</a></span></span></h1>
      <p>number value that is an IEEE 754-2008 âNot-a-Numberâ value</p>
    </emu-clause>

    <!-- es6num="4.3.25" -->
    <emu-clause id="sec-symbol-value">
      <h1><span class="secnum">4.3.25</span>Symbol value<span class="utils"><span class="anchor"><a href="#sec-symbol-value">#</a></span></span></h1>
      <p>primitive value that represents a unique, non-String Object property key</p>
    </emu-clause>

    <!-- es6num="4.3.26" -->
    <emu-clause id="sec-terms-and-definitions-symbol-type">
      <h1><span class="secnum">4.3.26</span>Symbol type<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-symbol-type">#</a></span></span></h1>
      <p>set of all possible Symbol values</p>
    </emu-clause>

    <!-- es6num="4.3.27" -->
    <emu-clause id="sec-symbol-object">
      <h1><span class="secnum">4.3.27</span>Symbol object<span class="utils"><span class="anchor"><a href="#sec-symbol-object">#</a></span></span></h1>
      <p>member of the Object type that is an instance of the standard built-in <code>Symbol</code> constructor</p>
    </emu-clause>

    <!-- es6num="4.3.28" -->
    <emu-clause id="sec-terms-and-definitions-function">
      <h1><span class="secnum">4.3.28</span>function<span class="utils"><span class="anchor"><a href="#sec-terms-and-definitions-function">#</a></span></span></h1>
      <p>member of the Object type that may be invoked as a subroutine</p>
      <emu-note><span class="note">Note</span>
        <p>In addition to its properties, a function contains executable
 code and state that determine how it behaves when invoked. A function's
 code may or may not be written in ECMAScript.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.29" -->
    <emu-clause id="sec-built-in-function">
      <h1><span class="secnum">4.3.29</span>built-in function<span class="utils"><span class="anchor"><a href="#sec-built-in-function">#</a></span></span></h1>
      <p>built-in object that is a function</p>
      <emu-note><span class="note">Note</span>
        <p>Examples of built-in functions include <code>parseInt</code> and <code>Math.exp</code>. An implementation may provide implementation-dependent built-in functions that are not described in this specification.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.30" -->
    <emu-clause id="sec-property">
      <h1><span class="secnum">4.3.30</span>property<span class="utils"><span class="anchor"><a href="#sec-property">#</a></span></span></h1>
      <p>part of an object that associates a key (either a String value or a Symbol value) and a value</p>
      <emu-note><span class="note">Note</span>
        <p>Depending upon the form of the property the value may be 
represented either directly as a data value (a primitive value, an 
object, or a function object) or indirectly by a pair of accessor 
functions.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.31" -->
    <emu-clause id="sec-method">
      <h1><span class="secnum">4.3.31</span>method<span class="utils"><span class="anchor"><a href="#sec-method">#</a></span></span></h1>
      <p>function that is the value of a property</p>
      <emu-note><span class="note">Note</span>
        <p>When a function is called as a method of an object, the object is passed to the function as its <emu-val>this</emu-val> value.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.32" -->
    <emu-clause id="sec-built-in-method">
      <h1><span class="secnum">4.3.32</span>built-in method<span class="utils"><span class="anchor"><a href="#sec-built-in-method">#</a></span></span></h1>
      <p>method that is a built-in function</p>
      <emu-note><span class="note">Note</span>
        <p>Standard built-in methods are defined in this specification, 
and an ECMAScript implementation may specify and provide other 
additional built-in methods.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="4.3.33" -->
    <emu-clause id="sec-attribute">
      <h1><span class="secnum">4.3.33</span>attribute<span class="utils"><span class="anchor"><a href="#sec-attribute">#</a></span></span></h1>
      <p>internal value that defines some characteristic of a property</p>
    </emu-clause>

    <!-- es6num="4.3.34" -->
    <emu-clause id="sec-own-property">
      <h1><span class="secnum">4.3.34</span>own property<span class="utils"><span class="anchor"><a href="#sec-own-property">#</a></span></span></h1>
      <p>property that is directly contained by its object</p>
    </emu-clause>

    <!-- es6num="4.3.35" -->
    <emu-clause id="sec-inherited-property">
      <h1><span class="secnum">4.3.35</span>inherited property<span class="utils"><span class="anchor"><a href="#sec-inherited-property">#</a></span></span></h1>
      <p>property of an object that is not an own property but is a property (either own or inherited) of the object's prototype</p>
    </emu-clause>
  </emu-clause>

  <!-- es6num="4.4" -->
  <emu-clause id="sec-organization-of-this-specification">
    <h1><span class="secnum">4.4</span>Organization of This Specification<span class="utils"><span class="anchor"><a href="#sec-organization-of-this-specification">#</a></span></span></h1>
    <p>The remainder of this specification is organized as follows:</p>
    <p>Clause 5 defines the notational conventions used throughout the specification.</p>
    <p>Clauses 6-9 define the execution environment within which ECMAScript programs operate.</p>
    <p>Clauses 10-16 define the actual ECMAScript programming language 
including its syntactic encoding and the execution semantics of all 
language features.</p>
    <p>Clauses 17-26 define the ECMAScript standard library. It includes
 the definitions of all of the standard objects that are available for 
use by ECMAScript programs as they execute.</p>
  </emu-clause>
</emu-clause>

<!-- es6num="5" -->
<emu-clause id="sec-notational-conventions">
  <h1><span class="secnum">5</span>Notational Conventions<span class="utils"><span class="anchor"><a href="#sec-notational-conventions">#</a></span></span></h1>

  <!-- es6num="5.1" -->
  <emu-clause id="sec-syntactic-and-lexical-grammars">
    <h1><span class="secnum">5.1</span>Syntactic and Lexical Grammars<span class="utils"><span class="anchor"><a href="#sec-syntactic-and-lexical-grammars">#</a></span></span></h1>

    <!-- es6num="5.1.1" -->
    <emu-clause id="sec-context-free-grammars">
      <h1><span class="secnum">5.1.1</span>Context-Free Grammars<span class="utils"><span class="anchor"><a href="#sec-context-free-grammars">#</a></span></span></h1>
      <p>A  <em>context-free grammar</em> consists of a number of  <em>productions</em>. Each production has an abstract symbol called a  <em>nonterminal</em> as its  <em>left-hand side</em>, and a sequence of zero or more nonterminal and  <em>terminal</em> symbols as its  <em>right-hand side</em>. For each grammar, the terminal symbols are drawn from a specified alphabet.</p>
      <p>A  <dfn>chain production</dfn> is a production that has exactly one nonterminal symbol on its right-hand side along with zero or more terminal symbols.</p>
      <p>Starting from a sentence consisting of a single distinguished nonterminal, called the  <dfn>goal symbol</dfn>, a given context-free grammar specifies a  <em>language</em>,
 namely, the (perhaps infinite) set of possible sequences of terminal 
symbols that can result from repeatedly replacing any nonterminal in the
 sequence with a right-hand side of a production for which the 
nonterminal is the left-hand side.</p>
    </emu-clause>

    <!-- es6num="5.1.2" -->
    <emu-clause id="sec-lexical-and-regexp-grammars">
      <h1><span class="secnum">5.1.2</span>The Lexical and RegExp Grammars<span class="utils"><span class="anchor"><a href="#sec-lexical-and-regexp-grammars">#</a></span></span></h1>
      <p>A  <em>lexical grammar</em> for ECMAScript is given in clause  <emu-xref href="#sec-ecmascript-language-lexical-grammar"><a href="#sec-ecmascript-language-lexical-grammar">11</a></emu-xref>. This grammar has as its terminal symbols Unicode code points that conform to the rules for <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt> defined in  <emu-xref href="#sec-source-text"><a href="#sec-source-text">10.1</a></emu-xref>. It defines a set of productions, starting from the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> <emu-nt><a href="#prod-InputElementDiv">InputElementDiv</a></emu-nt>, <emu-nt><a href="#prod-InputElementTemplateTail">InputElementTemplateTail</a></emu-nt>, or <emu-nt><a href="#prod-InputElementRegExp">InputElementRegExp</a></emu-nt>, or <emu-nt><a href="#prod-InputElementRegExpOrTemplateTail">InputElementRegExpOrTemplateTail</a></emu-nt>, that describe how sequences of such code points are translated into a sequence of input elements.</p>
      <p>Input elements other than white space and comments form the 
terminal symbols for the syntactic grammar for ECMAScript and are called
 ECMAScript  <em>tokens</em>. These tokens are the reserved words, 
identifiers, literals, and punctuators of the ECMAScript language. 
Moreover, line terminators, although not considered to be tokens, also 
become part of the stream of input elements and guide the process of 
automatic semicolon insertion (<emu-xref href="#sec-automatic-semicolon-insertion"><a href="#sec-automatic-semicolon-insertion">11.9</a></emu-xref>).
 Simple white space and single-line comments are discarded and do not 
appear in the stream of input elements for the syntactic grammar. A <emu-nt><a href="#prod-MultiLineComment">MultiLineComment</a></emu-nt> (that is, a comment of the form <code>/*</code>â¦<code>*/</code> regardless of whether it spans more than one line) is likewise simply discarded if it contains no line terminator; but if a <emu-nt><a href="#prod-MultiLineComment">MultiLineComment</a></emu-nt>
 contains one or more line terminators, then it is replaced by a single 
line terminator, which becomes part of the stream of input elements for 
the syntactic grammar.</p>
      <p>A  <em>RegExp grammar</em> for ECMAScript is given in  <emu-xref href="#sec-patterns"><a href="#sec-patterns">21.2.1</a></emu-xref>. This grammar also has as its terminal symbols the code points as defined by <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt>. It defines a set of productions, starting from the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> <emu-nt><a href="#prod-Pattern">Pattern</a></emu-nt>, that describe how sequences of code points are translated into regular expression patterns.</p>
      <p>Productions of the lexical and RegExp grammars are distinguished by having two colons â<b>::</b>â as separating punctuation. The lexical and RegExp grammars share some productions.</p>
    </emu-clause>

    <!-- es6num="5.1.3" -->
    <emu-clause id="sec-numeric-string-grammar">
      <h1><span class="secnum">5.1.3</span>The Numeric String Grammar<span class="utils"><span class="anchor"><a href="#sec-numeric-string-grammar">#</a></span></span></h1>
      <p>Another grammar is used for translating Strings into numeric 
values. This grammar is similar to the part of the lexical grammar 
having to do with numeric literals and has as its terminal symbols <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt>. This grammar appears in  <emu-xref href="#sec-tonumber-applied-to-the-string-type"><a href="#sec-tonumber-applied-to-the-string-type">7.1.3.1</a></emu-xref>.</p>
      <p>Productions of the numeric string grammar are distinguished by having three colons â<b>:::</b>â as punctuation.</p>
    </emu-clause>

    <!-- es6num="5.1.4" -->
    <emu-clause id="sec-syntactic-grammar">
      <h1><span class="secnum">5.1.4</span>The Syntactic Grammar<span class="utils"><span class="anchor"><a href="#sec-syntactic-grammar">#</a></span></span></h1>
      <p>The  <em>syntactic grammar</em> for ECMAScript is given in 
clauses 11, 12, 13, 14, and 15. This grammar has ECMAScript tokens 
defined by the lexical grammar as its terminal symbols (<emu-xref href="#sec-lexical-and-regexp-grammars"><a href="#sec-lexical-and-regexp-grammars">5.1.2</a></emu-xref>). It defines a set of productions, starting from two alternative goal symbols <emu-nt><a href="#prod-Script">Script</a></emu-nt> and <emu-nt><a href="#prod-Module">Module</a></emu-nt>, that describe how sequences of tokens form syntactically correct independent components of ECMAScript programs.</p>
      <p>When a stream of code points is to be parsed as an ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>,
 it is first converted to a stream of input elements by repeated 
application of the lexical grammar; this stream of input elements is 
then parsed by a single application of the syntactic grammar. The input 
stream is syntactically in error if the tokens in the stream of input 
elements cannot be parsed as a single instance of the goal nonterminal (<emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>), with no tokens left over.</p>
      <p>Productions of the syntactic grammar are distinguished by having just one colon â<b>:</b>â as punctuation.</p>
      <p>The syntactic grammar as presented in clauses 12, 13, 14 and 15
 is not a complete account of which token sequences are accepted as a 
correct ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>.
 Certain additional token sequences are also accepted, namely, those 
that would be described by the grammar if only semicolons were added to 
the sequence in certain places (such as before line terminator 
characters). Furthermore, certain token sequences that are described by 
the grammar are not considered acceptable if a line terminator character
 appears in certain âawkwardâ places.</p>
      <p>In certain cases in order to avoid ambiguities the syntactic 
grammar uses generalized productions that permit token sequences that do
 not form a valid ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>. For example, this technique is used for object literals and object destructuring patterns. In such cases a more restrictive  <em>supplemental grammar</em>
 is provided that further restricts the acceptable token sequences. In 
certain contexts, when explicitly specified, the input elements 
corresponding to such a production are parsed again using a <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>
 of a supplemental grammar. The input stream is syntactically in error 
if the tokens in the stream of input elements parsed by a cover grammar 
cannot be parsed as a single instance of the corresponding supplemental <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>, with no tokens left over.</p>
    </emu-clause>

    <!-- es6num="5.1.5" -->
    <emu-clause id="sec-grammar-notation" namespace="grammar-notation">
      <h1><span class="secnum">5.1.5</span>Grammar Notation<span class="utils"><span class="anchor"><a href="#sec-grammar-notation">#</a></span></span></h1>
      <p>Terminal symbols of the lexical, RegExp, and numeric string grammars are shown in <code>fixed width</code>
 font, both in the productions of the grammars and throughout this 
specification whenever the text directly refers to such a terminal 
symbol. These are to appear in a script exactly as written. All terminal
 symbol code points specified in this way are to be understood as the 
appropriate Unicode code points from the Basic Latin range, as opposed 
to any similar-looking code points from other Unicode ranges.</p>
      <p>Nonterminal symbols are shown in <var>italic</var> type. The 
definition of a nonterminal (also called a âproductionâ) is introduced 
by the name of the nonterminal being defined followed by one or more 
colons. (The number of colons indicates to which grammar the production 
belongs.) One or more alternative right-hand sides for the nonterminal 
then follow on succeeding lines. For example, the syntactic definition:</p>
      <emu-grammar><emu-production name="WhileStatement" id="prod-grammar-notation-WhileStatement">
    <emu-nt><a href="#prod-grammar-notation-WhileStatement">WhileStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f7627bf3"><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>states that the nonterminal <emu-nt><a href="#prod-grammar-notation-WhileStatement">WhileStatement</a></emu-nt> represents the token <code>while</code>, followed by a left parenthesis token, followed by an <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>, followed by a right parenthesis token, followed by a <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>. The occurrences of <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> and <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> are themselves nonterminals. As another example, the syntactic definition:</p>
      <emu-grammar><emu-production name="ArgumentList" id="prod-grammar-notation-ArgumentList">
    <emu-nt><a href="#prod-grammar-notation-ArgumentList">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d4fc7da4"><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="7ff23fee"><emu-nt><a href="#prod-grammar-notation-ArgumentList">ArgumentList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>states that an <emu-nt><a href="#prod-grammar-notation-ArgumentList">ArgumentList</a></emu-nt> may represent either a single <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt> or an <emu-nt><a href="#prod-grammar-notation-ArgumentList">ArgumentList</a></emu-nt>, followed by a comma, followed by an <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>. This definition of <emu-nt><a href="#prod-grammar-notation-ArgumentList">ArgumentList</a></emu-nt> is recursive, that is, it is defined in terms of itself. The result is that an <emu-nt><a href="#prod-grammar-notation-ArgumentList">ArgumentList</a></emu-nt> may contain any positive number of arguments, separated by commas, where each argument expression is an <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>. Such recursive definitions of nonterminals are common.</p>
      <p>The subscripted suffix â<sub>opt</sub>â, which may appear after
 a terminal or nonterminal, indicates an optional symbol. The 
alternative containing the optional symbol actually specifies two 
right-hand sides, one that omits the optional element and one that 
includes it. This means that:</p>
      <emu-grammar><emu-production name="VariableDeclaration" id="prod-grammar-notation-VariableDeclaration">
    <emu-nt><a href="#prod-grammar-notation-VariableDeclaration">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b9344a8"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>is a convenient abbreviation for:</p>
      <emu-grammar><emu-production name="VariableDeclaration">
    <emu-nt><a href="#prod-grammar-notation-VariableDeclaration">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
    <emu-rhs a="89becb83"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>and that:</p>
      <emu-grammar><emu-production name="IterationStatement" id="prod-grammar-notation-IterationStatement">
    <emu-nt><a href="#prod-grammar-notation-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="93c07e45"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>is a convenient abbreviation for:</p>
      <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-grammar-notation-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="180d57b5"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="0acd6093"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>which in turn is an abbreviation for:</p>
      <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-grammar-notation-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="00273dd7"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-t>;</emu-t><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="d4b04297"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-t>;</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="e8d15924"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>;</emu-t><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="7f2cbdb0"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>;</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>so, in this example, the nonterminal <emu-nt><a href="#prod-grammar-notation-IterationStatement">IterationStatement</a></emu-nt> actually has four alternative right-hand sides.</p>
      <p>A production may be parameterized by a subscripted annotation of the form â<sub>[parameters]</sub>â, which may appear as a suffix to the nonterminal symbol defined by the production. â<sub>parameters</sub>â
 may be either a single name or a comma separated list of names. A 
parameterized production is shorthand for a set of productions defining 
all combinations of the parameter names, preceded by an underscore, 
appended to the parameterized nonterminal symbol. This means that:</p>
      <emu-grammar><emu-production name="StatementList" params="Return" id="prod-grammar-notation-StatementList">
    <emu-nt params="Return"><a href="#prod-grammar-notation-StatementList">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>is a convenient abbreviation for:</p>
      <emu-grammar><emu-production name="StatementList">
    <emu-nt><a href="#prod-grammar-notation-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StatementList_Return" id="prod-grammar-notation-StatementList_Return">
    <emu-nt><a href="#prod-grammar-notation-StatementList_Return">StatementList_Return</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>and that:</p>
      <emu-grammar><emu-production name="StatementList" params="Return, In">
    <emu-nt params="Return, In"><a href="#prod-grammar-notation-StatementList">StatementList</a><emu-mods><emu-params>[Return, In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>is an abbreviation for:</p>
      <emu-grammar><emu-production name="StatementList">
    <emu-nt><a href="#prod-grammar-notation-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StatementList_Return">
    <emu-nt><a href="#prod-grammar-notation-StatementList_Return">StatementList_Return</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StatementList_In" id="prod-grammar-notation-StatementList_In">
    <emu-nt><a href="#prod-grammar-notation-StatementList_In">StatementList_In</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StatementList_Return_In" id="prod-grammar-notation-StatementList_Return_In">
    <emu-nt><a href="#prod-grammar-notation-StatementList_Return_In">StatementList_Return_In</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>Multiple parameters produce a combinatory number of 
productions, not all of which are necessarily referenced in a complete 
grammar.</p>
      <p>References to nonterminals on the right-hand side of a production can also be parameterized. For example:</p>
      <emu-grammar><emu-production name="StatementList">
    <emu-nt><a href="#prod-grammar-notation-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="abb21bdc"><emu-nt params="+In"><a href="#prod-ExpressionStatement">ExpressionStatement</a><emu-mods><emu-params>[+In]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>is equivalent to saying:</p>
      <emu-grammar><emu-production name="StatementList">
    <emu-nt><a href="#prod-grammar-notation-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="93a8206f"><emu-nt>ExpressionStatement_In</emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>and</p>
      <emu-grammar><emu-production name="StatementList">
    <emu-nt><a href="#prod-grammar-notation-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="70147e05"><emu-nt params="~In"><a href="#prod-ExpressionStatement">ExpressionStatement</a><emu-mods><emu-params>[~In]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>is equivalent to:</p>
      <emu-grammar><emu-production name="StatementList">
    <emu-nt><a href="#prod-grammar-notation-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>A nonterminal reference may have both a parameter list and an â<sub>opt</sub>â suffix. For example:</p>
      <emu-grammar><emu-production name="VariableDeclaration">
    <emu-nt><a href="#prod-grammar-notation-VariableDeclaration">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="363e22bb"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt params="+In" optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[+In]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>is an abbreviation for:</p>
      <emu-grammar><emu-production name="VariableDeclaration">
    <emu-nt><a href="#prod-grammar-notation-VariableDeclaration">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
    <emu-rhs a="693077fa"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt>Initializer_In</emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>Prefixing a parameter name with â<sub>?</sub>â on a right-hand 
side nonterminal reference makes that parameter value dependent upon the
 occurrence of the parameter name on the reference to the current 
production's left-hand side symbol. For example:</p>
      <emu-grammar><emu-production name="VariableDeclaration" params="In">
    <emu-nt params="In"><a href="#prod-grammar-notation-VariableDeclaration">VariableDeclaration</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="dde5478d"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt params="?In"><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>is an abbreviation for:</p>
      <emu-grammar><emu-production name="VariableDeclaration">
    <emu-nt><a href="#prod-grammar-notation-VariableDeclaration">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="89becb83"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="VariableDeclaration_In" id="prod-grammar-notation-VariableDeclaration_In">
    <emu-nt><a href="#prod-grammar-notation-VariableDeclaration_In">VariableDeclaration_In</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="693077fa"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt>Initializer_In</emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>If a right-hand side alternative is prefixed with 
â[+parameter]â that alternative is only available if the named parameter
 was used in referencing the production's nonterminal symbol. If a 
right-hand side alternative is prefixed with â[~parameter]â that 
alternative is only available if the named parameter was  <em>not</em> used in referencing the production's nonterminal symbol. This means that:</p>
      <emu-grammar><emu-production name="StatementList" params="Return">
    <emu-nt params="Return"><a href="#prod-grammar-notation-StatementList">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ef0890a9" constraints="+Return"><emu-constraints>[+Return]</emu-constraints><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>is an abbreviation for:</p>
      <emu-grammar><emu-production name="StatementList">
    <emu-nt><a href="#prod-grammar-notation-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StatementList_Return">
    <emu-nt><a href="#prod-grammar-notation-StatementList_Return">StatementList_Return</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>and that</p>
      <emu-grammar><emu-production name="StatementList" params="Return">
    <emu-nt params="Return"><a href="#prod-grammar-notation-StatementList">StatementList</a><emu-mods><emu-params>[Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ab243466" constraints="~Return"><emu-constraints>[~Return]</emu-constraints><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>is an abbreviation for:</p>
      <emu-grammar><emu-production name="StatementList">
    <emu-nt><a href="#prod-grammar-notation-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StatementList_Return">
    <emu-nt><a href="#prod-grammar-notation-StatementList_Return">StatementList_Return</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>When the words â<b>one of</b>â follow the colon(s) in a grammar
 definition, they signify that each of the terminal symbols on the 
following line or lines is an alternative definition. For example, the 
lexical grammar for ECMAScript contains the production:</p>
      <emu-grammar><emu-production name="NonZeroDigit" type="lexical" oneof="" id="prod-grammar-notation-NonZeroDigit">
    <emu-nt><a href="#prod-grammar-notation-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <p>which is merely a convenient abbreviation for:</p>
      <emu-grammar><emu-production name="NonZeroDigit" type="lexical">
    <emu-nt><a href="#prod-grammar-notation-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="292aa5dd"><emu-t>1</emu-t></emu-rhs>
    <emu-rhs a="5ca73105"><emu-t>2</emu-t></emu-rhs>
    <emu-rhs a="ec6bb6b2"><emu-t>3</emu-t></emu-rhs>
    <emu-rhs a="58ec4a73"><emu-t>4</emu-t></emu-rhs>
    <emu-rhs a="8fcdef77"><emu-t>5</emu-t></emu-rhs>
    <emu-rhs a="0b64877d"><emu-t>6</emu-t></emu-rhs>
    <emu-rhs a="ea5e07a4"><emu-t>7</emu-t></emu-rhs>
    <emu-rhs a="7a5bd8c3"><emu-t>8</emu-t></emu-rhs>
    <emu-rhs a="163f4308"><emu-t>9</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <p>If the phrase â[empty]â appears as the right-hand side of a 
production, it indicates that the production's right-hand side contains 
no terminals or nonterminals.</p>
      <p>If the phrase â[lookahead â <var>set</var>]â appears in the 
right-hand side of a production, it indicates that the production may 
not be used if the immediately following input token sequence is a 
member of the given <var>set</var>. The <var>set</var> can be written as
 a comma separated list of one or two element terminal sequences 
enclosed in curly brackets. For convenience, the set can also be written
 as a nonterminal, in which case it represents the set of all terminals 
to which that nonterminal could expand. If the <var>set</var> consists of a single terminal the phrase â[lookahead â  <var>terminal</var>]â may be used.</p>
      <p>For example, given the definitions</p>
      <emu-grammar><emu-production name="DecimalDigit" type="lexical" oneof="" id="prod-grammar-notation-DecimalDigit">
    <emu-nt><a href="#prod-grammar-notation-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t></emu-rhs>
</emu-production>
<emu-production name="DecimalDigits" type="lexical" id="prod-grammar-notation-DecimalDigits">
    <emu-nt><a href="#prod-grammar-notation-DecimalDigits">DecimalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b3831ee0"><emu-nt><a href="#prod-grammar-notation-DecimalDigit">DecimalDigit</a></emu-nt></emu-rhs>
    <emu-rhs a="9f250657"><emu-nt><a href="#prod-grammar-notation-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt><a href="#prod-grammar-notation-DecimalDigit">DecimalDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>the definition</p>
      <emu-grammar><emu-production name="LookaheadExample" type="lexical" id="prod-grammar-notation-LookaheadExample">
    <emu-nt><a href="#prod-grammar-notation-LookaheadExample">LookaheadExample</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="e21e12ce"><emu-t>n</emu-t><emu-gann>[lookahead â { <emu-t>1</emu-t>, <emu-t>3</emu-t>, <emu-t>5</emu-t>, <emu-t>7</emu-t>, <emu-t>9</emu-t> }]</emu-gann><emu-nt><a href="#prod-grammar-notation-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
    <emu-rhs a="195cbc6c"><emu-nt><a href="#prod-grammar-notation-DecimalDigit">DecimalDigit</a></emu-nt><emu-gann>[lookahead â <emu-nt><a href="#prod-grammar-notation-DecimalDigit">DecimalDigit</a></emu-nt>]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <p>matches either the letter <code>n</code> followed by one or more decimal digits the first of which is even, or a decimal digit not followed by another decimal digit.</p>
      <p>If the phrase â[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]â appears in the right-hand side of a production of the syntactic grammar, it indicates that the production is  <em>a restricted production</em>: it may not be used if a <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> occurs in the input stream at the indicated position. For example, the production:</p>
      <emu-grammar><emu-production name="ThrowStatement" id="prod-grammar-notation-ThrowStatement">
    <emu-nt><a href="#prod-grammar-notation-ThrowStatement">ThrowStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ff4ec866"><emu-t>throw</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <p>indicates that the production may not be used if a <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> occurs in the script between the <code>throw</code> token and the <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</p>
      <p>Unless the presence of a <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> is forbidden by a restricted production, any number of occurrences of <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt>
 may appear between any two consecutive tokens in the stream of input 
elements without affecting the syntactic acceptability of the script.</p>
      <p>When an alternative in a production of the lexical grammar or 
the numeric string grammar appears to be a multi-code point token, it 
represents the sequence of code points that would make up such a token.</p>
      <p>The right-hand side of a production may specify that certain expansions are not permitted by using the phrase â<b>but not</b>â and then indicating the expansions to be excluded. For example, the production:</p>
      <emu-grammar><emu-production name="Identifier" type="lexical" id="prod-grammar-notation-Identifier">
    <emu-nt><a href="#prod-grammar-notation-Identifier">Identifier</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="bfa5c374"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt><emu-gmod>but not <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar>
      <p>means that the nonterminal <emu-nt><a href="#prod-grammar-notation-Identifier">Identifier</a></emu-nt> may be replaced by any sequence of code points that could replace <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> provided that the same sequence of code points could not replace <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt>.</p>
      <p>Finally, a few nonterminal symbols are described by a 
descriptive phrase in sans-serif type in cases where it would be 
impractical to list all the alternatives:</p>
      <emu-grammar><emu-production name="SourceCharacter" type="lexical" id="prod-grammar-notation-SourceCharacter">
    <emu-nt><a href="#prod-grammar-notation-SourceCharacter">SourceCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="c64b38bd"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>
</emu-production></emu-grammar>
    </emu-clause>
  </emu-clause>

  <!-- es6num="5.2" -->
  <emu-clause id="sec-algorithm-conventions" namespace="algorithm-conventions">
    <h1><span class="secnum">5.2</span>Algorithm Conventions<span class="utils"><span class="anchor"><a href="#sec-algorithm-conventions">#</a></span></span></h1>
    <p>The specification often uses a numbered list to specify steps in 
an algorithm. These algorithms are used to precisely specify the 
required semantics of ECMAScript language constructs. The algorithms are
 not intended to imply the use of any specific implementation technique.
 In practice, there may be more efficient algorithms available to 
implement a given feature.</p>
    <p>Algorithms may be explicitly parameterized, in which case the 
names and usage of the parameters must be provided as part of the 
algorithm's definition. In order to facilitate their use in multiple 
parts of this specification, some algorithms, called  <em>abstract operations</em>,
 are named and written in parameterized functional form so that they may
 be referenced by name from within other algorithms. Abstract operations
 are typically referenced using a functional application style such as 
operationName(<var>arg1</var>, <var>arg2</var>). Some abstract 
operations are treated as polymorphically dispatched methods of 
class-like specification abstractions. Such method-like abstract 
operations are typically referenced using a method application style 
such as <var>someValue</var>.operationName(<var>arg1</var>, <var>arg2</var>).</p>
    <p>Calls to abstract operations return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>
 Records. Abstract operations referenced using the functional 
application style and the method application style that are prefixed by <code>?</code> indicate that <emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref> should be applied to the resulting <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref>. For example, ? operationName() is equivalent to <emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(operationName()). Similarly, ? <var>someValue</var>.operationName() is equivalent to <emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>someValue</var>.operationName()).</p>
    <p>The prefix <code>!</code> is used to indicate that an abstract operation will never return an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref> and that the resulting <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref>'s value field should be used in place of the return value of the operation. For example, âLet <var>val</var> be ! operationName()â is equivalent to the following algorithm steps:</p>
    <emu-alg><ol><li>Let <var>val</var> be operationName().</li><li><emu-xref href="#assert"><a href="#assert">Assert</a></emu-xref>: <var>val</var> is never an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>.</li><li>If <var>val</var> is a <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref>, let <var>val</var> be <var>val</var>.[[Value]].
    </li></ol></emu-alg>
    <p>Algorithms may be associated with productions of one of the 
ECMAScript grammars. A production that has multiple alternative 
definitions will typically have a distinct algorithm for each 
alternative. When an algorithm is associated with a grammar production, 
it may reference the terminal and nonterminal symbols of the production 
alternative as if they were parameters of the algorithm. When used in 
this manner, nonterminal symbols refer to the actual alternative 
definition that is matched when parsing the source text.</p>
    <p>When an algorithm is associated with a production alternative, 
the alternative is typically shown without any â[ ]â grammar 
annotations. Such annotations should only affect the syntactic 
recognition of the alternative and have no effect on the associated 
semantics for the alternative.</p>
    <p>Unless explicitly specified otherwise, all chain productions have
 an implicit definition for every algorithm that might be applied to 
that production's left-hand side nonterminal. The implicit definition 
simply reapplies the same algorithm name with the same parameters, if 
any, to the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">chain production</a></emu-xref>'s sole right-hand side nonterminal and then returns the result. For example, assume there is a production:</p>
    <emu-grammar><emu-production name="Block" id="prod-algorithm-conventions-Block">
    <emu-nt><a href="#prod-algorithm-conventions-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782c9a7"><emu-t>{</emu-t><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
    <p>but there is no corresponding Evaluation algorithm that is 
explicitly specified for that production. If in some algorithm there is a
 statement of the form: âReturn the result of evaluating <emu-nt><a href="#prod-algorithm-conventions-Block">Block</a></emu-nt>â it is implicit that an Evaluation algorithm exists of the form:</p>
    <p><b>Runtime Semantics: Evaluation</b></p>
    <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-algorithm-conventions-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782c9a7"><emu-t>{</emu-t><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
    <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
    </li></ol></emu-alg>
    <p>For clarity of expression, algorithm steps may be subdivided into
 sequential substeps. Substeps are indented and may themselves be 
further divided into indented substeps. Outline numbering conventions 
are used to identify substeps with the first level of substeps labelled 
with lower case alphabetic characters and the second level of substeps 
labelled with lower case roman numerals. If more than three levels are 
required these rules repeat with the fourth level using numeric labels. 
For example:</p>
    <emu-alg><ol><li>Top-level step<ol><li>Substep.</li><li>Substep.<ol><li>Subsubstep.<ol><li>Subsubsubstep<ol><li>Subsubsubsubstep<ol><li>Subsubsubsubsubstep
    </li></ol></li></ol></li></ol></li></ol></li></ol></li></ol></emu-alg>
    <p>A step or substep may be written as an âifâ predicate that 
conditions its substeps. In this case, the substeps are only applied if 
the predicate is true. If a step or substep begins with the word âelseâ,
 it is a predicate that is the negation of the preceding âifâ predicate 
step at the same level.</p>
    <p>A step may specify the iterative application of its substeps.</p>
    <p>A step that begins with â<dfn id="assert">Assert</dfn>:â asserts 
an invariant condition of its algorithm. Such assertions are used to 
make explicit algorithmic invariants that would otherwise be implicit. 
Such assertions add no additional semantic requirements and hence need 
not be checked by an implementation. They are used simply to clarify 
algorithms.</p>
    <p>Mathematical operations such as addition, subtraction, negation, 
multiplication, division, and the mathematical functions defined later 
in this clause should always be understood as computing exact 
mathematical results on mathematical real numbers, which unless 
otherwise noted do not include infinities and do not include a negative 
zero that is distinguished from positive zero. Algorithms in this 
standard that model floating-point arithmetic include explicit steps, 
where necessary, to handle infinities and signed zero and to perform 
rounding. If a mathematical operation or function is applied to a 
floating-point number, it should be understood as being applied to the 
exact mathematical value represented by that floating-point number; such
 a floating-point number must be finite, and if it is <emu-val>+0</emu-val> or <emu-val>-0</emu-val> then the corresponding mathematical value is simply 0.</p>
    <p>The mathematical function  <emu-eqn aoid="abs" class="inline"><emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>x</var>)</emu-eqn> produces the absolute value of <var>x</var>, which is  <emu-eqn class="inline">-<var>x</var></emu-eqn> if <var>x</var> is negative (less than zero) and otherwise is <var>x</var> itself.</p>
    <p>The mathematical function  <emu-eqn aoid="min" class="inline"><emu-xref aoid="min"><a href="#sec-algorithm-conventions">min</a></emu-xref>(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically smallest of  <emu-eqn class="inline"><var>x1</var></emu-eqn> through  <emu-eqn class="inline"><var>xN</var></emu-eqn>. The mathematical function  <emu-eqn aoid="max" class="inline"><emu-xref aoid="max"><a href="#sec-algorithm-conventions">max</a></emu-xref>(<var>x1</var>, <var>x2</var>, ..., <var>xN</var>)</emu-eqn> produces the mathematically largest of  <emu-eqn class="inline"><var>x1</var></emu-eqn> through  <emu-eqn class="inline"><var>xN</var></emu-eqn>. The domain and range of these mathematical functions include <emu-val>+â</emu-val> and <emu-val>-â</emu-val>.</p>
    <p>The notation â<emu-eqn aoid="modulo" class="inline"><var>x</var> <emu-xref aoid="modulo"><a href="#sec-algorithm-conventions">modulo</a></emu-xref> <var>y</var></emu-eqn>â (<var>y</var> must be finite and nonzero) computes a value <var>k</var> of the same sign as <var>y</var> (or zero) such that  <emu-eqn class="inline"><emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>k</var>) &lt; <emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>y</var>) and <var>x</var>-<var>k</var> = <var>q</var> Ã <var>y</var></emu-eqn> for some integer <var>q</var>.</p>
    <p>The mathematical function  <emu-eqn aoid="floor" class="inline"><emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<var>x</var>)</emu-eqn> produces the largest integer (closest to positive infinity) that is not larger than <var>x</var>.</p>
    <emu-note><span class="note">Note</span>
      <p><emu-eqn class="inline"><emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<var>x</var>) = <var>x</var>-(<var>x</var> <emu-xref aoid="modulo"><a href="#sec-algorithm-conventions">modulo</a></emu-xref> 1)</emu-eqn>.</p>
    </emu-note>
  </emu-clause>

  <!-- es6num="5.3" -->
  <emu-clause id="sec-static-semantic-rules">
    <h1><span class="secnum">5.3</span>Static Semantic Rules<span class="utils"><span class="anchor"><a href="#sec-static-semantic-rules">#</a></span></span></h1>
    <p>Context-free grammars are not sufficiently powerful to express 
all the rules that define whether a stream of input elements form a 
valid ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>
 that may be evaluated. In some situations additional rules are needed 
that may be expressed using either ECMAScript algorithm conventions or 
prose requirements. Such rules are always associated with a production 
of a grammar and are called the  <em>static semantics</em> of the production.</p>
    <p>Static Semantic Rules have names and typically are defined using 
an algorithm. Named Static Semantic Rules are associated with grammar 
productions and a production that has multiple alternative definitions 
will typically have for each alternative a distinct algorithm for each 
applicable named static semantic rule.</p>
    <p>Unless otherwise specified every grammar production alternative 
in this specification implicitly has a definition for a static semantic 
rule named Contains which takes an argument named <var>symbol</var> 
whose value is a terminal or nonterminal of the grammar that includes 
the associated production. The default definition of Contains is:</p>
    <emu-alg><ol><li>For each terminal and nonterminal grammar symbol, <var>sym</var>, in the definition of this production do<ol><li>If <var>sym</var> is the same grammar symbol as <var>symbol</var>, return <emu-val>true</emu-val>.</li><li>If <var>sym</var> is a nonterminal, then<ol><li>Let <var>contained</var> be the result of <var>sym</var> Contains <var>symbol</var>.</li><li>If <var>contained</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return <emu-val>false</emu-val>.
    </li></ol></emu-alg>
    <p>The above definition is explicitly over-ridden for specific productions.</p>
    <p>A special kind of static semantic rule is an  <dfn id="early-error-rule">Early Error Rule</dfn>. <emu-xref href="#early-error"><a href="#early-error">Early error</a></emu-xref> rules define <emu-xref href="#early-error"><a href="#early-error">early error</a></emu-xref> conditions (see clause  <emu-xref href="#sec-error-handling-and-language-extensions"><a href="#sec-error-handling-and-language-extensions">16</a></emu-xref>) that are associated with specific grammar productions. Evaluation of most <emu-xref href="#early-error"><a href="#early-error">early error</a></emu-xref>
 rules are not explicitly invoked within the algorithms of this 
specification. A conforming implementation must, prior to the first 
evaluation of a <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>, validate all of the <emu-xref href="#early-error"><a href="#early-error">early error</a></emu-xref> rules of the productions used to parse that <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>. If any of the <emu-xref href="#early-error"><a href="#early-error">early error</a></emu-xref> rules are violated the <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt> is invalid and cannot be evaluated.</p>
  </emu-clause>
</emu-clause>

<!-- es6num="6" -->
<emu-clause id="sec-ecmascript-data-types-and-values" aoid="Type">
  <h1><span class="secnum">6</span>ECMAScript Data Types and Values<span class="utils"><span class="anchor"><a href="#sec-ecmascript-data-types-and-values">#</a></span></span></h1>
  <p>Algorithms within this specification manipulate values each of 
which has an associated type. The possible value types are exactly those
 defined in this clause. Types are further subclassified into ECMAScript
 language types and specification types.</p>
  <p>Within this specification, the notation âType(<var>x</var>)â is used as shorthand for âthe  <dfn id="type">type</dfn> of <var>x</var>â
 where âtypeâ refers to the ECMAScript language and specification types 
defined in this clause. When the term âemptyâ is used as if it was 
naming a value, it is equivalent to saying âno value of any typeâ.</p>

  <!-- es6num="6.1" -->
  <emu-clause id="sec-ecmascript-language-types">
    <h1><span class="secnum">6.1</span>ECMAScript Language Types<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-types">#</a></span></span></h1>
    <p>An  <dfn>ECMAScript language type</dfn> corresponds to values 
that are directly manipulated by an ECMAScript programmer using the 
ECMAScript language. The ECMAScript language types are Undefined, Null, 
Boolean, String, Symbol, Number, and Object. An  <dfn>ECMAScript language value</dfn> is a value that is characterized by an ECMAScript language type.</p>

    <!-- es6num="6.1.1" -->
    <emu-clause id="sec-ecmascript-language-types-undefined-type">
      <h1><span class="secnum">6.1.1</span>The Undefined Type<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-types-undefined-type">#</a></span></span></h1>
      <p>The Undefined type has exactly one value, called <emu-val>undefined</emu-val>. Any variable that has not been assigned a value has the value <emu-val>undefined</emu-val>.</p>
    </emu-clause>

    <!-- es6num="6.1.2" -->
    <emu-clause id="sec-ecmascript-language-types-null-type">
      <h1><span class="secnum">6.1.2</span>The Null Type<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-types-null-type">#</a></span></span></h1>
      <p>The Null type has exactly one value, called <emu-val>null</emu-val>.</p>
    </emu-clause>

    <!-- es6num="6.1.3" -->
    <emu-clause id="sec-ecmascript-language-types-boolean-type">
      <h1><span class="secnum">6.1.3</span>The Boolean Type<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-types-boolean-type">#</a></span></span></h1>
      <p>The Boolean type represents a logical entity having two values, called <emu-val>true</emu-val> and <emu-val>false</emu-val>.</p>
    </emu-clause>

    <!-- es6num="6.1.4" -->
    <emu-clause id="sec-ecmascript-language-types-string-type">
      <h1><span class="secnum">6.1.4</span>The String Type<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-types-string-type">#</a></span></span></h1>
      <p>The String type is the set of all ordered sequences of zero or 
more 16-bit unsigned integer values (âelementsâ) up to a maximum length 
of 2<sup>53</sup>-1 elements. The String type is generally used to 
represent textual data in a running ECMAScript program, in which case 
each element in the String is treated as a UTF-16 code unit value. Each 
element is regarded as occupying a position within the sequence. These 
positions are indexed with nonnegative integers. The first element (if 
any) is at index 0, the next element (if any) at index 1, and so on. The
 length of a String is the number of elements (i.e., 16-bit values) 
within it. The empty String has length zero and therefore contains no 
elements.</p>
      <p>Where ECMAScript operations interpret String values, each 
element is interpreted as a single UTF-16 code unit. However, ECMAScript
 does not place any restrictions or requirements on the sequence of code
 units in a String value, so they may be ill-formed when interpreted as 
UTF-16 code unit sequences. Operations that do not interpret String 
contents treat them as sequences of undifferentiated 16-bit unsigned 
integers. The function <code>String.prototype.normalize</code> (see  <emu-xref href="#sec-string.prototype.normalize"><a href="#sec-string.prototype.normalize">21.1.3.12</a></emu-xref>) can be used to explicitly normalize a String value. <code>String.prototype.localeCompare</code> (see  <emu-xref href="#sec-string.prototype.localecompare"><a href="#sec-string.prototype.localecompare">21.1.3.10</a></emu-xref>)
 internally normalizes String values, but no other operations implicitly
 normalize the strings upon which they operate. Only operations that are
 explicitly specified to be language or locale sensitive produce 
language-sensitive results.</p>
      <emu-note><span class="note">Note</span>
        <p>The rationale behind this design was to keep the 
implementation of Strings as simple and high-performing as possible. If 
ECMAScript source text is in Normalized Form C, string literals are 
guaranteed to also be normalized, as long as they do not contain any 
Unicode escape sequences.</p>
      </emu-note>
      <p>Some operations interpret String contents as UTF-16 encoded Unicode code points. In that case the interpretation is:</p>
      <ul>
        <li>
          A code unit in the range 0 to 0xD7FF or in the range 0xE000 to
 0xFFFF is interpreted as a code point with the same value.
        
        </li>
        <li>
          A sequence of two code units, where the first code unit <var>c1</var> is in the range 0xD800 to 0xDBFF and the second code unit <var>c2</var> is in the range 0xDC00 to 0xDFFF, is a surrogate pair and is interpreted as a code point with the value (<var>c1</var> - 0xD800) Ã 0x400 + (<var>c2</var> - 0xDC00) + 0x10000. (See  <emu-xref href="#sec-utf16decode"><a href="#sec-utf16decode">10.1.2</a></emu-xref>)
        
        </li>
        <li>
          A code unit that is in the range 0xD800 to 0xDFFF, but is not 
part of a surrogate pair, is interpreted as a code point with the same 
value.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="6.1.5" -->
    <emu-clause id="sec-ecmascript-language-types-symbol-type">
      <h1><span class="secnum">6.1.5</span>The Symbol Type<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-types-symbol-type">#</a></span></span></h1>
      <p>The Symbol type is the set of all non-String values that may be used as the key of an Object property (<emu-xref href="#sec-object-type"><a href="#sec-object-type">6.1.7</a></emu-xref>).</p>
      <p>Each possible Symbol value is unique and immutable.</p>
      <p>Each Symbol value immutably holds an associated value called [[Description]] that is either <emu-val>undefined</emu-val> or a String value.</p>

      <!-- es6num="6.1.5.1" -->
      <emu-clause id="sec-well-known-symbols">
        <h1><span class="secnum">6.1.5.1</span>Well-Known Symbols<span class="utils"><span class="anchor"><a href="#sec-well-known-symbols">#</a></span></span></h1>
        <p>Well-known symbols are built-in Symbol values that are 
explicitly referenced by algorithms of this specification. They are 
typically used as the keys of properties whose values serve as extension
 points of a specification algorithm. Unless otherwise specified, 
well-known symbols values are shared by all realms (<emu-xref href="#sec-code-realms"><a href="#sec-code-realms">8.2</a></emu-xref>).</p>
        <p>Within this specification a well-known symbol is referred to 
by using a notation of the form @@name, where ânameâ is one of the 
values listed in  <emu-xref href="#table-1"><a href="#table-1">Table 1</a></emu-xref>.</p>
        <emu-table id="table-1" caption="Well-known Symbols"><figure><figcaption>Table 1: Well-known Symbols</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Specification Name
              
              </th>
              <th>
                [[Description]]
              
              </th>
              <th>
                Value and Purpose
              
              </th>
            </tr>
            <tr>
              <td>
                @@hasInstance
              
              </td>
              <td>
                <code>"Symbol.hasInstance"</code>
              
              </td>
              <td>
                A method that determines if a constructor object 
recognizes an object as one of the constructor's instances. Called by 
the semantics of the <code>instanceof</code> operator.
              
              </td>
            </tr>
            <tr>
              <td>
                @@isConcatSpreadable
              
              </td>
              <td>
                <code>"Symbol.isConcatSpreadable"</code>
              
              </td>
              <td>
                A Boolean valued property that if true indicates that an object should be flattened to its array elements by  <emu-xref href="#sec-array.prototype.concat"><a href="#sec-array.prototype.concat"><code>Array.prototype.concat</code></a></emu-xref>.
              
              </td>
            </tr>
            <tr>
              <td>
                @@iterator
              
              </td>
              <td>
                <code>"Symbol.iterator"</code>
              
              </td>
              <td>
                A method that returns the default Iterator for an object. Called by the semantics of the for-of statement.
              
              </td>
            </tr>
            <tr>
              <td>
                @@match
              
              </td>
              <td>
                <code>"Symbol.match"</code>
              
              </td>
              <td>
                A regular expression method that matches the regular expression against a string. Called by the  <emu-xref href="#sec-string.prototype.match"><a href="#sec-string.prototype.match"><code>String.prototype.match</code></a></emu-xref> method.
              
              </td>
            </tr>
            <tr>
              <td>
                @@replace
              
              </td>
              <td>
                <code>"Symbol.replace"</code>
              
              </td>
              <td>
                A regular expression method that replaces matched substrings of a string. Called by the  <emu-xref href="#sec-string.prototype.replace"><a href="#sec-string.prototype.replace"><code>String.prototype.replace</code></a></emu-xref> method.
              
              </td>
            </tr>
            <tr>
              <td>
                @@search
              
              </td>
              <td>
                <code>"Symbol.search"</code>
              
              </td>
              <td>
                A regular expression method that returns the index 
within a string that matches the regular expression. Called by the  <emu-xref href="#sec-string.prototype.search"><a href="#sec-string.prototype.search"><code>String.prototype.search</code></a></emu-xref> method.
              
              </td>
            </tr>
            <tr>
              <td>
                @@species
              
              </td>
              <td>
                <code>"Symbol.species"</code>
              
              </td>
              <td>
                A function valued property that is the constructor function that is used to create derived objects.
              
              </td>
            </tr>
            <tr>
              <td>
                @@split
              
              </td>
              <td>
                <code>"Symbol.split"</code>
              
              </td>
              <td>
                A regular expression method that splits a string at the 
indices that match the regular expression. Called by the  <emu-xref href="#sec-string.prototype.split"><a href="#sec-string.prototype.split"><code>String.prototype.split</code></a></emu-xref> method.
              
              </td>
            </tr>
            <tr>
              <td>
                @@toPrimitive
              
              </td>
              <td>
                <code>"Symbol.toPrimitive"</code>
              
              </td>
              <td>
                A method that converts an object to a corresponding primitive value. Called by the <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref> abstract operation.
              
              </td>
            </tr>
            <tr>
              <td>
                @@toStringTag
              
              </td>
              <td>
                <code>"Symbol.toStringTag"</code>
              
              </td>
              <td>
                A String valued property that is used in the creation of
 the default string description of an object. Accessed by the built-in 
method  <emu-xref href="#sec-object.prototype.tostring"><a href="#sec-object.prototype.tostring"><code>Object.prototype.toString</code></a></emu-xref>.
              
              </td>
            </tr>
            <tr>
              <td>
                @@unscopables
              
              </td>
              <td>
                <code>"Symbol.unscopables"</code>
              
              </td>
              <td>
                An object valued property whose own and inherited property names are property names that are excluded from the <code>with</code> environment bindings of the associated object.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
      </emu-clause>
    </emu-clause>

    <!-- es6num="6.1.6" -->
    <emu-clause id="sec-ecmascript-language-types-number-type">
      <h1><span class="secnum">6.1.6</span>The Number Type<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-types-number-type">#</a></span></span></h1>
      <p>The Number type has exactly 18437736874454810627 (that is,  <emu-eqn class="inline">2<sup>64</sup>-2<sup>53</sup>+3</emu-eqn>)
 values, representing the double-precision 64-bit format IEEE 754-2008 
values as specified in the IEEE Standard for Binary Floating-Point 
Arithmetic, except that the 9007199254740990 (that is,  <emu-eqn class="inline">2<sup>53</sup>-2</emu-eqn>) distinct âNot-a-Numberâ values of the IEEE Standard are represented in ECMAScript as a single special <emu-val>NaN</emu-val> value. (Note that the <emu-val>NaN</emu-val> value is produced by the program expression <code>NaN</code>.)
 In some implementations, external code might be able to detect a 
difference between various Not-a-Number values, but such behaviour is 
implementation-dependent; to ECMAScript code, all <emu-val>NaN</emu-val> values are indistinguishable from each other.</p>
      <emu-note><span class="note">Note</span>
        <p>The bit pattern that might be observed in an ArrayBuffer (see  <emu-xref href="#sec-arraybuffer-objects"><a href="#sec-arraybuffer-objects">24.1</a></emu-xref>)
 after a Number value has been stored into it is not necessarily the 
same as the internal representation of that Number value used by the 
ECMAScript implementation.</p>
      </emu-note>
      <p>There are two other special values, called <emu-val>positive Infinity</emu-val> and <emu-val>negative Infinity</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+â</emu-val> and <emu-val>-â</emu-val>, respectively. (Note that these two infinite Number values are produced by the program expressions <code>+Infinity</code> (or simply <code>Infinity</code>) and <code>-Infinity</code>.)</p>
      <p>The other 18437736874454810624 (that is,  <emu-eqn class="inline">2<sup>64</sup>-2<sup>53</sup></emu-eqn>)
 values are called the finite numbers. Half of these are positive 
numbers and half are negative numbers; for every finite positive Number 
value there is a corresponding negative value having the same magnitude.</p>
      <p>Note that there is both a <emu-val>positive zero</emu-val> and a <emu-val>negative zero</emu-val>. For brevity, these values are also referred to for expository purposes by the symbols <emu-val>+0</emu-val> and <emu-val>-0</emu-val>, respectively. (Note that these two different zero Number values are produced by the program expressions <code>+0</code> (or simply <code>0</code>) and <code>-0</code>.)</p>
      <p>The 18437736874454810622 (that is,  <emu-eqn class="inline">2<sup>64</sup>-2<sup>53</sup>-2</emu-eqn>) finite nonzero values are of two kinds:</p>
      <p>18428729675200069632 (that is,  <emu-eqn class="inline">2<sup>64</sup>-2<sup>54</sup></emu-eqn>) of them are normalized, having the form</p>
      <div class="math-display">
        <var>s</var> Ã <var>m</var> Ã 2<sup><var>e</var></sup>
      </div>
      <p>where <var>s</var> is +1 or -1, <var>m</var> is a positive integer less than 2<sup>53</sup> but not less than 2<sup>52</sup>, and <var>e</var> is an integer ranging from -1074 to 971, inclusive.</p>
      <p>The remaining 9007199254740990 (that is,  <emu-eqn class="inline">2<sup>53</sup>-2</emu-eqn>) values are denormalized, having the form</p>
      <div class="math-display">
        <var>s</var> Ã <var>m</var> Ã 2<sup><var>e</var></sup>
      </div>
      <p>where <var>s</var> is +1 or -1, <var>m</var> is a positive integer less than 2<sup>52</sup>, and <var>e</var> is -1074.</p>
      <p>Note that all the positive and negative integers whose magnitude is no greater than 2<sup>53</sup> are representable in the Number type (indeed, the integer 0 has two representations, <emu-val>+0</emu-val> and <emu-val>-0</emu-val>).</p>
      <p>A finite number has an  <em>odd significand</em> if it is nonzero and the integer <var>m</var> used to express it (in one of the two forms shown above) is odd. Otherwise, it has an  <em>even significand</em>.</p>
      <p>In this specification, the phrase âthe Number value for <var>x</var>â where <var>x</var>
 represents an exact nonzero real mathematical quantity (which might 
even be an irrational number such as Ï) means a Number value chosen in 
the following manner. Consider the set of all finite values of the 
Number type, with <emu-val>-0</emu-val> removed and with two additional values added to it that are not representable in the Number type, namely 2<sup>1024</sup> (which is  <emu-eqn class="inline">+1 Ã 2<sup>53</sup> Ã 2<sup>971</sup></emu-eqn>) and  <emu-eqn class="inline">-2<sup>1024</sup></emu-eqn> (which is  <emu-eqn class="inline">-1 Ã 2<sup>53</sup> Ã 2<sup>971</sup></emu-eqn>). Choose the member of this set that is closest in value to <var>x</var>.
 If two values of the set are equally close, then the one with an even 
significand is chosen; for this purpose, the two extra values 2<sup>1024</sup> and  <emu-eqn class="inline">-2<sup>1024</sup></emu-eqn> are considered to have even significands. Finally, if 2<sup>1024</sup> was chosen, replace it with <emu-val>+â</emu-val>; if  <emu-eqn class="inline">-2<sup>1024</sup></emu-eqn> was chosen, replace it with <emu-val>-â</emu-val>; if <emu-val>+0</emu-val> was chosen, replace it with <emu-val>-0</emu-val> if and only if <var>x</var> is less than zero; any other chosen value is used unchanged. The result is the Number value for <var>x</var>. (This procedure corresponds exactly to the behaviour of the IEEE 754-2008 âround to nearest, ties to evenâ mode.)</p>
      <p>Some ECMAScript operators deal only with integers in specific ranges such as  <emu-eqn class="inline">-2<sup>31</sup></emu-eqn> through  <emu-eqn class="inline">2<sup>31</sup>-1</emu-eqn>, inclusive, or in the range 0 through  <emu-eqn class="inline">2<sup>16</sup>-1</emu-eqn>,
 inclusive. These operators accept any value of the Number type but 
first convert each such value to an integer value in the expected range.
 See the descriptions of the numeric conversion operations in  <emu-xref href="#sec-type-conversion"><a href="#sec-type-conversion">7.1</a></emu-xref>.</p>
    </emu-clause>

    <!-- es6num="6.1.7" -->
    <emu-clause id="sec-object-type">
      <h1><span class="secnum">6.1.7</span>The Object Type<span class="utils"><span class="anchor"><a href="#sec-object-type">#</a></span></span></h1>
      <p>An Object is logically a collection of properties. Each property is either a data property, or an accessor property:</p>
      <ul>
        <li>
          A  <em>data property</em> associates a key value with an <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> and a set of Boolean attributes.
        
        </li>
        <li>
          An  <em>accessor property</em> associates a key value with one
 or two accessor functions, and a set of Boolean attributes. The 
accessor functions are used to store or retrieve an <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> that is associated with the property.
        
        </li>
      </ul>
      <p>Properties are identified using key values. A property key 
value is either an ECMAScript String value or a Symbol value. All String
 and Symbol values, including the empty string, are valid as property 
keys. A  <em>property name</em> is a property key that is a String value.</p>
      <p>An  <em>integer index</em> is a String-valued property key that is a canonical numeric String (see  <emu-xref href="#sec-canonicalnumericindexstring"><a href="#sec-canonicalnumericindexstring">7.1.16</a></emu-xref>) and whose numeric value is either <emu-val>+0</emu-val> or a positive integer â¤ 2<sup>53</sup>-1. An  <em>array index</em> is an integer index whose numeric value <var>i</var> is in the range  <emu-eqn class="inline">+0 â¤ <var>i</var> &lt; 2<sup>32</sup>-1</emu-eqn>.</p>
      <p>Property keys are used to access properties and their values. There are two kinds of access for properties:  <em>get</em> and  <em>set</em>,
 corresponding to value retrieval and assignment, respectively. The 
properties accessible via get and set access includes both  <em>own properties</em> that are a direct part of an object and  <em>inherited properties</em>
 which are provided by another associated object via a property 
inheritance relationship. Inherited properties may be either own or 
inherited properties of the associated object. Each own property of an 
object must each have a key value that is distinct from the key values 
of the other own properties of that object.</p>
      <p>All objects are logically collections of properties, but there 
are multiple forms of objects that differ in their semantics for 
accessing and manipulating their properties.  <em>Ordinary objects</em> are the most common form of objects and have the default object semantics. An  <em>exotic object</em> is any form of object whose property semantics differ in any way from the default semantics.</p>

      <!-- es6num="6.1.7.1" -->
      <emu-clause id="sec-property-attributes">
        <h1><span class="secnum">6.1.7.1</span>Property Attributes<span class="utils"><span class="anchor"><a href="#sec-property-attributes">#</a></span></span></h1>
        <p>Attributes are used in this specification to define and 
explain the state of Object properties. A data property associates a key
 value with the attributes listed in  <emu-xref href="#table-2"><a href="#table-2">Table 2</a></emu-xref>.</p>
        <emu-table id="table-2" caption="Attributes of a Data Property"><figure><figcaption>Table 2: Attributes of a Data Property</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Attribute Name
              
              </th>
              <th>
                Value Domain
              
              </th>
              <th>
                Description
              
              </th>
            </tr>
            <tr>
              <td>
                [[Value]]
              
              </td>
              <td>
                Any <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language type</a></emu-xref>
              
              </td>
              <td>
                The value retrieved by a get access of the property.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Writable]]
              
              </td>
              <td>
                Boolean
              
              </td>
              <td>
                If <emu-val>false</emu-val>, attempts by ECMAScript code to change the property's [[Value]] attribute using [[Set]] will not succeed.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Enumerable]]
              
              </td>
              <td>
                Boolean
              
              </td>
              <td>
                If <emu-val>true</emu-val>, the property will be enumerated by a for-in enumeration (see  <emu-xref href="#sec-for-in-and-for-of-statements"><a href="#sec-for-in-and-for-of-statements">13.7.5</a></emu-xref>). Otherwise, the property is said to be non-enumerable.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Configurable]]
              
              </td>
              <td>
                Boolean
              
              </td>
              <td>
                If <emu-val>false</emu-val>, attempts to delete the 
property, change the property to be an accessor property, or change its 
attributes (other than [[Value]], or changing [[Writable]] to <emu-val>false</emu-val>) will fail.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <p>An accessor property associates a key value with the attributes listed in  <emu-xref href="#table-3"><a href="#table-3">Table 3</a></emu-xref>.</p>
        <emu-table id="table-3" caption="Attributes of an Accessor Property"><figure><figcaption>Table 3: Attributes of an Accessor Property</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Attribute Name
              
              </th>
              <th>
                Value Domain
              
              </th>
              <th>
                Description
              
              </th>
            </tr>
            <tr>
              <td>
                [[Get]]
              
              </td>
              <td>
                Object | Undefined
              
              </td>
              <td>
                If the value is an Object it must be a function object. The function's [[Call]] internal method (<emu-xref href="#table-6"><a href="#table-6">Table 6</a></emu-xref>) is called with an empty arguments list to retrieve the property value each time a get access of the property is performed.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Set]]
              
              </td>
              <td>
                Object | Undefined
              
              </td>
              <td>
                If the value is an Object it must be a function object. The function's [[Call]] internal method (<emu-xref href="#table-6"><a href="#table-6">Table 6</a></emu-xref>)
 is called with an arguments list containing the assigned value as its 
sole argument each time a set access of the property is performed. The 
effect of a property's [[Set]] internal method may, but is not required 
to, have an effect on the value returned by subsequent calls to the 
property's [[Get]] internal method.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Enumerable]]
              
              </td>
              <td>
                Boolean
              
              </td>
              <td>
                If <emu-val>true</emu-val>, the property is to be enumerated by a for-in enumeration (see  <emu-xref href="#sec-for-in-and-for-of-statements"><a href="#sec-for-in-and-for-of-statements">13.7.5</a></emu-xref>). Otherwise, the property is said to be non-enumerable.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Configurable]]
              
              </td>
              <td>
                Boolean
              
              </td>
              <td>
                If <emu-val>false</emu-val>, attempts to delete the property, change the property to be a data property, or change its attributes will fail.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <p>If the initial values of a property's attributes are not 
explicitly specified by this specification, the default value defined in
  <emu-xref href="#table-4"><a href="#table-4">Table 4</a></emu-xref> is used.</p>
        <emu-table id="table-4" caption="Default Attribute Values"><figure><figcaption>Table 4: Default Attribute Values</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Attribute Name
              
              </th>
              <th>
                Default Value
              
              </th>
            </tr>
            <tr>
              <td>
                [[Value]]
              
              </td>
              <td>
                <emu-val>undefined</emu-val>
              
              </td>
            </tr>
            <tr>
              <td>
                [[Get]]
              
              </td>
              <td>
                <emu-val>undefined</emu-val>
              
              </td>
            </tr>
            <tr>
              <td>
                [[Set]]
              
              </td>
              <td>
                <emu-val>undefined</emu-val>
              
              </td>
            </tr>
            <tr>
              <td>
                [[Writable]]
              
              </td>
              <td>
                <emu-val>false</emu-val>
              
              </td>
            </tr>
            <tr>
              <td>
                [[Enumerable]]
              
              </td>
              <td>
                <emu-val>false</emu-val>
              
              </td>
            </tr>
            <tr>
              <td>
                [[Configurable]]
              
              </td>
              <td>
                <emu-val>false</emu-val>
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
      </emu-clause>

      <!-- es6num="6.1.7.2" -->
      <emu-clause id="sec-object-internal-methods-and-internal-slots">
        <h1><span class="secnum">6.1.7.2</span>Object Internal Methods and Internal Slots<span class="utils"><span class="anchor"><a href="#sec-object-internal-methods-and-internal-slots">#</a></span></span></h1>
        <p>The actual semantics of objects, in ECMAScript, are specified via algorithms called  <em>internal methods</em>.
 Each object in an ECMAScript engine is associated with a set of 
internal methods that defines its runtime behaviour. These internal 
methods are not part of the ECMAScript language. They are defined by 
this specification purely for expository purposes. However, each object 
within an implementation of ECMAScript must behave as specified by the 
internal methods associated with it. The exact manner in which this is 
accomplished is determined by the implementation.</p>
        <p>Internal method names are polymorphic. This means that 
different object values may perform different algorithms when a common 
internal method name is invoked upon them. That actual object upon which
 an internal method is invoked is the âtargetâ of the invocation. If, at
 runtime, the implementation of an algorithm attempts to use an internal
 method of an object that the object does not support, a <emu-val>TypeError</emu-val> exception is thrown.</p>
        <p>Internal slots correspond to internal state that is 
associated with objects and used by various ECMAScript specification 
algorithms. Internal slots are not object properties and they are not 
inherited. Depending upon the specific internal slot specification, such
 state may consist of values of any <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language type</a></emu-xref>
 or of specific ECMAScript specification type values. Unless explicitly 
specified otherwise, internal slots are allocated as part of the process
 of creating an object and may not be dynamically added to an object. 
Unless specified otherwise, the initial value of an internal slot is the
 value <emu-val>undefined</emu-val>. Various algorithms within this 
specification create objects that have internal slots. However, the 
ECMAScript language provides no direct way to associate internal slots 
with an object.</p>
        <p>Internal methods and internal slots are identified within 
this specification using names enclosed in double square brackets [[ ]].</p>
        <p><emu-xref href="#table-5"><a href="#table-5">Table 5</a></emu-xref> summarizes the  <em>essential internal methods</em>
 used by this specification that are applicable to all objects created 
or manipulated by ECMAScript code. Every object must have algorithms for
 all of the essential internal methods. However, all objects do not 
necessarily use the same algorithms for those methods.</p>
        <p>The âSignatureâ column of  <emu-xref href="#table-5"><a href="#table-5">Table 5</a></emu-xref>
 and other similar tables describes the invocation pattern for each 
internal method. The invocation pattern always includes a parenthesized 
list of descriptive parameter names. If a parameter name is the same as 
an ECMAScript type name then the name describes the required type of the
 parameter value. If an internal method explicitly returns a value, its 
parameter list is followed by the symbol âââ and the type name of the 
returned value. The type names used in signatures refer to the types 
defined in clause  <emu-xref href="#sec-ecmascript-data-types-and-values"><a href="#sec-ecmascript-data-types-and-values">6</a></emu-xref> augmented by the following additional names. â<em>any</em>â means the value may be any <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language type</a></emu-xref>. An internal method implicitly returns a <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref>. In addition to its parameters, an internal method always has access to the object that is the target of the method invocation.</p>
        <emu-table id="table-5" caption="Essential Internal Methods"><figure><figcaption>Table 5: Essential Internal Methods</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Internal Method
              
              </th>
              <th>
                Signature
              
              </th>
              <th>
                Description
              
              </th>
            </tr>
            <tr>
              <td>
                [[GetPrototypeOf]]
              
              </td>
              <td>
                ()  <b>â</b> Object | Null
              
              </td>
              <td>
                Determine the object that provides inherited properties for this object. A <emu-val>null</emu-val> value indicates that there are no inherited properties.
              
              </td>
            </tr>
            <tr>
              <td>
                [[SetPrototypeOf]]
              
              </td>
              <td>
                (Object | Null)  <b>â</b> Boolean
              
              </td>
              <td>
                Associate this object with another object that provides inherited properties. Passing <emu-val>null</emu-val> indicates that there are no inherited properties. Returns <emu-val>true</emu-val> indicating that the operation was completed successfully or <emu-val>false</emu-val> indicating that the operation was not successful.
              
              </td>
            </tr>
            <tr>
              <td>
                [[IsExtensible]]
              
              </td>
              <td>
                ( )  <b>â</b> Boolean
              
              </td>
              <td>
                Determine whether it is permitted to add additional properties to this object.
              
              </td>
            </tr>
            <tr>
              <td>
                [[PreventExtensions]]
              
              </td>
              <td>
                ( )  <b>â</b> Boolean
              
              </td>
              <td>
                Control whether new properties may be added to this object. Returns <emu-val>true</emu-val> if the operation was successful or <emu-val>false</emu-val> if the operation was unsuccessful.
              
              </td>
            </tr>
            <tr>
              <td>
                [[GetOwnProperty]]
              
              </td>
              <td>
                (<var>propertyKey</var>)  <b>â</b> Undefined | <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref>
              
              </td>
              <td>
                Return a <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> for the own property of this object whose key is <var>propertyKey</var>, or <emu-val>undefined</emu-val> if no such property exists.
              
              </td>
            </tr>
            <tr>
              <td>
                [[HasProperty]]
              
              </td>
              <td>
                (<var>propertyKey</var>)  <b>â</b> Boolean
              
              </td>
              <td>
                Return a Boolean value indicating whether this object 
already has either an own or inherited property whose key is <var>propertyKey</var>.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Get]]
              
              </td>
              <td>
                (<var>propertyKey</var>, <var>Receiver</var>)  <b>â</b> <em>any</em>
              </td>
              <td>
                Return the value of the property whose key is <var>propertyKey</var> from this object. If any ECMAScript code must be executed to retrieve the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Set]]
              
              </td>
              <td>
                (<var>propertyKey</var>, <var>value</var>, <var>Receiver</var>)  <b>â</b> Boolean
              
              </td>
              <td>
                Set the value of the property whose key is <var>propertyKey</var> to <var>value</var>. If any ECMAScript code must be executed to set the property value, <var>Receiver</var> is used as the <emu-val>this</emu-val> value when evaluating the code. Returns <emu-val>true</emu-val> if the property value was set or <emu-val>false</emu-val> if it could not be set.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Delete]]
              
              </td>
              <td>
                (<var>propertyKey</var>)  <b>â</b> Boolean
              
              </td>
              <td>
                Remove the own property whose key is <var>propertyKey</var> from this object. Return <emu-val>false</emu-val> if the property was not deleted and is still present. Return <emu-val>true</emu-val> if the property was deleted or is not present.
              
              </td>
            </tr>
            <tr>
              <td>
                [[DefineOwnProperty]]
              
              </td>
              <td>
                (<var>propertyKey</var>, <var>PropertyDescriptor</var>)  <b>â</b> Boolean
              
              </td>
              <td>
                Create or alter the own property, whose key is <var>propertyKey</var>, to have the state described by <var>PropertyDescriptor</var>. Return <emu-val>true</emu-val> if that property was successfully created/updated or <emu-val>false</emu-val> if the property could not be created or updated.
              
              </td>
            </tr>
            <tr>
              <td>
                [[OwnPropertyKeys]]
              
              </td>
              <td>
                ()<b>â</b><emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of propertyKey
              
              </td>
              <td>
                Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> whose elements are all of the own property keys for the object.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <p><emu-xref href="#table-6"><a href="#table-6">Table 6</a></emu-xref> summarizes additional essential internal methods that are supported by objects that may be called as functions. A  <em>function object</em> is an object that supports the [[Call]] internal method. A  <em>constructor</em> (also referred to as a  <em>constructor function</em>) is a function object that supports the [[Construct]] internal method.</p>
        <emu-table id="table-6" caption="Additional Essential Internal Methods of Function Objects"><figure><figcaption>Table 6: Additional Essential Internal Methods of Function Objects</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Internal Method
              
              </th>
              <th>
                Signature
              
              </th>
              <th>
                Description
              
              </th>
            </tr>
            <tr>
              <td>
                [[Call]]
              
              </td>
              <td>
                (<em>any</em>, a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of  <em>any</em>)  <b>â</b> <em>any</em>
              </td>
              <td>
                Executes code associated with this object. Invoked via a
 function call expression. The arguments to the internal method are a <emu-val>this</emu-val>
 value and a list containing the arguments passed to the function by a 
call expression. Objects that implement this internal method are  <em>callable</em>.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Construct]]
              
              </td>
              <td>
                (a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of  <em>any</em>, Object)  <b>â</b> Object
              
              </td>
              <td>
                Creates an object. Invoked via the <code>new</code> or <code>super</code>
 operators. The first argument to the internal method is a list 
containing the arguments of the operator. The second argument is the 
object to which the <code>new</code> operator was initially applied. Objects that implement this internal method are called  <em>constructors</em>.
 A function object is not necessarily a constructor and such 
non-constructor function objects do not have a [[Construct]] internal 
method.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <p>The semantics of the essential internal methods for ordinary objects and standard exotic objects are specified in clause  <emu-xref href="#sec-ordinary-and-exotic-objects-behaviours"><a href="#sec-ordinary-and-exotic-objects-behaviours">9</a></emu-xref>. If any specified use of an internal method of an exotic object is not supported by an implementation, that usage must throw a <emu-val>TypeError</emu-val> exception when attempted.</p>
      </emu-clause>

      <!-- es6num="6.1.7.3" -->
      <emu-clause id="sec-invariants-of-the-essential-internal-methods">
        <h1><span class="secnum">6.1.7.3</span>Invariants of the Essential Internal Methods<span class="utils"><span class="anchor"><a href="#sec-invariants-of-the-essential-internal-methods">#</a></span></span></h1>
        <p>The Internal Methods of Objects of an ECMAScript engine must 
conform to the list of invariants specified below. Ordinary ECMAScript 
Objects as well as all standard exotic objects in this specification 
maintain these invariants. ECMAScript Proxy objects maintain these 
invariants by means of runtime checks on the result of traps invoked on 
the [[ProxyHandler]] object.</p>
        <p>Any implementation provided exotic objects must also maintain
 these invariants for those objects. Violation of these invariants may 
cause ECMAScript code to have unpredictable behaviour and create 
security issues. However, violation of these invariants must never 
compromise the memory safety of an implementation.</p>
        <p>An implementation must not allow these invariants to be 
circumvented in any manner such as by providing alternative interfaces 
that implement the functionality of the essential internal methods 
without enforcing their invariants.</p>
        <h2>Definitions:</h2>
        <ul>
          <li>
            The  <em>target</em> of an internal method is the object upon which the internal method is called.
          
          </li>
          <li>
            A target is  <em>non-extensible</em> if it has been observed
 to return false from its [[IsExtensible]] internal method, or true from
 its [[PreventExtensions]] internal method.
          
          </li>
          <li>
            A  <em>non-existent</em> property is a property that does not exist as an own property on a non-extensible target.
          
          </li>
          <li>
            All references to  <em><emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref></em> are according to the definition of the <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref> algorithm.
          
          </li>
        </ul>
        <h2>[[GetPrototypeOf]] ( )</h2>
        <ul>
          <li>
            The Type of the return value must be either Object or Null.
          
          </li>
          <li>
            If target is non-extensible, and [[GetPrototypeOf]] returns a
 value v, then any future calls to [[GetPrototypeOf]] should return the <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref> as v.
          
          </li>
        </ul>
        <emu-note><span class="note">Note 1</span>
          <p>An object's prototype chain should have finite length (that
 is, starting from any object, recursively applying the 
[[GetPrototypeOf]] internal method to its result should eventually lead 
to the value null). However, this requirement is not enforceable as an 
object level invariant if the prototype chain includes any exotic 
objects that do not use the ordinary object definition of 
[[GetPrototypeOf]]. Such a circular prototype chain may result in 
infinite loops when accessing object properties.</p>
        </emu-note>
        <h2>[[SetPrototypeOf]] (<var>V</var>)</h2>
        <ul>
          <li>
            The Type of the return value must be Boolean.
          
          </li>
          <li>
            If target is non-extensible, [[SetPrototypeOf]] must return false, unless V is the <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref> as the target's observed [[GetPrototypeOf]] value.
          
          </li>
        </ul>
        <h2>[[IsExtensible]] ( )</h2>
        <ul>
          <li>
            The Type of the return value must be Boolean.
          
          </li>
          <li>
            If [[IsExtensible]] returns false, all future calls to [[IsExtensible]] on the target must return false.
          
          </li>
        </ul>
        <h2>[[PreventExtensions]] ( )</h2>
        <ul>
          <li>
            The Type of the return value must be Boolean.
          
          </li>
          <li>
            If [[PreventExtensions]] returns true, all future calls to 
[[IsExtensible]] on the target must return false and the target is now 
considered non-extensible.
          
          </li>
        </ul>
        <h2>[[GetOwnProperty]] (<var>P</var>)</h2>
        <ul>
          <li>
            The Type of the return value must be either <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> or Undefined.
          
          </li>
          <li>
            If the Type of the return value is <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref>, the return value must be a complete property descriptor (see  <emu-xref href="#sec-completepropertydescriptor"><a href="#sec-completepropertydescriptor">6.2.4.6</a></emu-xref>).
          
          </li>
          <li>
            If a property P is described as a data property with 
Desc.[[Value]] equal to v and Desc.[[Writable]] and 
Desc.[[Configurable]] are both false, then the <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref> must be returned for the Desc.[[Value]] attribute of the property on all future calls to [[GetOwnProperty]] ( P ).
          
          </li>
          <li>
            If P's attributes other than [[Writable]] may change over 
time or if the property might disappear, then P's [[Configurable]] 
attribute must be true.
          
          </li>
          <li>
            If the [[Writable]] attribute may change from false to true, then the [[Configurable]] attribute must be true.
          
          </li>
          <li>
            If the target is non-extensible and P is non-existent, then 
all future calls to [[GetOwnProperty]] (P) on the target must describe P
 as non-existent (i.e. [[GetOwnProperty]] (P) must return undefined).
          
          </li>
        </ul>
        <emu-note><span class="note">Note 2</span>
          <p>As a consequence of the third invariant, if a property is 
described as a data property and it may return different values over 
time, then either or both of the Desc.[[Writable]] and 
Desc.[[Configurable]] attributes must be true even if no mechanism to 
change the value is exposed via the other internal methods.</p>
        </emu-note>
        <h2>[[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)</h2>
        <ul>
          <li>
            The Type of the return value must be Boolean.
          
          </li>
          <li>
            <p>[[DefineOwnProperty]] must return false if P has 
previously been observed as a non-configurable own property of the 
target, unless either:</p>
            <ol>
              <li>
                P is a non-configurable writable own data property. A 
non-configurable writable data property can be changed into a 
non-configurable non-writable data property.
              
              </li>
              <li>
                All attributes in Desc are the <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref> as P's attributes.
              
              </li>
            </ol>
          </li>
          <li>
            [[DefineOwnProperty]] (P, Desc) must return false if target 
is non-extensible and P is a non-existent own property. That is, a 
non-extensible target object cannot be extended with new properties.
          
          </li>
        </ul>
        <h2>[[HasProperty]] ( <var>P</var> )</h2>
        <ul>
          <li>
            The Type of the return value must be Boolean.
          
          </li>
          <li>
            If P was previously observed as a non-configurable data or 
accessor own property of the target, [[HasProperty]] must return true.
          
          </li>
        </ul>
        <h2>[[Get]] (<var>P</var>, <var>Receiver</var>)</h2>
        <ul>
          <li>
            If P was previously observed as a non-configurable, 
non-writable own data property of the target with value v, then [[Get]] 
must return the <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>.
          
          </li>
          <li>
            If P was previously observed as a non-configurable own 
accessor property of the target whose [[Get]] attribute is undefined, 
the [[Get]] operation must return undefined.
          
          </li>
        </ul>
        <h2>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)</h2>
        <ul>
          <li>
            The Type of the return value must be Boolean.
          
          </li>
          <li>
            If P was previously observed as a non-configurable, 
non-writable own data property of the target, then [[Set]] must return 
false unless V is the <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref> as P's [[Value]] attribute.
          
          </li>
          <li>
            If P was previously observed as a non-configurable own 
accessor property of the target whose [[Set]] attribute is undefined, 
the [[Set]] operation must return false.
          
          </li>
        </ul>
        <h2>[[Delete]] ( <var>P</var> )</h2>
        <ul>
          <li>
            The Type of the return value must be Boolean.
          
          </li>
          <li>
            If P was previously observed to be a non-configurable own 
data or accessor property of the target, [[Delete]] must return false.
          
          </li>
        </ul>
        <h2>[[OwnPropertyKeys]] ( )</h2>
        <ul>
          <li>
            The return value must be a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
          
          </li>
          <li>
            The Type of each element of the returned <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> is either String or Symbol.
          
          </li>
          <li>
            The returned <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> must contain at least the keys of all non-configurable own properties that have previously been observed.
          
          </li>
          <li>
            If the object is non-extensible, the returned <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> must contain only the keys of all own properties of the object that are observable using [[GetOwnProperty]].
          
          </li>
        </ul>
        <h2>[[Construct]] ( )</h2>
        <ul>
          <li>
            The Type of the return value must be Object.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="6.1.7.4" -->
      <emu-clause id="sec-well-known-intrinsic-objects">
        <h1><span class="secnum">6.1.7.4</span>Well-Known Intrinsic Objects<span class="utils"><span class="anchor"><a href="#sec-well-known-intrinsic-objects">#</a></span></span></h1>
        <p>Well-known intrinsics are built-in objects that are 
explicitly referenced by the algorithms of this specification and which 
usually have <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref>-specific
 identities. Unless otherwise specified each intrinsic object actually 
corresponds to a set of similar objects, one per <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref>.</p>
        <p>Within this specification a reference such as %name% means the intrinsic object, associated with the current <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref>, corresponding to the name. Determination of the current <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> and its intrinsics is described in  <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">8.3</a></emu-xref>. The well-known intrinsics are listed in  <emu-xref href="#table-7"><a href="#table-7">Table 7</a></emu-xref>.</p>
        <emu-table id="table-7" caption="Well-known Intrinsic Objects"><figure><figcaption>Table 7: Well-known Intrinsic Objects</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Intrinsic Name
              
              </th>
              <th>
                Global Name
              
              </th>
              <th>
                ECMAScript Language Association
              
              </th>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-array-constructor"><a href="#sec-array-constructor">%Array%</a></emu-xref>
              
              </td>
              <td>
                <code>Array</code>
              
              </td>
              <td>
                The <code>Array</code> constructor (<emu-xref href="#sec-array-constructor"><a href="#sec-array-constructor">22.1.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-arraybuffer-constructor"><a href="#sec-arraybuffer-constructor">%ArrayBuffer%</a></emu-xref>
              
              </td>
              <td>
                <code>ArrayBuffer</code>
              
              </td>
              <td>
                The <code>ArrayBuffer</code> constructor (<emu-xref href="#sec-arraybuffer-constructor"><a href="#sec-arraybuffer-constructor">24.1.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-arraybuffer-prototype-object"><a href="#sec-properties-of-the-arraybuffer-prototype-object">%ArrayBufferPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>ArrayBuffer.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-arraybuffer-constructor"><a href="#sec-arraybuffer-constructor">%ArrayBuffer%</a></emu-xref>.
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-%arrayiteratorprototype%-object"><a href="#sec-%arrayiteratorprototype%-object">%ArrayIteratorPrototype%</a></emu-xref>
              
              </td>
              <td>
              </td>
              <td>
                The prototype of Array iterator objects (<emu-xref href="#sec-array-iterator-objects"><a href="#sec-array-iterator-objects">22.1.5</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-array-prototype-object"><a href="#sec-properties-of-the-array-prototype-object">%ArrayPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Array.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-array-constructor"><a href="#sec-array-constructor">%Array%</a></emu-xref> (<emu-xref href="#sec-properties-of-the-array-prototype-object"><a href="#sec-properties-of-the-array-prototype-object">22.1.3</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-array.prototype.values"><a href="#sec-array.prototype.values">%ArrayProto_values%</a></emu-xref>
              
              </td>
              <td>
                <code>Array.prototype.values</code>
              
              </td>
              <td>
                The initial value of the <code>values</code> data property of <emu-xref href="#sec-properties-of-the-array-prototype-object"><a href="#sec-properties-of-the-array-prototype-object">%ArrayPrototype%</a></emu-xref> (<emu-xref href="#sec-array.prototype.values"><a href="#sec-array.prototype.values">22.1.3.30</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-boolean-constructor"><a href="#sec-boolean-constructor">%Boolean%</a></emu-xref>
              
              </td>
              <td>
                <code>Boolean</code>
              
              </td>
              <td>
                The <code>Boolean</code> constructor (<emu-xref href="#sec-boolean-constructor"><a href="#sec-boolean-constructor">19.3.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-boolean-prototype-object"><a href="#sec-properties-of-the-boolean-prototype-object">%BooleanPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Boolean.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-boolean-constructor"><a href="#sec-boolean-constructor">%Boolean%</a></emu-xref> (<emu-xref href="#sec-properties-of-the-boolean-prototype-object"><a href="#sec-properties-of-the-boolean-prototype-object">19.3.3</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-dataview-constructor"><a href="#sec-dataview-constructor">%DataView%</a></emu-xref>
              
              </td>
              <td>
                <code>DataView</code>
              
              </td>
              <td>
                The <code>DataView</code> constructor (<emu-xref href="#sec-dataview-constructor"><a href="#sec-dataview-constructor">24.2.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-dataview-prototype-object"><a href="#sec-properties-of-the-dataview-prototype-object">%DataViewPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>DataView.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-dataview-constructor"><a href="#sec-dataview-constructor">%DataView%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-date-constructor"><a href="#sec-date-constructor">%Date%</a></emu-xref>
              
              </td>
              <td>
                <code>Date</code>
              
              </td>
              <td>
                The <code>Date</code> constructor (<emu-xref href="#sec-date-constructor"><a href="#sec-date-constructor">20.3.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-date-prototype-object"><a href="#sec-properties-of-the-date-prototype-object">%DatePrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Date.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-date-constructor"><a href="#sec-date-constructor">%Date%</a></emu-xref>.
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-decodeuri-encodeduri"><a href="#sec-decodeuri-encodeduri">%decodeURI%</a></emu-xref>
              
              </td>
              <td>
                <code>decodeURI</code>
              
              </td>
              <td>
                The <code>decodeURI</code> function (<emu-xref href="#sec-decodeuri-encodeduri"><a href="#sec-decodeuri-encodeduri">18.2.6.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-decodeuricomponent-encodeduricomponent"><a href="#sec-decodeuricomponent-encodeduricomponent">%decodeURIComponent%</a></emu-xref>
              
              </td>
              <td>
                <code>decodeURIComponent</code>
              
              </td>
              <td>
                The <code>decodeURIComponent</code> function (<emu-xref href="#sec-decodeuricomponent-encodeduricomponent"><a href="#sec-decodeuricomponent-encodeduricomponent">18.2.6.3</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-encodeuri-uri"><a href="#sec-encodeuri-uri">%encodeURI%</a></emu-xref>
              
              </td>
              <td>
                <code>encodeURI</code>
              
              </td>
              <td>
                The <code>encodeURI</code> function (<emu-xref href="#sec-encodeuri-uri"><a href="#sec-encodeuri-uri">18.2.6.4</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-encodeuricomponent-uricomponent"><a href="#sec-encodeuricomponent-uricomponent">%encodeURIComponent%</a></emu-xref>
              
              </td>
              <td>
                <code>encodeURIComponent</code>
              
              </td>
              <td>
                The <code>encodeURIComponent</code> function (<emu-xref href="#sec-encodeuricomponent-uricomponent"><a href="#sec-encodeuricomponent-uricomponent">18.2.6.5</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-error-constructor"><a href="#sec-error-constructor">%Error%</a></emu-xref>
              
              </td>
              <td>
                <code>Error</code>
              
              </td>
              <td>
                The <code>Error</code> constructor (<emu-xref href="#sec-error-constructor"><a href="#sec-error-constructor">19.5.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-error-prototype-object"><a href="#sec-properties-of-the-error-prototype-object">%ErrorPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Error.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-error-constructor"><a href="#sec-error-constructor">%Error%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-eval-x"><a href="#sec-eval-x">%eval%</a></emu-xref>
              
              </td>
              <td>
                <code>eval</code>
              
              </td>
              <td>
                The <code>eval</code> function (<emu-xref href="#sec-eval-x"><a href="#sec-eval-x">18.2.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %EvalError%
              
              </td>
              <td>
                <code>EvalError</code>
              
              </td>
              <td>
                The <code>EvalError</code> constructor (<emu-xref href="#sec-native-error-types-used-in-this-standard-evalerror"><a href="#sec-native-error-types-used-in-this-standard-evalerror">19.5.5.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %EvalErrorPrototype%
              
              </td>
              <td>
                <code>EvalError.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> property of %EvalError%
              
              </td>
            </tr>
            <tr>
              <td>
                %Float32Array%
              
              </td>
              <td>
                <code>Float32Array</code>
              
              </td>
              <td>
                The <code>Float32Array</code> constructor (<emu-xref href="#sec-typedarray-objects"><a href="#sec-typedarray-objects">22.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %Float32ArrayPrototype%
              
              </td>
              <td>
                <code>Float32Array.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of %Float32Array%.
              
              </td>
            </tr>
            <tr>
              <td>
                %Float64Array%
              
              </td>
              <td>
                <code>Float64Array</code>
              
              </td>
              <td>
                The <code>Float64Array</code> constructor (<emu-xref href="#sec-typedarray-objects"><a href="#sec-typedarray-objects">22.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %Float64ArrayPrototype%
              
              </td>
              <td>
                <code>Float64Array.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of %Float64Array%
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-function-constructor"><a href="#sec-function-constructor">%Function%</a></emu-xref>
              
              </td>
              <td>
                <code>Function</code>
              
              </td>
              <td>
                The <code>Function</code> constructor (<emu-xref href="#sec-function-constructor"><a href="#sec-function-constructor">19.2.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-function-prototype-object"><a href="#sec-properties-of-the-function-prototype-object">%FunctionPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Function.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-function-constructor"><a href="#sec-function-constructor">%Function%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                %Generator%
              
              </td>
              <td>
              </td>
              <td>
                The initial value of the <code>prototype</code> property of <emu-xref href="#sec-generatorfunction-constructor"><a href="#sec-generatorfunction-constructor">%GeneratorFunction%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-generatorfunction-constructor"><a href="#sec-generatorfunction-constructor">%GeneratorFunction%</a></emu-xref>
              
              </td>
              <td>
              </td>
              <td>
                The constructor of generator objects (<emu-xref href="#sec-generatorfunction-constructor"><a href="#sec-generatorfunction-constructor">25.2.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-generator-prototype"><a href="#sec-properties-of-generator-prototype">%GeneratorPrototype%</a></emu-xref>
              
              </td>
              <td>
              </td>
              <td>
                The initial value of the <code>prototype</code> property of %Generator%
              
              </td>
            </tr>
            <tr>
              <td>
                %Int8Array%
              
              </td>
              <td>
                <code>Int8Array</code>
              
              </td>
              <td>
                The <code>Int8Array</code> constructor (<emu-xref href="#sec-typedarray-objects"><a href="#sec-typedarray-objects">22.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %Int8ArrayPrototype%
              
              </td>
              <td>
                <code>Int8Array.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of %Int8Array%
              
              </td>
            </tr>
            <tr>
              <td>
                %Int16Array%
              
              </td>
              <td>
                <code>Int16Array</code>
              
              </td>
              <td>
                The <code>Int16Array</code> constructor (<emu-xref href="#sec-typedarray-objects"><a href="#sec-typedarray-objects">22.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %Int16ArrayPrototype%
              
              </td>
              <td>
                <code>Int16Array.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of %Int16Array%
              
              </td>
            </tr>
            <tr>
              <td>
                %Int32Array%
              
              </td>
              <td>
                <code>Int32Array</code>
              
              </td>
              <td>
                The <code>Int32Array</code> constructor (<emu-xref href="#sec-typedarray-objects"><a href="#sec-typedarray-objects">22.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %Int32ArrayPrototype%
              
              </td>
              <td>
                <code>Int32Array.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of %Int32Array%
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-isfinite-number"><a href="#sec-isfinite-number">%isFinite%</a></emu-xref>
              
              </td>
              <td>
                <code>isFinite</code>
              
              </td>
              <td>
                The <code>isFinite</code> function (<emu-xref href="#sec-isfinite-number"><a href="#sec-isfinite-number">18.2.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-isnan-number"><a href="#sec-isnan-number">%isNaN%</a></emu-xref>
              
              </td>
              <td>
                <code>isNaN</code>
              
              </td>
              <td>
                The <code>isNaN</code> function (<emu-xref href="#sec-isnan-number"><a href="#sec-isnan-number">18.2.3</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-%iteratorprototype%-object"><a href="#sec-%iteratorprototype%-object">%IteratorPrototype%</a></emu-xref>
              
              </td>
              <td>
              </td>
              <td>
                An object that all standard built-in iterator objects indirectly inherit from
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-json-object"><a href="#sec-json-object">%JSON%</a></emu-xref>
              
              </td>
              <td>
                <code>JSON</code>
              
              </td>
              <td>
                The <code>JSON</code> object (<emu-xref href="#sec-json-object"><a href="#sec-json-object">24.3</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-map-constructor"><a href="#sec-map-constructor">%Map%</a></emu-xref>
              
              </td>
              <td>
                <code>Map</code>
              
              </td>
              <td>
                The <code>Map</code> constructor (<emu-xref href="#sec-map-constructor"><a href="#sec-map-constructor">23.1.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-%mapiteratorprototype%-object"><a href="#sec-%mapiteratorprototype%-object">%MapIteratorPrototype%</a></emu-xref>
              
              </td>
              <td>
              </td>
              <td>
                The prototype of Map iterator objects (<emu-xref href="#sec-map-iterator-objects"><a href="#sec-map-iterator-objects">23.1.5</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-map-prototype-object"><a href="#sec-properties-of-the-map-prototype-object">%MapPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Map.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-map-constructor"><a href="#sec-map-constructor">%Map%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-math-object"><a href="#sec-math-object">%Math%</a></emu-xref>
              
              </td>
              <td>
                <code>Math</code>
              
              </td>
              <td>
                The <code>Math</code> object (<emu-xref href="#sec-math-object"><a href="#sec-math-object">20.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-number-constructor"><a href="#sec-number-constructor">%Number%</a></emu-xref>
              
              </td>
              <td>
                <code>Number</code>
              
              </td>
              <td>
                The <code>Number</code> constructor (<emu-xref href="#sec-number-constructor"><a href="#sec-number-constructor">20.1.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-number-prototype-object"><a href="#sec-properties-of-the-number-prototype-object">%NumberPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Number.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> property of <emu-xref href="#sec-number-constructor"><a href="#sec-number-constructor">%Number%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-object-constructor"><a href="#sec-object-constructor">%Object%</a></emu-xref>
              
              </td>
              <td>
                <code>Object</code>
              
              </td>
              <td>
                The <code>Object</code> constructor (<emu-xref href="#sec-object-constructor"><a href="#sec-object-constructor">19.1.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Object.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-object-constructor"><a href="#sec-object-constructor">%Object%</a></emu-xref>. (<emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">19.1.3</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-object.prototype.tostring"><a href="#sec-object.prototype.tostring">%ObjProto_toString%</a></emu-xref>
              
              </td>
              <td>
                <code>Object.prototype.toString</code>
              
              </td>
              <td>
                The initial value of the <code>toString</code> data property of <emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref> (<emu-xref href="#sec-object.prototype.tostring"><a href="#sec-object.prototype.tostring">19.1.3.6</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-object.prototype.valueof"><a href="#sec-object.prototype.valueof">%ObjProto_valueOf%</a></emu-xref>
              
              </td>
              <td>
                <code>Object.prototype.valueOf</code>
              
              </td>
              <td>
                The initial value of the <code>valueOf</code> data property of <emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref> (<emu-xref href="#sec-object.prototype.valueof"><a href="#sec-object.prototype.valueof">19.1.3.7</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-parsefloat-string"><a href="#sec-parsefloat-string">%parseFloat%</a></emu-xref>
              
              </td>
              <td>
                <code>parseFloat</code>
              
              </td>
              <td>
                The <code>parseFloat</code> function (<emu-xref href="#sec-parsefloat-string"><a href="#sec-parsefloat-string">18.2.4</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-parseint-string-radix"><a href="#sec-parseint-string-radix">%parseInt%</a></emu-xref>
              
              </td>
              <td>
                <code>parseInt</code>
              
              </td>
              <td>
                The <code>parseInt</code> function (<emu-xref href="#sec-parseint-string-radix"><a href="#sec-parseint-string-radix">18.2.5</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-promise-constructor"><a href="#sec-promise-constructor">%Promise%</a></emu-xref>
              
              </td>
              <td>
                <code>Promise</code>
              
              </td>
              <td>
                The <code>Promise</code> constructor (<emu-xref href="#sec-promise-constructor"><a href="#sec-promise-constructor">25.4.3</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-promise-prototype-object"><a href="#sec-properties-of-the-promise-prototype-object">%PromisePrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Promise.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-promise-constructor"><a href="#sec-promise-constructor">%Promise%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-proxy-constructor"><a href="#sec-proxy-constructor">%Proxy%</a></emu-xref>
              
              </td>
              <td>
                <code>Proxy</code>
              
              </td>
              <td>
                The <code>Proxy</code> constructor (<emu-xref href="#sec-proxy-constructor"><a href="#sec-proxy-constructor">26.2.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %RangeError%
              
              </td>
              <td>
                <code>RangeError</code>
              
              </td>
              <td>
                The <code>RangeError</code> constructor (<emu-xref href="#sec-native-error-types-used-in-this-standard-rangeerror"><a href="#sec-native-error-types-used-in-this-standard-rangeerror">19.5.5.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %RangeErrorPrototype%
              
              </td>
              <td>
                <code>RangeError.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> property of %RangeError%
              
              </td>
            </tr>
            <tr>
              <td>
                %ReferenceError%
              
              </td>
              <td>
                <code>ReferenceError</code>
              
              </td>
              <td>
                The <code>ReferenceError</code> constructor (<emu-xref href="#sec-native-error-types-used-in-this-standard-referenceerror"><a href="#sec-native-error-types-used-in-this-standard-referenceerror">19.5.5.3</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %ReferenceErrorPrototype%
              
              </td>
              <td>
                <code>ReferenceError.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> property of %ReferenceError%
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-reflect-object"><a href="#sec-reflect-object">%Reflect%</a></emu-xref>
              
              </td>
              <td>
                <code>Reflect</code>
              
              </td>
              <td>
                The <code>Reflect</code> object (<emu-xref href="#sec-reflect-object"><a href="#sec-reflect-object">26.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-regexp-constructor"><a href="#sec-regexp-constructor">%RegExp%</a></emu-xref>
              
              </td>
              <td>
                <code>RegExp</code>
              
              </td>
              <td>
                The <code>RegExp</code> constructor (<emu-xref href="#sec-regexp-constructor"><a href="#sec-regexp-constructor">21.2.3</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-regexp-prototype-object"><a href="#sec-properties-of-the-regexp-prototype-object">%RegExpPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>RegExp.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-regexp-constructor"><a href="#sec-regexp-constructor">%RegExp%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-set-constructor"><a href="#sec-set-constructor">%Set%</a></emu-xref>
              
              </td>
              <td>
                <code>Set</code>
              
              </td>
              <td>
                The <code>Set</code> constructor (<emu-xref href="#sec-set-constructor"><a href="#sec-set-constructor">23.2.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-%setiteratorprototype%-object"><a href="#sec-%setiteratorprototype%-object">%SetIteratorPrototype%</a></emu-xref>
              
              </td>
              <td>
              </td>
              <td>
                The prototype of Set iterator objects (<emu-xref href="#sec-set-iterator-objects"><a href="#sec-set-iterator-objects">23.2.5</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-set-prototype-object"><a href="#sec-properties-of-the-set-prototype-object">%SetPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Set.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-set-constructor"><a href="#sec-set-constructor">%Set%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-string-constructor"><a href="#sec-string-constructor">%String%</a></emu-xref>
              
              </td>
              <td>
                <code>String</code>
              
              </td>
              <td>
                The <code>String</code> constructor (<emu-xref href="#sec-string-constructor"><a href="#sec-string-constructor">21.1.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-%stringiteratorprototype%-object"><a href="#sec-%stringiteratorprototype%-object">%StringIteratorPrototype%</a></emu-xref>
              
              </td>
              <td>
              </td>
              <td>
                The prototype of String iterator objects (<emu-xref href="#sec-string-iterator-objects"><a href="#sec-string-iterator-objects">21.1.5</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-string-prototype-object"><a href="#sec-properties-of-the-string-prototype-object">%StringPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>String.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-string-constructor"><a href="#sec-string-constructor">%String%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-symbol-constructor"><a href="#sec-symbol-constructor">%Symbol%</a></emu-xref>
              
              </td>
              <td>
                <code>Symbol</code>
              
              </td>
              <td>
                The <code>Symbol</code> constructor (<emu-xref href="#sec-symbol-constructor"><a href="#sec-symbol-constructor">19.4.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-symbol-prototype-object"><a href="#sec-properties-of-the-symbol-prototype-object">%SymbolPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>Symbol.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-symbol-constructor"><a href="#sec-symbol-constructor">%Symbol%</a></emu-xref>. (<emu-xref href="#sec-properties-of-the-symbol-prototype-object"><a href="#sec-properties-of-the-symbol-prototype-object">19.4.3</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %SyntaxError%
              
              </td>
              <td>
                <code>SyntaxError</code>
              
              </td>
              <td>
                The <code>SyntaxError</code> constructor (<emu-xref href="#sec-native-error-types-used-in-this-standard-syntaxerror"><a href="#sec-native-error-types-used-in-this-standard-syntaxerror">19.5.5.4</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %SyntaxErrorPrototype%
              
              </td>
              <td>
                <code>SyntaxError.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> property of %SyntaxError%
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-%throwtypeerror%"><a href="#sec-%throwtypeerror%">%ThrowTypeError%</a></emu-xref>
              
              </td>
              <td>
              </td>
              <td>
                A function object that unconditionally throws a new instance of %TypeError%
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-%typedarray%-intrinsic-object"><a href="#sec-%typedarray%-intrinsic-object">%TypedArray%</a></emu-xref>
              
              </td>
              <td>
              </td>
              <td>
                The super class of all typed Array constructors (<emu-xref href="#sec-%typedarray%-intrinsic-object"><a href="#sec-%typedarray%-intrinsic-object">22.2.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-%typedarrayprototype%-object"><a href="#sec-properties-of-the-%typedarrayprototype%-object">%TypedArrayPrototype%</a></emu-xref>
              
              </td>
              <td>
              </td>
              <td>
                The initial value of the <code>prototype</code> property of <emu-xref href="#sec-%typedarray%-intrinsic-object"><a href="#sec-%typedarray%-intrinsic-object">%TypedArray%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                %TypeError%
              
              </td>
              <td>
                <code>TypeError</code>
              
              </td>
              <td>
                The <code>TypeError</code> constructor (<emu-xref href="#sec-native-error-types-used-in-this-standard-typeerror"><a href="#sec-native-error-types-used-in-this-standard-typeerror">19.5.5.5</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %TypeErrorPrototype%
              
              </td>
              <td>
                <code>TypeError.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> property of %TypeError%
              
              </td>
            </tr>
            <tr>
              <td>
                %Uint8Array%
              
              </td>
              <td>
                <code>Uint8Array</code>
              
              </td>
              <td>
                The <code>Uint8Array</code> constructor (<emu-xref href="#sec-typedarray-objects"><a href="#sec-typedarray-objects">22.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %Uint8ArrayPrototype%
              
              </td>
              <td>
                <code>Uint8Array.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of %Uint8Array%
              
              </td>
            </tr>
            <tr>
              <td>
                %Uint8ClampedArray%
              
              </td>
              <td>
                <code>Uint8ClampedArray</code>
              
              </td>
              <td>
                The <code>Uint8ClampedArray</code> constructor (<emu-xref href="#sec-typedarray-objects"><a href="#sec-typedarray-objects">22.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %Uint8ClampedArrayPrototype%
              
              </td>
              <td>
                <code>Uint8ClampedArray.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of %Uint8ClampedArray%
              
              </td>
            </tr>
            <tr>
              <td>
                %Uint16Array%
              
              </td>
              <td>
                <code>Uint16Array</code>
              
              </td>
              <td>
                The <code>Uint16Array</code> constructor (<emu-xref href="#sec-typedarray-objects"><a href="#sec-typedarray-objects">22.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %Uint16ArrayPrototype%
              
              </td>
              <td>
                <code>Uint16Array.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of %Uint16Array%
              
              </td>
            </tr>
            <tr>
              <td>
                %Uint32Array%
              
              </td>
              <td>
                <code>Uint32Array</code>
              
              </td>
              <td>
                The <code>Uint32Array</code> constructor (<emu-xref href="#sec-typedarray-objects"><a href="#sec-typedarray-objects">22.2</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %Uint32ArrayPrototype%
              
              </td>
              <td>
                <code>Uint32Array.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of %Uint32Array%
              
              </td>
            </tr>
            <tr>
              <td>
                %URIError%
              
              </td>
              <td>
                <code>URIError</code>
              
              </td>
              <td>
                The <code>URIError</code> constructor (<emu-xref href="#sec-native-error-types-used-in-this-standard-urierror"><a href="#sec-native-error-types-used-in-this-standard-urierror">19.5.5.6</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                %URIErrorPrototype%
              
              </td>
              <td>
                <code>URIError.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> property of %URIError%
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-weakmap-constructor"><a href="#sec-weakmap-constructor">%WeakMap%</a></emu-xref>
              
              </td>
              <td>
                <code>WeakMap</code>
              
              </td>
              <td>
                The <code>WeakMap</code> constructor (<emu-xref href="#sec-weakmap-constructor"><a href="#sec-weakmap-constructor">23.3.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-weakmap-prototype-object"><a href="#sec-properties-of-the-weakmap-prototype-object">%WeakMapPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>WeakMap.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-weakmap-constructor"><a href="#sec-weakmap-constructor">%WeakMap%</a></emu-xref>
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-weakset-constructor"><a href="#sec-weakset-constructor">%WeakSet%</a></emu-xref>
              
              </td>
              <td>
                <code>WeakSet</code>
              
              </td>
              <td>
                The <code>WeakSet</code> constructor (<emu-xref href="#sec-weakset-constructor"><a href="#sec-weakset-constructor">23.4.1</a></emu-xref>)
              
              </td>
            </tr>
            <tr>
              <td>
                <emu-xref href="#sec-properties-of-the-weakset-prototype-object"><a href="#sec-properties-of-the-weakset-prototype-object">%WeakSetPrototype%</a></emu-xref>
              
              </td>
              <td>
                <code>WeakSet.prototype</code>
              
              </td>
              <td>
                The initial value of the <code>prototype</code> data property of <emu-xref href="#sec-weakset-constructor"><a href="#sec-weakset-constructor">%WeakSet%</a></emu-xref>
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="6.2" -->
  <emu-clause id="sec-ecmascript-specification-types">
    <h1><span class="secnum">6.2</span>ECMAScript Specification Types<span class="utils"><span class="anchor"><a href="#sec-ecmascript-specification-types">#</a></span></span></h1>
    <p>A specification type corresponds to meta-values that are used 
within algorithms to describe the semantics of ECMAScript language 
constructs and ECMAScript language types. The specification types are <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>, <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>, <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>, <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref>, <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref>, <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>, and <emu-xref href="#sec-data-blocks"><a href="#sec-data-blocks">Data Block</a></emu-xref>.
 Specification type values are specification artefacts that do not 
necessarily correspond to any specific entity within an ECMAScript 
implementation. Specification type values may be used to describe 
intermediate results of ECMAScript expression evaluation but such values
 cannot be stored as properties of objects or values of ECMAScript 
language variables.</p>

    <!-- es6num="6.2.1" -->
    <emu-clause id="sec-list-and-record-specification-type">
      <h1><span class="secnum">6.2.1</span>The List and Record Specification Types<span class="utils"><span class="anchor"><a href="#sec-list-and-record-specification-type">#</a></span></span></h1>
      <p>The  <dfn>List</dfn> type is used to explain the evaluation of argument lists (see  <emu-xref href="#sec-argument-lists"><a href="#sec-argument-lists">12.3.6</a></emu-xref>) in <code>new</code>
 expressions, in function calls, and in other algorithms where a simple 
ordered list of values is needed. Values of the List type are simply 
ordered sequences of list elements containing the individual values. 
These sequences may be of any length. The elements of a list may be 
randomly accessed using 0-origin indices. For notational convenience an 
array-like syntax can be used to access List elements. For example, <var>arguments</var>[2] is shorthand for saying the 3<sup>rd</sup> element of the List <var>arguments</var>.</p>
      <p>For notational convenience within this specification, a literal
 syntax can be used to express a new List value. For example, Â« 1, 2 Â» 
defines a List value that has two elements each of which is initialized 
to a specific value. A new empty List can be expressed as Â« Â».</p>
      <p>The  <dfn>Record</dfn> type is used to describe data 
aggregations within the algorithms of this specification. A Record type 
value consists of one or more named fields. The value of each field is 
either an ECMAScript value or an abstract value represented by a name 
associated with the Record type. Field names are always enclosed in 
double brackets, for example [[Value]].</p>
      <p>For notational convenience within this specification, an object
 literal-like syntax can be used to express a Record value. For example,
 {[[Field1]]: 42, [[Field2]]: <emu-val>false</emu-val>, [[Field3]]: <emu-const>empty</emu-const>}
 defines a Record value that has three fields, each of which is 
initialized to a specific value. Field name order is not significant. 
Any fields that are not explicitly listed are considered to be absent.</p>
      <p>In specification text and algorithms, dot notation may be used 
to refer to a specific field of a Record value. For example, if R is the
 record shown in the previous paragraph then R.[[Field2]] is shorthand 
for âthe field of R named [[Field2]]â.</p>
      <p>Schema for commonly used Record field combinations may be 
named, and that name may be used as a prefix to a literal Record value 
to identify the specific kind of aggregations that is being described. 
For example: PropertyDescriptor{[[Value]]: 42, [[Writable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}.</p>
    </emu-clause>

    <!-- es6num="6.2.2" -->
    <emu-clause id="sec-completion-record-specification-type" aoid="Completion">
      <h1><span class="secnum">6.2.2</span>The Completion Record Specification Type<span class="utils"><span class="anchor"><a href="#sec-completion-record-specification-type">#</a></span></span></h1>
      <p>The Completion type is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> used to explain the runtime propagation of values and control flow such as the behaviour of statements (<code>break</code>, <code>continue</code>, <code>return</code> and <code>throw</code>) that perform nonlocal transfers of control.</p>
      <p>Values of the Completion type are <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> values whose fields are defined as by  <emu-xref href="#table-8"><a href="#table-8">Table 8</a></emu-xref>. Such values are referred to as  <dfn>Completion Record</dfn>s.</p>
      <emu-table id="table-8" caption="Completion Record Fields"><figure><figcaption>Table 8: Completion Record Fields</figcaption>
        <table>
          <tbody>
          <tr>
            <th>
              Field
            
            </th>
            <th>
              Value
            
            </th>
            <th>
              Meaning
            
            </th>
          </tr>
          <tr>
            <td>
              [[Type]]
            
            </td>
            <td>
              One of <emu-const>normal</emu-const>, <emu-const>break</emu-const>, <emu-const>continue</emu-const>, <emu-const>return</emu-const>, or <emu-const>throw</emu-const>
            
            </td>
            <td>
              The type of completion that occurred.
            
            </td>
          </tr>
          <tr>
            <td>
              [[Value]]
            
            </td>
            <td>
              any <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> or <emu-const>empty</emu-const>
            
            </td>
            <td>
              The value that was produced.
            
            </td>
          </tr>
          <tr>
            <td>
              [[Target]]
            
            </td>
            <td>
              any ECMAScript string or <emu-const>empty</emu-const>
            
            </td>
            <td>
              The target label for directed control transfers.
            
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>
      <p>The term â<dfn>abrupt completion</dfn>â refers to any completion with a [[Type]] value other than <emu-const>normal</emu-const>.</p>

      <!-- es6num="6.2.2.1" -->
      <emu-clause id="sec-normalcompletion" aoid="NormalCompletion">
        <h1><span class="secnum">6.2.2.1</span>NormalCompletion<span class="utils"><span class="anchor"><a href="#sec-normalcompletion">#</a></span></span></h1>
        <p>The abstract operation NormalCompletion with a single <var>argument</var>, such as:</p>
        <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>argument</var>).
        </li></ol></emu-alg>
        <p>Is a shorthand that is defined as follows:</p>
        <emu-alg><ol><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>normal</emu-const>, [[Value]]: <var>argument</var>, [[Target]]: <emu-const>empty</emu-const>}.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="6.2.2.2" -->
      <emu-clause id="sec-implicit-completion-values">
        <h1><span class="secnum">6.2.2.2</span>Implicit Completion Values<span class="utils"><span class="anchor"><a href="#sec-implicit-completion-values">#</a></span></span></h1>
        <p>The algorithms of this specification often implicitly return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref> Records whose [[Type]] is <emu-const>normal</emu-const>. Unless it is otherwise obvious from the context, an algorithm statement that returns a value that is not a <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref>, such as:</p>
        <emu-alg><ol><li>Return <code>"Infinity"</code>.
        </li></ol></emu-alg>
        <p>means the same thing as:</p>
        <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<code>"Infinity"</code>).
        </li></ol></emu-alg>
        <p>However, if the value expression of a âreturnâ statement is a <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> construction literal, the resulting <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> is returned. If the value expression is a call to an abstract operation, the âreturnâ statement simply returns the <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> produced by the abstract operation.</p>
        <p>The abstract operation <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>completionRecord</var>) is used to emphasize that a previously computed <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> is being returned. The <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref> abstract operation takes a single argument, <var>completionRecord</var>, and performs the following steps:</p>
        <emu-alg><ol><li>Assert: <var>completionRecord</var> is a <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref>.</li><li>Return <var>completionRecord</var> as the <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> of this abstract operation.
        </li></ol></emu-alg>
        <p>A âreturnâ statement without a value in an algorithm step means the same thing as:</p>
        <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).
        </li></ol></emu-alg>
        <p>Any reference to a <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> value that is in a context that does not explicitly require a complete <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> value is equivalent to an explicit reference to the [[Value]] field of the <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> value unless the <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>.</p>
      </emu-clause>

      <!-- es6num="6.2.2.3" -->
      <emu-clause id="sec-throw-an-exception">
        <h1><span class="secnum">6.2.2.3</span>Throw an Exception<span class="utils"><span class="anchor"><a href="#sec-throw-an-exception">#</a></span></span></h1>
        <p>Algorithms steps that say to throw an exception, such as</p>
        <emu-alg><ol><li>Throw a <emu-val>TypeError</emu-val> exception.
        </li></ol></emu-alg>
        <p>mean the same things as:</p>
        <emu-alg><ol><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>throw</emu-const>, [[Value]]: a newly created <emu-val>TypeError</emu-val> object, [[Target]]: <emu-const>empty</emu-const>}.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="6.2.2.4" -->
      <emu-clause id="sec-returnifabrupt" aoid="ReturnIfAbrupt">
        <h1><span class="secnum">6.2.2.4</span>ReturnIfAbrupt<span class="utils"><span class="anchor"><a href="#sec-returnifabrupt">#</a></span></span></h1>
        <p>Algorithms steps that say or are otherwise equivalent to:</p>
        <emu-alg><ol><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>argument</var>).
        </li></ol></emu-alg>
        <p>mean the same thing as:</p>
        <emu-alg><ol><li>If <var>argument</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, return <var>argument</var>.</li><li>Else if <var>argument</var> is a <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref>, let <var>argument</var> be <var>argument</var>.[[Value]].
        </li></ol></emu-alg>
        <p>Algorithms steps that say or are otherwise equivalent to:</p>
        <emu-alg><ol><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(AbstractOperation()).
        </li></ol></emu-alg>
        <p>mean the same thing as:</p>
        <emu-alg><ol><li>Let <var>hygienicTemp</var> be AbstractOperation().</li><li>If <var>hygienicTemp</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, return <var>hygienicTemp</var>.</li><li>Else if <var>hygienicTemp</var> is a <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref>, let <var>hygienicTemp</var> be <var>hygienicTemp</var>.[[Value]].
        </li></ol></emu-alg>
        <p>Where <var>hygienicTemp</var> is ephemeral and visible only in the steps pertaining to ReturnIfAbrupt.</p>
      </emu-clause>

      <!-- es6num="6.2.2.5" -->
      <emu-clause id="sec-updateempty" aoid="UpdateEmpty">
        <h1><span class="secnum">6.2.2.5</span>UpdateEmpty ( <var>completionRecord</var>, <var>value</var>)<span class="utils"><span class="anchor"><a href="#sec-updateempty">#</a></span></span></h1>
        <p>The abstract operation UpdateEmpty with arguments <var>completionRecord</var> and <var>value</var> performs the following steps:</p>
        <emu-alg><ol><li>Assert: If <var>completionRecord</var>.[[Type]] is either <emu-const>return</emu-const> or <emu-const>throw</emu-const>, then <var>completionRecord</var>.[[Value]] is not <emu-const>empty</emu-const>.</li><li>If <var>completionRecord</var>.[[Value]] is not <emu-const>empty</emu-const>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>completionRecord</var>).</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <var>completionRecord</var>.[[Type]], [[Value]]: <var>value</var>, [[Target]]: <var>completionRecord</var>.[[Target]] }.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="6.2.3" -->
    <emu-clause id="sec-reference-specification-type">
      <h1><span class="secnum">6.2.3</span>The Reference Specification Type<span class="utils"><span class="anchor"><a href="#sec-reference-specification-type">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>The Reference type is used to explain the behaviour of such operators as <code>delete</code>, <code>typeof</code>, the assignment operators, the <code>super</code> keyword and other language features. For example, the left-hand operand of an assignment is expected to produce a reference.</p>
      </emu-note>
      <p>A  <dfn>Reference</dfn> is a resolved name or property binding.
 A Reference consists of three components, the base value component, the
 referenced name component, and the Boolean-valued strict reference 
flag. The base value component is either <emu-val>undefined</emu-val>, an Object, a Boolean, a String, a Symbol, a Number, or an <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>. A base value component of <emu-val>undefined</emu-val> indicates that the Reference could not be resolved to a binding. The referenced name component is a String or Symbol value.</p>
      <p>A  <dfn id="super-reference">Super Reference</dfn> is a Reference that is used to represents a name binding that was expressed using the super keyword. A <emu-xref href="#super-reference"><a href="#super-reference">Super Reference</a></emu-xref> has an additional thisValue component, and its base value component will never be an <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</p>
      <p>The following abstract operations are used in this specification to access the components of references:</p>
      <ul>
        <li>
          <dfn aoid="GetBase" id="ao-getbase">GetBase</dfn>(<var>V</var>). Returns the base value component of the reference <var>V</var>.
        
        </li>
        <li>
          <dfn aoid="GetReferencedName" id="ao-getreferencedname">GetReferencedName</dfn>(<var>V</var>). Returns the referenced name component of the reference <var>V</var>.
        
        </li>
        <li>
          <dfn aoid="IsStrictReference" id="ao-isstrictreference">IsStrictReference</dfn>(<var>V</var>). Returns the strict reference flag of the reference <var>V</var>.
        
        </li>
        <li>
          <dfn aoid="HasPrimitiveBase" id="ao-hasprimitivebase">HasPrimitiveBase</dfn>(<var>V</var>). Returns <emu-val>true</emu-val> if <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>'s base value component) is Boolean, String, Symbol, or Number.
        
        </li>
        <li>
          <dfn aoid="IsPropertyReference" id="ao-ispropertyreference">IsPropertyReference</dfn>(<var>V</var>). Returns <emu-val>true</emu-val> if either the base value component of the reference <var>V</var> is an object or <emu-xref href="#ao-hasprimitivebase"><a href="#ao-hasprimitivebase">HasPrimitiveBase</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>; otherwise returns <emu-val>false</emu-val>.
        
        </li>
        <li>
          <dfn aoid="IsUnresolvableReference" id="ao-isunresolvablereference">IsUnresolvableReference</dfn>(<var>V</var>). Returns <emu-val>true</emu-val> if the base value component of the reference <var>V</var> is <emu-val>undefined</emu-val>; otherwise returns <emu-val>false</emu-val>.
        
        </li>
        <li>
          <dfn aoid="IsSuperReference" id="ao-issuperreference">IsSuperReference</dfn>(<var>V</var>). Returns <emu-val>true</emu-val> if the reference <var>V</var> has a thisValue component.
        
        </li>
      </ul>
      <p>The following abstract operations are used in this specification to operate on references:</p>

      <!-- es6num="6.2.3.1" -->
      <emu-clause id="sec-getvalue" aoid="GetValue">
        <h1><span class="secnum">6.2.3.1</span>GetValue (<var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-getvalue">#</a></span></span></h1>
        <emu-alg><ol><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is not <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>, return <var>V</var>.</li><li>Let <var>base</var> be <emu-xref href="#ao-getbase"><a href="#ao-getbase">GetBase</a></emu-xref>(<var>V</var>).</li><li>If <emu-xref href="#ao-isunresolvablereference"><a href="#ao-isunresolvablereference">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>If <emu-xref href="#ao-ispropertyreference"><a href="#ao-ispropertyreference">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref href="#ao-hasprimitivebase"><a href="#ao-hasprimitivebase">HasPrimitiveBase</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>Assert: In this case, <var>base</var> will never be <emu-val>undefined</emu-val> or <emu-val>null</emu-val>.</li><li>Let <var>base</var> be ! <emu-xref aoid="ToObject"><a href="#sec-toobject">ToObject</a></emu-xref>(<var>base</var>).</li></ol></li><li>Return ? <var>base</var>.[[Get]](<emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>V</var>), <emu-xref aoid="GetThisValue"><a href="#sec-getthisvalue">GetThisValue</a></emu-xref>(<var>V</var>)).</li></ol></li><li>Else <var>base</var> must be an <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>,<ol><li>Return ? <var>base</var>.GetBindingValue(<emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>V</var>), <emu-xref href="#ao-isstrictreference"><a href="#ao-isstrictreference">IsStrictReference</a></emu-xref>(<var>V</var>)) (see <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">8.1.1</a></emu-xref>).
        </li></ol></li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>The object that may be created in step 5.a.ii is not 
accessible outside of the above abstract operation and the ordinary 
object [[Get]] internal method. An implementation might choose to avoid 
the actual creation of the object.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="6.2.3.2" -->
      <emu-clause id="sec-putvalue" aoid="PutValue">
        <h1><span class="secnum">6.2.3.2</span>PutValue (<var>V</var>, <var>W</var>)<span class="utils"><span class="anchor"><a href="#sec-putvalue">#</a></span></span></h1>
        <emu-alg><ol><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>W</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is not <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>base</var> be <emu-xref href="#ao-getbase"><a href="#ao-getbase">GetBase</a></emu-xref>(<var>V</var>).</li><li>If <emu-xref href="#ao-isunresolvablereference"><a href="#ao-isunresolvablereference">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref href="#ao-isstrictreference"><a href="#ao-isstrictreference">IsStrictReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>ReferenceError</emu-val> exception.</li></ol></li><li>Let <var>globalObj</var> be <emu-xref aoid="GetGlobalObject"><a href="#sec-getglobalobject">GetGlobalObject</a></emu-xref>().</li><li>Return ? <emu-xref aoid="Set"><a href="#sec-set-o-p-v-throw">Set</a></emu-xref>(<var>globalObj</var>, <emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>, <emu-val>false</emu-val>).</li></ol></li><li>Else if <emu-xref href="#ao-ispropertyreference"><a href="#ao-ispropertyreference">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref href="#ao-hasprimitivebase"><a href="#ao-hasprimitivebase">HasPrimitiveBase</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>Assert: In this case, <var>base</var> will never be <emu-val>undefined</emu-val> or <emu-val>null</emu-val>.</li><li>Set <var>base</var> to ! <emu-xref aoid="ToObject"><a href="#sec-toobject">ToObject</a></emu-xref>(<var>base</var>).</li></ol></li><li>Let <var>succeeded</var> be ? <var>base</var>.[[Set]](<emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>, <emu-xref aoid="GetThisValue"><a href="#sec-getthisvalue">GetThisValue</a></emu-xref>(<var>V</var>)).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val> and <emu-xref href="#ao-isstrictreference"><a href="#ao-isstrictreference">IsStrictReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return.</li></ol></li><li>Else <var>base</var> must be an <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>,<ol><li>Return ? <var>base</var>.SetMutableBinding(<emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>, <emu-xref href="#ao-isstrictreference"><a href="#ao-isstrictreference">IsStrictReference</a></emu-xref>(<var>V</var>)) (see <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">8.1.1</a></emu-xref>).
        </li></ol></li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>The object that may be created in step 6.a.ii is not 
accessible outside of the above algorithm and the ordinary object 
[[Set]] internal method. An implementation might choose to avoid the 
actual creation of that object.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="6.2.3.3" -->
      <emu-clause id="sec-getthisvalue" aoid="GetThisValue">
        <h1><span class="secnum">6.2.3.3</span>GetThisValue (<var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-getthisvalue">#</a></span></span></h1>
        <emu-alg><ol><li>Assert: <emu-xref href="#ao-ispropertyreference"><a href="#ao-ispropertyreference">IsPropertyReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref href="#ao-issuperreference"><a href="#ao-issuperreference">IsSuperReference</a></emu-xref>(<var>V</var>) is <emu-val>true</emu-val>, then<ol><li>Return the value of the thisValue component of the reference <var>V</var>.</li></ol></li><li>Return <emu-xref href="#ao-getbase"><a href="#ao-getbase">GetBase</a></emu-xref>(<var>V</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="6.2.3.4" -->
      <emu-clause id="sec-initializereferencedbinding" aoid="InitializeReferencedBinding">
        <h1><span class="secnum">6.2.3.4</span>InitializeReferencedBinding (<var>V</var>, <var>W</var>)<span class="utils"><span class="anchor"><a href="#sec-initializereferencedbinding">#</a></span></span></h1>
        <emu-alg><ol><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>V</var>).</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>W</var>).</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>.</li><li>Assert: <emu-xref href="#ao-isunresolvablereference"><a href="#ao-isunresolvablereference">IsUnresolvableReference</a></emu-xref>(<var>V</var>) is <emu-val>false</emu-val>.</li><li>Let <var>base</var> be <emu-xref href="#ao-getbase"><a href="#ao-getbase">GetBase</a></emu-xref>(<var>V</var>).</li><li>Assert: <var>base</var> is an <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</li><li>Return <var>base</var>.InitializeBinding(<emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>V</var>), <var>W</var>).
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="6.2.4" -->
    <emu-clause id="sec-property-descriptor-specification-type">
      <h1><span class="secnum">6.2.4</span>The Property Descriptor Specification Type<span class="utils"><span class="anchor"><a href="#sec-property-descriptor-specification-type">#</a></span></span></h1>
      <p>The  <dfn>Property Descriptor</dfn> type is used to explain the
 manipulation and reification of Object property attributes. Values of 
the Property Descriptor type are Records. Each field's name is an 
attribute name and its value is a corresponding attribute value as 
specified in  <emu-xref href="#sec-property-attributes"><a href="#sec-property-attributes">6.1.7.1</a></emu-xref>.
 In addition, any field may be present or absent. The schema name used 
within this specification to tag literal descriptions of Property 
Descriptor records is âPropertyDescriptorâ.</p>
      <p>Property Descriptor values may be further classified as data 
Property Descriptors and accessor Property Descriptors based upon the 
existence or use of certain fields. A data Property Descriptor is one 
that includes any fields named either [[Value]] or [[Writable]]. An 
accessor Property Descriptor is one that includes any fields named 
either [[Get]] or [[Set]]. Any Property Descriptor may have fields named
 [[Enumerable]] and [[Configurable]]. A Property Descriptor value may 
not be both a data Property Descriptor and an accessor Property 
Descriptor; however, it may be neither. A generic Property Descriptor is
 a Property Descriptor value that is neither a data Property Descriptor 
nor an accessor Property Descriptor. A fully populated Property 
Descriptor is one that is either an accessor Property Descriptor or a 
data Property Descriptor and that has all of the fields that correspond 
to the property attributes defined in either  <emu-xref href="#table-2"><a href="#table-2">Table 2</a></emu-xref> or  <emu-xref href="#table-3"><a href="#table-3">Table 3</a></emu-xref>.</p>
      <p>The following abstract operations are used in this specification to operate upon Property Descriptor values:</p>

      <!-- es6num="6.2.4.1" -->
      <emu-clause id="sec-isaccessordescriptor" aoid="IsAccessorDescriptor">
        <h1><span class="secnum">6.2.4.1</span>IsAccessorDescriptor ( <var>Desc</var> )<span class="utils"><span class="anchor"><a href="#sec-isaccessordescriptor">#</a></span></span></h1>
        <p>When the abstract operation IsAccessorDescriptor is called with <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
        <emu-alg><ol><li>If <var>Desc</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>If both <var>Desc</var>.[[Get]] and <var>Desc</var>.[[Set]] are absent, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="6.2.4.2" -->
      <emu-clause id="sec-isdatadescriptor" aoid="IsDataDescriptor">
        <h1><span class="secnum">6.2.4.2</span>IsDataDescriptor ( <var>Desc</var> )<span class="utils"><span class="anchor"><a href="#sec-isdatadescriptor">#</a></span></span></h1>
        <p>When the abstract operation IsDataDescriptor is called with <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
        <emu-alg><ol><li>If <var>Desc</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>If both <var>Desc</var>.[[Value]] and <var>Desc</var>.[[Writable]] are absent, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="6.2.4.3" -->
      <emu-clause id="sec-isgenericdescriptor" aoid="IsGenericDescriptor">
        <h1><span class="secnum">6.2.4.3</span>IsGenericDescriptor ( <var>Desc</var> )<span class="utils"><span class="anchor"><a href="#sec-isgenericdescriptor">#</a></span></span></h1>
        <p>When the abstract operation IsGenericDescriptor is called with <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
        <emu-alg><ol><li>If <var>Desc</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) and <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) are both <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="6.2.4.4" -->
      <emu-clause id="sec-frompropertydescriptor" aoid="FromPropertyDescriptor">
        <h1><span class="secnum">6.2.4.4</span>FromPropertyDescriptor ( <var>Desc</var> )<span class="utils"><span class="anchor"><a href="#sec-frompropertydescriptor">#</a></span></span></h1>
        <p>When the abstract operation FromPropertyDescriptor is called with <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
        <emu-alg><ol><li>If <var>Desc</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>obj</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>).</li><li>Assert: <var>obj</var> is an extensible ordinary object with no own properties.</li><li>If <var>Desc</var> has a [[Value]] field, then<ol><li>Perform <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>obj</var>, <code>"value"</code>, <var>Desc</var>.[[Value]]).</li></ol></li><li>If <var>Desc</var> has a [[Writable]] field, then<ol><li>Perform <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>obj</var>, <code>"writable"</code>, <var>Desc</var>.[[Writable]]).</li></ol></li><li>If <var>Desc</var> has a [[Get]] field, then<ol><li>Perform <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>obj</var>, <code>"get"</code>, <var>Desc</var>.[[Get]]).</li></ol></li><li>If <var>Desc</var> has a [[Set]] field, then<ol><li>Perform <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>obj</var>, <code>"set"</code>, <var>Desc</var>.[[Set]]).</li></ol></li><li>If <var>Desc</var> has an [[Enumerable]] field, then<ol><li>Perform <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>obj</var>, <code>"enumerable"</code>, <var>Desc</var>.[[Enumerable]]).</li></ol></li><li>If <var>Desc</var> has a [[Configurable]] field, then<ol><li>Perform <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>obj</var>, <code>"configurable"</code>, <var>Desc</var>.[[Configurable]]).</li></ol></li><li>Assert: All of the above <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref> operations return <emu-val>true</emu-val>.</li><li>Return <var>obj</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="6.2.4.5" -->
      <emu-clause id="sec-topropertydescriptor" aoid="ToPropertyDescriptor">
        <h1><span class="secnum">6.2.4.5</span>ToPropertyDescriptor ( <var>Obj</var> )<span class="utils"><span class="anchor"><a href="#sec-topropertydescriptor">#</a></span></span></h1>
        <p>When the abstract operation ToPropertyDescriptor is called with object <var>Obj</var>, the following steps are taken:</p>
        <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>Obj</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>desc</var> be a new <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> that initially has no fields.</li><li>Let <var>hasEnumerable</var> be ? <emu-xref aoid="HasProperty"><a href="#sec-hasproperty">HasProperty</a></emu-xref>(<var>Obj</var>, <code>"enumerable"</code>).</li><li>If <var>hasEnumerable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>enum</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>Obj</var>, <code>"enumerable"</code>)).</li><li>Set the [[Enumerable]] field of <var>desc</var> to <var>enum</var>.</li></ol></li><li>Let <var>hasConfigurable</var> be ? <emu-xref aoid="HasProperty"><a href="#sec-hasproperty">HasProperty</a></emu-xref>(<var>Obj</var>, <code>"configurable"</code>).</li><li>If <var>hasConfigurable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>conf</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>Obj</var>, <code>"configurable"</code>)).</li><li>Set the [[Configurable]] field of <var>desc</var> to <var>conf</var>.</li></ol></li><li>Let <var>hasValue</var> be ? <emu-xref aoid="HasProperty"><a href="#sec-hasproperty">HasProperty</a></emu-xref>(<var>Obj</var>, <code>"value"</code>).</li><li>If <var>hasValue</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>Obj</var>, <code>"value"</code>).</li><li>Set the [[Value]] field of <var>desc</var> to <var>value</var>.</li></ol></li><li>Let <var>hasWritable</var> be ? <emu-xref aoid="HasProperty"><a href="#sec-hasproperty">HasProperty</a></emu-xref>(<var>Obj</var>, <code>"writable"</code>).</li><li>If <var>hasWritable</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>writable</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>Obj</var>, <code>"writable"</code>)).</li><li>Set the [[Writable]] field of <var>desc</var> to <var>writable</var>.</li></ol></li><li>Let <var>hasGet</var> be ? <emu-xref aoid="HasProperty"><a href="#sec-hasproperty">HasProperty</a></emu-xref>(<var>Obj</var>, <code>"get"</code>).</li><li>If <var>hasGet</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>getter</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>Obj</var>, <code>"get"</code>).</li><li>If <emu-xref aoid="IsCallable"><a href="#sec-iscallable">IsCallable</a></emu-xref>(<var>getter</var>) is <emu-val>false</emu-val> and <var>getter</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set the [[Get]] field of <var>desc</var> to <var>getter</var>.</li></ol></li><li>Let <var>hasSet</var> be ? <emu-xref aoid="HasProperty"><a href="#sec-hasproperty">HasProperty</a></emu-xref>(<var>Obj</var>, <code>"set"</code>).</li><li>If <var>hasSet</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>setter</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>Obj</var>, <code>"set"</code>).</li><li>If <emu-xref aoid="IsCallable"><a href="#sec-iscallable">IsCallable</a></emu-xref>(<var>setter</var>) is <emu-val>false</emu-val> and <var>setter</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Set the [[Set]] field of <var>desc</var> to <var>setter</var>.</li></ol></li><li>If either <var>desc</var>.[[Get]] or <var>desc</var>.[[Set]] is present, then<ol><li>If either <var>desc</var>.[[Value]] or <var>desc</var>.[[Writable]] is present, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <var>desc</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="6.2.4.6" -->
      <emu-clause id="sec-completepropertydescriptor" aoid="CompletePropertyDescriptor">
        <h1><span class="secnum">6.2.4.6</span>CompletePropertyDescriptor ( <var>Desc</var> )<span class="utils"><span class="anchor"><a href="#sec-completepropertydescriptor">#</a></span></span></h1>
        <p>When the abstract operation CompletePropertyDescriptor is called with <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <var>Desc</var> is a <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref>.</li><li>Let <var>like</var> be <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref>{[[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>false</emu-val>, [[Get]]: <emu-val>undefined</emu-val>, [[Set]]: <emu-val>undefined</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}.</li><li>If either <emu-xref aoid="IsGenericDescriptor"><a href="#sec-isgenericdescriptor">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) or <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>Desc</var> does not have a [[Value]] field, set <var>Desc</var>.[[Value]] to <var>like</var>.[[Value]].</li><li>If <var>Desc</var> does not have a [[Writable]] field, set <var>Desc</var>.[[Writable]] to <var>like</var>.[[Writable]].</li></ol></li><li>Else,<ol><li>If <var>Desc</var> does not have a [[Get]] field, set <var>Desc</var>.[[Get]] to <var>like</var>.[[Get]].</li><li>If <var>Desc</var> does not have a [[Set]] field, set <var>Desc</var>.[[Set]] to <var>like</var>.[[Set]].</li></ol></li><li>If <var>Desc</var> does not have an [[Enumerable]] field, set <var>Desc</var>.[[Enumerable]] to <var>like</var>.[[Enumerable]].</li><li>If <var>Desc</var> does not have a [[Configurable]] field, set <var>Desc</var>.[[Configurable]] to <var>like</var>.[[Configurable]].</li><li>Return <var>Desc</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="6.2.5" -->
    <emu-clause id="sec-lexical-environment-and-environment-record-specification-types">
      <h1><span class="secnum">6.2.5</span>The Lexical Environment and Environment Record Specification Types<span class="utils"><span class="anchor"><a href="#sec-lexical-environment-and-environment-record-specification-types">#</a></span></span></h1>
      <p>The <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> and <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 types are used to explain the behaviour of name resolution in nested 
functions and blocks. These types and the operations upon them are 
defined in  <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">8.1</a></emu-xref>.</p>
    </emu-clause>

    <!-- es6num="6.2.6" -->
    <emu-clause id="sec-data-blocks">
      <h1><span class="secnum">6.2.6</span>Data Blocks<span class="utils"><span class="anchor"><a href="#sec-data-blocks">#</a></span></span></h1>
      <p>The  <dfn>Data Block</dfn> specification type is used to 
describe a distinct and mutable sequence of byte-sized (8 bit) numeric 
values. A Data Block value is created with a fixed number of bytes that 
each have the initial value 0.</p>
      <p>For notational convenience within this specification, an 
array-like syntax can be used to access the individual bytes of a Data 
Block value. This notation presents a Data Block value as a 0-origined 
integer indexed sequence of bytes. For example, if <var>db</var> is a 5 byte Data Block value then <var>db</var>[2] can be used to access its 3<sup>rd</sup> byte.</p>
      <p>The following abstract operations are used in this specification to operate upon Data Block values:</p>

      <!-- es6num="6.2.6.1" -->
      <emu-clause id="sec-createbytedatablock" aoid="CreateByteDataBlock">
        <h1><span class="secnum">6.2.6.1</span>CreateByteDataBlock (<var>size</var>)<span class="utils"><span class="anchor"><a href="#sec-createbytedatablock">#</a></span></span></h1>
        <p>When the abstract operation CreateByteDataBlock is called with integer argument <var>size</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <var>size</var>â¥0.</li><li>Let <var>db</var> be a new <emu-xref href="#sec-data-blocks"><a href="#sec-data-blocks">Data Block</a></emu-xref> value consisting of <var>size</var> bytes. If it is impossible to create such a <emu-xref href="#sec-data-blocks"><a href="#sec-data-blocks">Data Block</a></emu-xref>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Set all of the bytes of <var>db</var> to 0.</li><li>Return <var>db</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="6.2.6.2" -->
      <emu-clause id="sec-copydatablockbytes" aoid="CopyDataBlockBytes">
        <h1><span class="secnum">6.2.6.2</span>CopyDataBlockBytes (<var>toBlock</var>, <var>toIndex</var>, <var>fromBlock</var>, <var>fromIndex</var>, <var>count</var>)<span class="utils"><span class="anchor"><a href="#sec-copydatablockbytes">#</a></span></span></h1>
        <p>When the abstract operation CopyDataBlockBytes is called, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <var>fromBlock</var> and <var>toBlock</var> are distinct <emu-xref href="#sec-data-blocks"><a href="#sec-data-blocks">Data Block</a></emu-xref> values.</li><li>Assert: <var>fromIndex</var>, <var>toIndex</var>, and <var>count</var> are integer values â¥ 0.</li><li>Let <var>fromSize</var> be the number of bytes in <var>fromBlock</var>.</li><li>Assert: <var>fromIndex</var>+<var>count</var> â¤ <var>fromSize</var>.</li><li>Let <var>toSize</var> be the number of bytes in <var>toBlock</var>.</li><li>Assert: <var>toIndex</var>+<var>count</var> â¤ <var>toSize</var>.</li><li>Repeat, while <var>count</var>&gt;0<ol><li>Set <var>toBlock</var>[<var>toIndex</var>] to the value of <var>fromBlock</var>[<var>fromIndex</var>].</li><li>Increment <var>toIndex</var> and <var>fromIndex</var> each by 1.</li><li>Decrement <var>count</var> by 1.</li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>

<!-- es6num="7" -->
<emu-clause id="sec-abstract-operations">
  <h1><span class="secnum">7</span>Abstract Operations<span class="utils"><span class="anchor"><a href="#sec-abstract-operations">#</a></span></span></h1>
  <p>These operations are not a part of the ECMAScript language; they 
are defined here to solely to aid the specification of the semantics of 
the ECMAScript language. Other, more specialized abstract operations are
 defined throughout this specification.</p>

  <!-- es6num="7.1" -->
  <emu-clause id="sec-type-conversion">
    <h1><span class="secnum">7.1</span>Type Conversion<span class="utils"><span class="anchor"><a href="#sec-type-conversion">#</a></span></span></h1>
    <p>The ECMAScript language implicitly performs automatic type 
conversion as needed. To clarify the semantics of certain constructs it 
is useful to define a set of conversion abstract operations. The 
conversion abstract operations are polymorphic; they can accept a value 
of any <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language type</a></emu-xref>. But no other specification types are used with these operations.</p>

    <!-- es6num="7.1.1" -->
    <emu-clause id="sec-toprimitive" aoid="ToPrimitive">
      <h1><span class="secnum">7.1.1</span>ToPrimitive ( <var>input</var> [ , <var>PreferredType</var> ] )<span class="utils"><span class="anchor"><a href="#sec-toprimitive">#</a></span></span></h1>
      <p>The abstract operation ToPrimitive takes an <var>input</var> argument and an optional argument <var>PreferredType</var>. The abstract operation ToPrimitive converts its <var>input</var>
 argument to a non-Object type. If an object is capable of converting to
 more than one primitive type, it may use the optional hint <var>PreferredType</var> to favour that type. Conversion occurs according to  <emu-xref href="#table-9"><a href="#table-9">Table 9</a></emu-xref>:</p>
      <emu-table id="table-9" caption="ToPrimitive Conversions"><figure><figcaption>Table 9: ToPrimitive Conversions</figcaption>
        <table>
          <tbody>
          <tr>
            <th>
              Input Type
            
            </th>
            <th>
              Result
            
            </th>
          </tr>
          <tr>
            <td>
              Undefined
            
            </td>
            <td>
              Return <var>input</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              Null
            
            </td>
            <td>
              Return <var>input</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              Boolean
            
            </td>
            <td>
              Return <var>input</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              Number
            
            </td>
            <td>
              Return <var>input</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              String
            
            </td>
            <td>
              Return <var>input</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              Symbol
            
            </td>
            <td>
              Return <var>input</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              Object
            
            </td>
            <td>
              Perform the steps following this table.
            
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>
      <p>When <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>input</var>) is Object, the following steps are taken:</p>
      <emu-alg><ol><li>If <var>PreferredType</var> was not passed, let <var>hint</var> be <code>"default"</code>.</li><li>Else if <var>PreferredType</var> is hint String, let <var>hint</var> be <code>"string"</code>.</li><li>Else <var>PreferredType</var> is hint Number, let <var>hint</var> be <code>"number"</code>.</li><li>Let <var>exoticToPrim</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>input</var>, @@toPrimitive).</li><li>If <var>exoticToPrim</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>result</var> be ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>exoticToPrim</var>, <var>input</var>, Â« <var>hint</var> Â»).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <var>hint</var> is <code>"default"</code>, let <var>hint</var> be <code>"number"</code>.</li><li>Return ? <emu-xref aoid="OrdinaryToPrimitive"><a href="#sec-ordinarytoprimitive">OrdinaryToPrimitive</a></emu-xref>(<var>input</var>, <var>hint</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>When ToPrimitive is called with no hint, then it generally 
behaves as if the hint were Number. However, objects may over-ride this 
behaviour by defining a @@toPrimitive method. Of the objects defined in 
this specification only Date objects (see  <emu-xref href="#sec-date.prototype-@@toprimitive"><a href="#sec-date.prototype-@@toprimitive">20.3.4.45</a></emu-xref>) and Symbol objects (see  <emu-xref href="#sec-symbol.prototype-@@toprimitive"><a href="#sec-symbol.prototype-@@toprimitive">19.4.3.4</a></emu-xref>) over-ride the default ToPrimitive behaviour. Date objects treat no hint as if the hint were String.</p>
      </emu-note>

      <emu-clause id="sec-ordinarytoprimitive" aoid="OrdinaryToPrimitive">
        <h1><span class="secnum">7.1.1.1</span>OrdinaryToPrimitive ( <var>O</var>, <var>hint</var> )<span class="utils"><span class="anchor"><a href="#sec-ordinarytoprimitive">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryToPrimitive is called with arguments <var>O</var> and <var>hint</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>hint</var>) is String and its value is either <code>"string"</code> or <code>"number"</code>.</li><li>If <var>hint</var> is <code>"string"</code>, then<ol><li>Let <var>methodNames</var> be Â« <code>"toString"</code>, <code>"valueOf"</code> Â».</li></ol></li><li>Else,<ol><li>Let <var>methodNames</var> be Â« <code>"valueOf"</code>, <code>"toString"</code> Â».</li></ol></li><li>For each <var>name</var> in <var>methodNames</var> in <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> order, do<ol><li>Let <var>method</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>O</var>, <var>name</var>).</li><li>If <emu-xref aoid="IsCallable"><a href="#sec-iscallable">IsCallable</a></emu-xref>(<var>method</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>result</var> be ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>method</var>, <var>O</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>result</var>) is not Object, return <var>result</var>.</li></ol></li></ol></li><li>Throw a <emu-val>TypeError</emu-val> exception.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="7.1.2" -->
    <emu-clause id="sec-toboolean" aoid="ToBoolean">
      <h1><span class="secnum">7.1.2</span>ToBoolean ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-toboolean">#</a></span></span></h1>
      <p>The abstract operation ToBoolean converts <var>argument</var> to a value of type Boolean according to  <emu-xref href="#table-10"><a href="#table-10">Table 10</a></emu-xref>:</p>
      <emu-table id="table-10" caption="ToBoolean Conversions"><figure><figcaption>Table 10: ToBoolean Conversions</figcaption>
        <table>
          <tbody>
          <tr>
            <th>
              Argument Type
            
            </th>
            <th>
              Result
            
            </th>
          </tr>
          <tr>
            <td>
              Undefined
            
            </td>
            <td>
              Return <emu-val>false</emu-val>.
            
            </td>
          </tr>
          <tr>
            <td>
              Null
            
            </td>
            <td>
              Return <emu-val>false</emu-val>.
            
            </td>
          </tr>
          <tr>
            <td>
              Boolean
            
            </td>
            <td>
              Return <var>argument</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              Number
            
            </td>
            <td>
              Return <emu-val>false</emu-val> if <var>argument</var> is <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, or <emu-val>NaN</emu-val>; otherwise return <emu-val>true</emu-val>.
            
            </td>
          </tr>
          <tr>
            <td>
              String
            
            </td>
            <td>
              Return <emu-val>false</emu-val> if <var>argument</var> is the empty String (its length is zero); otherwise return <emu-val>true</emu-val>.
            
            </td>
          </tr>
          <tr>
            <td>
              Symbol
            
            </td>
            <td>
              Return <emu-val>true</emu-val>.
            
            </td>
          </tr>
          <tr>
            <td>
              Object
            
            </td>
            <td>
              Return <emu-val>true</emu-val>.
            
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>
    </emu-clause>

    <!-- es6num="7.1.3" -->
    <emu-clause id="sec-tonumber" aoid="ToNumber">
      <h1><span class="secnum">7.1.3</span>ToNumber ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-tonumber">#</a></span></span></h1>
      <p>The abstract operation ToNumber converts <var>argument</var> to a value of type Number according to  <emu-xref href="#table-11"><a href="#table-11">Table 11</a></emu-xref>:</p>
      <emu-table id="table-11" caption="ToNumber Conversions"><figure><figcaption>Table 11: ToNumber Conversions</figcaption>
        <table>
          <tbody>
          <tr>
            <th>
              Argument Type
            
            </th>
            <th>
              Result
            
            </th>
          </tr>
          <tr>
            <td>
              Undefined
            
            </td>
            <td>
              Return <emu-val>NaN</emu-val>.
            
            </td>
          </tr>
          <tr>
            <td>
              Null
            
            </td>
            <td>
              Return <emu-val>+0</emu-val>.
            
            </td>
          </tr>
          <tr>
            <td>
              Boolean
            
            </td>
            <td>
              Return 1 if <var>argument</var> is <emu-val>true</emu-val>. Return <emu-val>+0</emu-val> if <var>argument</var> is <emu-val>false</emu-val>.
            
            </td>
          </tr>
          <tr>
            <td>
              Number
            
            </td>
            <td>
              Return <var>argument</var> (no conversion).
            
            </td>
          </tr>
          <tr>
            <td>
              String
            
            </td>
            <td>
              See grammar and conversion algorithm below.
            
            </td>
          </tr>
          <tr>
            <td>
              Symbol
            
            </td>
            <td>
              Throw a <emu-val>TypeError</emu-val> exception.
            
            </td>
          </tr>
          <tr>
            <td>
              Object
            
            </td>
            <td>
              <p>Apply the following steps:</p>
              <emu-alg><ol><li>Let <var>primValue</var> be ? <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>argument</var>, hint Number).</li><li>Return ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>primValue</var>).
              </li></ol></emu-alg>
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>

      <!-- es6num="7.1.3.1" -->
      <emu-clause id="sec-tonumber-applied-to-the-string-type">
        <h1><span class="secnum">7.1.3.1</span>ToNumber Applied to the String Type<span class="utils"><span class="anchor"><a href="#sec-tonumber-applied-to-the-string-type">#</a></span></span></h1>
        <p><emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref> applied to Strings applies the following grammar to the input String interpreted as a sequence of UTF-16 encoded code points (<emu-xref href="#sec-ecmascript-language-types-string-type"><a href="#sec-ecmascript-language-types-string-type">6.1.4</a></emu-xref>). If the grammar cannot interpret the String as an expansion of <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt>, then the result of <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref> is <emu-val>NaN</emu-val>.</p>
        <emu-note><span class="note">Note 1</span>
          <p>The terminal symbols of this grammar are all composed of Unicode BMP code points so the result will be <emu-val>NaN</emu-val> if the string contains the UTF-16 encoding of any supplementary code points or any unpaired surrogate code points.</p>
        </emu-note>
        <h2>Syntax</h2>
        <emu-grammar><emu-production name="StringNumericLiteral" type="regexp" id="prod-StringNumericLiteral">
    <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="9a4be900"><emu-nt optional=""><a href="#prod-StrWhiteSpace">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="fe58c396"><emu-nt optional=""><a href="#prod-StrWhiteSpace">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-StrNumericLiteral">StrNumericLiteral</a></emu-nt><emu-nt optional=""><a href="#prod-StrWhiteSpace">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StrWhiteSpace" type="regexp" id="prod-StrWhiteSpace">
    <emu-nt><a href="#prod-StrWhiteSpace">StrWhiteSpace</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="2b0ea266"><emu-nt><a href="#prod-StrWhiteSpaceChar">StrWhiteSpaceChar</a></emu-nt><emu-nt optional=""><a href="#prod-StrWhiteSpace">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StrWhiteSpaceChar" type="regexp" id="prod-StrWhiteSpaceChar">
    <emu-nt><a href="#prod-StrWhiteSpaceChar">StrWhiteSpaceChar</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="1424dc49"><emu-nt><a href="#prod-WhiteSpace">WhiteSpace</a></emu-nt></emu-rhs>
    <emu-rhs a="3b331ccd"><emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StrNumericLiteral" type="regexp" id="prod-StrNumericLiteral">
    <emu-nt><a href="#prod-StrNumericLiteral">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="db369ee0"><emu-nt><a href="#prod-StrDecimalLiteral">StrDecimalLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="d3d71ddd"><emu-nt><a href="#prod-BinaryIntegerLiteral">BinaryIntegerLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="832f57ee"><emu-nt><a href="#prod-OctalIntegerLiteral">OctalIntegerLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="1d0c4a66"><emu-nt><a href="#prod-HexIntegerLiteral">HexIntegerLiteral</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StrDecimalLiteral" type="regexp" id="prod-StrDecimalLiteral">
    <emu-nt><a href="#prod-StrDecimalLiteral">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="477fcd23"><emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="a3f639a9"><emu-t>+</emu-t><emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="d60f01a5"><emu-t>-</emu-t><emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StrUnsignedDecimalLiteral" type="regexp" id="prod-StrUnsignedDecimalLiteral">
    <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="4afe8df8"><emu-t>Infinity</emu-t></emu-rhs>
    <emu-rhs a="8a89062c"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt optional=""><a href="#prod-DecimalDigits">DecimalDigits</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt optional=""><a href="#prod-ExponentPart">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="5cf3aa35"><emu-t>.</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt optional=""><a href="#prod-ExponentPart">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="24e27af7"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt optional=""><a href="#prod-ExponentPart">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <p>All grammar symbols not explicitly defined above have the definitions used in the Lexical Grammar for numeric literals (<emu-xref href="#sec-literals-numeric-literals"><a href="#sec-literals-numeric-literals">11.8.3</a></emu-xref>)</p>
        <emu-note><span class="note">Note 2</span>
          <p>Some differences should be noted between the syntax of a <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt> and a <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt>:</p>
          <ul>
            <li>
              A <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt> may include leading and/or trailing white space and/or line terminators.
            
            </li>
            <li>
              A <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt> that is decimal may have any number of leading <code>0</code> digits.
            
            </li>
            <li>
              A <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt> that is decimal may include a <code>+</code> or <code>-</code> to indicate its sign.
            
            </li>
            <li>
              A <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt> that is empty or contains only white space is converted to <emu-val>+0</emu-val>.
            
            </li>
            <li>
              <code>Infinity</code> and <code>-Infinity</code> are recognized as a <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt> but not as a <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt>.
            
            </li>
          </ul>
        </emu-note>

        <!-- es6num="7.1.3.1.1" -->
        <emu-clause id="sec-runtime-semantics-mv-s">
          <h1><span class="secnum">7.1.3.1.1</span>Runtime Semantics: MV<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-mv-s">#</a></span></span></h1>
          <p>The conversion of a String to a Number value is similar 
overall to the determination of the Number value for a numeric literal 
(see  <emu-xref href="#sec-literals-numeric-literals"><a href="#sec-literals-numeric-literals">11.8.3</a></emu-xref>),
 but some of the details are different, so the process for converting a 
String numeric literal to a value of Number type is given here. This 
value is determined in two steps: first, a mathematical value (MV) is 
derived from the String numeric literal; second, this mathematical value
 is rounded as described below. The MV on any grammar symbol, not 
provided below, is the MV for that symbol defined in  <emu-xref href="#sec-static-semantics-mv"><a href="#sec-static-semantics-mv">11.8.3.1</a></emu-xref>.</p>
          <ul>
            <li>
              The MV of  <emu-grammar><emu-production name="StringNumericLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar> is 0.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StringNumericLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="63c9217f"><emu-nt><a href="#prod-StrWhiteSpace">StrWhiteSpace</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is 0.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StringNumericLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StringNumericLiteral">StringNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="fe58c396"><emu-nt optional=""><a href="#prod-StrWhiteSpace">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-StrNumericLiteral">StrNumericLiteral</a></emu-nt><emu-nt optional=""><a href="#prod-StrWhiteSpace">StrWhiteSpace</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-StrNumericLiteral">StrNumericLiteral</a></emu-nt>, no matter whether white space is present or not.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrNumericLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrNumericLiteral">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="db369ee0"><emu-nt><a href="#prod-StrDecimalLiteral">StrDecimalLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-StrDecimalLiteral">StrDecimalLiteral</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrNumericLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrNumericLiteral">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="d3d71ddd"><emu-nt><a href="#prod-BinaryIntegerLiteral">BinaryIntegerLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-BinaryIntegerLiteral">BinaryIntegerLiteral</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrNumericLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrNumericLiteral">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="832f57ee"><emu-nt><a href="#prod-OctalIntegerLiteral">OctalIntegerLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-OctalIntegerLiteral">OctalIntegerLiteral</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrNumericLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrNumericLiteral">StrNumericLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="1d0c4a66"><emu-nt><a href="#prod-HexIntegerLiteral">HexIntegerLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-HexIntegerLiteral">HexIntegerLiteral</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrDecimalLiteral">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="477fcd23"><emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrDecimalLiteral">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="a3f639a9"><emu-t>+</emu-t><emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrDecimalLiteral">StrDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="d60f01a5"><emu-t>-</emu-t><emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the negative of the MV of <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt>. (Note that if the MV of <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt>
 is 0, the negative of this MV is also 0. The rounding rule described 
below handles the conversion of this signless mathematical zero to a 
floating-point <emu-val>+0</emu-val> or <emu-val>-0</emu-val> as appropriate.)
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrUnsignedDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="4afe8df8"><emu-t>Infinity</emu-t></emu-rhs>
</emu-production></emu-grammar> is 10<sup>10000</sup> (a value so large that it will round to <emu-val>+â</emu-val>).
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrUnsignedDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="33bf537e"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-t>.</emu-t></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrUnsignedDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="4565db95"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of the first <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> times 10<sup>-<var>n</var></sup>), where <var>n</var> is the number of code points in the second <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrUnsignedDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="6f5fda9f"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> times 10<sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrUnsignedDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="4694f1d2"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is (the MV of the first <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> plus (the MV of the second <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> times 10<sup>-<var>n</var></sup>)) times 10<sup><var>e</var></sup>, where <var>n</var> is the number of code points in the second <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrUnsignedDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="c1f33372"><emu-t>.</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> times 10<sup>-<var>n</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrUnsignedDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="0cd5f3c3"><emu-t>.</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> times 10<sup><var>e</var>-<var>n</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrUnsignedDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="6d7b4e5f"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>.
            
            </li>
            <li>
              The MV of  <emu-grammar><emu-production name="StrUnsignedDecimalLiteral" type="regexp" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt><emu-geq>:::</emu-geq><emu-rhs a="2e993467"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> times 10<sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt>.
            
            </li>
          </ul>
          <p>Once the exact MV for a String numeric literal has been 
determined, it is then rounded to a value of the Number type. If the MV 
is 0, then the rounded value is <emu-val>+0</emu-val> unless the first non white space code point in the String numeric literal is <code>"-"</code>, in which case the rounded value is <emu-val>-0</emu-val>. Otherwise, the rounded value must be the Number value for the MV (in the sense defined in  <emu-xref href="#sec-ecmascript-language-types-number-type"><a href="#sec-ecmascript-language-types-number-type">6.1.6</a></emu-xref>), unless the literal includes a <emu-nt><a href="#prod-StrUnsignedDecimalLiteral">StrUnsignedDecimalLiteral</a></emu-nt>
 and the literal has more than 20 significant digits, in which case the 
Number value may be either the Number value for the MV of a literal 
produced by replacing each significant digit after the 20th with a 0 
digit or the Number value for the MV of a literal produced by replacing 
each significant digit after the 20th with a 0 digit and then 
incrementing the literal at the 20th digit position. A digit is 
significant if it is not part of an <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt> and</p>
          <ul>
            <li>
              it is not <code>0</code>; or
            
            </li>
            <li>
              there is a nonzero digit to its left and there is a nonzero digit, not in the <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt>, to its right.
            
            </li>
          </ul>
        </emu-clause>
      </emu-clause>
    </emu-clause>

    <!-- es6num="7.1.4" -->
    <emu-clause id="sec-tointeger" aoid="ToInteger">
      <h1><span class="secnum">7.1.4</span>ToInteger ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-tointeger">#</a></span></span></h1>
      <p>The abstract operation ToInteger converts <var>argument</var> to an integral numeric value. This abstract operation functions as follows:</p>
      <emu-alg><ol><li>Let <var>number</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>number</var> is <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+â</emu-val>, or <emu-val>-â</emu-val>, return <var>number</var>.</li><li>Return the number value that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>number</var>)).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.1.5" -->
    <emu-clause id="sec-toint32" aoid="ToInt32">
      <h1><span class="secnum">7.1.5</span>ToInt32 ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-toint32">#</a></span></span></h1>
      <p>The abstract operation ToInt32 converts <var>argument</var> to one of 2<sup>32</sup> integer values in the range  <emu-eqn class="inline">-2<sup>31</sup></emu-eqn> through  <emu-eqn class="inline">2<sup>31</sup>-1</emu-eqn>, inclusive. This abstract operation functions as follows:</p>
      <emu-alg><ol><li>Let <var>number</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+â</emu-val>, or <emu-val>-â</emu-val>, return <emu-val>+0</emu-val>.</li><li>Let <var>int</var> be the mathematical value that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>number</var>)).</li><li>Let <var>int32bit</var> be <var>int</var> <emu-xref aoid="modulo"><a href="#sec-algorithm-conventions">modulo</a></emu-xref> 2<sup>32</sup>.</li><li>If <var>int32bit</var> â¥ 2<sup>31</sup>, return <var>int32bit</var> - 2<sup>32</sup>; otherwise return <var>int32bit</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Given the above definition of ToInt32:</p>
        <ul>
          <li>
            The ToInt32 abstract operation is idempotent: if applied to a
 result that it produced, the second application leaves that value 
unchanged.
          
          </li>
          <li>
            ToInt32(<emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>x</var>)) is equal to ToInt32(<var>x</var>) for all values of <var>x</var>. (It is to preserve this latter property that <emu-val>+â</emu-val> and <emu-val>-â</emu-val> are mapped to <emu-val>+0</emu-val>.)
          
          </li>
          <li>
            ToInt32 maps <emu-val>-0</emu-val> to <emu-val>+0</emu-val>.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="7.1.6" -->
    <emu-clause id="sec-touint32" aoid="ToUint32">
      <h1><span class="secnum">7.1.6</span>ToUint32 ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-touint32">#</a></span></span></h1>
      <p>The abstract operation ToUint32 converts <var>argument</var> to one of 2<sup>32</sup> integer values in the range 0 through  <emu-eqn class="inline">2<sup>32</sup>-1</emu-eqn>, inclusive. This abstract operation functions as follows:</p>
      <emu-alg><ol><li>Let <var>number</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+â</emu-val>, or <emu-val>-â</emu-val>, return <emu-val>+0</emu-val>.</li><li>Let <var>int</var> be the mathematical value that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>number</var>)).</li><li>Let <var>int32bit</var> be <var>int</var> <emu-xref aoid="modulo"><a href="#sec-algorithm-conventions">modulo</a></emu-xref> 2<sup>32</sup>.</li><li>Return <var>int32bit</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Given the above definition of ToUint32:</p>
        <ul>
          <li>
            Step 5 is the only difference between ToUint32 and <emu-xref aoid="ToInt32"><a href="#sec-toint32">ToInt32</a></emu-xref>.
          
          </li>
          <li>
            The ToUint32 abstract operation is idempotent: if applied to
 a result that it produced, the second application leaves that value 
unchanged.
          
          </li>
          <li>
            ToUint32(<emu-xref aoid="ToInt32"><a href="#sec-toint32">ToInt32</a></emu-xref>(<var>x</var>)) is equal to ToUint32(<var>x</var>) for all values of <var>x</var>. (It is to preserve this latter property that <emu-val>+â</emu-val> and <emu-val>-â</emu-val> are mapped to <emu-val>+0</emu-val>.)
          
          </li>
          <li>
            ToUint32 maps <emu-val>-0</emu-val> to <emu-val>+0</emu-val>.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="7.1.7" -->
    <emu-clause id="sec-toint16" aoid="ToInt16">
      <h1><span class="secnum">7.1.7</span>ToInt16 ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-toint16">#</a></span></span></h1>
      <p>The abstract operation ToInt16 converts <var>argument</var> to one of 2<sup>16</sup> integer values in the range -32768 through 32767, inclusive. This abstract operation functions as follows:</p>
      <emu-alg><ol><li>Let <var>number</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+â</emu-val>, or <emu-val>-â</emu-val>, return <emu-val>+0</emu-val>.</li><li>Let <var>int</var> be the mathematical value that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>number</var>)).</li><li>Let <var>int16bit</var> be <var>int</var> <emu-xref aoid="modulo"><a href="#sec-algorithm-conventions">modulo</a></emu-xref> 2<sup>16</sup>.</li><li>If <var>int16bit</var> â¥ 2<sup>15</sup>, return <var>int16bit</var> - 2<sup>16</sup>; otherwise return <var>int16bit</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.1.8" -->
    <emu-clause id="sec-touint16" aoid="ToUint16">
      <h1><span class="secnum">7.1.8</span>ToUint16 ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-touint16">#</a></span></span></h1>
      <p>The abstract operation ToUint16 converts <var>argument</var> to one of 2<sup>16</sup> integer values in the range 0 through  <emu-eqn class="inline">2<sup>16</sup>-1</emu-eqn>, inclusive. This abstract operation functions as follows:</p>
      <emu-alg><ol><li>Let <var>number</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+â</emu-val>, or <emu-val>-â</emu-val>, return <emu-val>+0</emu-val>.</li><li>Let <var>int</var> be the mathematical value that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>number</var>)).</li><li>Let <var>int16bit</var> be <var>int</var> <emu-xref aoid="modulo"><a href="#sec-algorithm-conventions">modulo</a></emu-xref> 2<sup>16</sup>.</li><li>Return <var>int16bit</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Given the above definition of ToUint16:</p>
        <ul>
          <li>
            The substitution of 2<sup>16</sup> for 2<sup>32</sup> in step 4 is the only difference between <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref> and ToUint16.
          
          </li>
          <li>
            ToUint16 maps <emu-val>-0</emu-val> to <emu-val>+0</emu-val>.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="7.1.9" -->
    <emu-clause id="sec-toint8" aoid="ToInt8">
      <h1><span class="secnum">7.1.9</span>ToInt8 ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-toint8">#</a></span></span></h1>
      <p>The abstract operation ToInt8 converts <var>argument</var> to one of 2<sup>8</sup> integer values in the range -128 through 127, inclusive. This abstract operation functions as follows:</p>
      <emu-alg><ol><li>Let <var>number</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+â</emu-val>, or <emu-val>-â</emu-val>, return <emu-val>+0</emu-val>.</li><li>Let <var>int</var> be the mathematical value that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>number</var>)).</li><li>Let <var>int8bit</var> be <var>int</var> <emu-xref aoid="modulo"><a href="#sec-algorithm-conventions">modulo</a></emu-xref> 2<sup>8</sup>.</li><li>If <var>int8bit</var> â¥ 2<sup>7</sup>, return <var>int8bit</var> - 2<sup>8</sup>; otherwise return <var>int8bit</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.1.10" -->
    <emu-clause id="sec-touint8" aoid="ToUint8">
      <h1><span class="secnum">7.1.10</span>ToUint8 ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-touint8">#</a></span></span></h1>
      <p>The abstract operation ToUint8 converts <var>argument</var> to one of 2<sup>8</sup> integer values in the range 0 through 255, inclusive. This abstract operation functions as follows:</p>
      <emu-alg><ol><li>Let <var>number</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, <emu-val>+0</emu-val>, <emu-val>-0</emu-val>, <emu-val>+â</emu-val>, or <emu-val>-â</emu-val>, return <emu-val>+0</emu-val>.</li><li>Let <var>int</var> be the mathematical value that is the same sign as <var>number</var> and whose magnitude is <emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>number</var>)).</li><li>Let <var>int8bit</var> be <var>int</var> <emu-xref aoid="modulo"><a href="#sec-algorithm-conventions">modulo</a></emu-xref> 2<sup>8</sup>.</li><li>Return <var>int8bit</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.1.11" -->
    <emu-clause id="sec-touint8clamp" aoid="ToUint8Clamp">
      <h1><span class="secnum">7.1.11</span>ToUint8Clamp ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-touint8clamp">#</a></span></span></h1>
      <p>The abstract operation ToUint8Clamp converts <var>argument</var> to one of 2<sup>8</sup> integer values in the range 0 through 255, inclusive. This abstract operation functions as follows:</p>
      <emu-alg><ol><li>Let <var>number</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <var>number</var> is <emu-val>NaN</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>number</var> â¤ 0, return <emu-val>+0</emu-val>.</li><li>If <var>number</var> â¥ 255, return 255.</li><li>Let <var>f</var> be <emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<var>number</var>).</li><li>If <var>f</var> + 0.5 &lt; <var>number</var>, return <var>f</var> + 1.</li><li>If <var>number</var> &lt; <var>f</var> + 0.5, return <var>f</var>.</li><li>If <var>f</var> is odd, return <var>f</var> + 1.</li><li>Return <var>f</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Unlike the other ECMAScript integer conversion abstract 
operation, ToUint8Clamp rounds rather than truncates non-integer values 
and does not convert <emu-val>+â</emu-val> to 0. ToUint8Clamp does âround half to evenâ tie-breaking. This differs from <code>Math.round</code> which does âround half upâ tie-breaking.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="7.1.12" -->
    <emu-clause id="sec-tostring" aoid="ToString">
      <h1><span class="secnum">7.1.12</span>ToString ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-tostring">#</a></span></span></h1>
      <p>The abstract operation ToString converts <var>argument</var> to a value of type String according to  <emu-xref href="#table-12"><a href="#table-12">Table 12</a></emu-xref>:</p>
      <emu-table id="table-12" caption="ToString Conversions"><figure><figcaption>Table 12: ToString Conversions</figcaption>
        <table>
          <tbody>
          <tr>
            <th>
              Argument Type
            
            </th>
            <th>
              Result
            
            </th>
          </tr>
          <tr>
            <td>
              Undefined
            
            </td>
            <td>
              Return <code>"undefined"</code>.
            
            </td>
          </tr>
          <tr>
            <td>
              Null
            
            </td>
            <td>
              Return <code>"null"</code>.
            
            </td>
          </tr>
          <tr>
            <td>
              Boolean
            
            </td>
            <td>
              <p>If <var>argument</var> is <emu-val>true</emu-val>, return <code>"true"</code>.</p>
              <p>If <var>argument</var> is <emu-val>false</emu-val>, return <code>"false"</code>.</p>
            </td>
          </tr>
          <tr>
            <td>
              Number
            
            </td>
            <td>
              See  <emu-xref href="#sec-tostring-applied-to-the-number-type"><a href="#sec-tostring-applied-to-the-number-type">7.1.12.1</a></emu-xref>.
            
            </td>
          </tr>
          <tr>
            <td>
              String
            
            </td>
            <td>
              Return <var>argument</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              Symbol
            
            </td>
            <td>
              Throw a <emu-val>TypeError</emu-val> exception.
            
            </td>
          </tr>
          <tr>
            <td>
              Object
            
            </td>
            <td>
              <p>Apply the following steps:</p>
              <emu-alg><ol><li>Let <var>primValue</var> be ? <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>argument</var>, hint String).</li><li>Return ? <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>primValue</var>).
              </li></ol></emu-alg>
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>

      <!-- es6num="7.1.12.1" -->
      <emu-clause id="sec-tostring-applied-to-the-number-type" aoid="ToString Applied to the Number Type">
        <h1><span class="secnum">7.1.12.1</span>ToString Applied to the Number Type<span class="utils"><span class="anchor"><a href="#sec-tostring-applied-to-the-number-type">#</a></span></span></h1>
        <p>The abstract operation <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref> converts a Number <var>m</var> to String format as follows:</p>
        <emu-alg><ol><li>If <var>m</var> is <emu-val>NaN</emu-val>, return the String <code>"NaN"</code>.</li><li>If <var>m</var> is <emu-val>+0</emu-val> or <emu-val>-0</emu-val>, return the String <code>"0"</code>.</li><li>If <var>m</var> is less than zero, return the String concatenation of the String <code>"-"</code> and <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(-<var>m</var>).</li><li>If <var>m</var> is <emu-val>+â</emu-val>, return the String <code>"Infinity"</code>.</li><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> â¥ 1, 10<sup><var>k</var>-1</sup> â¤ <var>s</var> &lt; 10<sup><var>k</var></sup>, the Number value for <var>s</var> Ã 10<sup><var>n</var>-<var>k</var></sup> is <var>m</var>, and <var>k</var> is as small as possible. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var>, that <var>s</var> is not divisible by 10, and that the least significant digit of <var>s</var> is not necessarily uniquely determined by these criteria.</li><li>If <var>k</var> â¤ <var>n</var> â¤ 21, return the String consisting of the code units of the <var>k</var> digits of the decimal representation of <var>s</var> (in order, with no leading zeroes), followed by <var>n</var>-<var>k</var> occurrences of the code unit 0x0030 (DIGIT ZERO).</li><li>If 0 &lt; <var>n</var> â¤ 21, return the String consisting of the code units of the most significant <var>n</var> digits of the decimal representation of <var>s</var>, followed by the code unit 0x002E (FULL STOP), followed by the code units of the remaining <var>k</var>-<var>n</var> digits of the decimal representation of <var>s</var>.</li><li>If -6 &lt; <var>n</var>
 â¤ 0, return the String consisting of the code unit 0x0030 (DIGIT ZERO),
 followed by the code unit 0x002E (FULL STOP), followed by -<var>n</var> occurrences of the code unit 0x0030 (DIGIT ZERO), followed by the code units of the <var>k</var> digits of the decimal representation of <var>s</var>.</li><li>Otherwise, if <var>k</var> = 1, return the String consisting of the code unit of the single digit of <var>s</var>,
 followed by code unit 0x0065 (LATIN SMALL LETTER E), followed by the 
code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) 
according to whether <var>n</var>-1 is positive or negative, followed by the code units of the decimal representation of the integer <emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>n</var>-1) (with no leading zeroes).</li><li>Return the String consisting of the code units of the most significant digit of the decimal representation of <var>s</var>, followed by code unit 0x002E (FULL STOP), followed by the code units of the remaining <var>k</var>-1 digits of the decimal representation of <var>s</var>,
 followed by code unit 0x0065 (LATIN SMALL LETTER E), followed by code 
unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS) according
 to whether <var>n</var>-1 is positive or negative, followed by the code units of the decimal representation of the integer <emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>n</var>-1) (with no leading zeroes).
        </li></ol></emu-alg>
        <emu-note><span class="note">Note 1</span>
          <p>The following observations may be useful as guidelines for 
implementations, but are not part of the normative requirements of this 
Standard:</p>
          <ul>
            <li>
              If x is any Number value other than <emu-val>-0</emu-val>, then <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(x)) is exactly the same Number value as x.
            
            </li>
            <li>
              The least significant digit of s is not always uniquely determined by the requirements listed in step 5.
            
            </li>
          </ul>
        </emu-note>
        <emu-note><span class="note">Note 2</span>
          <p>For implementations that provide more accurate conversions 
than required by the rules above, it is recommended that the following 
alternative version of step 5 be used as a guideline:</p>
          <emu-alg><ol start="5"><li>Otherwise, let <var>n</var>, <var>k</var>, and <var>s</var> be integers such that <var>k</var> â¥ 1, 10<sup><var>k</var>-1</sup> â¤ <var>s</var> &lt; 10<sup><var>k</var></sup>, the Number value for <var>s</var> Ã 10<sup><var>n</var>-<var>k</var></sup> is <var>m</var>, and <var>k</var> is as small as possible. If there are multiple possibilities for <var>s</var>, choose the value of <var>s</var> for which <var>s</var> Ã 10<sup><var>n</var>-<var>k</var></sup> is closest in value to <var>m</var>. If there are two such possible values of <var>s</var>, choose the one that is even. Note that <var>k</var> is the number of digits in the decimal representation of <var>s</var> and that <var>s</var> is not divisible by 10.
          </li></ol></emu-alg>
        </emu-note>
        <emu-note><span class="note">Note 3</span>
          <p>Implementers of ECMAScript may find useful the paper and 
code written by David M. Gay for binary-to-decimal conversion of 
floating-point numbers:</p>
          <p>Gay, David M. Correctly Rounded Binary-Decimal and 
Decimal-Binary Conversions. Numerical Analysis, Manuscript 90-10. 
AT&amp;T Bell Laboratories (Murray Hill, New Jersey). November 30, 1990.
 Available as
            
            <br>
            <a href="http://ampl.com/REFS/abstracts.html#rounding">http://ampl.com/REFS/abstracts.html#rounding</a>. Associated code available as
            
            <br>
            <a href="http://netlib.sandia.gov/fp/dtoa.c">http://netlib.sandia.gov/fp/dtoa.c</a> and as
            
            <br>
            <a href="http://netlib.sandia.gov/fp/g_fmt.c">http://netlib.sandia.gov/fp/g_fmt.c</a> and may also be found at the various <code>netlib</code> mirror sites.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>

    <!-- es6num="7.1.13" -->
    <emu-clause id="sec-toobject" aoid="ToObject">
      <h1><span class="secnum">7.1.13</span>ToObject ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-toobject">#</a></span></span></h1>
      <p>The abstract operation ToObject converts <var>argument</var> to a value of type Object according to  <emu-xref href="#table-13"><a href="#table-13">Table 13</a></emu-xref>:</p>
      <emu-table id="table-13" caption="ToObject Conversions"><figure><figcaption>Table 13: ToObject Conversions</figcaption>
        <table>
          <tbody>
          <tr>
            <th>
              Argument Type
            
            </th>
            <th>
              Result
            
            </th>
          </tr>
          <tr>
            <td>
              Undefined
            
            </td>
            <td>
              Throw a <emu-val>TypeError</emu-val> exception.
            
            </td>
          </tr>
          <tr>
            <td>
              Null
            
            </td>
            <td>
              Throw a <emu-val>TypeError</emu-val> exception.
            
            </td>
          </tr>
          <tr>
            <td>
              Boolean
            
            </td>
            <td>
              Return a new Boolean object whose [[BooleanData]] internal slot is set to <var>argument</var>. See  <emu-xref href="#sec-boolean-objects"><a href="#sec-boolean-objects">19.3</a></emu-xref> for a description of Boolean objects.
            
            </td>
          </tr>
          <tr>
            <td>
              Number
            
            </td>
            <td>
              Return a new Number object whose [[NumberData]] internal slot is set to <var>argument</var>. See  <emu-xref href="#sec-number-objects"><a href="#sec-number-objects">20.1</a></emu-xref> for a description of Number objects.
            
            </td>
          </tr>
          <tr>
            <td>
              String
            
            </td>
            <td>
              Return a new String object whose [[StringData]] internal slot is set to <var>argument</var>. See  <emu-xref href="#sec-string-objects"><a href="#sec-string-objects">21.1</a></emu-xref> for a description of String objects.
            
            </td>
          </tr>
          <tr>
            <td>
              Symbol
            
            </td>
            <td>
              Return a new Symbol object whose [[SymbolData]] internal slot is set to <var>argument</var>. See  <emu-xref href="#sec-symbol-objects"><a href="#sec-symbol-objects">19.4</a></emu-xref> for a description of Symbol objects.
            
            </td>
          </tr>
          <tr>
            <td>
              Object
            
            </td>
            <td>
              Return <var>argument</var>.
            
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>
    </emu-clause>

    <!-- es6num="7.1.14" -->
    <emu-clause id="sec-topropertykey" aoid="ToPropertyKey">
      <h1><span class="secnum">7.1.14</span>ToPropertyKey ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-topropertykey">#</a></span></span></h1>
      <p>The abstract operation ToPropertyKey converts <var>argument</var> to a value that can be used as a property key by performing the following steps:</p>
      <emu-alg><ol><li>Let <var>key</var> be ? <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>argument</var>, hint String).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>key</var>) is Symbol, then<ol><li>Return <var>key</var>.</li></ol></li><li>Return ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>key</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.1.15" -->
    <emu-clause id="sec-tolength" aoid="ToLength">
      <h1><span class="secnum">7.1.15</span>ToLength ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-tolength">#</a></span></span></h1>
      <p>The abstract operation ToLength converts <var>argument</var> to an integer suitable for use as the length of an array-like object. It performs the following steps:</p>
      <emu-alg><ol><li>Let <var>len</var> be ? <emu-xref aoid="ToInteger"><a href="#sec-tointeger">ToInteger</a></emu-xref>(<var>argument</var>).</li><li>If <var>len</var> â¤ <emu-val>+0</emu-val>, return <emu-val>+0</emu-val>.</li><li>If <var>len</var> is <emu-val>+â</emu-val>, return 2<sup>53</sup>-1.</li><li>Return <emu-xref aoid="min"><a href="#sec-algorithm-conventions">min</a></emu-xref>(<var>len</var>, 2<sup>53</sup>-1).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.1.16" -->
    <emu-clause id="sec-canonicalnumericindexstring" aoid="CanonicalNumericIndexString">
      <h1><span class="secnum">7.1.16</span>CanonicalNumericIndexString ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-canonicalnumericindexstring">#</a></span></span></h1>
      <p>The abstract operation CanonicalNumericIndexString returns <var>argument</var> converted to a numeric value if it is a String representation of a Number that would be produced by <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>, or the string <code>"-0"</code>. Otherwise, it returns <emu-val>undefined</emu-val>. This abstract operation functions as follows:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>argument</var>) is String.</li><li>If <var>argument</var> is <code>"-0"</code>, return <emu-val>-0</emu-val>.</li><li>Let <var>n</var> be <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>argument</var>).</li><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>n</var>), <var>argument</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return <var>n</var>.
      </li></ol></emu-alg>
      <p>A  <em>canonical numeric string</em> is any String value for which the CanonicalNumericIndexString abstract operation does not return <emu-val>undefined</emu-val>.</p>
    </emu-clause>

    <emu-clause id="sec-toindex" aoid="ToIndex">
      <h1><span class="secnum">7.1.17</span>ToIndex ( <var>value</var> )<span class="utils"><span class="anchor"><a href="#sec-toindex">#</a></span></span></h1>
      <p>The abstract operation ToIndex returns <var>value</var> argument converted to a numeric value if it is a valid integer index value. This abstract operation functions as follows:</p>
      <emu-alg><ol><li>If <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>index</var> be 0.</li></ol></li><li>Else,<ol><li>Let <var>integerIndex</var> be ? <emu-xref aoid="ToInteger"><a href="#sec-tointeger">ToInteger</a></emu-xref>(<var>value</var>).</li><li>If <var>integerIndex</var> &lt; 0, throw a <emu-val>RangeError</emu-val> exception.</li><li>Let <var>index</var> be ! <emu-xref aoid="ToLength"><a href="#sec-tolength">ToLength</a></emu-xref>(<var>integerIndex</var>).</li><li>If <emu-xref aoid="SameValueZero"><a href="#sec-samevaluezero">SameValueZero</a></emu-xref>(<var>integerIndex</var>, <var>index</var>) is <emu-val>false</emu-val>, throw a <emu-val>RangeError</emu-val> exception.</li></ol></li><li>Return <var>index</var>.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="7.2" -->
  <emu-clause id="sec-testing-and-comparison-operations">
    <h1><span class="secnum">7.2</span>Testing and Comparison Operations<span class="utils"><span class="anchor"><a href="#sec-testing-and-comparison-operations">#</a></span></span></h1>

    <!-- es6num="7.2.1" -->
    <emu-clause id="sec-requireobjectcoercible" aoid="RequireObjectCoercible">
      <h1><span class="secnum">7.2.1</span>RequireObjectCoercible ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-requireobjectcoercible">#</a></span></span></h1>
      <p>The abstract operation RequireObjectCoercible throws an error if <var>argument</var> is a value that cannot be converted to an Object using <emu-xref aoid="ToObject"><a href="#sec-toobject">ToObject</a></emu-xref>. It is defined by  <emu-xref href="#table-14"><a href="#table-14">Table 14</a></emu-xref>:</p>
      <emu-table id="table-14" caption="RequireObjectCoercible Results"><figure><figcaption>Table 14: RequireObjectCoercible Results</figcaption>
        <table>
          <tbody>
          <tr>
            <th>
              Argument Type
            
            </th>
            <th>
              Result
            
            </th>
          </tr>
          <tr>
            <td>
              Undefined
            
            </td>
            <td>
              Throw a <emu-val>TypeError</emu-val> exception.
            
            </td>
          </tr>
          <tr>
            <td>
              Null
            
            </td>
            <td>
              Throw a <emu-val>TypeError</emu-val> exception.
            
            </td>
          </tr>
          <tr>
            <td>
              Boolean
            
            </td>
            <td>
              Return <var>argument</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              Number
            
            </td>
            <td>
              Return <var>argument</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              String
            
            </td>
            <td>
              Return <var>argument</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              Symbol
            
            </td>
            <td>
              Return <var>argument</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              Object
            
            </td>
            <td>
              Return <var>argument</var>.
            
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>
    </emu-clause>

    <!-- es6num="7.2.2" -->
    <emu-clause id="sec-isarray" aoid="IsArray">
      <h1><span class="secnum">7.2.2</span>IsArray ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-isarray">#</a></span></span></h1>
      <p>The abstract operation IsArray takes one argument <var>argument</var>, and performs the following steps:</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>argument</var>) is not Object, return <emu-val>false</emu-val>.</li><li>If <var>argument</var> is an Array exotic object, return <emu-val>true</emu-val>.</li><li>If <var>argument</var> is a Proxy exotic object, then<ol><li>If <var>argument</var>.[[ProxyHandler]] is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>target</var> be <var>argument</var>.[[ProxyTarget]].</li><li>Return ? <emu-xref aoid="IsArray"><a href="#sec-isarray">IsArray</a></emu-xref>(<var>target</var>).</li></ol></li><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.2.3" -->
    <emu-clause id="sec-iscallable" aoid="IsCallable">
      <h1><span class="secnum">7.2.3</span>IsCallable ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-iscallable">#</a></span></span></h1>
      <p>The abstract operation IsCallable determines if <var>argument</var>, which must be an <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref>, is a callable function with a [[Call]] internal method.</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>argument</var>) is not Object, return <emu-val>false</emu-val>.</li><li>If <var>argument</var> has a [[Call]] internal method, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.2.4" -->
    <emu-clause id="sec-isconstructor" aoid="IsConstructor">
      <h1><span class="secnum">7.2.4</span>IsConstructor ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-isconstructor">#</a></span></span></h1>
      <p>The abstract operation IsConstructor determines if <var>argument</var>, which must be an <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref>, is a function object with a [[Construct]] internal method.</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>argument</var>) is not Object, return <emu-val>false</emu-val>.</li><li>If <var>argument</var> has a [[Construct]] internal method, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.2.5" -->
    <emu-clause id="sec-isextensible-o" aoid="IsExtensible">
      <h1><span class="secnum">7.2.5</span>IsExtensible (<var>O</var>)<span class="utils"><span class="anchor"><a href="#sec-isextensible-o">#</a></span></span></h1>
      <p>The abstract operation IsExtensible is used to determine whether additional properties can be added to the object that is <var>O</var>. A Boolean value is returned. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Return ? <var>O</var>.[[IsExtensible]]().
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.2.6" -->
    <emu-clause id="sec-isinteger" aoid="IsInteger">
      <h1><span class="secnum">7.2.6</span>IsInteger ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-isinteger">#</a></span></span></h1>
      <p>The abstract operation IsInteger determines if <var>argument</var> is a finite integer numeric value.</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>argument</var>) is not Number, return <emu-val>false</emu-val>.</li><li>If <var>argument</var> is <emu-val>NaN</emu-val>, <emu-val>+â</emu-val>, or <emu-val>-â</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>(<emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>argument</var>)) â  <emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>argument</var>), return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.2.7" -->
    <emu-clause id="sec-ispropertykey" aoid="IsPropertyKey">
      <h1><span class="secnum">7.2.7</span>IsPropertyKey ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-ispropertykey">#</a></span></span></h1>
      <p>The abstract operation IsPropertyKey determines if <var>argument</var>, which must be an <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref>, is a value that may be used as a property key.</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>argument</var>) is String, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>argument</var>) is Symbol, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.2.8" -->
    <emu-clause id="sec-isregexp" aoid="IsRegExp">
      <h1><span class="secnum">7.2.8</span>IsRegExp ( <var>argument</var> )<span class="utils"><span class="anchor"><a href="#sec-isregexp">#</a></span></span></h1>
      <p>The abstract operation IsRegExp with argument <var>argument</var> performs the following steps:</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>argument</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>isRegExp</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>argument</var>, @@match).</li><li>If <var>isRegExp</var> is not <emu-val>undefined</emu-val>, return <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(<var>isRegExp</var>).</li><li>If <var>argument</var> has a [[RegExpMatcher]] internal slot, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.2.9" -->
    <emu-clause id="sec-samevalue" aoid="SameValue">
      <h1><span class="secnum">7.2.9</span>SameValue (<var>x</var>, <var>y</var>)<span class="utils"><span class="anchor"><a href="#sec-samevalue">#</a></span></span></h1>
      <p>The internal comparison abstract operation SameValue(<var>x</var>, <var>y</var>), where <var>x</var> and <var>y</var> are ECMAScript language values, produces <emu-val>true</emu-val> or <emu-val>false</emu-val>. Such a comparison is performed as follows:</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is Number, then<ol><li>If <var>x</var> is <emu-val>NaN</emu-val> and <var>y</var> is <emu-val>NaN</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>x</var> is the same Number value as <var>y</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-xref aoid="SameValueNonNumber"><a href="#sec-samevaluenonnumber">SameValueNonNumber</a></emu-xref>(<var>x</var>, <var>y</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>This algorithm differs from the <emu-xref aoid="Strict Equality Comparison"><a href="#sec-strict-equality-comparison">Strict Equality Comparison</a></emu-xref> Algorithm in its treatment of signed zeroes and NaNs.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="7.2.10" -->
    <emu-clause id="sec-samevaluezero" aoid="SameValueZero">
      <h1><span class="secnum">7.2.10</span>SameValueZero (<var>x</var>, <var>y</var>)<span class="utils"><span class="anchor"><a href="#sec-samevaluezero">#</a></span></span></h1>
      <p>The internal comparison abstract operation SameValueZero(<var>x</var>, <var>y</var>), where <var>x</var> and <var>y</var> are ECMAScript language values, produces <emu-val>true</emu-val> or <emu-val>false</emu-val>. Such a comparison is performed as follows:</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is Number, then<ol><li>If <var>x</var> is <emu-val>NaN</emu-val> and <var>y</var> is <emu-val>NaN</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is the same Number value as <var>y</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-xref aoid="SameValueNonNumber"><a href="#sec-samevaluenonnumber">SameValueNonNumber</a></emu-xref>(<var>x</var>, <var>y</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>SameValueZero differs from <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref> only in its treatment of <emu-val>+0</emu-val> and <emu-val>-0</emu-val>.</p>
      </emu-note>
    </emu-clause>

    <emu-clause id="sec-samevaluenonnumber" aoid="SameValueNonNumber">
      <h1><span class="secnum">7.2.11</span>SameValueNonNumber (<var>x</var>, <var>y</var>)<span class="utils"><span class="anchor"><a href="#sec-samevaluenonnumber">#</a></span></span></h1>
      <p>The internal comparison abstract operation SameValueNonNumber(<var>x</var>, <var>y</var>), where neither <var>x</var> nor <var>y</var> are Number values, produces <emu-val>true</emu-val> or <emu-val>false</emu-val>. Such a comparison is performed as follows:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is not Number.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is Undefined, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is Null, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is String, then<ol><li>If <var>x</var> and <var>y</var> are exactly the same sequence of code units (same length and same code units at corresponding indices), return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is Boolean, then<ol><li>If <var>x</var> and <var>y</var> are both <emu-val>true</emu-val> or both <emu-val>false</emu-val>, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is Symbol, then<ol><li>If <var>x</var> and <var>y</var> are both the same Symbol value, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val> if <var>x</var> and <var>y</var> are the same Object value. Otherwise, return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.2.11" -->
    <emu-clause id="sec-abstract-relational-comparison" aoid="Abstract Relational Comparison">
      <h1><span class="secnum">7.2.12</span>Abstract Relational Comparison<span class="utils"><span class="anchor"><a href="#sec-abstract-relational-comparison">#</a></span></span></h1>
      <p>The comparison <var>x</var> &lt; <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val>, <emu-val>false</emu-val>, or <emu-val>undefined</emu-val> (which indicates that at least one operand is <emu-val>NaN</emu-val>). In addition to <var>x</var> and <var>y</var> the algorithm takes a Boolean flag named <var>LeftFirst</var>
 as a parameter. The flag is used to control the order in which 
operations with potentially visible side-effects are performed upon <var>x</var> and <var>y</var>. It is necessary because ECMAScript specifies left to right evaluation of expressions. The default value of <var>LeftFirst</var> is <emu-val>true</emu-val> and indicates that the <var>x</var> parameter corresponds to an expression that occurs to the left of the <var>y</var> parameter's corresponding expression. If <var>LeftFirst</var> is <emu-val>false</emu-val>, the reverse is the case and operations must be performed upon <var>y</var> before <var>x</var>. Such a comparison is performed as follows:</p>
      <emu-alg><ol><li>If the <var>LeftFirst</var> flag is <emu-val>true</emu-val>, then<ol><li>Let <var>px</var> be ? <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li><li>Let <var>py</var> be ? <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li></ol></li><li>Else the order of evaluation needs to be reversed to preserve left to right evaluation,<ol><li>Let <var>py</var> be ? <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>y</var>, hint Number).</li><li>Let <var>px</var> be ? <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>x</var>, hint Number).</li></ol></li><li>If both <var>px</var> and <var>py</var> are Strings, then<ol><li>If <var>py</var> is a prefix of <var>px</var>, return <emu-val>false</emu-val>. (A String value <var>p</var> is a prefix of String value <var>q</var> if <var>q</var> can be the result of concatenating <var>p</var> and some other String <var>r</var>. Note that any String is a prefix of itself, because <var>r</var> may be the empty String.)</li><li>If <var>px</var> is a prefix of <var>py</var>, return <emu-val>true</emu-val>.</li><li>Let <var>k</var> be the smallest nonnegative integer such that the code unit at index <var>k</var> within <var>px</var> is different from the code unit at index <var>k</var> within <var>py</var>. (There must be such a <var>k</var>, for neither String is a prefix of the other.)</li><li>Let <var>m</var> be the integer that is the code unit value at index <var>k</var> within <var>px</var>.</li><li>Let <var>n</var> be the integer that is the code unit value at index <var>k</var> within <var>py</var>.</li><li>If <var>m</var> &lt; <var>n</var>, return <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>nx</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>px</var>). Because <var>px</var> and <var>py</var> are primitive values evaluation order is not important.</li><li>Let <var>ny</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>py</var>).</li><li>If <var>nx</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>ny</var> is <emu-val>NaN</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>nx</var> and <var>ny</var> are the same Number value, return <emu-val>false</emu-val>.</li><li>If <var>nx</var> is <emu-val>+0</emu-val> and <var>ny</var> is <emu-val>-0</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>nx</var> is <emu-val>-0</emu-val> and <var>ny</var> is <emu-val>+0</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>nx</var> is <emu-val>+â</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>ny</var> is <emu-val>+â</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>ny</var> is <emu-val>-â</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>nx</var> is <emu-val>-â</emu-val>, return <emu-val>true</emu-val>.</li><li>If the mathematical value of <var>nx</var> is less than the mathematical value of <var>ny</var> ânote that these mathematical values are both finite and not both zeroâreturn <emu-val>true</emu-val>. Otherwise, return <emu-val>false</emu-val>.
      </li></ol></li></ol></emu-alg>
      <emu-note><span class="note">Note 1</span>
        <p>Step 3 differs from step 7 in the algorithm for the addition operator <code>+</code> (<emu-xref href="#sec-addition-operator-plus"><a href="#sec-addition-operator-plus">12.8.3</a></emu-xref>) in using âandâ instead of âorâ.</p>
      </emu-note>
      <emu-note><span class="note">Note 2</span>
        <p>The comparison of Strings uses a simple lexicographic 
ordering on sequences of code unit values. There is no attempt to use 
the more complex, semantically oriented definitions of character or 
string equality and collating order defined in the Unicode 
specification. Therefore String values that are canonically equal 
according to the Unicode standard could test as unequal. In effect this 
algorithm assumes that both Strings are already in normalized form. 
Also, note that for strings containing supplementary characters, 
lexicographic ordering on sequences of UTF-16 code unit values differs 
from that on sequences of code point values.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="7.2.12" -->
    <emu-clause id="sec-abstract-equality-comparison" aoid="Abstract Equality Comparison">
      <h1><span class="secnum">7.2.13</span>Abstract Equality Comparison<span class="utils"><span class="anchor"><a href="#sec-abstract-equality-comparison">#</a></span></span></h1>
      <p>The comparison <var>x</var> == <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val> or <emu-val>false</emu-val>. Such a comparison is performed as follows:</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is the same as <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>y</var>), then<ol><li>Return the result of performing <emu-xref aoid="Strict Equality Comparison"><a href="#sec-strict-equality-comparison">Strict Equality Comparison</a></emu-xref> <var>x</var> === <var>y</var>.</li></ol></li><li>If <var>x</var> is <emu-val>null</emu-val> and <var>y</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>undefined</emu-val> and <var>y</var> is <emu-val>null</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is Number and <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>y</var>) is String, return the result of the comparison <var>x</var> == <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is String and <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>y</var>) is Number, return the result of the comparison <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is Boolean, return the result of the comparison <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>y</var>) is Boolean, return the result of the comparison <var>x</var> == <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is either String, Number, or Symbol and <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>y</var>) is Object, return the result of the comparison <var>x</var> == <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>y</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is Object and <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>y</var>) is either String, Number, or Symbol, return the result of the comparison <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>x</var>) == <var>y</var>.</li><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.2.13" -->
    <emu-clause id="sec-strict-equality-comparison" aoid="Strict Equality Comparison">
      <h1><span class="secnum">7.2.14</span>Strict Equality Comparison<span class="utils"><span class="anchor"><a href="#sec-strict-equality-comparison">#</a></span></span></h1>
      <p>The comparison <var>x</var> === <var>y</var>, where <var>x</var> and <var>y</var> are values, produces <emu-val>true</emu-val> or <emu-val>false</emu-val>. Such a comparison is performed as follows:</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is different from <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>y</var>), return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>x</var>) is Number, then<ol><li>If <var>x</var> is <emu-val>NaN</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>y</var> is <emu-val>NaN</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>x</var> is the same Number value as <var>y</var>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>+0</emu-val> and <var>y</var> is <emu-val>-0</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>x</var> is <emu-val>-0</emu-val> and <var>y</var> is <emu-val>+0</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-xref aoid="SameValueNonNumber"><a href="#sec-samevaluenonnumber">SameValueNonNumber</a></emu-xref>(<var>x</var>, <var>y</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>This algorithm differs from the <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref> Algorithm in its treatment of signed zeroes and NaNs.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="7.3" -->
  <emu-clause id="sec-operations-on-objects">
    <h1><span class="secnum">7.3</span>Operations on Objects<span class="utils"><span class="anchor"><a href="#sec-operations-on-objects">#</a></span></span></h1>

    <!-- es6num="7.3.1" -->
    <emu-clause id="sec-get-o-p" aoid="Get">
      <h1><span class="secnum">7.3.1</span>Get (<var>O</var>, <var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-get-o-p">#</a></span></span></h1>
      <p>The abstract operation Get is used to retrieve the value of a 
specific property of an object. The operation is called with arguments <var>O</var> and <var>P</var> where <var>O</var> is the object and <var>P</var> is the property key. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Return ? <var>O</var>.[[Get]](<var>P</var>, <var>O</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.2" -->
    <emu-clause id="sec-getv" aoid="GetV">
      <h1><span class="secnum">7.3.2</span>GetV (<var>V</var>, <var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-getv">#</a></span></span></h1>
      <p>The abstract operation GetV is used to retrieve the value of a specific property of an <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref>.
 If the value is not an object, the property lookup is performed using a
 wrapper object appropriate for the type of the value. The operation is 
called with arguments <var>V</var> and <var>P</var> where <var>V</var> is the value and <var>P</var> is the property key. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>O</var> be ? <emu-xref aoid="ToObject"><a href="#sec-toobject">ToObject</a></emu-xref>(<var>V</var>).</li><li>Return ? <var>O</var>.[[Get]](<var>P</var>, <var>V</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.3" -->
    <emu-clause id="sec-set-o-p-v-throw" aoid="Set">
      <h1><span class="secnum">7.3.3</span>Set (<var>O</var>, <var>P</var>, <var>V</var>, <var>Throw</var>)<span class="utils"><span class="anchor"><a href="#sec-set-o-p-v-throw">#</a></span></span></h1>
      <p>The abstract operation Set is used to set the value of a specific property of an object. The operation is called with arguments <var>O</var>, <var>P</var>, <var>V</var>, and <var>Throw</var> where <var>O</var> is the object, <var>P</var> is the property key, <var>V</var> is the new value for the property and <var>Throw</var> is a Boolean flag. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>Throw</var>) is Boolean.</li><li>Let <var>success</var> be ? <var>O</var>.[[Set]](<var>P</var>, <var>V</var>, <var>O</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val> and <var>Throw</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.4" -->
    <emu-clause id="sec-createdataproperty" aoid="CreateDataProperty">
      <h1><span class="secnum">7.3.4</span>CreateDataProperty (<var>O</var>, <var>P</var>, <var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-createdataproperty">#</a></span></span></h1>
      <p>The abstract operation CreateDataProperty is used to create a 
new own property of an object. The operation is called with arguments <var>O</var>, <var>P</var>, and <var>V</var> where <var>O</var> is the object, <var>P</var> is the property key, and <var>V</var> is the value for the property. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>newDesc</var> be the PropertyDescriptor{[[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}.</li><li>Return ? <var>O</var>.[[DefineOwnProperty]](<var>P</var>, <var>newDesc</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>This abstract operation creates a property whose attributes 
are set to the same defaults used for properties created by the 
ECMAScript language assignment operator. Normally, the property will not
 already exist. If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <emu-val>false</emu-val>.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="7.3.5" -->
    <emu-clause id="sec-createmethodproperty" aoid="CreateMethodProperty">
      <h1><span class="secnum">7.3.5</span>CreateMethodProperty (<var>O</var>, <var>P</var>, <var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-createmethodproperty">#</a></span></span></h1>
      <p>The abstract operation CreateMethodProperty is used to create a
 new own property of an object. The operation is called with arguments <var>O</var>, <var>P</var>, and <var>V</var> where <var>O</var> is the object, <var>P</var> is the property key, and <var>V</var> is the value for the property. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>newDesc</var> be the PropertyDescriptor{[[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}.</li><li>Return ? <var>O</var>.[[DefineOwnProperty]](<var>P</var>, <var>newDesc</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>This abstract operation creates a property whose attributes 
are set to the same defaults used for built-in methods and methods 
defined using class declaration syntax. Normally, the property will not 
already exist. If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <emu-val>false</emu-val>.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="7.3.6" -->
    <emu-clause id="sec-createdatapropertyorthrow" aoid="CreateDataPropertyOrThrow">
      <h1><span class="secnum">7.3.6</span>CreateDataPropertyOrThrow (<var>O</var>, <var>P</var>, <var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-createdatapropertyorthrow">#</a></span></span></h1>
      <p>The abstract operation CreateDataPropertyOrThrow is used to create a new own property of an object. It throws a <emu-val>TypeError</emu-val> exception if the requested property update cannot be performed. The operation is called with arguments <var>O</var>, <var>P</var>, and <var>V</var> where <var>O</var> is the object, <var>P</var> is the property key, and <var>V</var> is the value for the property. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>success</var> be ? <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>This abstract operation creates a property whose attributes 
are set to the same defaults used for properties created by the 
ECMAScript language assignment operator. Normally, the property will not
 already exist. If it does exist and is not configurable or if <var>O</var> is not extensible, [[DefineOwnProperty]] will return <emu-val>false</emu-val> causing this operation to throw a <emu-val>TypeError</emu-val> exception.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="7.3.7" -->
    <emu-clause id="sec-definepropertyorthrow" aoid="DefinePropertyOrThrow">
      <h1><span class="secnum">7.3.7</span>DefinePropertyOrThrow (<var>O</var>, <var>P</var>, <var>desc</var>)<span class="utils"><span class="anchor"><a href="#sec-definepropertyorthrow">#</a></span></span></h1>
      <p>The abstract operation DefinePropertyOrThrow is used to call 
the [[DefineOwnProperty]] internal method of an object in a manner that 
will throw a <emu-val>TypeError</emu-val> exception if the requested property update cannot be performed. The operation is called with arguments <var>O</var>, <var>P</var>, and <var>desc</var> where <var>O</var> is the object, <var>P</var> is the property key, and <var>desc</var> is the <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> for the property. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>success</var> be ? <var>O</var>.[[DefineOwnProperty]](<var>P</var>, <var>desc</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.8" -->
    <emu-clause id="sec-deletepropertyorthrow" aoid="DeletePropertyOrThrow">
      <h1><span class="secnum">7.3.8</span>DeletePropertyOrThrow (<var>O</var>, <var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-deletepropertyorthrow">#</a></span></span></h1>
      <p>The abstract operation DeletePropertyOrThrow is used to remove a
 specific own property of an object. It throws an exception if the 
property is not configurable. The operation is called with arguments <var>O</var> and <var>P</var> where <var>O</var> is the object and <var>P</var> is the property key. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>success</var> be ? <var>O</var>.[[Delete]](<var>P</var>).</li><li>If <var>success</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>success</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.9" -->
    <emu-clause id="sec-getmethod" aoid="GetMethod">
      <h1><span class="secnum">7.3.9</span>GetMethod (<var>V</var>, <var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-getmethod">#</a></span></span></h1>
      <p>The abstract operation GetMethod is used to get the value of a specific property of an <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> when the value of the property is expected to be a function. The operation is called with arguments <var>V</var> and <var>P</var> where <var>V</var> is the <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref>, <var>P</var> is the property key. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>func</var> be ? <emu-xref aoid="GetV"><a href="#sec-getv">GetV</a></emu-xref>(<var>V</var>, <var>P</var>).</li><li>If <var>func</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid="IsCallable"><a href="#sec-iscallable">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>func</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.10" -->
    <emu-clause id="sec-hasproperty" aoid="HasProperty">
      <h1><span class="secnum">7.3.10</span>HasProperty (<var>O</var>, <var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-hasproperty">#</a></span></span></h1>
      <p>The abstract operation HasProperty is used to determine whether
 an object has a property with the specified property key. The property 
may be either an own or inherited. A Boolean value is returned. The 
operation is called with arguments <var>O</var> and <var>P</var> where <var>O</var> is the object and <var>P</var> is the property key. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Return ? <var>O</var>.[[HasProperty]](<var>P</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.11" -->
    <emu-clause id="sec-hasownproperty" aoid="HasOwnProperty">
      <h1><span class="secnum">7.3.11</span>HasOwnProperty (<var>O</var>, <var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-hasownproperty">#</a></span></span></h1>
      <p>The abstract operation HasOwnProperty is used to determine 
whether an object has an own property with the specified property key. A
 Boolean value is returned. The operation is called with arguments <var>O</var> and <var>P</var> where <var>O</var> is the object and <var>P</var> is the property key. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.12" -->
    <emu-clause id="sec-call" aoid="Call">
      <h1><span class="secnum">7.3.12</span>Call (<var>F</var>, <var>V</var> [ , <var>argumentsList</var> ])<span class="utils"><span class="anchor"><a href="#sec-call">#</a></span></span></h1>
      <p>The abstract operation Call is used to call the [[Call]] 
internal method of a function object. The operation is called with 
arguments <var>F</var>, <var>V</var>, and optionally <var>argumentsList</var> where <var>F</var> is the function object, <var>V</var> is an <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> that is the <emu-val>this</emu-val> value of the [[Call]], and <var>argumentsList</var> is the value passed to the corresponding argument of the internal method. If <var>argumentsList</var> is not present, a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> is used as its value. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>If <var>argumentsList</var> was not passed, let <var>argumentsList</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>If <emu-xref aoid="IsCallable"><a href="#sec-iscallable">IsCallable</a></emu-xref>(<var>F</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ? <var>F</var>.[[Call]](<var>V</var>, <var>argumentsList</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.13" -->
    <emu-clause id="sec-construct" aoid="Construct">
      <h1><span class="secnum">7.3.13</span>Construct (<var>F</var> [ , <var>argumentsList</var> [ , <var>newTarget</var> ]])<span class="utils"><span class="anchor"><a href="#sec-construct">#</a></span></span></h1>
      <p>The abstract operation Construct is used to call the 
[[Construct]] internal method of a function object. The operation is 
called with arguments <var>F</var>, and optionally <var>argumentsList</var>, and <var>newTarget</var> where <var>F</var> is the function object. <var>argumentsList</var> and <var>newTarget</var> are the values to be passed as the corresponding arguments of the internal method. If <var>argumentsList</var> is not present, a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> is used as its value. If <var>newTarget</var> is not present, <var>F</var> is used as its value. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>If <var>newTarget</var> was not passed, let <var>newTarget</var> be <var>F</var>.</li><li>If <var>argumentsList</var> was not passed, let <var>argumentsList</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Assert: <emu-xref aoid="IsConstructor"><a href="#sec-isconstructor">IsConstructor</a></emu-xref>(<var>F</var>) is <emu-val>true</emu-val>.</li><li>Assert: <emu-xref aoid="IsConstructor"><a href="#sec-isconstructor">IsConstructor</a></emu-xref>(<var>newTarget</var>) is <emu-val>true</emu-val>.</li><li>Return ? <var>F</var>.[[Construct]](<var>argumentsList</var>, <var>newTarget</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>If <var>newTarget</var> is not passed, this operation is equivalent to: <code>new F(...argumentsList)</code></p>
      </emu-note>
    </emu-clause>

    <!-- es6num="7.3.14" -->
    <emu-clause id="sec-setintegritylevel" aoid="SetIntegrityLevel">
      <h1><span class="secnum">7.3.14</span>SetIntegrityLevel (<var>O</var>, <var>level</var>)<span class="utils"><span class="anchor"><a href="#sec-setintegritylevel">#</a></span></span></h1>
      <p>The abstract operation SetIntegrityLevel is used to fix the set
 of own properties of an object. This abstract operation performs the 
following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <var>level</var> is either <code>"sealed"</code> or <code>"frozen"</code>.</li><li>Let <var>status</var> be ? <var>O</var>.[[PreventExtensions]]().</li><li>If <var>status</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>keys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>If <var>level</var> is <code>"sealed"</code>, then<ol><li>Repeat for each element <var>k</var> of <var>keys</var>,<ol><li>Perform ? <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>k</var>, PropertyDescriptor{[[Configurable]]: <emu-val>false</emu-val>}).</li></ol></li></ol></li><li>Else <var>level</var> is <code>"frozen"</code>,<ol><li>Repeat for each element <var>k</var> of <var>keys</var>,<ol><li>Let <var>currentDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>k</var>).</li><li>If <var>currentDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>currentDesc</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be the PropertyDescriptor{[[Configurable]]: <emu-val>false</emu-val>}.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor { [[Configurable]]: <emu-val>false</emu-val>, [[Writable]]: <emu-val>false</emu-val> }.</li></ol></li><li>Perform ? <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>O</var>, <var>k</var>, <var>desc</var>).</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.15" -->
    <emu-clause id="sec-testintegritylevel" aoid="TestIntegrityLevel">
      <h1><span class="secnum">7.3.15</span>TestIntegrityLevel (<var>O</var>, <var>level</var>)<span class="utils"><span class="anchor"><a href="#sec-testintegritylevel">#</a></span></span></h1>
      <p>The abstract operation TestIntegrityLevel is used to determine 
if the set of own properties of an object are fixed. This abstract 
operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Assert: <var>level</var> is either <code>"sealed"</code> or <code>"frozen"</code>.</li><li>Let <var>status</var> be ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>O</var>).</li><li>If <var>status</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>NOTE If the object is extensible, none of its properties are examined.</li><li>Let <var>keys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Repeat for each element <var>k</var> of <var>keys</var>,<ol><li>Let <var>currentDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>k</var>).</li><li>If <var>currentDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>currentDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>level</var> is <code>"frozen"</code> and <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>currentDesc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>currentDesc</var>.[[Writable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.16" -->
    <emu-clause id="sec-createarrayfromlist" aoid="CreateArrayFromList">
      <h1><span class="secnum">7.3.16</span>CreateArrayFromList (<var>elements</var>)<span class="utils"><span class="anchor"><a href="#sec-createarrayfromlist">#</a></span></span></h1>
      <p>The abstract operation CreateArrayFromList is used to create an Array object whose elements are provided by a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <var>elements</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> whose elements are all ECMAScript language values.</li><li>Let <var>array</var> be <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>For each element <var>e</var> of <var>elements</var><ol><li>Let <var>status</var> be <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>array</var>, ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>n</var>), <var>e</var>).</li><li>Assert: <var>status</var> is <emu-val>true</emu-val>.</li><li>Increment <var>n</var> by 1.</li></ol></li><li>Return <var>array</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.17" -->
    <emu-clause id="sec-createlistfromarraylike" aoid="CreateListFromArrayLike">
      <h1><span class="secnum">7.3.17</span>CreateListFromArrayLike (<var>obj</var> [ , <var>elementTypes</var> ] )<span class="utils"><span class="anchor"><a href="#sec-createlistfromarraylike">#</a></span></span></h1>
      <p>The abstract operation CreateListFromArrayLike is used to create a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> value whose elements are provided by the indexed properties of an array-like object, <var>obj</var>. The optional argument <var>elementTypes</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing the names of ECMAScript Language Types that are allowed for element values of the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> that is created. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>If <var>elementTypes</var> was not passed, let <var>elementTypes</var> be Â« Undefined, Null, Boolean, String, Symbol, Number, Object Â».</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>obj</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>len</var> be ? <emu-xref aoid="ToLength"><a href="#sec-tolength">ToLength</a></emu-xref>(? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>obj</var>, <code>"length"</code>)).</li><li>Let <var>list</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Let <var>index</var> be 0.</li><li>Repeat while <var>index</var> &lt; <var>len</var><ol><li>Let <var>indexName</var> be ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>next</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>obj</var>, <var>indexName</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>next</var>) is not an element of <var>elementTypes</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>next</var> as the last element of <var>list</var>.</li><li>Set <var>index</var> to <var>index</var> + 1.</li></ol></li><li>Return <var>list</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.18" -->
    <emu-clause id="sec-invoke" aoid="Invoke">
      <h1><span class="secnum">7.3.18</span>Invoke (<var>V</var>, <var>P</var> [ , <var>argumentsList</var> ])<span class="utils"><span class="anchor"><a href="#sec-invoke">#</a></span></span></h1>
      <p>The abstract operation Invoke is used to call a method property of an <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref>. The operation is called with arguments <var>V</var>, <var>P</var>, and optionally <var>argumentsList</var> where <var>V</var> serves as both the lookup point for the property and the <emu-val>this</emu-val> value of the call, <var>P</var> is the property key, and <var>argumentsList</var> is the list of arguments values passed to the method. If <var>argumentsList</var> is not present, a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> is used as its value. This abstract operation performs the following steps:</p>

      <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>argumentsList</var> was not passed, let <var>argumentsList</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Let <var>func</var> be ? <emu-xref aoid="GetV"><a href="#sec-getv">GetV</a></emu-xref>(<var>V</var>, <var>P</var>).</li><li>Return ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>func</var>, <var>V</var>, <var>argumentsList</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.19" -->
    <emu-clause id="sec-ordinaryhasinstance" aoid="OrdinaryHasInstance">
      <h1><span class="secnum">7.3.19</span>OrdinaryHasInstance (<var>C</var>, <var>O</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinaryhasinstance">#</a></span></span></h1>
      <p>The abstract operation OrdinaryHasInstance implements the default algorithm for determining if an object <var>O</var> inherits from the instance object inheritance path provided by constructor <var>C</var>. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>If <emu-xref aoid="IsCallable"><a href="#sec-iscallable">IsCallable</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>C</var> has a [[BoundTargetFunction]] internal slot, then<ol><li>Let <var>BC</var> be <var>C</var>.[[BoundTargetFunction]].</li><li>Return ? <emu-xref aoid="InstanceofOperator"><a href="#sec-instanceofoperator">InstanceofOperator</a></emu-xref>(<var>O</var>, <var>BC</var>).</li></ol></li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>P</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>C</var>, <code>"prototype"</code>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Repeat<ol><li>Let <var>O</var> be ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>O</var> is <emu-val>null</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>P</var>, <var>O</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.
      </li></ol></li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.20" -->
    <emu-clause id="sec-speciesconstructor" aoid="SpeciesConstructor">
      <h1><span class="secnum">7.3.20</span>SpeciesConstructor ( <var>O</var>, <var>defaultConstructor</var> )<span class="utils"><span class="anchor"><a href="#sec-speciesconstructor">#</a></span></span></h1>
      <p>The abstract operation SpeciesConstructor is used to retrieve 
the constructor that should be used to create new objects that are 
derived from the argument object <var>O</var>. The <var>defaultConstructor</var> argument is the constructor to use if a constructor @@species property cannot be found starting from <var>O</var>. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>C</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>O</var>, <code>"constructor"</code>).</li><li>If <var>C</var> is <emu-val>undefined</emu-val>, return <var>defaultConstructor</var>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>C</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>S</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>C</var>, @@species).</li><li>If <var>S</var> is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, return <var>defaultConstructor</var>.</li><li>If <emu-xref aoid="IsConstructor"><a href="#sec-isconstructor">IsConstructor</a></emu-xref>(<var>S</var>) is <emu-val>true</emu-val>, return <var>S</var>.</li><li>Throw a <emu-val>TypeError</emu-val> exception.
      </li></ol></emu-alg>
    </emu-clause>

    <emu-clause id="sec-enumerableownproperties" aoid="EnumerableOwnProperties">
      <h1><span class="secnum">7.3.21</span>EnumerableOwnProperties ( <var>O</var>, <var>kind</var> )<span class="utils"><span class="anchor"><a href="#sec-enumerableownproperties">#</a></span></span></h1>
      <p>When the abstract operation EnumerableOwnProperties is called with Object <var>O</var> and String <var>kind</var> the following steps are taken:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Let <var>ownKeys</var> be ? <var>O</var>.[[OwnPropertyKeys]]().</li><li>Let <var>properties</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Repeat, for each element <var>key</var> of <var>ownKeys</var> in <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> order<ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>key</var>) is String, then<ol><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Enumerable]] is <emu-val>true</emu-val>, then<ol><li>If <var>kind</var> is <emu-val>"key"</emu-val>, append <var>key</var> to <var>properties</var>.</li><li>Else,<ol><li>Let <var>value</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>O</var>, <var>key</var>).</li><li>If <var>kind</var> is <emu-val>"value"</emu-val>, append <var>value</var> to <var>properties</var>.</li><li>Else,<ol><li>Assert: <var>kind</var> is <emu-val>"key+value"</emu-val>.</li><li>Let <var>entry</var> be <emu-xref aoid="CreateArrayFromList"><a href="#sec-createarrayfromlist">CreateArrayFromList</a></emu-xref>(Â« <var>key</var>, <var>value</var> Â»).</li><li>Append <var>entry</var> to <var>properties</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>Order the elements of <var>properties</var> so they are in the same relative order as would be produced by the Iterator that would be returned if the <emu-xref aoid="EnumerateObjectProperties"><a href="#sec-enumerate-object-properties">EnumerateObjectProperties</a></emu-xref> internal method was invoked with <var>O</var>.</li><li>Return <var>properties</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.3.22" -->
    <emu-clause id="sec-getfunctionrealm" aoid="GetFunctionRealm">
      <h1><span class="secnum">7.3.22</span>GetFunctionRealm ( <var>obj</var> )<span class="utils"><span class="anchor"><a href="#sec-getfunctionrealm">#</a></span></span></h1>
      <p>The abstract operation GetFunctionRealm with argument <var>obj</var> performs the following steps:</p>
      <emu-alg><ol><li>Assert: <var>obj</var> is a callable object.</li><li>If <var>obj</var> has a [[Realm]] internal slot, then<ol><li>Return <var>obj</var>.[[Realm]].</li></ol></li><li>If <var>obj</var> is a Bound Function exotic object, then<ol><li>Let <var>target</var> be <var>obj</var>.[[BoundTargetFunction]].</li><li>Return ? <emu-xref aoid="GetFunctionRealm"><a href="#sec-getfunctionrealm">GetFunctionRealm</a></emu-xref>(<var>target</var>).</li></ol></li><li>If <var>obj</var> is a Proxy exotic object, then<ol><li>If <var>obj</var>.[[ProxyHandler]] is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>proxyTarget</var> be <var>obj</var>.[[ProxyTarget]].</li><li>Return ? <emu-xref aoid="GetFunctionRealm"><a href="#sec-getfunctionrealm">GetFunctionRealm</a></emu-xref>(<var>proxyTarget</var>).</li></ol></li><li>Return <emu-xref href="#current-realm"><a href="#current-realm">the current Realm Record</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Step 5 will only be reached if <var>target</var> is a non-standard exotic function object that does not have a [[Realm]] internal slot.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="7.4" -->
  <emu-clause id="sec-operations-on-iterator-objects">
    <h1><span class="secnum">7.4</span>Operations on Iterator Objects<span class="utils"><span class="anchor"><a href="#sec-operations-on-iterator-objects">#</a></span></span></h1>
    <p>See Common Iteration Interfaces (<emu-xref href="#sec-iteration"><a href="#sec-iteration">25.1</a></emu-xref>).</p>

    <!-- es6num="7.4.1" -->
    <emu-clause id="sec-getiterator" aoid="GetIterator">
      <h1><span class="secnum">7.4.1</span>GetIterator ( <var>obj</var> [ , <var>method</var> ] )<span class="utils"><span class="anchor"><a href="#sec-getiterator">#</a></span></span></h1>
      <p>The abstract operation GetIterator with argument <var>obj</var> and optional argument <var>method</var> performs the following steps:</p>
      <emu-alg><ol><li>If <var>method</var> was not passed, then<ol><li>Let <var>method</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>obj</var>, @@iterator).</li></ol></li><li>Let <var>iterator</var> be ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>method</var>, <var>obj</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>iterator</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>iterator</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.4.2" -->
    <emu-clause id="sec-iteratornext" aoid="IteratorNext">
      <h1><span class="secnum">7.4.2</span>IteratorNext ( <var>iterator</var> [ , <var>value</var> ] )<span class="utils"><span class="anchor"><a href="#sec-iteratornext">#</a></span></span></h1>
      <p>The abstract operation IteratorNext with argument <var>iterator</var> and optional argument <var>value</var> performs the following steps:</p>
      <emu-alg><ol><li>If <var>value</var> was not passed, then<ol><li>Let <var>result</var> be ? <emu-xref aoid="Invoke"><a href="#sec-invoke">Invoke</a></emu-xref>(<var>iterator</var>, <code>"next"</code>, Â« Â»).</li></ol></li><li>Else,<ol><li>Let <var>result</var> be ? <emu-xref aoid="Invoke"><a href="#sec-invoke">Invoke</a></emu-xref>(<var>iterator</var>, <code>"next"</code>, Â« <var>value</var> Â»).</li></ol></li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>result</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>result</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.4.3" -->
    <emu-clause id="sec-iteratorcomplete" aoid="IteratorComplete">
      <h1><span class="secnum">7.4.3</span>IteratorComplete ( <var>iterResult</var> )<span class="utils"><span class="anchor"><a href="#sec-iteratorcomplete">#</a></span></span></h1>
      <p>The abstract operation IteratorComplete with argument <var>iterResult</var> performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>iterResult</var>) is Object.</li><li>Return <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>iterResult</var>, <code>"done"</code>)).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.4.4" -->
    <emu-clause id="sec-iteratorvalue" aoid="IteratorValue">
      <h1><span class="secnum">7.4.4</span>IteratorValue ( <var>iterResult</var> )<span class="utils"><span class="anchor"><a href="#sec-iteratorvalue">#</a></span></span></h1>
      <p>The abstract operation IteratorValue with argument <var>iterResult</var> performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>iterResult</var>) is Object.</li><li>Return ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>iterResult</var>, <code>"value"</code>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.4.5" -->
    <emu-clause id="sec-iteratorstep" aoid="IteratorStep">
      <h1><span class="secnum">7.4.5</span>IteratorStep ( <var>iterator</var> )<span class="utils"><span class="anchor"><a href="#sec-iteratorstep">#</a></span></span></h1>
      <p>The abstract operation IteratorStep with argument <var>iterator</var> requests the next value from <var>iterator</var> and returns either <emu-val>false</emu-val>
 indicating that the iterator has reached its end or the IteratorResult 
object if a next value is available. IteratorStep performs the following
 steps:</p>
      <emu-alg><ol><li>Let <var>result</var> be ? <emu-xref aoid="IteratorNext"><a href="#sec-iteratornext">IteratorNext</a></emu-xref>(<var>iterator</var>).</li><li>Let <var>done</var> be ? <emu-xref aoid="IteratorComplete"><a href="#sec-iteratorcomplete">IteratorComplete</a></emu-xref>(<var>result</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <var>result</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.4.6" -->
    <emu-clause id="sec-iteratorclose" aoid="IteratorClose">
      <h1><span class="secnum">7.4.6</span>IteratorClose ( <var>iterator</var>, <var>completion</var> )<span class="utils"><span class="anchor"><a href="#sec-iteratorclose">#</a></span></span></h1>
      <p>The abstract operation IteratorClose with arguments <var>iterator</var> and <var>completion</var>
 is used to notify an iterator that it should perform any actions it 
would normally perform when it has reached its completed state:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>iterator</var>) is Object.</li><li>Assert: <var>completion</var> is a <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref>.</li><li>Let <var>return</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>iterator</var>, <code>"return"</code>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>completion</var>).</li><li>Let <var>innerResult</var> be <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, Â« Â»).</li><li>If <var>completion</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>completion</var>).</li><li>If <var>innerResult</var>.[[Type]] is <emu-const>throw</emu-const>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>innerResult</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>innerResult</var>.[[Value]]) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>completion</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.4.7" -->
    <emu-clause id="sec-createiterresultobject" aoid="CreateIterResultObject">
      <h1><span class="secnum">7.4.7</span>CreateIterResultObject ( <var>value</var>, <var>done</var> )<span class="utils"><span class="anchor"><a href="#sec-createiterresultobject">#</a></span></span></h1>
      <p>The abstract operation CreateIterResultObject with arguments <var>value</var> and <var>done</var> creates an object that supports the IteratorResult interface by performing the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>done</var>) is Boolean.</li><li>Let <var>obj</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>obj</var>, <code>"value"</code>, <var>value</var>).</li><li>Perform <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>obj</var>, <code>"done"</code>, <var>done</var>).</li><li>Return <var>obj</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="7.4.8" -->
    <emu-clause id="sec-createlistiterator" aoid="CreateListIterator">
      <h1><span class="secnum">7.4.8</span>CreateListIterator ( <var>list</var> )<span class="utils"><span class="anchor"><a href="#sec-createlistiterator">#</a></span></span></h1>
      <p>The abstract operation CreateListIterator with argument <var>list</var> creates an Iterator (<emu-xref href="#sec-iterator-interface"><a href="#sec-iterator-interface">25.1.1.2</a></emu-xref>) object whose next method returns the successive elements of <var>list</var>. It performs the following steps:</p>
      <emu-alg><ol><li>Let <var>iterator</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-%iteratorprototype%-object"><a href="#sec-%iteratorprototype%-object">%IteratorPrototype%</a></emu-xref>, Â« [[IteratorNext]], [[IteratedList]], [[ListIteratorNextIndex]] Â»).</li><li>Set <var>iterator</var>.[[IteratedList]] to <var>list</var>.</li><li>Set <var>iterator</var>.[[ListIteratorNextIndex]] to 0.</li><li>Let <var>next</var> be a new built-in function object as defined in ListIterator <code>next</code> (<emu-xref href="#sec-listiterator-next"><a href="#sec-listiterator-next">7.4.8.1</a></emu-xref>).</li><li>Set <var>iterator</var>.[[IteratorNext]] to <var>next</var>.</li><li>Perform <emu-xref aoid="CreateMethodProperty"><a href="#sec-createmethodproperty">CreateMethodProperty</a></emu-xref>(<var>iterator</var>, <code>"next"</code>, <var>next</var>).</li><li>Return <var>iterator</var>.
      </li></ol></emu-alg>

      <!-- es6num="7.4.8.1" -->
      <emu-clause id="sec-listiterator-next">
        <h1><span class="secnum">7.4.8.1</span>ListIterator next( )<span class="utils"><span class="anchor"><a href="#sec-listiterator-next">#</a></span></span></h1>
        <p>The ListIterator <code>next</code> method is a standard built-in function object (clause  <emu-xref href="#sec-ecmascript-standard-built-in-objects"><a href="#sec-ecmascript-standard-built-in-objects">17</a></emu-xref>) that performs the following steps:</p>
        <emu-alg><ol><li>Let <var>O</var> be the <emu-val>this</emu-val> value.</li><li>Let <var>f</var> be the <emu-xref href="#active-function-object"><a href="#active-function-object">active function object</a></emu-xref>.</li><li>If <var>O</var> does not have a [[IteratorNext]] internal slot, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>next</var> be <var>O</var>.[[IteratorNext]].</li><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>f</var>, <var>next</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>O</var> does not have an [[IteratedList]] internal slot, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>list</var> be <var>O</var>.[[IteratedList]].</li><li>Let <var>index</var> be <var>O</var>.[[ListIteratorNextIndex]].</li><li>Let <var>len</var> be the number of elements of <var>list</var>.</li><li>If <var>index</var> â¥ <var>len</var>, then<ol><li>Return <emu-xref aoid="CreateIterResultObject"><a href="#sec-createiterresultobject">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).</li></ol></li><li>Set <var>O</var>.[[ListIteratorNextIndex]] to <var>index</var>+1.</li><li>Return <emu-xref aoid="CreateIterResultObject"><a href="#sec-createiterresultobject">CreateIterResultObject</a></emu-xref>(<var>list</var>[<var>index</var>], <emu-val>false</emu-val>).
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>A ListIterator <code>next</code> method will throw an exception if applied to any object other than the one with which it was originally associated.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>
  </emu-clause>
</emu-clause>

<!-- es6num="8" -->
<emu-clause id="sec-executable-code-and-execution-contexts">
  <h1><span class="secnum">8</span>Executable Code and Execution Contexts<span class="utils"><span class="anchor"><a href="#sec-executable-code-and-execution-contexts">#</a></span></span></h1>

  <!-- es6num="8.1" -->
  <emu-clause id="sec-lexical-environments">
    <h1><span class="secnum">8.1</span>Lexical Environments<span class="utils"><span class="anchor"><a href="#sec-lexical-environments">#</a></span></span></h1>
    <p>A  <dfn>Lexical Environment</dfn> is a specification type used to define the association of <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt>s
 to specific variables and functions based upon the lexical nesting 
structure of ECMAScript code. A Lexical Environment consists of an <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> and a possibly null reference to an  <em>outer</em>
 Lexical Environment. Usually a Lexical Environment is associated with 
some specific syntactic structure of ECMAScript code such as a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href="#prod-BlockStatement">BlockStatement</a></emu-nt>, or a <emu-nt><a href="#prod-Catch">Catch</a></emu-nt> clause of a <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt> and a new Lexical Environment is created each time such code is evaluated.</p>
    <p>An <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 records the identifier bindings that are created within the scope of 
its associated Lexical Environment. It is referred to as the Lexical 
Environment's  <dfn>EnvironmentRecord</dfn></p>
    <p>The outer environment reference is used to model the logical 
nesting of Lexical Environment values. The outer reference of a (inner) 
Lexical Environment is a reference to the Lexical Environment that 
logically surrounds the inner Lexical Environment. An outer Lexical 
Environment may, of course, have its own outer Lexical Environment. A 
Lexical Environment may serve as the outer environment for multiple 
inner Lexical Environments. For example, if a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt> contains two nested <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>s
 then the Lexical Environments of each of the nested functions will have
 as their outer Lexical Environment the Lexical Environment of the 
current evaluation of the surrounding function.</p>
    <p>A  <dfn id="global-environment">global environment</dfn> is a Lexical Environment which does not have an outer environment. The <emu-xref href="#global-environment"><a href="#global-environment">global environment</a></emu-xref>'s outer environment reference is <emu-val>null</emu-val>. A <emu-xref href="#global-environment"><a href="#global-environment">global environment</a></emu-xref>'s EnvironmentRecord may be prepopulated with identifier bindings and includes an associated  <dfn id="global-object">global object</dfn> whose properties provide some of the <emu-xref href="#global-environment"><a href="#global-environment">global environment</a></emu-xref>'s identifier bindings. As ECMAScript code is executed, additional properties may be added to the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> and the initial properties may be modified.</p>
    <p>A  <dfn id="module-environment">module environment</dfn> is a Lexical Environment that contains the bindings for the top level declarations of a <emu-nt><a href="#prod-Module">Module</a></emu-nt>. It also contains the bindings that are explicitly imported by the <emu-nt><a href="#prod-Module">Module</a></emu-nt>. The outer environment of a <emu-xref href="#module-environment"><a href="#module-environment">module environment</a></emu-xref> is a <emu-xref href="#global-environment"><a href="#global-environment">global environment</a></emu-xref>.</p>
    <p>A  <dfn id="function-environment">function environment</dfn> is a Lexical Environment that corresponds to the invocation of an ECMAScript function object. A <emu-xref href="#function-environment"><a href="#function-environment">function environment</a></emu-xref> may establish a new <code>this</code> binding. A <emu-xref href="#function-environment"><a href="#function-environment">function environment</a></emu-xref> also captures the state necessary to support <code>super</code> method invocations.</p>
    <p>Lexical Environments and <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 values are purely specification mechanisms and need not correspond to 
any specific artefact of an ECMAScript implementation. It is impossible 
for an ECMAScript program to directly access or manipulate such values.</p>

    <!-- es6num="8.1.1" -->
    <emu-clause id="sec-environment-records">
      <h1><span class="secnum">8.1.1</span>Environment Records<span class="utils"><span class="anchor"><a href="#sec-environment-records">#</a></span></span></h1>
      <p>There are two primary kinds of  <dfn>Environment Record</dfn> values used in this specification:  <em>declarative Environment Records</em> and  <em>object Environment Records</em>. Declarative Environment Records are used to define the effect of ECMAScript language syntactic elements such as <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>s, <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt>s, and <emu-nt><a href="#prod-Catch">Catch</a></emu-nt>
 clauses that directly associate identifier bindings with ECMAScript 
language values. Object Environment Records are used to define the 
effect of ECMAScript elements such as <emu-nt><a href="#prod-WithStatement">WithStatement</a></emu-nt>
 that associate identifier bindings with the properties of some object. 
Global Environment Records and function Environment Records are 
specializations that are used for specifically for <emu-nt><a href="#prod-Script">Script</a></emu-nt> global declarations and for top-level declarations within functions.</p>
      <p>For specification purposes Environment Record values are values of the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref>
 specification type and can be thought of as existing in a simple 
object-oriented hierarchy where Environment Record is an abstract class 
with three concrete subclasses, declarative Environment Record, object 
Environment Record, and global Environment Record. Function Environment 
Records and module Environment Records are subclasses of declarative 
Environment Record. The abstract class includes the abstract 
specification methods defined in  <emu-xref href="#table-15"><a href="#table-15">Table 15</a></emu-xref>. These abstract methods have distinct concrete algorithms for each of the concrete subclasses.</p>
      <emu-table id="table-15" caption="Abstract Methods of Environment Records"><figure><figcaption>Table 15: Abstract Methods of Environment Records</figcaption>
        <table>
          <tbody>
          <tr>
            <th>
              Method
            
            </th>
            <th>
              Purpose
            
            </th>
          </tr>
          <tr>
            <td>
              HasBinding(N)
            
            </td>
            <td>
              Determine if an Environment Record has a binding for the String value <var>N</var>. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not
            
            </td>
          </tr>
          <tr>
            <td>
              CreateMutableBinding(N, D)
            
            </td>
            <td>
              Create a new but uninitialized mutable binding in an Environment Record. The String value <var>N</var> is the text of the bound name. If the Boolean argument <var>D</var> is <emu-val>true</emu-val> the binding may be subsequently deleted.
            
            </td>
          </tr>
          <tr>
            <td>
              CreateImmutableBinding(N, S)
            
            </td>
            <td>
              Create a new but uninitialized immutable binding in an Environment Record. The String value <var>N</var> is the text of the bound name. If <var>S</var> is <emu-val>true</emu-val>
 then attempts to set it after it has been initialized will always throw
 an exception, regardless of the strict mode setting of operations that 
reference that binding.
            
            </td>
          </tr>
          <tr>
            <td>
              InitializeBinding(N, V)
            
            </td>
            <td>
              Set the value of an already existing but uninitialized binding in an Environment Record. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and is a value of any <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language type</a></emu-xref>.
            
            </td>
          </tr>
          <tr>
            <td>
              SetMutableBinding(N, V, S)
            
            </td>
            <td>
              Set the value of an already existing mutable binding in an Environment Record. The String value <var>N</var> is the text of the bound name. <var>V</var> is the value for the binding and may be a value of any <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language type</a></emu-xref>. <var>S</var> is a Boolean flag. If <var>S</var> is <emu-val>true</emu-val> and the binding cannot be set throw a <emu-val>TypeError</emu-val> exception.
            
            </td>
          </tr>
          <tr>
            <td>
              GetBindingValue(N, S)
            
            </td>
            <td>
              Returns the value of an already existing binding from an Environment Record. The String value <var>N</var> is the text of the bound name. <var>S</var> is used to identify references originating in <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> or that otherwise require strict mode reference semantics. If <var>S</var> is <emu-val>true</emu-val> and the binding does not exist throw a <emu-val>ReferenceError</emu-val> exception. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.
            
            </td>
          </tr>
          <tr>
            <td>
              DeleteBinding(N)
            
            </td>
            <td>
              Delete a binding from an Environment Record. The String value <var>N</var> is the text of the bound name. If a binding for <var>N</var> exists, remove the binding and return <emu-val>true</emu-val>. If the binding exists but cannot be removed return <emu-val>false</emu-val>. If the binding does not exist return <emu-val>true</emu-val>.
            
            </td>
          </tr>
          <tr>
            <td>
              HasThisBinding()
            
            </td>
            <td>
              Determine if an Environment Record establishes a <code>this</code> binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.
            
            </td>
          </tr>
          <tr>
            <td>
              HasSuperBinding()
            
            </td>
            <td>
              Determine if an Environment Record establishes a <code>super</code> method binding. Return <emu-val>true</emu-val> if it does and <emu-val>false</emu-val> if it does not.
            
            </td>
          </tr>
          <tr>
            <td>
              WithBaseObject()
            
            </td>
            <td>
              If this Environment Record is associated with a <code>with</code> statement, return the with object. Otherwise, return <emu-val>undefined</emu-val>.
            
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>

      <!-- es6num="8.1.1.1" -->
      <emu-clause id="sec-declarative-environment-records">
        <h1><span class="secnum">8.1.1.1</span>Declarative Environment Records<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records">#</a></span></span></h1>
        <p>Each declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 is associated with an ECMAScript program scope containing variable, 
constant, let, class, module, import, and/or function declarations. A 
declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> binds the set of identifiers defined by the declarations contained within its scope.</p>
        <p>The behaviour of the concrete specification methods for declarative Environment Records is defined by the following algorithms.</p>

        <!-- es6num="8.1.1.1.1" -->
        <emu-clause id="sec-declarative-environment-records-hasbinding-n">
          <h1><span class="secnum">8.1.1.1.1</span>HasBinding (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records-hasbinding-n">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method HasBinding for declarative Environment Records simply determines
 if the argument identifier is one of the identifiers bound by the 
record:</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> has a binding for the name that is the value of <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.1.2" -->
        <emu-clause id="sec-declarative-environment-records-createmutablebinding-n-d">
          <h1><span class="secnum">8.1.1.1.2</span>CreateMutableBinding (<var>N</var>, <var>D</var>)<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records-createmutablebinding-n-d">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> method CreateMutableBinding for declarative Environment Records creates a new mutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for <var>N</var>. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new binding is marked as being subject to deletion.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Assert: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create a mutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>D</var> is <emu-val>true</emu-val>, record that the newly created binding may be deleted by a subsequent DeleteBinding call.</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.1.3" -->
        <emu-clause id="sec-declarative-environment-records-createimmutablebinding-n-s">
          <h1><span class="secnum">8.1.1.1.3</span>CreateImmutableBinding (<var>N</var>, <var>S</var>)<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records-createimmutablebinding-n-s">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> method CreateImmutableBinding for declarative Environment Records creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for <var>N</var>. If the Boolean argument <var>S</var> has the value <emu-val>true</emu-val> the new binding is marked as a strict binding.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Assert: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Create an immutable binding in <var>envRec</var> for <var>N</var> and record that it is uninitialized. If <var>S</var> is <emu-val>true</emu-val>, record that the newly created binding is a strict binding.</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.1.4" -->
        <emu-clause id="sec-declarative-environment-records-initializebinding-n-v">
          <h1><span class="secnum">8.1.1.1.4</span>InitializeBinding (<var>N</var>, <var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records-initializebinding-n-v">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method InitializeBinding for declarative Environment Records is used to
 set the bound value of the current binding of the identifier whose name
 is the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Assert: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li>Set the bound value for <var>N</var> in <var>envRec</var> to <var>V</var>.</li><li><emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.1.5" -->
        <emu-clause id="sec-declarative-environment-records-setmutablebinding-n-v-s">
          <h1><span class="secnum">8.1.1.1.5</span>SetMutableBinding (<var>N</var>, <var>V</var>, <var>S</var>)<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records-setmutablebinding-n-v-s">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method SetMutableBinding for declarative Environment Records attempts 
to change the bound value of the current binding of the identifier whose
 name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A binding for <var>N</var> normally already exists, but in rare cases it may not. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var> does not have a binding for <var>N</var>, then<ol><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Perform <var>envRec</var>.CreateMutableBinding(<var>N</var>, <emu-val>true</emu-val>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is a strict binding, let <var>S</var> be <emu-val>true</emu-val>.</li><li>If the binding for <var>N</var> in <var>envRec</var> has not yet been initialized, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Else if the binding for <var>N</var> in <var>envRec</var> is a mutable binding, change its bound value to <var>V</var>.</li><li>Else,<ol><li>Assert: This is an attempt to change the value of an immutable binding.</li><li>If <var>S</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
          </li></ol></emu-alg>
          <emu-note><span class="note">Note</span>
            <p>An example of ECMAScript code that results in a missing binding at step 2 is:</p>
            <pre><code language="javascript">function f(){eval("var x; x = (delete x, 0);")}</code></pre>
          </emu-note>
        </emu-clause>

        <!-- es6num="8.1.1.1.6" -->
        <emu-clause id="sec-declarative-environment-records-getbindingvalue-n-s">
          <h1><span class="secnum">8.1.1.1.6</span>GetBindingValue (<var>N</var>, <var>S</var>)<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records-getbindingvalue-n-s">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method GetBindingValue for declarative Environment Records simply 
returns the value of its bound identifier whose name is the value of the
 argument <var>N</var>. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown, regardless of the value of <var>S</var>.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Assert: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.1.7" -->
        <emu-clause id="sec-declarative-environment-records-deletebinding-n">
          <h1><span class="secnum">8.1.1.1.7</span>DeleteBinding (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records-deletebinding-n">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method DeleteBinding for declarative Environment Records can only 
delete bindings that have been explicitly designated as being subject to
 deletion.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Assert: <var>envRec</var> has a binding for the name that is the value of <var>N</var>.</li><li>If the binding for <var>N</var> in <var>envRec</var> cannot be deleted, return <emu-val>false</emu-val>.</li><li>Remove the binding for <var>N</var> from <var>envRec</var>.</li><li>Return <emu-val>true</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.1.8" -->
        <emu-clause id="sec-declarative-environment-records-hasthisbinding">
          <h1><span class="secnum">8.1.1.1.8</span>HasThisBinding ()<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records-hasthisbinding">#</a></span></span></h1>
          <p>Regular declarative Environment Records do not provide a <code>this</code> binding.</p>
          <emu-alg><ol><li>Return <emu-val>false</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.1.9" -->
        <emu-clause id="sec-declarative-environment-records-hassuperbinding">
          <h1><span class="secnum">8.1.1.1.9</span>HasSuperBinding ()<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records-hassuperbinding">#</a></span></span></h1>
          <p>Regular declarative Environment Records do not provide a <code>super</code> binding.</p>
          <emu-alg><ol><li>Return <emu-val>false</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.1.10" -->
        <emu-clause id="sec-declarative-environment-records-withbaseobject">
          <h1><span class="secnum">8.1.1.1.10</span>WithBaseObject ()<span class="utils"><span class="anchor"><a href="#sec-declarative-environment-records-withbaseobject">#</a></span></span></h1>
          <p>Declarative Environment Records always return <emu-val>undefined</emu-val> as their WithBaseObject.</p>
          <emu-alg><ol><li>Return <emu-val>undefined</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>
      </emu-clause>

      <!-- es6num="8.1.1.2" -->
      <emu-clause id="sec-object-environment-records">
        <h1><span class="secnum">8.1.1.2</span>Object Environment Records<span class="utils"><span class="anchor"><a href="#sec-object-environment-records">#</a></span></span></h1>
        <p>Each object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> is associated with an object called its  <em>binding object</em>. An object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 binds the set of string identifier names that directly correspond to 
the property names of its binding object. Property keys that are not 
strings in the form of an <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>
 are not included in the set of bound identifiers. Both own and 
inherited properties are included in the set regardless of the setting 
of their [[Enumerable]] attribute. Because properties can be dynamically
 added and deleted from objects, the set of identifiers bound by an 
object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 may potentially change as a side-effect of any operation that adds or 
deletes properties. Any bindings that are created as a result of such a 
side-effect are considered to be a mutable binding even if the Writable 
attribute of the corresponding property has the value <emu-val>false</emu-val>. Immutable bindings do not exist for object Environment Records.</p>
        <p>Object Environment Records created for <code>with</code> statements (<emu-xref href="#sec-with-statement"><a href="#sec-with-statement">13.11</a></emu-xref>) can provide their binding object as an implicit <emu-val>this</emu-val> value for use in function calls. The capability is controlled by a <var>withEnvironment</var> Boolean value that is associated with each object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>. By default, the value of <var>withEnvironment</var> is <emu-val>false</emu-val> for any object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</p>
        <p>The behaviour of the concrete specification methods for object Environment Records is defined by the following algorithms.</p>

        <!-- es6num="8.1.1.2.1" -->
        <emu-clause id="sec-object-environment-records-hasbinding-n">
          <h1><span class="secnum">8.1.1.2.1</span>HasBinding (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-object-environment-records-hasbinding-n">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method HasBinding for object Environment Records determines if its 
associated binding object has a property whose name is the value of the 
argument <var>N</var>:</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>foundBinding</var> be ? <emu-xref aoid="HasProperty"><a href="#sec-hasproperty">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>foundBinding</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>false</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>unscopables</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>bindings</var>, @@unscopables).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>unscopables</var>) is Object, then<ol><li>Let <var>blocked</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>unscopables</var>, <var>N</var>)).</li><li>If <var>blocked</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.2.2" -->
        <emu-clause id="sec-object-environment-records-createmutablebinding-n-d">
          <h1><span class="secnum">8.1.1.2.2</span>CreateMutableBinding (<var>N</var>, <var>D</var>)<span class="utils"><span class="anchor"><a href="#sec-object-environment-records-createmutablebinding-n-d">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> method CreateMutableBinding for object Environment Records creates in an <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>'s associated binding object a property whose name is the String value and initializes it to the value <emu-val>undefined</emu-val>. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new property's [[Configurable]] attribute is set to <emu-val>true</emu-val>; otherwise it is set to <emu-val>false</emu-val>.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>If <var>D</var> is <emu-val>true</emu-val>, let <var>configValue</var> be <emu-val>true</emu-val>; otherwise let <var>configValue</var> be <emu-val>false</emu-val>.</li><li>Return ? <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>bindings</var>, <var>N</var>, PropertyDescriptor{[[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>configValue</var>}).
          </li></ol></emu-alg>
          <emu-note><span class="note">Note</span>
            <p>Normally <var>envRec</var> will not have a binding for <var>N</var> but if it does, the semantics of <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref> may result in an existing binding being replaced or shadowed or cause an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref> to be returned.</p>
          </emu-note>
        </emu-clause>

        <!-- es6num="8.1.1.2.3" -->
        <emu-clause id="sec-object-environment-records-createimmutablebinding-n-s">
          <h1><span class="secnum">8.1.1.2.3</span>CreateImmutableBinding (<var>N</var>, <var>S</var>)<span class="utils"><span class="anchor"><a href="#sec-object-environment-records-createimmutablebinding-n-s">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> method CreateImmutableBinding is never used within this specification in association with object Environment Records.</p>
        </emu-clause>

        <!-- es6num="8.1.1.2.4" -->
        <emu-clause id="sec-object-environment-records-initializebinding-n-v">
          <h1><span class="secnum">8.1.1.2.4</span>InitializeBinding (<var>N</var>, <var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-object-environment-records-initializebinding-n-v">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method InitializeBinding for object Environment Records is used to set 
the bound value of the current binding of the identifier whose name is 
the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Assert: <var>envRec</var> must have an uninitialized binding for <var>N</var>.</li><li><emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> that the binding for <var>N</var> in <var>envRec</var> has been initialized.</li><li>Return ? <var>envRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <emu-val>false</emu-val>).
          </li></ol></emu-alg>
          <emu-note><span class="note">Note</span>
            <p>In this specification, all uses of CreateMutableBinding 
for object Environment Records are immediately followed by a call to 
InitializeBinding for the same name. Hence, implementations do not need 
to explicitly track the initialization state of individual object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> bindings.</p>
          </emu-note>
        </emu-clause>

        <!-- es6num="8.1.1.2.5" -->
        <emu-clause id="sec-object-environment-records-setmutablebinding-n-v-s">
          <h1><span class="secnum">8.1.1.2.5</span>SetMutableBinding (<var>N</var>, <var>V</var>, <var>S</var>)<span class="utils"><span class="anchor"><a href="#sec-object-environment-records-setmutablebinding-n-v-s">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> method SetMutableBinding for object Environment Records attempts to set the value of the <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>'s associated binding object's property whose name is the value of the argument <var>N</var> to the value of argument <var>V</var>. A property named <var>N</var>
 normally already exists but if it does not or is not currently 
writable, error handling is determined by the value of the Boolean 
argument <var>S</var>.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ? <emu-xref aoid="Set"><a href="#sec-set-o-p-v-throw">Set</a></emu-xref>(<var>bindings</var>, <var>N</var>, <var>V</var>, <var>S</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.2.6" -->
        <emu-clause id="sec-object-environment-records-getbindingvalue-n-s">
          <h1><span class="secnum">8.1.1.2.6</span>GetBindingValue (<var>N</var>, <var>S</var>)<span class="utils"><span class="anchor"><a href="#sec-object-environment-records-getbindingvalue-n-s">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method GetBindingValue for object Environment Records returns the value
 of its associated binding object's property whose name is the String 
value of the argument identifier <var>N</var>. The property should already exist but if it does not the result depends upon the value of the <var>S</var> argument:</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Let <var>value</var> be ? <emu-xref aoid="HasProperty"><a href="#sec-hasproperty">HasProperty</a></emu-xref>(<var>bindings</var>, <var>N</var>).</li><li>If <var>value</var> is <emu-val>false</emu-val>, then<ol><li>If <var>S</var> is <emu-val>false</emu-val>, return the value <emu-val>undefined</emu-val>; otherwise throw a <emu-val>ReferenceError</emu-val> exception.</li></ol></li><li>Return ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>bindings</var>, <var>N</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.2.7" -->
        <emu-clause id="sec-object-environment-records-deletebinding-n">
          <h1><span class="secnum">8.1.1.2.7</span>DeleteBinding (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-object-environment-records-deletebinding-n">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method DeleteBinding for object Environment Records can only delete 
bindings that correspond to properties of the environment object whose 
[[Configurable]] attribute have the value <emu-val>true</emu-val>.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>bindings</var> be the binding object for <var>envRec</var>.</li><li>Return ? <var>bindings</var>.[[Delete]](<var>N</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.2.8" -->
        <emu-clause id="sec-object-environment-records-hasthisbinding">
          <h1><span class="secnum">8.1.1.2.8</span>HasThisBinding ()<span class="utils"><span class="anchor"><a href="#sec-object-environment-records-hasthisbinding">#</a></span></span></h1>
          <p>Regular object Environment Records do not provide a <code>this</code> binding.</p>
          <emu-alg><ol><li>Return <emu-val>false</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.2.9" -->
        <emu-clause id="sec-object-environment-records-hassuperbinding">
          <h1><span class="secnum">8.1.1.2.9</span>HasSuperBinding ()<span class="utils"><span class="anchor"><a href="#sec-object-environment-records-hassuperbinding">#</a></span></span></h1>
          <p>Regular object Environment Records do not provide a <code>super</code> binding.</p>
          <emu-alg><ol><li>Return <emu-val>false</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.2.10" -->
        <emu-clause id="sec-object-environment-records-withbaseobject">
          <h1><span class="secnum">8.1.1.2.10</span>WithBaseObject ()<span class="utils"><span class="anchor"><a href="#sec-object-environment-records-withbaseobject">#</a></span></span></h1>
          <p>Object Environment Records return <emu-val>undefined</emu-val> as their WithBaseObject unless their <var>withEnvironment</var> flag is <emu-val>true</emu-val>.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If the <var>withEnvironment</var> flag of <var>envRec</var> is <emu-val>true</emu-val>, return the binding object for <var>envRec</var>.</li><li>Otherwise, return <emu-val>undefined</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>
      </emu-clause>

      <!-- es6num="8.1.1.3" -->
      <emu-clause id="sec-function-environment-records">
        <h1><span class="secnum">8.1.1.3</span>Function Environment Records<span class="utils"><span class="anchor"><a href="#sec-function-environment-records">#</a></span></span></h1>
        <p>A function <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> is a declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> that is used to represent the top-level scope of a function and, if the function is not an <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt>, provides a <code>this</code> binding. If a function is not an <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt> function and references <code>super</code>, its function <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> also contains the state that is used to perform <code>super</code> method invocations from within the function.</p>
        <p>Function Environment Records have the additional state fields listed in  <emu-xref href="#table-16"><a href="#table-16">Table 16</a></emu-xref>.</p>
        <emu-table id="table-16" caption="Additional Fields of Function Environment Records"><figure><figcaption>Table 16: Additional Fields of Function Environment Records</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Field Name
              
              </th>
              <th>
                Value
              
              </th>
              <th>
                Meaning
              
              </th>
            </tr>
            <tr>
              <td>
                [[ThisValue]]
              
              </td>
              <td>
                Any
              
              </td>
              <td>
                This is the <emu-val>this</emu-val> value used for this invocation of the function.
              
              </td>
            </tr>
            <tr>
              <td>
                [[ThisBindingStatus]]
              
              </td>
              <td>
                <code>"lexical"</code> | <code>"initialized"</code> | <code>"uninitialized"</code>
              
              </td>
              <td>
                If the value is <code>"lexical"</code>, this is an <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt> and does not have a local this value.
              
              </td>
            </tr>
            <tr>
              <td>
                [[FunctionObject]]
              
              </td>
              <td>
                Object
              
              </td>
              <td>
                The function object whose invocation caused this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> to be created.
              
              </td>
            </tr>
            <tr>
              <td>
                [[HomeObject]]
              
              </td>
              <td>
                Object | <emu-val>undefined</emu-val>
              
              </td>
              <td>
                If the associated function has <code>super</code> property accesses and is not an <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt>, [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is <emu-val>undefined</emu-val>.
              
              </td>
            </tr>
            <tr>
              <td>
                [[NewTarget]]
              
              </td>
              <td>
                Object | <emu-val>undefined</emu-val>
              
              </td>
              <td>
                If this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] <var>newTarget</var> parameter. Otherwise, its value is <emu-val>undefined</emu-val>.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <p>Function Environment Records support all of the declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> methods listed in  <emu-xref href="#table-15"><a href="#table-15">Table 15</a></emu-xref>
 and share the same specifications for all of those methods except for 
HasThisBinding and HasSuperBinding. In addition, function Environment 
Records support the methods listed in  <emu-xref href="#table-17"><a href="#table-17">Table 17</a></emu-xref>:</p>
        <emu-table id="table-17" caption="Additional Methods of Function Environment Records"><figure><figcaption>Table 17: Additional Methods of Function Environment Records</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Method
              
              </th>
              <th>
                Purpose
              
              </th>
            </tr>
            <tr>
              <td>
                BindThisValue(V)
              
              </td>
              <td>
                Set the [[ThisValue]] and record that it has been initialized.
              
              </td>
            </tr>
            <tr>
              <td>
                GetThisBinding()
              
              </td>
              <td>
                Return the value of this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>'s <code>this</code> binding. Throws a <emu-val>ReferenceError</emu-val> if the <code>this</code> binding has not been initialized.
              
              </td>
            </tr>
            <tr>
              <td>
                GetSuperBase()
              
              </td>
              <td>
                Return the object that is the base for <code>super</code> property accesses bound in this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>. The object is derived from this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>'s [[HomeObject]] field. The value <emu-val>undefined</emu-val> indicates that <code>super</code> property accesses will produce runtime errors.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <p>The behaviour of the additional concrete specification 
methods for function Environment Records is defined by the following 
algorithms:</p>

        <!-- es6num="8.1.1.3.1" -->
        <emu-clause id="sec-bindthisvalue">
          <h1><span class="secnum">8.1.1.3.1</span>BindThisValue (<var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-bindthisvalue">#</a></span></span></h1>
          <emu-alg><ol><li>Let <var>envRec</var> be the function <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Assert: <var>envRec</var>.[[ThisBindingStatus]] is not <code>"lexical"</code>.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <code>"initialized"</code>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Set <var>envRec</var>.[[ThisValue]] to <var>V</var>.</li><li>Set <var>envRec</var>.[[ThisBindingStatus]] to <code>"initialized"</code>.</li><li>Return <var>V</var>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.3.2" -->
        <emu-clause id="sec-function-environment-records-hasthisbinding">
          <h1><span class="secnum">8.1.1.3.2</span>HasThisBinding ()<span class="utils"><span class="anchor"><a href="#sec-function-environment-records-hasthisbinding">#</a></span></span></h1>
          <emu-alg><ol><li>Let <var>envRec</var> be the function <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <code>"lexical"</code>, return <emu-val>false</emu-val>; otherwise, return <emu-val>true</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.3.3" -->
        <emu-clause id="sec-function-environment-records-hassuperbinding">
          <h1><span class="secnum">8.1.1.3.3</span>HasSuperBinding ()<span class="utils"><span class="anchor"><a href="#sec-function-environment-records-hassuperbinding">#</a></span></span></h1>
          <emu-alg><ol><li>Let <var>envRec</var> be the function <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <code>"lexical"</code>, return <emu-val>false</emu-val>.</li><li>If <var>envRec</var>.[[HomeObject]] has the value <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>; otherwise, return <emu-val>true</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.3.4" -->
        <emu-clause id="sec-function-environment-records-getthisbinding">
          <h1><span class="secnum">8.1.1.3.4</span>GetThisBinding ()<span class="utils"><span class="anchor"><a href="#sec-function-environment-records-getthisbinding">#</a></span></span></h1>
          <emu-alg><ol><li>Let <var>envRec</var> be the function <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Assert: <var>envRec</var>.[[ThisBindingStatus]] is not <code>"lexical"</code>.</li><li>If <var>envRec</var>.[[ThisBindingStatus]] is <code>"uninitialized"</code>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return <var>envRec</var>.[[ThisValue]].
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.3.5" -->
        <emu-clause id="sec-getsuperbase">
          <h1><span class="secnum">8.1.1.3.5</span>GetSuperBase ()<span class="utils"><span class="anchor"><a href="#sec-getsuperbase">#</a></span></span></h1>
          <emu-alg><ol><li>Let <var>envRec</var> be the function <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>home</var> be <var>envRec</var>.[[HomeObject]].</li><li>If <var>home</var> has the value <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>home</var>) is Object.</li><li>Return ? <var>home</var>.[[GetPrototypeOf]]().
          </li></ol></emu-alg>
        </emu-clause>
      </emu-clause>

      <!-- es6num="8.1.1.4" -->
      <emu-clause id="sec-global-environment-records">
        <h1><span class="secnum">8.1.1.4</span>Global Environment Records<span class="utils"><span class="anchor"><a href="#sec-global-environment-records">#</a></span></span></h1>
        <p>A global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> is used to represent the outer most scope that is shared by all of the ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt> elements that are processed in a common <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref>. A global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> provides the bindings for built-in globals (clause  <emu-xref href="#sec-global-object"><a href="#sec-global-object">18</a></emu-xref>), properties of the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>, and for all top-level declarations (<emu-xref href="#sec-block-static-semantics-toplevellexicallyscopeddeclarations"><a href="#sec-block-static-semantics-toplevellexicallyscopeddeclarations">13.2.8</a></emu-xref>,  <emu-xref href="#sec-block-static-semantics-toplevelvarscopeddeclarations"><a href="#sec-block-static-semantics-toplevelvarscopeddeclarations">13.2.10</a></emu-xref>) that occur within a <emu-nt><a href="#prod-Script">Script</a></emu-nt>.</p>
        <p>A global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> is logically a single record but it is specified as a composite encapsulating an object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> and a declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>. The object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> has as its base object the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> of the associated <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref>. This <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> is the value returned by the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>'s GetThisBinding concrete method. The object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> component of a global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> contains the bindings for all built-in globals (clause  <emu-xref href="#sec-global-object"><a href="#sec-global-object">18</a></emu-xref>) and all bindings introduced by a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, or <emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt> contained in global code. The bindings for all other ECMAScript declarations in global code are contained in the declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> component of the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</p>
        <p>Properties may be created directly on a <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>. Hence, the object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> component of a global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> may contain both bindings created explicitly by <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, or <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> declarations and bindings created implicitly as properties of the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>. In order to identify which bindings were explicitly created using declarations, a global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> maintains a list of the names bound using its CreateGlobalVarBinding and CreateGlobalFunctionBinding concrete methods.</p>
        <p>Global Environment Records have the additional fields listed in  <emu-xref href="#table-18"><a href="#table-18">Table 18</a></emu-xref> and the additional methods listed in  <emu-xref href="#table-19"><a href="#table-19">Table 19</a></emu-xref>.</p>
        <emu-table id="table-18" caption="Additional Fields of Global Environment Records"><figure><figcaption>Table 18: Additional Fields of Global Environment Records</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Field Name
              
              </th>
              <th>
                Value
              
              </th>
              <th>
                Meaning
              
              </th>
            </tr>
            <tr>
              <td>
                [[ObjectRecord]]
              
              </td>
              <td>
                Object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
              
              </td>
              <td>
                Binding object is the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>. It contains global built-in bindings as well as <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, and <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> bindings in global code for the associated <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref>.
              
              </td>
            </tr>
            <tr>
              <td>
                [[GlobalThisValue]]
              
              </td>
              <td>
                Object
              
              </td>
              <td>
                The value returned by <code>this</code> in global scope. Hosts may provide any ECMAScript Object value.
              
              </td>
            </tr>
            <tr>
              <td>
                [[DeclarativeRecord]]
              
              </td>
              <td>
                Declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
              
              </td>
              <td>
                Contains bindings for all declarations in global code for the associated <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> code except for <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, and <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> <var>bindings</var>.
              
              </td>
            </tr>
            <tr>
              <td>
                [[VarNames]]
              
              </td>
              <td>
                <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of String
              
              </td>
              <td>
                The string names bound by <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, and <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> declarations in global code for the associated <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref>.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <emu-table id="table-19" caption="Additional Methods of Global Environment Records"><figure><figcaption>Table 19: Additional Methods of Global Environment Records</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Method
              
              </th>
              <th>
                Purpose
              
              </th>
            </tr>
            <tr>
              <td>
                GetThisBinding()
              
              </td>
              <td>
                Return the value of this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>'s <code>this</code> binding.
              
              </td>
            </tr>
            <tr>
              <td>
                HasVarDeclaration (N)
              
              </td>
              <td>
                Determines if the argument identifier has a binding in this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> that was created using a <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt>, <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, or <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>.
              
              </td>
            </tr>
            <tr>
              <td>
                HasLexicalDeclaration (N)
              
              </td>
              <td>
                Determines if the argument identifier has a binding in this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> that was created using a lexical declaration such as a <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt>.
              
              </td>
            </tr>
            <tr>
              <td>
                HasRestrictedGlobalProperty (N)
              
              </td>
              <td>
                Determines if the argument is the name of a <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> property that may not be shadowed by a global lexically binding.
              
              </td>
            </tr>
            <tr>
              <td>
                CanDeclareGlobalVar (N)
              
              </td>
              <td>
                Determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument <var>N</var>.
              
              </td>
            </tr>
            <tr>
              <td>
                CanDeclareGlobalFunction (N)
              
              </td>
              <td>
                Determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument <var>N</var>.
              
              </td>
            </tr>
            <tr>
              <td>
                CreateGlobalVarBinding(N, D)
              
              </td>
              <td>
                Used to create and initialize to <emu-val>undefined</emu-val> a global <code>var</code> binding in the [[ObjectRecord]] component of a global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> property will have attribute values appropriate for a <code>var</code>. The String value <var>N</var> is the bound name. If <var>D</var> is <emu-val>true</emu-val>
 the binding may be deleted. Logically equivalent to 
CreateMutableBinding followed by a SetMutableBinding but it allows var 
declarations to receive special treatment.
              
              </td>
            </tr>
            <tr>
              <td>
                CreateGlobalFunctionBinding(N, V, D)
              
              </td>
              <td>
                Create and initialize a global <code>function</code> binding in the [[ObjectRecord]] component of a global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>. The binding will be a mutable binding. The corresponding <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> property will have attribute values appropriate for a <code>function</code>. The String value <var>N</var> is the bound name. <var>V</var> is the initialization value. If the Boolean argument <var>D</var> is <emu-val>true</emu-val>
 the binding may be deleted. Logically equivalent to 
CreateMutableBinding followed by a SetMutableBinding but it allows 
function declarations to receive special treatment.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <p>The behaviour of the concrete specification methods for global Environment Records is defined by the following algorithms.</p>

        <!-- es6num="8.1.1.4.1" -->
        <emu-clause id="sec-global-environment-records-hasbinding-n">
          <h1><span class="secnum">8.1.1.4.1</span>HasBinding (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-hasbinding-n">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method HasBinding for global Environment Records simply determines if 
the argument identifier is one of the identifiers bound by the record:</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.HasBinding(<var>N</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.2" -->
        <emu-clause id="sec-global-environment-records-createmutablebinding-n-d">
          <h1><span class="secnum">8.1.1.4.2</span>CreateMutableBinding (<var>N</var>, <var>D</var>)<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-createmutablebinding-n-d">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> method CreateMutableBinding for global Environment Records creates a new mutable binding for the name <var>N</var> that is uninitialized. The binding is created in the associated DeclarativeRecord. A binding for <var>N</var> must not already exist in the DeclarativeRecord. If Boolean argument <var>D</var> has the value <emu-val>true</emu-val> the new binding is marked as being subject to deletion.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.3" -->
        <emu-clause id="sec-global-environment-records-createimmutablebinding-n-s">
          <h1><span class="secnum">8.1.1.4.3</span>CreateImmutableBinding (<var>N</var>, <var>S</var>)<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-createimmutablebinding-n-s">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> method CreateImmutableBinding for global Environment Records creates a new immutable binding for the name <var>N</var> that is uninitialized. A binding must not already exist in this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for <var>N</var>. If the Boolean argument <var>S</var> has the value <emu-val>true</emu-val> the new binding is marked as a strict binding.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>DclRec</var>.CreateImmutableBinding(<var>N</var>, <var>S</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.4" -->
        <emu-clause id="sec-global-environment-records-initializebinding-n-v">
          <h1><span class="secnum">8.1.1.4.4</span>InitializeBinding (<var>N</var>, <var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-initializebinding-n-v">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method InitializeBinding for global Environment Records is used to set 
the bound value of the current binding of the identifier whose name is 
the value of the argument <var>N</var> to the value of argument <var>V</var>. An uninitialized binding for <var>N</var> must already exist.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).</li></ol></li><li>Assert: If the binding exists, it must be in the object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.InitializeBinding(<var>N</var>, <var>V</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.5" -->
        <emu-clause id="sec-global-environment-records-setmutablebinding-n-v-s">
          <h1><span class="secnum">8.1.1.4.5</span>SetMutableBinding (<var>N</var>, <var>V</var>, <var>S</var>)<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-setmutablebinding-n-v-s">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method SetMutableBinding for global Environment Records attempts to 
change the bound value of the current binding of the identifier whose 
name is the value of the argument <var>N</var> to the value of argument <var>V</var>. If the binding is an immutable binding, a <emu-val>TypeError</emu-val> is thrown if <var>S</var> is <emu-val>true</emu-val>. A property named <var>N</var>
 normally already exists but if it does not or is not currently 
writable, error handling is determined by the value of the Boolean 
argument <var>S</var>.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <var>S</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.SetMutableBinding(<var>N</var>, <var>V</var>, <var>S</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.6" -->
        <emu-clause id="sec-global-environment-records-getbindingvalue-n-s">
          <h1><span class="secnum">8.1.1.4.6</span>GetBindingValue (<var>N</var>, <var>S</var>)<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-getbindingvalue-n-s">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method GetBindingValue for global Environment Records returns the value
 of its bound identifier whose name is the value of the argument <var>N</var>. If the binding is an uninitialized binding throw a <emu-val>ReferenceError</emu-val> exception. A property named <var>N</var>
 normally already exists but if it does not or is not currently 
writable, error handling is determined by the value of the Boolean 
argument <var>S</var>.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.GetBindingValue(<var>N</var>, <var>S</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Return ? <var>ObjRec</var>.GetBindingValue(<var>N</var>, <var>S</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.7" -->
        <emu-clause id="sec-global-environment-records-deletebinding-n">
          <h1><span class="secnum">8.1.1.4.7</span>DeleteBinding (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-deletebinding-n">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method DeleteBinding for global Environment Records can only delete 
bindings that have been explicitly designated as being subject to 
deletion.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>If <var>DclRec</var>.HasBinding(<var>N</var>) is <emu-val>true</emu-val>, then<ol><li>Return <var>DclRec</var>.DeleteBinding(<var>N</var>).</li></ol></li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>status</var> be ? <var>ObjRec</var>.DeleteBinding(<var>N</var>).</li><li>If <var>status</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>varNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>N</var> is an element of <var>varNames</var>, remove that element from the <var>varNames</var>.</li></ol></li><li>Return <var>status</var>.</li></ol></li><li>Return <emu-val>true</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.8" -->
        <emu-clause id="sec-global-environment-records-hasthisbinding">
          <h1><span class="secnum">8.1.1.4.8</span>HasThisBinding ()<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-hasthisbinding">#</a></span></span></h1>
          <emu-alg><ol><li>Return <emu-val>true</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.9" -->
        <emu-clause id="sec-global-environment-records-hassuperbinding">
          <h1><span class="secnum">8.1.1.4.9</span>HasSuperBinding ()<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-hassuperbinding">#</a></span></span></h1>
          <emu-alg><ol><li>Return <emu-val>false</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.10" -->
        <emu-clause id="sec-global-environment-records-withbaseobject">
          <h1><span class="secnum">8.1.1.4.10</span>WithBaseObject ()<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-withbaseobject">#</a></span></span></h1>
          <p>Global Environment Records always return <emu-val>undefined</emu-val> as their WithBaseObject.</p>
          <emu-alg><ol><li>Return <emu-val>undefined</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.11" -->
        <emu-clause id="sec-global-environment-records-getthisbinding">
          <h1><span class="secnum">8.1.1.4.11</span>GetThisBinding ()<span class="utils"><span class="anchor"><a href="#sec-global-environment-records-getthisbinding">#</a></span></span></h1>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Return <var>envRec</var>.[[GlobalThisValue]].
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.12" -->
        <emu-clause id="sec-hasvardeclaration">
          <h1><span class="secnum">8.1.1.4.12</span>HasVarDeclaration (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-hasvardeclaration">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method HasVarDeclaration for global Environment Records determines if 
the argument identifier has a binding in this record that was created 
using a <emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt> or a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>:</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> contains <var>N</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.13" -->
        <emu-clause id="sec-haslexicaldeclaration">
          <h1><span class="secnum">8.1.1.4.13</span>HasLexicalDeclaration (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-haslexicaldeclaration">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method HasLexicalDeclaration for global Environment Records determines 
if the argument identifier has a binding in this record that was created
 using a lexical declaration such as a <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt> or a <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt>:</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>DclRec</var> be <var>envRec</var>.[[DeclarativeRecord]].</li><li>Return <var>DclRec</var>.HasBinding(<var>N</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.14" -->
        <emu-clause id="sec-hasrestrictedglobalproperty">
          <h1><span class="secnum">8.1.1.4.14</span>HasRestrictedGlobalProperty (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-hasrestrictedglobalproperty">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method HasRestrictedGlobalProperty for global Environment Records 
determines if the argument identifier is the name of a property of the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> that must not be shadowed by a global lexically binding:</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.
          </li></ol></emu-alg>
          <emu-note><span class="note">Note</span>
            <p>Properties may exist upon a <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>
 that were directly created rather than being declared using a var or 
function declaration. A global lexical binding may not be created that 
has the same name as a non-configurable property of the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>. The global property <code>undefined</code> is an example of such a property.</p>
          </emu-note>
        </emu-clause>

        <!-- es6num="8.1.1.4.15" -->
        <emu-clause id="sec-candeclareglobalvar">
          <h1><span class="secnum">8.1.1.4.15</span>CanDeclareGlobalVar (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-candeclareglobalvar">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method CanDeclareGlobalVar for global Environment Records determines if
 a corresponding CreateGlobalVarBinding call would succeed if called for
 the same argument <var>N</var>. Redundant var declarations and var declarations for pre-existing <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> properties are allowed.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>hasProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>If <var>hasProperty</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>globalObject</var>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.16" -->
        <emu-clause id="sec-candeclareglobalfunction">
          <h1><span class="secnum">8.1.1.4.16</span>CanDeclareGlobalFunction (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-candeclareglobalfunction">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method CanDeclareGlobalFunction for global Environment Records 
determines if a corresponding CreateGlobalFunctionBinding call would 
succeed if called for the same argument <var>N</var>.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val>, return ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>globalObject</var>).</li><li>If <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>existingProp</var>) is <emu-val>true</emu-val> and <var>existingProp</var> has attribute values {[[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>}, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.17" -->
        <emu-clause id="sec-createglobalvarbinding">
          <h1><span class="secnum">8.1.1.4.17</span>CreateGlobalVarBinding (<var>N</var>, <var>D</var>)<span class="utils"><span class="anchor"><a href="#sec-createglobalvarbinding">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method CreateGlobalVarBinding for global Environment Records creates 
and initializes a mutable binding in the associated object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> and records the bound name in the associated [[VarNames]] <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>. If a binding already exists, it is reused and assumed to be initialized.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>hasProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>globalObject</var>, <var>N</var>).</li><li>Let <var>extensible</var> be ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>globalObject</var>).</li><li>If <var>hasProperty</var> is <emu-val>false</emu-val> and <var>extensible</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>ObjRec</var>.CreateMutableBinding(<var>N</var>, <var>D</var>).</li><li>Perform ? <var>ObjRec</var>.InitializeBinding(<var>N</var>, <emu-val>undefined</emu-val>).</li></ol></li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> does not contain <var>N</var>, then<ol><li>Append <var>N</var> to <var>varDeclaredNames</var>.</li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.4.18" -->
        <emu-clause id="sec-createglobalfunctionbinding">
          <h1><span class="secnum">8.1.1.4.18</span>CreateGlobalFunctionBinding (<var>N</var>, <var>V</var>, <var>D</var>)<span class="utils"><span class="anchor"><a href="#sec-createglobalfunctionbinding">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method CreateGlobalFunctionBinding for global Environment Records 
creates and initializes a mutable binding in the associated object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> and records the bound name in the associated [[VarNames]] <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>. If a binding already exists, it is replaced.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Let <var>ObjRec</var> be <var>envRec</var>.[[ObjectRecord]].</li><li>Let <var>globalObject</var> be the binding object for <var>ObjRec</var>.</li><li>Let <var>existingProp</var> be ? <var>globalObject</var>.[[GetOwnProperty]](<var>N</var>).</li><li>If <var>existingProp</var> is <emu-val>undefined</emu-val> or <var>existingProp</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Let <var>desc</var> be the PropertyDescriptor{[[Value]]: <var>V</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <var>D</var>}.</li></ol></li><li>Else,<ol><li>Let <var>desc</var> be the PropertyDescriptor{[[Value]]: <var>V</var> }.</li></ol></li><li>Perform ? <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>globalObject</var>, <var>N</var>, <var>desc</var>).</li><li><emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> that the binding for <var>N</var> in <var>ObjRec</var> has been initialized.</li><li>Perform ? <emu-xref aoid="Set"><a href="#sec-set-o-p-v-throw">Set</a></emu-xref>(<var>globalObject</var>, <var>N</var>, <var>V</var>, <emu-val>false</emu-val>).</li><li>Let <var>varDeclaredNames</var> be <var>envRec</var>.[[VarNames]].</li><li>If <var>varDeclaredNames</var> does not contain <var>N</var>, then<ol><li>Append <var>N</var> to <var>varDeclaredNames</var>.</li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
          </li></ol></emu-alg>
          <emu-note><span class="note">Note</span>
            <p>Global function declarations are always represented as own properties of the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>.
 If possible, an existing own property is reconfigured to have a 
standard set of attribute values. Steps 10-12 are equivalent to what 
calling the InitializeBinding concrete method would do and if <var>globalObject</var> is a Proxy will produce the same sequence of Proxy trap calls.</p>
          </emu-note>
        </emu-clause>
      </emu-clause>

      <!-- es6num="8.1.1.5" -->
      <emu-clause id="sec-module-environment-records">
        <h1><span class="secnum">8.1.1.5</span>Module Environment Records<span class="utils"><span class="anchor"><a href="#sec-module-environment-records">#</a></span></span></h1>
        <p>A module <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> is a declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> that is used to represent the outer scope of an ECMAScript <emu-nt><a href="#prod-Module">Module</a></emu-nt>.
 In additional to normal mutable and immutable bindings, module 
Environment Records also provide immutable import bindings which are 
bindings that provide indirect access to a target binding that exists in
 another <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</p>
        <p>Module Environment Records support all of the declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> methods listed in  <emu-xref href="#table-15"><a href="#table-15">Table 15</a></emu-xref>
 and share the same specifications for all of those methods except for 
GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In 
addition, module Environment Records support the methods listed in  <emu-xref href="#table-20"><a href="#table-20">Table 20</a></emu-xref>:</p>
        <emu-table id="table-20" caption="Additional Methods of Module Environment Records"><figure><figcaption>Table 20: Additional Methods of Module Environment Records</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Method
              
              </th>
              <th>
                Purpose
              
              </th>
            </tr>
            <tr>
              <td>
                CreateImportBinding(N, M, N2)
              
              </td>
              <td>
                Create an immutable indirect binding in a module <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>. The String value <var>N</var> is the text of the bound name. <var>M</var> is a <emu-xref href="#sec-abstract-module-records"><a href="#sec-abstract-module-records">Module Record</a></emu-xref>, and <var>N2</var> is a binding that exists in M's module <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.
              
              </td>
            </tr>
            <tr>
              <td>
                GetThisBinding()
              
              </td>
              <td>
                Return the value of this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>'s <code>this</code> binding.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <p>The behaviour of the additional concrete specification 
methods for module Environment Records are defined by the following 
algorithms:</p>

        <!-- es6num="8.1.1.5.1" -->
        <emu-clause id="sec-module-environment-records-getbindingvalue-n-s">
          <h1><span class="secnum">8.1.1.5.1</span>GetBindingValue (<var>N</var>, <var>S</var>)<span class="utils"><span class="anchor"><a href="#sec-module-environment-records-getbindingvalue-n-s">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 method GetBindingValue for module Environment Records returns the value
 of its bound identifier whose name is the value of the argument <var>N</var>.
 However, if the binding is an indirect binding the value of the target 
binding is returned. If the binding exists but is uninitialized a <emu-val>ReferenceError</emu-val> is thrown.</p>
          <emu-alg><ol><li>Assert: <var>S</var> is <emu-val>true</emu-val>.</li><li>Let <var>envRec</var> be the module <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Assert: <var>envRec</var> has a binding for <var>N</var>.</li><li>If the binding for <var>N</var> is an indirect binding, then<ol><li>Let <var>M</var> and <var>N2</var> be the indirection values provided when this binding for <var>N</var> was created.</li><li>Let <var>targetEnv</var> be <var>M</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>targetER</var> be <var>targetEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Return ? <var>targetER</var>.GetBindingValue(<var>N2</var>, <emu-val>true</emu-val>).</li></ol></li><li>If the binding for <var>N</var> in <var>envRec</var> is an uninitialized binding, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Return the value currently bound to <var>N</var> in <var>envRec</var>.
          </li></ol></emu-alg>
          <emu-note><span class="note">Note</span>
            <p><var>S</var> will always be <emu-val>true</emu-val> because a <emu-nt><a href="#prod-Module">Module</a></emu-nt> is always <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>.</p>
          </emu-note>
        </emu-clause>

        <!-- es6num="8.1.1.5.2" -->
        <emu-clause id="sec-module-environment-records-deletebinding-n">
          <h1><span class="secnum">8.1.1.5.2</span>DeleteBinding (<var>N</var>)<span class="utils"><span class="anchor"><a href="#sec-module-environment-records-deletebinding-n">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> method DeleteBinding for module Environment Records refuses to delete bindings.</p>
          <emu-alg><ol><li>Assert: This method is never invoked. See <emu-xref href="#sec-delete-operator-static-semantics-early-errors"><a href="#sec-delete-operator-static-semantics-early-errors">12.5.3.1</a></emu-xref>.
          </li></ol></emu-alg>
          <emu-note><span class="note">Note</span>
            <p>Module Environment Records are only used within strict code and an <emu-xref href="#early-error"><a href="#early-error">early error</a></emu-xref> rule prevents the delete operator, in strict code, from being applied to a <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> that would resolve to a module <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> binding. See  <emu-xref href="#sec-delete-operator-static-semantics-early-errors"><a href="#sec-delete-operator-static-semantics-early-errors">12.5.3.1</a></emu-xref>.</p>
          </emu-note>
        </emu-clause>

        <!-- es6num="8.1.1.5.3" -->
        <emu-clause id="sec-module-environment-records-hasthisbinding">
          <h1><span class="secnum">8.1.1.5.3</span>HasThisBinding ()<span class="utils"><span class="anchor"><a href="#sec-module-environment-records-hasthisbinding">#</a></span></span></h1>
          <p>Module Environment Records provide a <code>this</code> binding.</p>
          <emu-alg><ol><li>Return <emu-val>true</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.5.4" -->
        <emu-clause id="sec-module-environment-records-getthisbinding">
          <h1><span class="secnum">8.1.1.5.4</span>GetThisBinding ()<span class="utils"><span class="anchor"><a href="#sec-module-environment-records-getthisbinding">#</a></span></span></h1>
          <emu-alg><ol><li>Return <emu-val>undefined</emu-val>.
          </li></ol></emu-alg>
        </emu-clause>

        <!-- es6num="8.1.1.5.5" -->
        <emu-clause id="sec-createimportbinding">
          <h1><span class="secnum">8.1.1.5.5</span>CreateImportBinding (<var>N</var>, <var>M</var>, <var>N2</var>)<span class="utils"><span class="anchor"><a href="#sec-createimportbinding">#</a></span></span></h1>
          <p>The concrete <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> method CreateImportBinding for module Environment Records creates a new initialized immutable indirect binding for the name <var>N</var>. A binding must not already exist in this <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for <var>N</var>. <var>M</var> is a <emu-xref href="#sec-abstract-module-records"><a href="#sec-abstract-module-records">Module Record</a></emu-xref>, and <var>N2</var> is the name of a binding that exists in M's module <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>. Accesses to the value of the new binding will indirectly access the bound value of the target binding.</p>
          <emu-alg><ol><li>Let <var>envRec</var> be the module <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for which the method was invoked.</li><li>Assert: <var>envRec</var> does not already have a binding for <var>N</var>.</li><li>Assert: <var>M</var> is a <emu-xref href="#sec-abstract-module-records"><a href="#sec-abstract-module-records">Module Record</a></emu-xref>.</li><li>Assert: When <var>M</var>.[[Environment]] is instantiated it will have a direct binding for <var>N2</var>.</li><li>Create an immutable indirect binding in <var>envRec</var> for <var>N</var> that references <var>M</var> and <var>N2</var> as its target binding and record that the binding is initialized.</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
          </li></ol></emu-alg>
        </emu-clause>
      </emu-clause>
    </emu-clause>

    <!-- es6num="8.1.2" -->
    <emu-clause id="sec-lexical-environment-operations">
      <h1><span class="secnum">8.1.2</span>Lexical Environment Operations<span class="utils"><span class="anchor"><a href="#sec-lexical-environment-operations">#</a></span></span></h1>
      <p>The following abstract operations are used in this specification to operate upon lexical environments:</p>

      <!-- es6num="8.1.2.1" -->
      <emu-clause id="sec-getidentifierreference" aoid="GetIdentifierReference">
        <h1><span class="secnum">8.1.2.1</span>GetIdentifierReference (<var>lex</var>, <var>name</var>, <var>strict</var>)<span class="utils"><span class="anchor"><a href="#sec-getidentifierreference">#</a></span></span></h1>
        <p>The abstract operation GetIdentifierReference is called with a <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> <var>lex</var>, a String <var>name</var>, and a Boolean flag <var>strict</var>. The value of <var>lex</var> may be <emu-val>null</emu-val>. When called, the following steps are performed:</p>
        <emu-alg><ol><li>If <var>lex</var> is the value <emu-val>null</emu-val>, then<ol><li>Return a value of type <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> whose base value component is <emu-val>undefined</emu-val>, whose referenced name component is <var>name</var>, and whose strict reference flag is <var>strict</var>.</li></ol></li><li>Let <var>envRec</var> be <var>lex</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>exists</var> be ? <var>envRec</var>.HasBinding(<var>name</var>).</li><li>If <var>exists</var> is <emu-val>true</emu-val>, then<ol><li>Return a value of type <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> whose base value component is <var>envRec</var>, whose referenced name component is <var>name</var>, and whose strict reference flag is <var>strict</var>.</li></ol></li><li>Else,<ol><li>Let <var>outer</var> be the value of <var>lex</var>'s outer environment reference.</li><li>Return ? <emu-xref aoid="GetIdentifierReference"><a href="#sec-getidentifierreference">GetIdentifierReference</a></emu-xref>(<var>outer</var>, <var>name</var>, <var>strict</var>).
        </li></ol></li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="8.1.2.2" -->
      <emu-clause id="sec-newdeclarativeenvironment" aoid="NewDeclarativeEnvironment">
        <h1><span class="secnum">8.1.2.2</span>NewDeclarativeEnvironment (<var>E</var>)<span class="utils"><span class="anchor"><a href="#sec-newdeclarativeenvironment">#</a></span></span></h1>
        <p>When the abstract operation NewDeclarativeEnvironment is called with a <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> as argument <var>E</var> the following steps are performed:</p>
        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref>.</li><li>Let <var>envRec</var> be a new declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref> to <var>envRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <var>E</var>.</li><li>Return <var>env</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="8.1.2.3" -->
      <emu-clause id="sec-newobjectenvironment" aoid="NewObjectEnvironment">
        <h1><span class="secnum">8.1.2.3</span>NewObjectEnvironment (<var>O</var>, <var>E</var>)<span class="utils"><span class="anchor"><a href="#sec-newobjectenvironment">#</a></span></span></h1>
        <p>When the abstract operation NewObjectEnvironment is called with an Object <var>O</var> and a <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> <var>E</var> as arguments, the following steps are performed:</p>
        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref>.</li><li>Let <var>envRec</var> be a new object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> containing <var>O</var> as the binding object.</li><li>Set <var>env</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref> to <var>envRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <var>E</var>.</li><li>Return <var>env</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="8.1.2.4" -->
      <emu-clause id="sec-newfunctionenvironment" aoid="NewFunctionEnvironment">
        <h1><span class="secnum">8.1.2.4</span>NewFunctionEnvironment ( <var>F</var>, <var>newTarget</var> )<span class="utils"><span class="anchor"><a href="#sec-newfunctionenvironment">#</a></span></span></h1>
        <p>When the abstract operation NewFunctionEnvironment is called with arguments <var>F</var> and <var>newTarget</var> the following steps are performed:</p>
        <emu-alg><ol><li>Assert: <var>F</var> is an ECMAScript function.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>env</var> be a new <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref>.</li><li>Let <var>envRec</var> be a new function <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>envRec</var>.[[FunctionObject]] to <var>F</var>.</li><li>If <var>F</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, set <var>envRec</var>.[[ThisBindingStatus]] to <code>"lexical"</code>.</li><li>Else, set <var>envRec</var>.[[ThisBindingStatus]] to <code>"uninitialized"</code>.</li><li>Let <var>home</var> be <var>F</var>.[[HomeObject]].</li><li>Set <var>envRec</var>.[[HomeObject]] to <var>home</var>.</li><li>Set <var>envRec</var>.[[NewTarget]] to <var>newTarget</var>.</li><li>Set <var>env</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref> to <var>envRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <var>F</var>.[[Environment]].</li><li>Return <var>env</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="8.1.2.5" -->
      <emu-clause id="sec-newglobalenvironment" aoid="NewGlobalEnvironment">
        <h1><span class="secnum">8.1.2.5</span>NewGlobalEnvironment ( <var>G</var>, <var>thisValue</var> )<span class="utils"><span class="anchor"><a href="#sec-newglobalenvironment">#</a></span></span></h1>
        <p>When the abstract operation NewGlobalEnvironment is called with arguments <var>G</var> and <var>thisValue</var>, the following steps are performed:</p>
        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref>.</li><li>Let <var>objRec</var> be a new object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> containing <var>G</var> as the binding object.</li><li>Let <var>dclRec</var> be a new declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> containing no bindings.</li><li>Let <var>globalRec</var> be a new global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</li><li>Set <var>globalRec</var>.[[ObjectRecord]] to <var>objRec</var>.</li><li>Set <var>globalRec</var>.[[GlobalThisValue]] to <var>thisValue</var>.</li><li>Set <var>globalRec</var>.[[DeclarativeRecord]] to <var>dclRec</var>.</li><li>Set <var>globalRec</var>.[[VarNames]] to a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Set <var>env</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref> to <var>globalRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <emu-val>null</emu-val>.</li><li>Return <var>env</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="8.1.2.6" -->
      <emu-clause id="sec-newmoduleenvironment" aoid="NewModuleEnvironment">
        <h1><span class="secnum">8.1.2.6</span>NewModuleEnvironment (<var>E</var>)<span class="utils"><span class="anchor"><a href="#sec-newmoduleenvironment">#</a></span></span></h1>
        <p>When the abstract operation NewModuleEnvironment is called with a <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> argument <var>E</var> the following steps are performed:</p>
        <emu-alg><ol><li>Let <var>env</var> be a new <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref>.</li><li>Let <var>envRec</var> be a new module <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> containing no bindings.</li><li>Set <var>env</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref> to <var>envRec</var>.</li><li>Set the outer lexical environment reference of <var>env</var> to <var>E</var>.</li><li>Return <var>env</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="8.2" -->
  <emu-clause id="sec-code-realms">
    <h1><span class="secnum">8.2</span>Realms<span class="utils"><span class="anchor"><a href="#sec-code-realms">#</a></span></span></h1>
    <p>Before it is evaluated, all ECMAScript code must be associated with a  <dfn id="realm">realm</dfn>. Conceptually, a <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> consists of a set of intrinsic objects, an ECMAScript <emu-xref href="#global-environment"><a href="#global-environment">global environment</a></emu-xref>, all of the ECMAScript code that is loaded within the scope of that <emu-xref href="#global-environment"><a href="#global-environment">global environment</a></emu-xref>, and other associated state and resources.</p>
    <p>A <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> is represented in this specification as a  <dfn id="realm-record">Realm Record</dfn> with the fields specified in  <emu-xref href="#table-21"><a href="#table-21">Table 21</a></emu-xref>:</p>
    <emu-table id="table-21" caption="Realm Record Fields"><figure><figcaption>Table 21: <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref> Fields</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Field Name
          
          </th>
          <th>
            Value
          
          </th>
          <th>
            Meaning
          
          </th>
        </tr>
        <tr>
          <td>
            [[Intrinsics]]
          
          </td>
          <td>
            <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> whose field names are intrinsic keys and whose values are objects
          
          </td>
          <td>
            The intrinsic values used by code associated with this <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref>
          
          </td>
        </tr>
        <tr>
          <td>
            [[GlobalObject]]
          
          </td>
          <td>
            Object
          
          </td>
          <td>
            The <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> for this <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref>
          
          </td>
        </tr>
        <tr>
          <td>
            [[GlobalEnv]]
          
          </td>
          <td>
            <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref>
          
          </td>
          <td>
            The <emu-xref href="#global-environment"><a href="#global-environment">global environment</a></emu-xref> for this <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref>
          
          </td>
        </tr>
        <tr>
          <td>
            [[TemplateMap]]
          
          </td>
          <td>
            A <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> { [[Strings]]: <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>, [[Array]]: Object}.
          
          </td>
          <td>
            Template objects are canonicalized separately for each <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> using its <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref>'s [[TemplateMap]]. Each [[Strings]] value is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing, in source text order, the raw String values of a <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt> that has been evaluated. The associated [[Array]] value is the corresponding template object that is passed to a tag function.
          
          </td>
        </tr>
        <tr>
          <td>
            [[HostDefined]]
          
          </td>
          <td>
            Any, default value is <emu-val>undefined</emu-val>.
          
          </td>
          <td>
            Field reserved for use by host environments that need to associate additional information with a <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref>.
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>

    <!-- es6num="8.2.1" -->
    <emu-clause id="sec-createrealm" aoid="CreateRealm">
      <h1><span class="secnum">8.2.1</span>CreateRealm ( )<span class="utils"><span class="anchor"><a href="#sec-createrealm">#</a></span></span></h1>
      <p>The abstract operation CreateRealm with no arguments performs the following steps:</p>
      <emu-alg><ol><li>Let <var>realmRec</var> be a new <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref>.</li><li>Perform <emu-xref aoid="CreateIntrinsics"><a href="#sec-createintrinsics">CreateIntrinsics</a></emu-xref>(<var>realmRec</var>).</li><li>Set <var>realmRec</var>.[[GlobalObject]] to <emu-val>undefined</emu-val>.</li><li>Set <var>realmRec</var>.[[GlobalEnv]] to <emu-val>undefined</emu-val>.</li><li>Set <var>realmRec</var>.[[TemplateMap]] to a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Return <var>realmRec</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="8.2.2" -->
    <emu-clause id="sec-createintrinsics" aoid="CreateIntrinsics">
      <h1><span class="secnum">8.2.2</span>CreateIntrinsics ( <var>realmRec</var> )<span class="utils"><span class="anchor"><a href="#sec-createintrinsics">#</a></span></span></h1>
      <p>The abstract operation CreateIntrinsics with argument <var>realmRec</var> performs the following steps:</p>
      <emu-alg><ol><li>Let <var>intrinsics</var> be a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref>.</li><li>Set <var>realmRec</var>.[[Intrinsics]] to <var>intrinsics</var>.</li><li>Let <var>objProto</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Set <var>intrinsics</var>.[[<emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>]] to <var>objProto</var>.</li><li>Let <var>throwerSteps</var> be the algorithm steps specified in <emu-xref href="#sec-%throwtypeerror%"><a href="#sec-%throwtypeerror%">9.2.7.1</a></emu-xref> for the <emu-xref href="#sec-%throwtypeerror%"><a href="#sec-%throwtypeerror%">%ThrowTypeError%</a></emu-xref> function.</li><li>Let <var>thrower</var> be <emu-xref aoid="CreateBuiltinFunction"><a href="#sec-createbuiltinfunction">CreateBuiltinFunction</a></emu-xref>(<var>realmRec</var>, <var>throwerSteps</var>, <emu-val>null</emu-val>).</li><li>Set <var>intrinsics</var>.[[<emu-xref href="#sec-%throwtypeerror%"><a href="#sec-%throwtypeerror%">%ThrowTypeError%</a></emu-xref>]] to <var>thrower</var>.</li><li>Let <var>noSteps</var> be an empty sequence of algorithm steps.</li><li>Let <var>funcProto</var> be <emu-xref aoid="CreateBuiltinFunction"><a href="#sec-createbuiltinfunction">CreateBuiltinFunction</a></emu-xref>(<var>realmRec</var>, <var>noSteps</var>, <var>objProto</var>).</li><li>Set <var>intrinsics</var>.[[<emu-xref href="#sec-properties-of-the-function-prototype-object"><a href="#sec-properties-of-the-function-prototype-object">%FunctionPrototype%</a></emu-xref>]] to <var>funcProto</var>.</li><li>Call <var>thrower</var>.[[SetPrototypeOf]](<var>funcProto</var>).</li><li>Perform <emu-xref aoid="AddRestrictedFunctionProperties"><a href="#sec-addrestrictedfunctionproperties">AddRestrictedFunctionProperties</a></emu-xref>(<var>funcProto</var>, <var>realmRec</var>).</li><li>Set fields of <var>intrinsics</var> with the values listed in <emu-xref href="#table-7"><a href="#table-7">Table 7</a></emu-xref>
 that have not already been handled above. The field names are the names
 listed in column one of the table. The value of each field is a new 
object value fully and recursively populated with property values as 
defined by the specification of each object in clauses 18-26. All object
 property values are newly created object values. All values that are 
built-in function objects are created by performing <emu-xref aoid="CreateBuiltinFunction"><a href="#sec-createbuiltinfunction">CreateBuiltinFunction</a></emu-xref>(<var>realmRec</var>,
 &lt;steps&gt;, &lt;prototype&gt;, &lt;slots&gt;) where &lt;steps&gt; is
 the definition of that function provided by this specification, 
&lt;prototype&gt; is the specified value of the function's [[Prototype]]
 internal slot and &lt;slots&gt; is a list of the names, if any, of the 
function's specified internal slots. The creation of the intrinsics and 
their properties must be ordered to avoid any dependencies upon objects 
that have not yet been created.</li><li>Return <var>intrinsics</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="8.2.3" -->
    <emu-clause id="sec-setrealmglobalobject" aoid="SetRealmGlobalObject">
      <h1><span class="secnum">8.2.3</span>SetRealmGlobalObject ( <var>realmRec</var>, <var>globalObj</var>, <var>thisValue</var> )<span class="utils"><span class="anchor"><a href="#sec-setrealmglobalobject">#</a></span></span></h1>
      <p>The abstract operation SetRealmGlobalObject with arguments <var>realmRec</var>, <var>globalObj</var>, and <var>thisValue</var> performs the following steps:</p>
      <emu-alg><ol><li>If <var>globalObj</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>intrinsics</var> be <var>realmRec</var>.[[Intrinsics]].</li><li>Let <var>globalObj</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<var>intrinsics</var>.[[<emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>]]).</li></ol></li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>globalObj</var>) is Object.</li><li>If <var>thisValue</var> is <emu-val>undefined</emu-val>, let <var>thisValue</var> be <var>globalObj</var>.</li><li>Set <var>realmRec</var>.[[GlobalObject]] to <var>globalObj</var>.</li><li>Let <var>newGlobalEnv</var> be <emu-xref aoid="NewGlobalEnvironment"><a href="#sec-newglobalenvironment">NewGlobalEnvironment</a></emu-xref>(<var>globalObj</var>, <var>thisValue</var>).</li><li>Set <var>realmRec</var>.[[GlobalEnv]] to <var>newGlobalEnv</var>.</li><li>Return <var>realmRec</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="8.2.4" -->
    <emu-clause id="sec-setdefaultglobalbindings" aoid="SetDefaultGlobalBindings">
      <h1><span class="secnum">8.2.4</span>SetDefaultGlobalBindings ( <var>realmRec</var> )<span class="utils"><span class="anchor"><a href="#sec-setdefaultglobalbindings">#</a></span></span></h1>
      <p>The abstract operation SetDefaultGlobalBindings with argument <var>realmRec</var> performs the following steps:</p>
      <emu-alg><ol><li>Let <var>global</var> be <var>realmRec</var>.[[GlobalObject]].</li><li>For each property of the Global Object specified in clause <emu-xref href="#sec-global-object"><a href="#sec-global-object">18</a></emu-xref>, do<ol><li>Let <var>name</var> be the String value of the property name.</li><li>Let <var>desc</var>
 be the fully populated data property descriptor for the property 
containing the specified attributes for the property. For properties 
listed in <emu-xref href="#sec-function-properties-of-the-global-object"><a href="#sec-function-properties-of-the-global-object">18.2</a></emu-xref>, <emu-xref href="#sec-constructor-properties-of-the-global-object"><a href="#sec-constructor-properties-of-the-global-object">18.3</a></emu-xref>, or <emu-xref href="#sec-other-properties-of-the-global-object"><a href="#sec-other-properties-of-the-global-object">18.4</a></emu-xref> the value of the [[Value]] attribute is the corresponding intrinsic object from <var>realmRec</var>.</li><li>Perform ? <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>global</var>, <var>name</var>, <var>desc</var>).</li></ol></li><li>Return <var>global</var>.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="8.3" -->
  <emu-clause id="sec-execution-contexts">
    <h1><span class="secnum">8.3</span>Execution Contexts<span class="utils"><span class="anchor"><a href="#sec-execution-contexts">#</a></span></span></h1>
    <p>An  <dfn>execution context</dfn> is a specification device that 
is used to track the runtime evaluation of code by an ECMAScript 
implementation. At any point in time, there is at most one execution 
context that is actually executing code. This is known as the  <dfn id="running-execution-context">running execution context</dfn>.</p>
    <p>The  <dfn id="execution-context-stack">execution context stack</dfn> is used to track execution contexts. The <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>
 is always the top element of this stack. A new execution context is 
created whenever control is transferred from the executable code 
associated with the currently <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>
 to executable code that is not associated with that execution context. 
The newly created execution context is pushed onto the stack and becomes
 the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</p>
    <p>An execution context contains whatever implementation specific 
state is necessary to track the execution progress of its associated 
code. Each execution context has at least the state components listed in
  <emu-xref href="#table-22"><a href="#table-22">Table 22</a></emu-xref>.</p>
    <emu-table id="table-22" caption="State Components for All Execution Contexts"><figure><figcaption>Table 22: State Components for All Execution Contexts</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Component
          
          </th>
          <th>
            Purpose
          
          </th>
        </tr>
        <tr>
          <td>
            code evaluation state
          
          </td>
          <td>
            Any state needed to perform, suspend, and resume evaluation of the code associated with this execution context.
          
          </td>
        </tr>
        <tr>
          <td>
            Function
          
          </td>
          <td>
            If this execution context is evaluating the code of a 
function object, then the value of this component is that function 
object. If the context is evaluating the code of a <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>, the value is <emu-val>null</emu-val>.
          
          </td>
        </tr>
        <tr>
          <td>
            <emu-xref href="#realm"><a href="#realm">Realm</a></emu-xref>
          
          </td>
          <td>
            The <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref> from which associated code accesses ECMAScript resources.
          
          </td>
        </tr>
        <tr>
          <td>
            ScriptOrModule
          
          </td>
          <td>
            The <emu-xref href="#sec-abstract-module-records"><a href="#sec-abstract-module-records">Module Record</a></emu-xref> or <emu-xref href="#script-record"><a href="#script-record">Script Record</a></emu-xref>
 from which associated code originates. If there is no originating 
script or module, as is the case for the original execution context 
created in <emu-xref aoid="InitializeHostDefinedRealm"><a href="#sec-initializehostdefinedrealm">InitializeHostDefinedRealm</a></emu-xref>, the value is <emu-val>null</emu-val>.
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>
    <p>Evaluation of code by the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> may be suspended at various points defined within this specification. Once the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> has been suspended a different execution context may become the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> and commence evaluating its code. At some later time a suspended execution context may again become the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> and continue evaluating its code at the point where it had previously been suspended. Transition of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>
 status among execution contexts usually occurs in stack-like 
last-in/first-out manner. However, some ECMAScript features require 
non-LIFO transitions of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</p>
    <p>The value of the <emu-xref href="#realm"><a href="#realm">Realm</a></emu-xref> component of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> is also called  <dfn id="current-realm">the current Realm Record</dfn>. The value of the Function component of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> is also called the  <dfn id="active-function-object">active function object</dfn>.</p>
    <p>Execution contexts for ECMAScript code have the additional state components listed in  <emu-xref href="#table-23"><a href="#table-23">Table 23</a></emu-xref>.</p>
    <emu-table id="table-23" caption="Additional State Components for ECMAScript Code Execution Contexts"><figure><figcaption>Table 23: Additional State Components for ECMAScript Code Execution Contexts</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Component
          
          </th>
          <th>
            Purpose
          
          </th>
        </tr>
        <tr>
          <td>
            LexicalEnvironment
          
          </td>
          <td>
            Identifies the <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> used to resolve identifier references made by code within this execution context.
          
          </td>
        </tr>
        <tr>
          <td>
            VariableEnvironment
          
          </td>
          <td>
            Identifies the <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> whose <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref> holds bindings created by <emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt>s within this execution context.
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>
    <p>The LexicalEnvironment and VariableEnvironment components of an 
execution context are always Lexical Environments. When an execution 
context is created its LexicalEnvironment and VariableEnvironment 
components initially have the same value.</p>
    <p>Execution contexts representing the evaluation of generator objects have the additional state components listed in  <emu-xref href="#table-24"><a href="#table-24">Table 24</a></emu-xref>.</p>
    <emu-table id="table-24" caption="Additional State Components for Generator Execution Contexts"><figure><figcaption>Table 24: Additional State Components for Generator Execution Contexts</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Component
          
          </th>
          <th>
            Purpose
          
          </th>
        </tr>
        <tr>
          <td>
            Generator
          
          </td>
          <td>
            The GeneratorObject that this execution context is evaluating.
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>
    <p>In most situations only the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> (the top of the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref>)
 is directly manipulated by algorithms within this specification. Hence 
when the terms âLexicalEnvironmentâ, and âVariableEnvironmentâ are used 
without qualification they are in reference to those components of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</p>
    <p>An execution context is purely a specification mechanism and need
 not correspond to any particular artefact of an ECMAScript 
implementation. It is impossible for ECMAScript code to directly access 
or observe an execution context.</p>

    <emu-clause id="sec-getactivescriptormodule" aoid="GetActiveScriptOrModule">
      <h1><span class="secnum">8.3.1</span>GetActiveScriptOrModule ()<span class="utils"><span class="anchor"><a href="#sec-getactivescriptormodule">#</a></span></span></h1>
      <p>The GetActiveScriptOrModule abstract operation is used to determine the running script or module, based on the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>. GetActiveScriptOrModule performs the following steps:</p>

      <emu-alg><ol><li>If the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> is empty, return <emu-val>null</emu-val>.</li><li>Let <var>ec</var> be the topmost <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> on the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> whose ScriptOrModule component is not <emu-val>null</emu-val>.</li><li>If no such <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> exists, return <emu-val>null</emu-val>. Otherwise, return <var>ec</var>'s ScriptOrModule component.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="8.3.1" -->
    <emu-clause id="sec-resolvebinding" aoid="ResolveBinding">
      <h1><span class="secnum">8.3.2</span>ResolveBinding ( <var>name</var> [ , <var>env</var> ] )<span class="utils"><span class="anchor"><a href="#sec-resolvebinding">#</a></span></span></h1>
      <p>The ResolveBinding abstract operation is used to determine the binding of <var>name</var> passed as a String value. The optional argument <var>env</var> can be used to explicitly provide the <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref>
 that is to be searched for the binding. During execution of ECMAScript 
code, ResolveBinding is performed using the following algorithm:</p>
      <emu-alg><ol><li>If <var>env</var> was not passed or if <var>env</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>env</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li></ol></li><li>Assert: <var>env</var> is a <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref>.</li><li>If the code matching the syntactic production that is being evaluated is contained in <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>, else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ? <emu-xref aoid="GetIdentifierReference"><a href="#sec-getidentifierreference">GetIdentifierReference</a></emu-xref>(<var>env</var>, <var>name</var>, <var>strict</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>The result of ResolveBinding is always a <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> value with its referenced name component equal to the <var>name</var> argument.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="8.3.2" -->
    <emu-clause id="sec-getthisenvironment" aoid="GetThisEnvironment">
      <h1><span class="secnum">8.3.3</span>GetThisEnvironment ( )<span class="utils"><span class="anchor"><a href="#sec-getthisenvironment">#</a></span></span></h1>
      <p>The abstract operation GetThisEnvironment finds the <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> that currently supplies the binding of the keyword <code>this</code>. GetThisEnvironment performs the following steps:</p>
      <emu-alg><ol><li>Let <var>lex</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Repeat<ol><li>Let <var>envRec</var> be <var>lex</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>exists</var> be <var>envRec</var>.HasThisBinding().</li><li>If <var>exists</var> is <emu-val>true</emu-val>, return <var>envRec</var>.</li><li>Let <var>outer</var> be the value of <var>lex</var>'s outer environment reference.</li><li>Let <var>lex</var> be <var>outer</var>.
      </li></ol></li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>The loop in step 2 will always terminate because the list of environments always ends with the <emu-xref href="#global-environment"><a href="#global-environment">global environment</a></emu-xref> which has a <code>this</code> binding.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="8.3.3" -->
    <emu-clause id="sec-resolvethisbinding" aoid="ResolveThisBinding">
      <h1><span class="secnum">8.3.4</span>ResolveThisBinding ( )<span class="utils"><span class="anchor"><a href="#sec-resolvethisbinding">#</a></span></span></h1>
      <p>The abstract operation ResolveThisBinding determines the binding of the keyword <code>this</code> using the LexicalEnvironment of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>. ResolveThisBinding performs the following steps:</p>
      <emu-alg><ol><li>Let <var>envRec</var> be <emu-xref aoid="GetThisEnvironment"><a href="#sec-getthisenvironment">GetThisEnvironment</a></emu-xref>( ).</li><li>Return ? <var>envRec</var>.GetThisBinding().
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="8.3.4" -->
    <emu-clause id="sec-getnewtarget" aoid="GetNewTarget">
      <h1><span class="secnum">8.3.5</span>GetNewTarget ( )<span class="utils"><span class="anchor"><a href="#sec-getnewtarget">#</a></span></span></h1>
      <p>The abstract operation GetNewTarget determines the NewTarget value using the LexicalEnvironment of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>. GetNewTarget performs the following steps:</p>
      <emu-alg><ol><li>Let <var>envRec</var> be <emu-xref aoid="GetThisEnvironment"><a href="#sec-getthisenvironment">GetThisEnvironment</a></emu-xref>( ).</li><li>Assert: <var>envRec</var> has a [[NewTarget]] field.</li><li>Return <var>envRec</var>.[[NewTarget]].
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="8.3.5" -->
    <emu-clause id="sec-getglobalobject" aoid="GetGlobalObject">
      <h1><span class="secnum">8.3.6</span>GetGlobalObject ( )<span class="utils"><span class="anchor"><a href="#sec-getglobalobject">#</a></span></span></h1>
      <p>The abstract operation GetGlobalObject returns the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> used by the currently <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>. GetGlobalObject performs the following steps:</p>
      <emu-alg><ol><li>Let <var>ctx</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>currentRealm</var> be <var>ctx</var>'s <emu-xref href="#realm"><a href="#realm">Realm</a></emu-xref>.</li><li>Return <var>currentRealm</var>.[[GlobalObject]].
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="8.4" -->
  <emu-clause id="sec-jobs-and-job-queues">
    <h1><span class="secnum">8.4</span>Jobs and Job Queues<span class="utils"><span class="anchor"><a href="#sec-jobs-and-job-queues">#</a></span></span></h1>
    <p>A Job is an abstract operation that initiates an ECMAScript 
computation when no other ECMAScript computation is currently in 
progress. A Job abstract operation may be defined to accept an arbitrary
 set of job parameters.</p>
    <p>Execution of a Job can be initiated only when there is no <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> and the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> is empty. A PendingJob is a request for the future execution of a Job. A PendingJob is an internal <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> whose fields are specified in  <emu-xref href="#table-25"><a href="#table-25">Table 25</a></emu-xref>.
 Once execution of a Job is initiated, the Job always executes to 
completion. No other Job may be initiated until the currently running 
Job completes. However, the currently running Job or external events may
 cause the enqueuing of additional PendingJobs that may be initiated 
sometime after completion of the currently running Job.</p>
    <emu-table id="table-25" caption="PendingJob Record Fields"><figure><figcaption>Table 25: PendingJob <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> Fields</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Field Name
          
          </th>
          <th>
            Value
          
          </th>
          <th>
            Meaning
          
          </th>
        </tr>
        <tr>
          <td>
            [[Job]]
          
          </td>
          <td>
            The name of a Job abstract operation
          
          </td>
          <td>
            This is the abstract operation that is performed when execution of this PendingJob is initiated.
          
          </td>
        </tr>
        <tr>
          <td>
            [[Arguments]]
          
          </td>
          <td>
            A <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>
          
          </td>
          <td>
            The <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of argument values that are to be passed to [[Job]] when it is activated.
          
          </td>
        </tr>
        <tr>
          <td>
            [[Realm]]
          
          </td>
          <td>
            A <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref>
          
          </td>
          <td>
            The <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref> for the initial <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> when this PendingJob is initiated.
          
          </td>
        </tr>
        <tr>
          <td>
            [[ScriptOrModule]]
          
          </td>
          <td>
            A <emu-xref href="#script-record"><a href="#script-record">Script Record</a></emu-xref> or <emu-xref href="#sec-abstract-module-records"><a href="#sec-abstract-module-records">Module Record</a></emu-xref>
          
          </td>
          <td>
            The script or module for the initial <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> when this PendingJob is initiated.
          
          </td>
        </tr>
        <tr>
          <td>
            [[HostDefined]]
          
          </td>
          <td>
            Any, default value is <emu-val>undefined</emu-val>.
          
          </td>
          <td>
            Field reserved for use by host environments that need to associate additional information with a pending Job.
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>
    <p>A Job Queue is a FIFO queue of PendingJob records. Each Job Queue
 has a name and the full set of available Job Queues are defined by an 
ECMAScript implementation. Every ECMAScript implementation has at least 
the Job Queues defined in  <emu-xref href="#table-26"><a href="#table-26">Table 26</a></emu-xref>.</p>
    <emu-table id="table-26" caption="Required Job Queues"><figure><figcaption>Table 26: Required Job Queues</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Name
          
          </th>
          <th>
            Purpose
          
          </th>
        </tr>
        <tr>
          <td>
            ScriptJobs
          
          </td>
          <td>
            Jobs that validate and evaluate ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt> and <emu-nt><a href="#prod-Module">Module</a></emu-nt> source text. See clauses 10 and 15.
          
          </td>
        </tr>
        <tr>
          <td>
            PromiseJobs
          
          </td>
          <td>
            Jobs that are responses to the settlement of a Promise (see  <emu-xref href="#sec-promise-objects"><a href="#sec-promise-objects">25.4</a></emu-xref>).
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>
    <p>A request for the future execution of a Job is made by 
enqueueing, on a Job Queue, a PendingJob record that includes a Job 
abstract operation name and any necessary argument values. When there is
 no <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> and the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref>
 is empty, the ECMAScript implementation removes the first PendingJob 
from a Job Queue and uses the information contained in it to create an <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> and starts execution of the associated Job abstract operation.</p>
    <p>The PendingJob records from a single Job Queue are always 
initiated in FIFO order. This specification does not define the order in
 which multiple Job Queues are serviced. An ECMAScript implementation 
may interweave the FIFO evaluation of the PendingJob records of a Job 
Queue with the evaluation of the PendingJob records of one or more other
 Job Queues. An implementation must define what occurs when there are no
 <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> and all Job Queues are empty.</p>
    <emu-note><span class="note">Note</span>
      <p>Typically an ECMAScript implementation will have its Job Queues
 pre-initialized with at least one PendingJob and one of those Jobs will
 be the first to be executed. An implementation might choose to free all
 resources and terminate if the current Job completes and all Job Queues
 are empty. Alternatively, it might choose to wait for a some 
implementation specific agent or mechanism to enqueue new PendingJob 
requests.</p>
    </emu-note>
    <p>The following abstract operations are used to create and manage Jobs and Job Queues:</p>

    <!-- es6num="8.4.1" -->
    <emu-clause id="sec-enqueuejob" aoid="EnqueueJob">
      <h1><span class="secnum">8.4.1</span>EnqueueJob (<var>queueName</var>, <var>job</var>, <var>arguments</var>)<span class="utils"><span class="anchor"><a href="#sec-enqueuejob">#</a></span></span></h1>
      <p>The EnqueueJob abstract operation requires three arguments: <var>queueName</var>, <var>job</var>, and <var>arguments</var>. It performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>queueName</var>) is String and its value is the name of a Job Queue recognized by this implementation.</li><li>Assert: <var>job</var> is the name of a Job.</li><li>Assert: <var>arguments</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> that has the same number of elements as the number of parameters required by <var>job</var>.</li><li>Let <var>callerContext</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>callerRealm</var> be <var>callerContext</var>'s <emu-xref href="#realm"><a href="#realm">Realm</a></emu-xref>.</li><li>Let <var>callerScriptOrModule</var> be <var>callerContext</var>'s ScriptOrModule.</li><li>Let <var>pending</var> be PendingJob{ [[Job]]: <var>job</var>, [[Arguments]]: <var>arguments</var>, [[Realm]]: <var>callerRealm</var>, [[ScriptOrModule]]: <var>callerScriptOrModule</var>, [[HostDefined]]: <emu-val>undefined</emu-val> }.</li><li>Perform any implementation or host environment defined processing of <var>pending</var>. This may include modifying the [[HostDefined]] field or any other field of <var>pending</var>.</li><li>Add <var>pending</var> at the back of the Job Queue named by <var>queueName</var>.</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-initializehostdefinedrealm" aoid="InitializeHostDefinedRealm">
    <h1><span class="secnum">8.5</span>InitializeHostDefinedRealm ( )<span class="utils"><span class="anchor"><a href="#sec-initializehostdefinedrealm">#</a></span></span></h1>
    <p>The abstract operation InitializeHostDefinedRealm performs the following steps:</p>

    <emu-alg><ol><li>Let <var>realm</var> be <emu-xref aoid="CreateRealm"><a href="#sec-createrealm">CreateRealm</a></emu-xref>().</li><li>Let <var>newContext</var> be a new <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref>.</li><li>Set the Function of <var>newContext</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href="#realm"><a href="#realm">Realm</a></emu-xref> of <var>newContext</var> to <var>realm</var>.</li><li>Set the ScriptOrModule of <var>newContext</var> to <emu-val>null</emu-val>.</li><li>Push <var>newContext</var> onto the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref>; <var>newContext</var> is now the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>If the host requires use of an exotic object to serve as <var>realm</var>'s <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>, let <var>global</var> be such an object created in an implementation defined manner. Otherwise, let <var>global</var> be <emu-val>undefined</emu-val>, indicating that an ordinary object should be created as the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>.</li><li>If the host requires that the <code>this</code> binding in <var>realm</var>'s global scope return an object other than the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>, let <var>thisValue</var> be such an object created in an implementation defined manner. Otherwise, let <var>thisValue</var> be <emu-val>undefined</emu-val>, indicating that <var>realm</var>'s global <code>this</code> binding should be the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>.</li><li>Perform <emu-xref aoid="SetRealmGlobalObject"><a href="#sec-setrealmglobalobject">SetRealmGlobalObject</a></emu-xref>(<var>realm</var>, <var>global</var>, <var>thisValue</var>).</li><li>Let <var>globalObj</var> be ? <emu-xref aoid="SetDefaultGlobalBindings"><a href="#sec-setdefaultglobalbindings">SetDefaultGlobalBindings</a></emu-xref>(<var>realm</var>).</li><li>Create any implementation defined <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> properties on <var>globalObj</var>.
    </li></ol></emu-alg>
  </emu-clause>

  <emu-clause id="sec-runjobs" aoid="RunJobs">
    <h1><span class="secnum">8.6</span>RunJobs ( )<span class="utils"><span class="anchor"><a href="#sec-runjobs">#</a></span></span></h1>
    <p>The abstract operation RunJobs performs the following steps:</p>
    <emu-alg><ol><li>Perform ? <emu-xref aoid="InitializeHostDefinedRealm"><a href="#sec-initializehostdefinedrealm">InitializeHostDefinedRealm</a></emu-xref>().</li><li>In an implementation dependent manner, obtain the ECMAScript source texts (see clause <emu-xref href="#sec-ecmascript-language-source-code"><a href="#sec-ecmascript-language-source-code">10</a></emu-xref>) and any associated host-defined values for zero or more ECMAScript scripts and/or ECMAScript modules. For each such <var>sourceText</var> and <var>hostDefined</var>,<ol><li>If <var>sourceText</var> is the source code of a script, then<ol><li>Perform <emu-xref aoid="EnqueueJob"><a href="#sec-enqueuejob">EnqueueJob</a></emu-xref>(<code>"ScriptJobs"</code>, <emu-xref aoid="ScriptEvaluationJob"><a href="#sec-scriptevaluationjob">ScriptEvaluationJob</a></emu-xref>, Â« <var>sourceText</var>, <var>hostDefined</var> Â»).</li></ol></li><li>Else <var>sourceText</var> is the source code of a module,<ol><li>Perform <emu-xref aoid="EnqueueJob"><a href="#sec-enqueuejob">EnqueueJob</a></emu-xref>(<code>"ScriptJobs"</code>, <emu-xref aoid="TopLevelModuleEvaluationJob"><a href="#sec-toplevelmoduleevaluationjob">TopLevelModuleEvaluationJob</a></emu-xref>, Â« <var>sourceText</var>, <var>hostDefined</var> Â»).</li></ol></li></ol></li><li>Repeat<ol><li>Suspend the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref> and remove it from the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref>.</li><li>Assert: The <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> is now empty.</li><li>Let <var>nextQueue</var>
 be a non-empty Job Queue chosen in an implementation defined manner. If
 all Job Queues are empty, the result is implementation defined.</li><li>Let <var>nextPending</var> be the PendingJob record at the front of <var>nextQueue</var>. Remove that record from <var>nextQueue</var>.</li><li>Let <var>newContext</var> be a new <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref>.</li><li>Set <var>newContext</var>'s Function to <emu-val>null</emu-val>.</li><li>Set <var>newContext</var>'s <emu-xref href="#realm"><a href="#realm">Realm</a></emu-xref> to <var>nextPending</var>.[[Realm]].</li><li>Set <var>newContext</var>'s ScriptOrModule to <var>nextPending</var>.[[ScriptOrModule]].</li><li>Push <var>newContext</var> onto the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref>; <var>newContext</var> is now the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Perform any implementation or host environment defined job initialization using <var>nextPending</var>.</li><li>Let <var>result</var> be the result of performing the abstract operation named by <var>nextPending</var>.[[Job]] using the elements of <var>nextPending</var>.[[Arguments]] as its arguments.</li><li>If <var>result</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, perform <emu-xref aoid="HostReportErrors"><a href="#sec-host-report-errors">HostReportErrors</a></emu-xref>(Â« <var>result</var>.[[Value]] Â»).
    </li></ol></li></ol></emu-alg>
  </emu-clause>
</emu-clause>

<!-- es6num="9" -->
<emu-clause id="sec-ordinary-and-exotic-objects-behaviours">
  <h1><span class="secnum">9</span>Ordinary and Exotic Objects Behaviours<span class="utils"><span class="anchor"><a href="#sec-ordinary-and-exotic-objects-behaviours">#</a></span></span></h1>

  <!-- es6num="9.1" -->
  <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots">
    <h1><span class="secnum">9.1</span>Ordinary Object Internal Methods and Internal Slots<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">#</a></span></span></h1>
    <p>All ordinary objects have an internal slot called [[Prototype]]. The value of this internal slot is either <emu-val>null</emu-val>
 or an object and is used for implementing inheritance. Data properties 
of the [[Prototype]] object are inherited (and visible as properties of 
the child object) for the purposes of get access, but not for set 
access. Accessor properties are inherited for both get access and set 
access.</p>
    <p>Every ordinary object has a Boolean-valued [[Extensible]] 
internal slot that controls whether or not properties may be added to 
the object. If the value of the [[Extensible]] internal slot is <emu-val>false</emu-val> then additional properties may not be added to the object. In addition, if [[Extensible]] is <emu-val>false</emu-val>
 the value of the [[Prototype]] internal slot of the object may not be 
modified. Once the value of an object's [[Extensible]] internal slot has
 been set to <emu-val>false</emu-val> it may not be subsequently changed to <emu-val>true</emu-val>.</p>
    <p>In the following algorithm descriptions, assume <var>O</var> is an ordinary object, <var>P</var> is a property key value, <var>V</var> is any <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref>, and <var>Desc</var> is a <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> record.</p>
    <p>Each ordinary object internal method delegates to a 
similarly-named abstract operation. If such an abstract operation 
depends on another internal method, then the internal method is invoked 
on <var>O</var> rather than calling the similarly-named abstract 
operation directly. These semantics ensure that exotic objects have 
their overridden internal methods invoked when ordinary object internal 
methods are applied to them.</p>

    <!-- es6num="9.1.1" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof">
      <h1><span class="secnum">9.1.1</span>[[GetPrototypeOf]] ( )<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof">#</a></span></span></h1>
      <p>When the [[GetPrototypeOf]] internal method of <var>O</var> is called, the following steps are taken:</p>
      <emu-alg><ol><li>Return ! <emu-xref aoid="OrdinaryGetPrototypeOf"><a href="#sec-ordinarygetprototypeof">OrdinaryGetPrototypeOf</a></emu-xref>(<var>O</var>).
      </li></ol></emu-alg>

      <emu-clause id="sec-ordinarygetprototypeof" aoid="OrdinaryGetPrototypeOf">
        <h1><span class="secnum">9.1.1.1</span>OrdinaryGetPrototypeOf (<var>O</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinarygetprototypeof">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryGetPrototypeOf is called with Object <var>O</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Return <var>O</var>.[[Prototype]].
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.2" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-setprototypeof-v">
      <h1><span class="secnum">9.1.2</span>[[SetPrototypeOf]] (<var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-setprototypeof-v">#</a></span></span></h1>
      <p>When the [[SetPrototypeOf]] internal method of <var>O</var> is called with argument <var>V</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Return ! <emu-xref aoid="OrdinarySetPrototypeOf"><a href="#sec-ordinarysetprototypeof">OrdinarySetPrototypeOf</a></emu-xref>(<var>O</var>, <var>V</var>).
      </li></ol></emu-alg>

      <emu-clause id="sec-ordinarysetprototypeof" aoid="OrdinarySetPrototypeOf">
        <h1><span class="secnum">9.1.2.1</span>OrdinarySetPrototypeOf (<var>O</var>, <var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinarysetprototypeof">#</a></span></span></h1>
        <p>When the abstract operation OrdinarySetPrototypeOf is called with Object <var>O</var> and value <var>V</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: Either <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is Object or <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is Null.</li><li>Let <var>extensible</var> be <var>O</var>.[[Extensible]].</li><li>Let <var>current</var> be <var>O</var>.[[Prototype]].</li><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>V</var>, <var>current</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>extensible</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>p</var> be <var>V</var>.</li><li>Let <var>done</var> be <emu-val>false</emu-val>.</li><li>Repeat while <var>done</var> is <emu-val>false</emu-val>,<ol><li>If <var>p</var> is <emu-val>null</emu-val>, let <var>done</var> be <emu-val>true</emu-val>.</li><li>Else if <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>p</var>, <var>O</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Else,<ol><li>If the [[GetPrototypeOf]] internal method of <var>p</var> is not the ordinary object internal method defined in <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof">9.1.1</a></emu-xref>, let <var>done</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>p</var> be <var>p</var>.[[Prototype]].</li></ol></li></ol></li><li>Set <var>O</var>.[[Prototype]] to <var>V</var>.</li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>The loop in step 8 guarantees that there will be no 
circularities in any prototype chain that only includes objects that use
 the ordinary object definitions for [[GetPrototypeOf]] and 
[[SetPrototypeOf]].</p>
        </emu-note>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.3" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-isextensible">
      <h1><span class="secnum">9.1.3</span>[[IsExtensible]] ( )<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-isextensible">#</a></span></span></h1>
      <p>When the [[IsExtensible]] internal method of <var>O</var> is called, the following steps are taken:</p>
      <emu-alg><ol><li>Return ! <emu-xref aoid="OrdinaryIsExtensible"><a href="#sec-ordinaryisextensible">OrdinaryIsExtensible</a></emu-xref>(<var>O</var>).
      </li></ol></emu-alg>

      <emu-clause id="sec-ordinaryisextensible" aoid="OrdinaryIsExtensible">
        <h1><span class="secnum">9.1.3.1</span>OrdinaryIsExtensible (<var>O</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinaryisextensible">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryIsExtensible is called with Object <var>O</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Return <var>O</var>.[[Extensible]].
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.4" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-preventextensions">
      <h1><span class="secnum">9.1.4</span>[[PreventExtensions]] ( )<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-preventextensions">#</a></span></span></h1>
      <p>When the [[PreventExtensions]] internal method of <var>O</var> is called, the following steps are taken:</p>
      <emu-alg><ol><li>Return ! <emu-xref aoid="OrdinaryPreventExtensions"><a href="#sec-ordinarypreventextensions">OrdinaryPreventExtensions</a></emu-xref>(<var>O</var>).
      </li></ol></emu-alg>

      <emu-clause id="sec-ordinarypreventextensions" aoid="OrdinaryPreventExtensions">
        <h1><span class="secnum">9.1.4.1</span>OrdinaryPreventExtensions (<var>O</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinarypreventextensions">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryPreventExtensions is called with Object <var>O</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Set <var>O</var>.[[Extensible]] to <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.5" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-getownproperty-p">
      <h1><span class="secnum">9.1.5</span>[[GetOwnProperty]] (<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-getownproperty-p">#</a></span></span></h1>
      <p>When the [[GetOwnProperty]] internal method of <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Return ! <emu-xref aoid="OrdinaryGetOwnProperty"><a href="#sec-ordinarygetownproperty">OrdinaryGetOwnProperty</a></emu-xref>(<var>O</var>, <var>P</var>).
      </li></ol></emu-alg>

      <!-- es6num="9.1.5.1" -->
      <emu-clause id="sec-ordinarygetownproperty" aoid="OrdinaryGetOwnProperty">
        <h1><span class="secnum">9.1.5.1</span>OrdinaryGetOwnProperty (<var>O</var>, <var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinarygetownproperty">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryGetOwnProperty is called with Object <var>O</var> and with property key <var>P</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>O</var> does not have an own property with key <var>P</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>D</var> be a newly created <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> with no fields.</li><li>Let <var>X</var> be <var>O</var>'s own property whose key is <var>P</var>.</li><li>If <var>X</var> is a data property, then<ol><li>Set <var>D</var>.[[Value]] to the value of <var>X</var>'s [[Value]] attribute.</li><li>Set <var>D</var>.[[Writable]] to the value of <var>X</var>'s [[Writable]] attribute.</li></ol></li><li>Else <var>X</var> is an accessor property,<ol><li>Set <var>D</var>.[[Get]] to the value of <var>X</var>'s [[Get]] attribute.</li><li>Set <var>D</var>.[[Set]] to the value of <var>X</var>'s [[Set]] attribute.</li></ol></li><li>Set <var>D</var>.[[Enumerable]] to the value of <var>X</var>'s [[Enumerable]] attribute.</li><li>Set <var>D</var>.[[Configurable]] to the value of <var>X</var>'s [[Configurable]] attribute.</li><li>Return <var>D</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.6" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc">
      <h1><span class="secnum">9.1.6</span>[[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc">#</a></span></span></h1>
      <p>When the [[DefineOwnProperty]] internal method of <var>O</var> is called with property key <var>P</var> and <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Return ? <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Desc</var>).
      </li></ol></emu-alg>

      <!-- es6num="9.1.6.1" -->
      <emu-clause id="sec-ordinarydefineownproperty" aoid="OrdinaryDefineOwnProperty">
        <h1><span class="secnum">9.1.6.1</span>OrdinaryDefineOwnProperty (<var>O</var>, <var>P</var>, <var>Desc</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinarydefineownproperty">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryDefineOwnProperty is called with Object <var>O</var>, property key <var>P</var>, and <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Let <var>current</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>Let <var>extensible</var> be <var>O</var>.[[Extensible]].</li><li>Return <emu-xref aoid="ValidateAndApplyPropertyDescriptor"><a href="#sec-validateandapplypropertydescriptor">ValidateAndApplyPropertyDescriptor</a></emu-xref>(<var>O</var>, <var>P</var>, <var>extensible</var>, <var>Desc</var>, <var>current</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.1.6.2" -->
      <emu-clause id="sec-iscompatiblepropertydescriptor" aoid="IsCompatiblePropertyDescriptor">
        <h1><span class="secnum">9.1.6.2</span>IsCompatiblePropertyDescriptor (<var>Extensible</var>, <var>Desc</var>, <var>Current</var>)<span class="utils"><span class="anchor"><a href="#sec-iscompatiblepropertydescriptor">#</a></span></span></h1>
        <p>When the abstract operation IsCompatiblePropertyDescriptor is called with Boolean value <var>Extensible</var>, and Property Descriptors <var>Desc</var>, and <var>Current</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Return <emu-xref aoid="ValidateAndApplyPropertyDescriptor"><a href="#sec-validateandapplypropertydescriptor">ValidateAndApplyPropertyDescriptor</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>undefined</emu-val>, <var>Extensible</var>, <var>Desc</var>, <var>Current</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.1.6.3" -->
      <emu-clause id="sec-validateandapplypropertydescriptor" aoid="ValidateAndApplyPropertyDescriptor">
        <h1><span class="secnum">9.1.6.3</span>ValidateAndApplyPropertyDescriptor (<var>O</var>, <var>P</var>, <var>extensible</var>, <var>Desc</var>, <var>current</var>)<span class="utils"><span class="anchor"><a href="#sec-validateandapplypropertydescriptor">#</a></span></span></h1>
        <p>When the abstract operation ValidateAndApplyPropertyDescriptor is called with Object <var>O</var>, property key <var>P</var>, Boolean value <var>extensible</var>, and Property Descriptors <var>Desc</var>, and <var>current</var>, the following steps are taken:</p>
        <emu-note><span class="note">Note</span>
          <p>If <emu-val>undefined</emu-val> is passed as the <var>O</var> argument only validation is performed and no object updates are performed.</p>
        </emu-note>
        <emu-alg><ol><li>Assert: If <var>O</var> is not <emu-val>undefined</emu-val>, then <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>current</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>extensible</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Assert: <var>extensible</var> is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid="IsGenericDescriptor"><a href="#sec-isgenericdescriptor">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val> or <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, create an own data property named <var>P</var> of object <var>O</var> whose [[Value]], [[Writable]], [[Enumerable]] and [[Configurable]] attribute values are described by <var>Desc</var>. If the value of an attribute field of <var>Desc</var> is absent, the attribute of the newly created property is set to its default value.</li></ol></li><li>Else <var>Desc</var> must be an accessor <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref>,<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, create an own accessor property named <var>P</var> of object <var>O</var> whose [[Get]], [[Set]], [[Enumerable]] and [[Configurable]] attribute values are described by <var>Desc</var>. If the value of an attribute field of <var>Desc</var> is absent, the attribute of the newly created property is set to its default value.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>, if every field in <var>Desc</var> is absent.</li><li>If the [[Configurable]] field of <var>current</var> is <emu-val>false</emu-val>, then<ol><li>Return <emu-val>false</emu-val>, if the [[Configurable]] field of <var>Desc</var> is present and its value is <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>, if the [[Enumerable]] field of <var>Desc</var> is present and the [[Enumerable]] fields of <var>current</var> and <var>Desc</var> are the Boolean negation of each other.</li></ol></li><li>If <emu-xref aoid="IsGenericDescriptor"><a href="#sec-isgenericdescriptor">IsGenericDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, no further validation is required.</li><li>Else if <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>current</var>) and <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) have different results, then<ol><li>Return <emu-val>false</emu-val>, if the [[Configurable]] field of <var>current</var> is <emu-val>false</emu-val>.</li><li>If <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>current</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, convert the property named <var>P</var> of object <var>O</var>
 from a data property to an accessor property. Preserve the existing 
values of the converted property's [[Configurable]] and [[Enumerable]] 
attributes and set the rest of the property's attributes to their 
default values.</li></ol></li><li>Else,<ol><li>If <var>O</var> is not <emu-val>undefined</emu-val>, convert the property named <var>P</var> of object <var>O</var>
 from an accessor property to a data property. Preserve the existing 
values of the converted property's [[Configurable]] and [[Enumerable]] 
attributes and set the rest of the property's attributes to their 
default values.</li></ol></li></ol></li><li>Else if <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>current</var>) and <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) are both <emu-val>true</emu-val>, then<ol><li>If the [[Configurable]] field of <var>current</var> is <emu-val>false</emu-val>, then<ol><li>If the [[Writable]] field of <var>current</var> is <emu-val>false</emu-val>, then<ol><li>Return <emu-val>false</emu-val>, if the [[Writable]] field of <var>Desc</var> is present and the [[Writable]] field of <var>Desc</var> is <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>, if the [[Value]] field of <var>Desc</var> is present and <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>Desc</var>.[[Value]], <var>current</var>.[[Value]]) is <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li></ol></li><li>Else <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>current</var>) and <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) are both <emu-val>true</emu-val>,<ol><li>If the [[Configurable]] field of <var>current</var> is <emu-val>false</emu-val>, then<ol><li>Return <emu-val>false</emu-val>, if the [[Set]] field of <var>Desc</var> is present and <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>Desc</var>.[[Set]], <var>current</var>.[[Set]]) is <emu-val>false</emu-val>.</li><li>Return <emu-val>false</emu-val>, if the [[Get]] field of <var>Desc</var> is present and <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>Desc</var>.[[Get]], <var>current</var>.[[Get]]) is <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>If <var>O</var> is not <emu-val>undefined</emu-val>, then<ol><li>For each field of <var>Desc</var> that is present, set the corresponding attribute of the property named <var>P</var> of object <var>O</var> to the value of the field.</li></ol></li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.7" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p">
      <h1><span class="secnum">9.1.7</span>[[HasProperty]](<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p">#</a></span></span></h1>
      <p>When the [[HasProperty]] internal method of <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Return ? <emu-xref aoid="OrdinaryHasProperty"><a href="#sec-ordinaryhasproperty">OrdinaryHasProperty</a></emu-xref>(<var>O</var>, <var>P</var>).
      </li></ol></emu-alg>

      <!-- es6num="9.1.7.1" -->
      <emu-clause id="sec-ordinaryhasproperty" aoid="OrdinaryHasProperty">
        <h1><span class="secnum">9.1.7.1</span>OrdinaryHasProperty (<var>O</var>, <var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinaryhasproperty">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryHasProperty is called with Object <var>O</var> and with property key <var>P</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>hasOwn</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>hasOwn</var> is not <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>parent</var> be ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>parent</var> is not <emu-val>null</emu-val>, then<ol><li>Return ? <var>parent</var>.[[HasProperty]](<var>P</var>).</li></ol></li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.8" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver">
      <h1><span class="secnum">9.1.8</span>[[Get]] (<var>P</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver">#</a></span></span></h1>
      <p>When the [[Get]] internal method of <var>O</var> is called with property key <var>P</var> and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>

      <emu-alg><ol><li>Return ? <emu-xref aoid="OrdinaryGet"><a href="#sec-ordinaryget">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).
      </li></ol></emu-alg>

      <emu-clause id="sec-ordinaryget" aoid="OrdinaryGet">
        <h1><span class="secnum">9.1.8.1</span>OrdinaryGet (<var>O</var>, <var>P</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinaryget">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryGet is called with Object <var>O</var>, property key <var>P</var>, and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>

        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>parent</var> be ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>parent</var> is <emu-val>null</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return ? <var>parent</var>.[[Get]](<var>P</var>, <var>Receiver</var>).</li></ol></li><li>If <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>desc</var>) is <emu-val>true</emu-val>, return <var>desc</var>.[[Value]].</li><li>Assert: <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>desc</var>) is <emu-val>true</emu-val>.</li><li>Let <var>getter</var> be <var>desc</var>.[[Get]].</li><li>If <var>getter</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>getter</var>, <var>Receiver</var>).
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.9" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-set-p-v-receiver">
      <h1><span class="secnum">9.1.9</span>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-set-p-v-receiver">#</a></span></span></h1>
      <p>When the [[Set]] internal method of <var>O</var> is called with property key <var>P</var>, value <var>V</var>, and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Return ? <emu-xref aoid="OrdinarySet"><a href="#sec-ordinaryset">OrdinarySet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>).
      </li></ol></emu-alg>

      <emu-clause id="sec-ordinaryset" aoid="OrdinarySet">
        <h1><span class="secnum">9.1.9.1</span>OrdinarySet (<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinaryset">#</a></span></span></h1>
        <p>When the abstract operation OrdinarySet is called with Object <var>O</var>, property key <var>P</var>, value <var>V</var>, and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>

        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>ownDesc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>ownDesc</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>parent</var> be ? <var>O</var>.[[GetPrototypeOf]]().</li><li>If <var>parent</var> is not <emu-val>null</emu-val>, then<ol><li>Return ? <var>parent</var>.[[Set]](<var>P</var>, <var>V</var>, <var>Receiver</var>).</li></ol></li><li>Else,<ol><li>Let <var>ownDesc</var> be the PropertyDescriptor{[[Value]]: <emu-val>undefined</emu-val>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}.</li></ol></li></ol></li><li>If <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>ownDesc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>ownDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>Receiver</var>) is not Object, return <emu-val>false</emu-val>.</li><li>Let <var>existingDescriptor</var> be ? <var>Receiver</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>existingDescriptor</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>existingDescriptor</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>existingDescriptor</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>valueDesc</var> be the PropertyDescriptor{[[Value]]: <var>V</var>}.</li><li>Return ? <var>Receiver</var>.[[DefineOwnProperty]](<var>P</var>, <var>valueDesc</var>).</li></ol></li><li>Else <var>Receiver</var> does not currently have a property <var>P</var>,<ol><li>Return ? <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>Receiver</var>, <var>P</var>, <var>V</var>).</li></ol></li></ol></li><li>Assert: <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>ownDesc</var>) is <emu-val>true</emu-val>.</li><li>Let <var>setter</var> be <var>ownDesc</var>.[[Set]].</li><li>If <var>setter</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>.</li><li>Perform ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>setter</var>, <var>Receiver</var>, Â« <var>V</var> Â»).</li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.10" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-delete-p">
      <h1><span class="secnum">9.1.10</span>[[Delete]] (<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-delete-p">#</a></span></span></h1>
      <p>When the [[Delete]] internal method of <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Return ? <emu-xref aoid="OrdinaryDelete"><a href="#sec-ordinarydelete">OrdinaryDelete</a></emu-xref>(<var>O</var>, <var>P</var>).
      </li></ol></emu-alg>

      <emu-clause id="sec-ordinarydelete" aoid="OrdinaryDelete">
        <h1><span class="secnum">9.1.10.1</span>OrdinaryDelete (<var>O</var>, <var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinarydelete">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryDelete is called with Object <var>O</var> and property key <var>P</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>desc</var> be ? <var>O</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>desc</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Remove the own property with name <var>P</var> from <var>O</var>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.12" -->
    <emu-clause id="sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys">
      <h1><span class="secnum">9.1.11</span>[[OwnPropertyKeys]] ( )<span class="utils"><span class="anchor"><a href="#sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys">#</a></span></span></h1>
      <p>When the [[OwnPropertyKeys]] internal method of <var>O</var> is called, the following steps are taken:</p>
      <emu-alg><ol><li>Return ! <emu-xref aoid="OrdinaryOwnPropertyKeys"><a href="#sec-ordinaryownpropertykeys">OrdinaryOwnPropertyKeys</a></emu-xref>(<var>O</var>).
      </li></ol></emu-alg>

      <emu-clause id="sec-ordinaryownpropertykeys" aoid="OrdinaryOwnPropertyKeys">
        <h1><span class="secnum">9.1.11.1</span>OrdinaryOwnPropertyKeys (<var>O</var>)<span class="utils"><span class="anchor"><a href="#sec-ordinaryownpropertykeys">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryOwnPropertyKeys is called with Object <var>O</var>, the following steps are taken:</p>

        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>For each own property key <var>P</var> of <var>O</var> that is an integer index, in ascending numeric index order<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> that is a String but is not an integer index, in ascending chronological order of property creation<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> that is a Symbol, in ascending chronological order of property creation<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.1.13" -->
    <emu-clause id="sec-objectcreate" aoid="ObjectCreate">
      <h1><span class="secnum">9.1.12</span>ObjectCreate (<var>proto</var> [ , <var>internalSlotsList</var> ])<span class="utils"><span class="anchor"><a href="#sec-objectcreate">#</a></span></span></h1>
      <p>The abstract operation ObjectCreate with argument <var>proto</var> (an object or null) is used to specify the runtime creation of new ordinary objects. The optional argument <var>internalSlotsList</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of the names of additional internal slots that must be defined as part of the object. If the list is not provided, a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> is used. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>If <var>internalSlotsList</var> was not provided, let <var>internalSlotsList</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Let <var>obj</var> be a newly created object with an internal slot for each name in <var>internalSlotsList</var>.</li><li>Set <var>obj</var>'s essential internal methods to the default ordinary object definitions specified in <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>.</li><li>Set <var>obj</var>.[[Prototype]] to <var>proto</var>.</li><li>Set <var>obj</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Return <var>obj</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.1.14" -->
    <emu-clause id="sec-ordinarycreatefromconstructor" aoid="OrdinaryCreateFromConstructor">
      <h1><span class="secnum">9.1.13</span>OrdinaryCreateFromConstructor ( <var>constructor</var>, <var>intrinsicDefaultProto</var> [ , <var>internalSlotsList</var> ] )<span class="utils"><span class="anchor"><a href="#sec-ordinarycreatefromconstructor">#</a></span></span></h1>
      <p>The abstract operation OrdinaryCreateFromConstructor creates an
 ordinary object whose [[Prototype]] value is retrieved from a 
constructor's <code>prototype</code> property, if it exists. Otherwise the intrinsic named by <var>intrinsicDefaultProto</var> is used for [[Prototype]]. The optional <var>internalSlotsList</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of the names of additional internal slots that must be defined as part of the object. If the list is not provided, a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> is used. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <var>intrinsicDefaultProto</var> is a 
String value that is this specification's name of an intrinsic object. 
The corresponding object must be an intrinsic that is intended to be 
used as the [[Prototype]] value of an object.</li><li>Let <var>proto</var> be ? <emu-xref aoid="GetPrototypeFromConstructor"><a href="#sec-getprototypefromconstructor">GetPrototypeFromConstructor</a></emu-xref>(<var>constructor</var>, <var>intrinsicDefaultProto</var>).</li><li>Return <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<var>proto</var>, <var>internalSlotsList</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.1.15" -->
    <emu-clause id="sec-getprototypefromconstructor" aoid="GetPrototypeFromConstructor">
      <h1><span class="secnum">9.1.14</span>GetPrototypeFromConstructor ( <var>constructor</var>, <var>intrinsicDefaultProto</var> )<span class="utils"><span class="anchor"><a href="#sec-getprototypefromconstructor">#</a></span></span></h1>
      <p>The abstract operation GetPrototypeFromConstructor determines 
the [[Prototype]] value that should be used to create an object 
corresponding to a specific constructor. The value is retrieved from the
 constructor's <code>prototype</code> property, if it exists. Otherwise the intrinsic named by <var>intrinsicDefaultProto</var> is used for [[Prototype]]. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>Assert: <var>intrinsicDefaultProto</var> is a 
String value that is this specification's name of an intrinsic object. 
The corresponding object must be an intrinsic that is intended to be 
used as the [[Prototype]] value of an object.</li><li>Assert: <emu-xref aoid="IsCallable"><a href="#sec-iscallable">IsCallable</a></emu-xref>(<var>constructor</var>) is <emu-val>true</emu-val>.</li><li>Let <var>proto</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>constructor</var>, <code>"prototype"</code>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>proto</var>) is not Object, then<ol><li>Let <var>realm</var> be ? <emu-xref aoid="GetFunctionRealm"><a href="#sec-getfunctionrealm">GetFunctionRealm</a></emu-xref>(<var>constructor</var>).</li><li>Let <var>proto</var> be <var>realm</var>'s intrinsic object named <var>intrinsicDefaultProto</var>.</li></ol></li><li>Return <var>proto</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>If <var>constructor</var> does not supply a [[Prototype]] value, the default value that is used is obtained from the <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> of the <var>constructor</var> function rather than from the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="9.2" -->
  <emu-clause id="sec-ecmascript-function-objects">
    <h1><span class="secnum">9.2</span>ECMAScript Function Objects<span class="utils"><span class="anchor"><a href="#sec-ecmascript-function-objects">#</a></span></span></h1>
    <p>ECMAScript function objects encapsulate parameterized ECMAScript 
code closed over a lexical environment and support the dynamic 
evaluation of that code. An ECMAScript function object is an ordinary 
object and has the same internal slots and the same internal methods as 
other ordinary objects. The code of an ECMAScript function object may be
 either <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> (<emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">10.2.1</a></emu-xref>) or <emu-xref href="#non-strict-code"><a href="#non-strict-code">non-strict code</a></emu-xref>. An ECMAScript function object whose code is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> is called a  <dfn id="strict-function">strict function</dfn>. One whose code is not <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> is called a  <dfn id="non-strict-function">non-strict function</dfn>.</p>
    <p>ECMAScript function objects have the additional internal slots listed in  <emu-xref href="#table-27"><a href="#table-27">Table 27</a></emu-xref>.</p>
    <emu-table id="table-27" caption="Internal Slots of ECMAScript Function Objects"><figure><figcaption>Table 27: Internal Slots of ECMAScript Function Objects</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Internal Slot
          
          </th>
          <th>
            Type
          
          </th>
          <th>
            Description
          
          </th>
        </tr>
        <tr>
          <td>
            [[Environment]]
          
          </td>
          <td>
            <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref>
          
          </td>
          <td>
            The <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> that the function was closed over. Used as the outer environment when evaluating the code of the function.
          
          </td>
        </tr>
        <tr>
          <td>
            [[FormalParameters]]
          
          </td>
          <td>
            Parse Node
          
          </td>
          <td>
            The root parse node of the source text that defines the function's formal parameter list.
          
          </td>
        </tr>
        <tr>
          <td>
            [[FunctionKind]]
          
          </td>
          <td>
            String
          
          </td>
          <td>
            Either <code>"normal"</code>, <code>"classConstructor"</code> or <code>"generator"</code>.
          
          </td>
        </tr>
        <tr>
          <td>
            [[ECMAScriptCode]]
          
          </td>
          <td>
            Parse Node
          
          </td>
          <td>
            The root parse node of the source text that defines the function's body.
          
          </td>
        </tr>
        <tr>
          <td>
            [[ConstructorKind]]
          
          </td>
          <td>
            String
          
          </td>
          <td>
            Either <code>"base"</code> or <code>"derived"</code>.
          
          </td>
        </tr>
        <tr>
          <td>
            [[Realm]]
          
          </td>
          <td>
            <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref>
          
          </td>
          <td>
            The <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.
          
          </td>
        </tr>
        <tr>
          <td>
            [[ScriptOrModule]]
          
          </td>
          <td>
            <emu-xref href="#script-record"><a href="#script-record">Script Record</a></emu-xref> or <emu-xref href="#sec-abstract-module-records"><a href="#sec-abstract-module-records">Module Record</a></emu-xref>
          
          </td>
          <td>
            The script or module in which the function was created.
          
          </td>
        </tr>
        <tr>
          <td>
            [[ThisMode]]
          
          </td>
          <td>
            (lexical, strict, global)
          
          </td>
          <td>
            Defines how <code>this</code> references are interpreted within the formal parameters and code body of the function. <emu-const>lexical</emu-const> means that <code>this</code> refers to the <emu-val>this</emu-val> value of a lexically enclosing function. <emu-const>strict</emu-const> means that the <emu-val>this</emu-val> value is used exactly as provided by an invocation of the function. <emu-const>global</emu-const> means that a <emu-val>this</emu-val> value of <emu-val>undefined</emu-val> is interpreted as a reference to the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref>.
          
          </td>
        </tr>
        <tr>
          <td>
            [[Strict]]
          
          </td>
          <td>
            Boolean
          
          </td>
          <td>
            <emu-val>true</emu-val> if this is a <emu-xref href="#strict-function"><a href="#strict-function">strict function</a></emu-xref>, <emu-val>false</emu-val> if this is a <emu-xref href="#non-strict-function"><a href="#non-strict-function">non-strict function</a></emu-xref>.
          
          </td>
        </tr>
        <tr>
          <td>
            [[HomeObject]]
          
          </td>
          <td>
            Object
          
          </td>
          <td>
            If the function uses <code>super</code>, this is the object whose [[GetPrototypeOf]] provides the object where <code>super</code> property lookups begin.
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>
    <p>All ECMAScript function objects have the [[Call]] internal method
 defined here. ECMAScript functions that are also constructors in 
addition have the [[Construct]] internal method.</p>

    <!-- es6num="9.2.1" -->
    <emu-clause id="sec-ecmascript-function-objects-call-thisargument-argumentslist">
      <h1><span class="secnum">9.2.1</span>[[Call]] ( <var>thisArgument</var>, <var>argumentsList</var>)<span class="utils"><span class="anchor"><a href="#sec-ecmascript-function-objects-call-thisargument-argumentslist">#</a></span></span></h1>
      <p>The [[Call]] internal method for an ECMAScript function object <var>F</var> is called with parameters <var>thisArgument</var> and <var>argumentsList</var>, a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>
      <emu-alg><ol><li>Assert: <var>F</var> is an ECMAScript function object.</li><li>If <var>F</var>.[[FunctionKind]] is <code>"classConstructor"</code>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>callerContext</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be <emu-xref aoid="PrepareForOrdinaryCall"><a href="#sec-prepareforordinarycall">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <emu-val>undefined</emu-val>).</li><li>Assert: <var>calleeContext</var> is now the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Perform <emu-xref aoid="OrdinaryCallBindThis"><a href="#sec-ordinarycallbindthis">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>result</var> be <emu-xref aoid="OrdinaryCallEvaluateBody"><a href="#sec-ordinarycallevaluatebody">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>When <var>calleeContext</var> is removed from the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> in step 8 it must not be destroyed if it is suspended and retained for later resumption by an accessible generator object.</p>
      </emu-note>

      <!-- es6num="9.2.1.1" -->
      <emu-clause id="sec-prepareforordinarycall" aoid="PrepareForOrdinaryCall">
        <h1><span class="secnum">9.2.1.1</span>PrepareForOrdinaryCall ( <var>F</var>, <var>newTarget</var> )<span class="utils"><span class="anchor"><a href="#sec-prepareforordinarycall">#</a></span></span></h1>
        <p>When the abstract operation PrepareForOrdinaryCall is called with function object <var>F</var> and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>newTarget</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>newTarget</var>) is Undefined or Object.</li><li>Let <var>callerContext</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>calleeContext</var> be a new ECMAScript code <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set the <emu-xref href="#realm"><a href="#realm">Realm</a></emu-xref> of <var>calleeContext</var> to <var>calleeRealm</var>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <var>F</var>.[[ScriptOrModule]].</li><li>Let <var>localEnv</var> be <emu-xref aoid="NewFunctionEnvironment"><a href="#sec-newfunctionenvironment">NewFunctionEnvironment</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>localEnv</var>.</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>NOTE Any exception objects produced after this point are associated with <var>calleeRealm</var>.</li><li>Return <var>calleeContext</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.2.1.2" -->
      <emu-clause id="sec-ordinarycallbindthis" aoid="OrdinaryCallBindThis">
        <h1><span class="secnum">9.2.1.2</span>OrdinaryCallBindThis ( <var>F</var>, <var>calleeContext</var>, <var>thisArgument</var> )<span class="utils"><span class="anchor"><a href="#sec-ordinarycallbindthis">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryCallBindThis is called with function object <var>F</var>, <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> <var>calleeContext</var>, and ECMAScript value <var>thisArgument</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Let <var>thisMode</var> be <var>F</var>.[[ThisMode]].</li><li>If <var>thisMode</var> is <emu-const>lexical</emu-const>, return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Let <var>localEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>If <var>thisMode</var> is <emu-const>strict</emu-const>, let <var>thisValue</var> be <var>thisArgument</var>.</li><li>Else,<ol><li>If <var>thisArgument</var> is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Let <var>globalEnv</var> be <var>calleeRealm</var>.[[GlobalEnv]].</li><li>Let <var>globalEnvRec</var> be <var>globalEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>thisValue</var> be <var>globalEnvRec</var>.[[GlobalThisValue]].</li></ol></li><li>Else,<ol><li>Let <var>thisValue</var> be ! <emu-xref aoid="ToObject"><a href="#sec-toobject">ToObject</a></emu-xref>(<var>thisArgument</var>).</li><li>NOTE <emu-xref aoid="ToObject"><a href="#sec-toobject">ToObject</a></emu-xref> produces wrapper objects using <var>calleeRealm</var>.</li></ol></li></ol></li><li>Let <var>envRec</var> be <var>localEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Assert: The next step never returns an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref> because <var>envRec</var>.[[ThisBindingStatus]] is not <code>"initialized"</code>.</li><li>Return <var>envRec</var>.BindThisValue(<var>thisValue</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.2.1.3" -->
      <emu-clause id="sec-ordinarycallevaluatebody" aoid="OrdinaryCallEvaluateBody">
        <h1><span class="secnum">9.2.1.3</span>OrdinaryCallEvaluateBody ( <var>F</var>, <var>argumentsList</var> )<span class="utils"><span class="anchor"><a href="#sec-ordinarycallevaluatebody">#</a></span></span></h1>
        <p>When the abstract operation OrdinaryCallEvaluateBody is called with function object <var>F</var> and <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> <var>argumentsList</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Perform ? <emu-xref aoid="FunctionDeclarationInstantiation"><a href="#sec-functiondeclarationinstantiation">FunctionDeclarationInstantiation</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Return the result of EvaluateBody of the parsed code that is <var>F</var>.[[ECMAScriptCode]] passing <var>F</var> as the argument.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.2.2" -->
    <emu-clause id="sec-ecmascript-function-objects-construct-argumentslist-newtarget">
      <h1><span class="secnum">9.2.2</span>[[Construct]] ( <var>argumentsList</var>, <var>newTarget</var>)<span class="utils"><span class="anchor"><a href="#sec-ecmascript-function-objects-construct-argumentslist-newtarget">#</a></span></span></h1>
      <p>The [[Construct]] internal method for an ECMAScript Function object <var>F</var> is called with parameters <var>argumentsList</var> and <var>newTarget</var>. <var>argumentsList</var> is a possibly empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>
      <emu-alg><ol><li>Assert: <var>F</var> is an ECMAScript function object.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>newTarget</var>) is Object.</li><li>Let <var>callerContext</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>kind</var> be <var>F</var>.[[ConstructorKind]].</li><li>If <var>kind</var> is <code>"base"</code>, then<ol><li>Let <var>thisArgument</var> be ? <emu-xref aoid="OrdinaryCreateFromConstructor"><a href="#sec-ordinarycreatefromconstructor">OrdinaryCreateFromConstructor</a></emu-xref>(<var>newTarget</var>, <code>"%ObjectPrototype%"</code>).</li></ol></li><li>Let <var>calleeContext</var> be <emu-xref aoid="PrepareForOrdinaryCall"><a href="#sec-prepareforordinarycall">PrepareForOrdinaryCall</a></emu-xref>(<var>F</var>, <var>newTarget</var>).</li><li>Assert: <var>calleeContext</var> is now the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>If <var>kind</var> is <code>"base"</code>, perform <emu-xref aoid="OrdinaryCallBindThis"><a href="#sec-ordinarycallbindthis">OrdinaryCallBindThis</a></emu-xref>(<var>F</var>, <var>calleeContext</var>, <var>thisArgument</var>).</li><li>Let <var>constructorEnv</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>constructorEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>result</var> be <emu-xref aoid="OrdinaryCallEvaluateBody"><a href="#sec-ordinarycallevaluatebody">OrdinaryCallEvaluateBody</a></emu-xref>(<var>F</var>, <var>argumentsList</var>).</li><li>Remove <var>calleeContext</var> from the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>If <var>result</var>.[[Type]] is <emu-const>return</emu-const>, then<ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>result</var>.[[Value]]) is Object, return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>result</var>.[[Value]]).</li><li>If <var>kind</var> is <code>"base"</code>, return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>thisArgument</var>).</li><li>If <var>result</var>.[[Value]] is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else, <emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>result</var>).</li><li>Return ? <var>envRec</var>.GetThisBinding().
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.2.3" -->
    <emu-clause id="sec-functionallocate" aoid="FunctionAllocate">
      <h1><span class="secnum">9.2.3</span>FunctionAllocate (<var>functionPrototype</var>, <var>strict</var>, <var>functionKind</var>)<span class="utils"><span class="anchor"><a href="#sec-functionallocate">#</a></span></span></h1>
      <p>The abstract operation FunctionAllocate requires the three arguments <var>functionPrototype</var>, <var>strict</var> and <var>functionKind</var>. FunctionAllocate performs the following steps:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>functionPrototype</var>) is Object.</li><li>Assert: <var>functionKind</var> is either <code>"normal"</code>, <code>"non-constructor"</code> or <code>"generator"</code>.</li><li>If <var>functionKind</var> is <code>"normal"</code>, let <var>needsConstruct</var> be <emu-val>true</emu-val>.</li><li>Else, let <var>needsConstruct</var> be <emu-val>false</emu-val>.</li><li>If <var>functionKind</var> is <code>"non-constructor"</code>, let <var>functionKind</var> be <code>"normal"</code>.</li><li>Let <var>F</var> be a newly created ECMAScript function object with the internal slots listed in <emu-xref href="#table-27"><a href="#table-27">Table 27</a></emu-xref>. All of those internal slots are initialized to <emu-val>undefined</emu-val>.</li><li>Set <var>F</var>'s essential internal methods to the default ordinary object definitions specified in <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>.</li><li>Set <var>F</var>'s [[Call]] internal method to the definition specified in <emu-xref href="#sec-ecmascript-function-objects-call-thisargument-argumentslist"><a href="#sec-ecmascript-function-objects-call-thisargument-argumentslist">9.2.1</a></emu-xref>.</li><li>If <var>needsConstruct</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>F</var>'s [[Construct]] internal method to the definition specified in <emu-xref href="#sec-ecmascript-function-objects-construct-argumentslist-newtarget"><a href="#sec-ecmascript-function-objects-construct-argumentslist-newtarget">9.2.2</a></emu-xref>.</li><li>Set <var>F</var>.[[ConstructorKind]] to <code>"base"</code>.</li></ol></li><li>Set <var>F</var>.[[Strict]] to <var>strict</var>.</li><li>Set <var>F</var>.[[FunctionKind]] to <var>functionKind</var>.</li><li>Set <var>F</var>.[[Prototype]] to <var>functionPrototype</var>.</li><li>Set <var>F</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>F</var>.[[Realm]] to <emu-xref href="#current-realm"><a href="#current-realm">the current Realm Record</a></emu-xref>.</li><li>Return <var>F</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.2.4" -->
    <emu-clause id="sec-functioninitialize" aoid="FunctionInitialize">
      <h1><span class="secnum">9.2.4</span>FunctionInitialize (<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>)<span class="utils"><span class="anchor"><a href="#sec-functioninitialize">#</a></span></span></h1>
      <p>The abstract operation FunctionInitialize requires the arguments: a function object <var>F</var>, <var>kind</var> which is one of (Normal, Method, Arrow), a parameter list production specified by <var>ParameterList</var>, a body production specified by <var>Body</var>, a <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> specified by <var>Scope</var>. FunctionInitialize performs the following steps:</p>
      <emu-alg><ol><li>Assert: <var>F</var> is an extensible object that does not have a <code>length</code> own property.</li><li>Let <var>len</var> be the ExpectedArgumentCount of <var>ParameterList</var>.</li><li>Perform ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>"length"</code>, PropertyDescriptor{[[Value]]: <var>len</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}).</li><li>Let <var>Strict</var> be <var>F</var>.[[Strict]].</li><li>Set <var>F</var>.[[Environment]] to <var>Scope</var>.</li><li>Set <var>F</var>.[[FormalParameters]] to <var>ParameterList</var>.</li><li>Set <var>F</var>.[[ECMAScriptCode]] to <var>Body</var>.</li><li>Set <var>F</var>.[[ScriptOrModule]] to <emu-xref aoid="GetActiveScriptOrModule"><a href="#sec-getactivescriptormodule">GetActiveScriptOrModule</a></emu-xref>().</li><li>If <var>kind</var> is <emu-const>Arrow</emu-const>, set <var>F</var>.[[ThisMode]] to <emu-const>lexical</emu-const>.</li><li>Else if <var>Strict</var> is <emu-val>true</emu-val>, set <var>F</var>.[[ThisMode]] to <emu-const>strict</emu-const>.</li><li>Else, set <var>F</var>.[[ThisMode]] to <emu-const>global</emu-const>.</li><li>Return <var>F</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.2.5" -->
    <emu-clause id="sec-functioncreate" aoid="FunctionCreate">
      <h1><span class="secnum">9.2.5</span>FunctionCreate (<var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>Strict</var> [ , <var>prototype</var> ])<span class="utils"><span class="anchor"><a href="#sec-functioncreate">#</a></span></span></h1>
      <p>The abstract operation FunctionCreate requires the arguments: <var>kind</var> which is one of (Normal, Method, Arrow), a parameter list production specified by <var>ParameterList</var>, a body production specified by <var>Body</var>, a <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, a Boolean flag <var>Strict</var>, and optionally, an object <var>prototype</var>. FunctionCreate performs the following steps:</p>
      <emu-alg><ol><li>If the <var>prototype</var> argument was not passed, then<ol><li>Let <var>prototype</var> be the intrinsic object <emu-xref href="#sec-properties-of-the-function-prototype-object"><a href="#sec-properties-of-the-function-prototype-object">%FunctionPrototype%</a></emu-xref>.</li></ol></li><li>If <var>kind</var> is not <emu-const>Normal</emu-const>, let <var>allocKind</var> be <code>"non-constructor"</code>.</li><li>Else, let <var>allocKind</var> be <code>"normal"</code>.</li><li>Let <var>F</var> be <emu-xref aoid="FunctionAllocate"><a href="#sec-functionallocate">FunctionAllocate</a></emu-xref>(<var>prototype</var>, <var>Strict</var>, <var>allocKind</var>).</li><li>Return <emu-xref aoid="FunctionInitialize"><a href="#sec-functioninitialize">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.2.6" -->
    <emu-clause id="sec-generatorfunctioncreate" aoid="GeneratorFunctionCreate">
      <h1><span class="secnum">9.2.6</span>GeneratorFunctionCreate (<var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>, <var>Strict</var>)<span class="utils"><span class="anchor"><a href="#sec-generatorfunctioncreate">#</a></span></span></h1>
      <p>The abstract operation GeneratorFunctionCreate requires the arguments: <var>kind</var> which is one of (Normal, Method), a parameter list production specified by <var>ParameterList</var>, a body production specified by <var>Body</var>, a <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> specified by <var>Scope</var>, and a Boolean flag <var>Strict</var>. GeneratorFunctionCreate performs the following steps:</p>
      <emu-alg><ol><li>Let <var>functionPrototype</var> be the intrinsic object %Generator%.</li><li>Let <var>F</var> be <emu-xref aoid="FunctionAllocate"><a href="#sec-functionallocate">FunctionAllocate</a></emu-xref>(<var>functionPrototype</var>, <var>Strict</var>, <code>"generator"</code>).</li><li>Return <emu-xref aoid="FunctionInitialize"><a href="#sec-functioninitialize">FunctionInitialize</a></emu-xref>(<var>F</var>, <var>kind</var>, <var>ParameterList</var>, <var>Body</var>, <var>Scope</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.2.7" -->
    <emu-clause id="sec-addrestrictedfunctionproperties" aoid="AddRestrictedFunctionProperties">
      <h1><span class="secnum">9.2.7</span>AddRestrictedFunctionProperties ( <var>F</var>, <var>realm</var> )<span class="utils"><span class="anchor"><a href="#sec-addrestrictedfunctionproperties">#</a></span></span></h1>
      <p>The abstract operation AddRestrictedFunctionProperties is called with a function object <var>F</var> and <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref> <var>realm</var> as its argument. It performs the following steps:</p>
      <emu-alg><ol><li>Assert: <var>realm</var>.[[Intrinsics]].[[<emu-xref href="#sec-%throwtypeerror%"><a href="#sec-%throwtypeerror%">%ThrowTypeError%</a></emu-xref>]] exists and has been initialized.</li><li>Let <var>thrower</var> be <var>realm</var>.[[Intrinsics]].[[<emu-xref href="#sec-%throwtypeerror%"><a href="#sec-%throwtypeerror%">%ThrowTypeError%</a></emu-xref>]].</li><li>Perform ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>"caller"</code>, PropertyDescriptor {[[Get]]: <var>thrower</var>, [[Set]]: <var>thrower</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}).</li><li>Return ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>"arguments"</code>, PropertyDescriptor {[[Get]]: <var>thrower</var>, [[Set]]: <var>thrower</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}).
      </li></ol></emu-alg>

      <!-- es6num="9.2.7.1" -->
      <emu-clause id="sec-%throwtypeerror%">
        <h1><span class="secnum">9.2.7.1</span>%ThrowTypeError% ( )<span class="utils"><span class="anchor"><a href="#sec-%throwtypeerror%">#</a></span></span></h1>
        <p>The  <dfn>%ThrowTypeError%</dfn> intrinsic is an anonymous built-in function object that is defined once for each <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref>. When %ThrowTypeError% is called it performs the following steps:</p>
        <emu-alg><ol><li>Throw a <emu-val>TypeError</emu-val> exception.
        </li></ol></emu-alg>
        <p>The value of the [[Extensible]] internal slot of a %ThrowTypeError% function is <emu-val>false</emu-val>.</p>
        <p>The <code>length</code> property of a %ThrowTypeError% function has the attributes { [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.</p>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.2.8" -->
    <emu-clause id="sec-makeconstructor" aoid="MakeConstructor">
      <h1><span class="secnum">9.2.8</span>MakeConstructor (<var>F</var> [ , <var>writablePrototype</var> [ , <var>prototype</var> ] ] )<span class="utils"><span class="anchor"><a href="#sec-makeconstructor">#</a></span></span></h1>
      <p>The abstract operation MakeConstructor requires a Function argument <var>F</var> and optionally, a Boolean <var>writablePrototype</var> and an object <var>prototype</var>. If <var>prototype</var> is provided it is assumed to already contain, if needed, a <code>"constructor"</code> property whose value is <var>F</var>. This operation converts <var>F</var> into a constructor by performing the following steps:</p>
      <emu-alg><ol><li>Assert: <var>F</var> is an ECMAScript function object.</li><li>Assert: <var>F</var> has a [[Construct]] internal method.</li><li>Assert: <var>F</var> is an extensible object that does not have a <code>prototype</code> own property.</li><li>If the <var>writablePrototype</var> argument was not provided, let <var>writablePrototype</var> be <emu-val>true</emu-val>.</li><li>If the <var>prototype</var> argument was not provided, then<ol><li>Let <var>prototype</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>).</li><li>Perform ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>prototype</var>, <code>"constructor"</code>, PropertyDescriptor{[[Value]]: <var>F</var>, [[Writable]]: <var>writablePrototype</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val> }).</li></ol></li><li>Perform ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>"prototype"</code>, PropertyDescriptor{[[Value]]: <var>prototype</var>, [[Writable]]: <var>writablePrototype</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.2.9" -->
    <emu-clause id="sec-makeclassconstructor" aoid="MakeClassConstructor">
      <h1><span class="secnum">9.2.9</span>MakeClassConstructor ( <var>F</var>)<span class="utils"><span class="anchor"><a href="#sec-makeclassconstructor">#</a></span></span></h1>
      <p>The abstract operation MakeClassConstructor with argument <var>F</var> performs the following steps:</p>
      <emu-alg><ol><li>Assert: <var>F</var> is an ECMAScript function object.</li><li>Assert: <var>F</var>.[[FunctionKind]] is <code>"normal"</code>.</li><li>Set <var>F</var>.[[FunctionKind]] to <code>"classConstructor"</code>.</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.2.10" -->
    <emu-clause id="sec-makemethod" aoid="MakeMethod">
      <h1><span class="secnum">9.2.10</span>MakeMethod ( <var>F</var>, <var>homeObject</var>)<span class="utils"><span class="anchor"><a href="#sec-makemethod">#</a></span></span></h1>
      <p>The abstract operation MakeMethod with arguments <var>F</var> and <var>homeObject</var> configures <var>F</var> as a method by performing the following steps:</p>
      <emu-alg><ol><li>Assert: <var>F</var> is an ECMAScript function object.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>homeObject</var>) is Object.</li><li>Set <var>F</var>.[[HomeObject]] to <var>homeObject</var>.</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.2.11" -->
    <emu-clause id="sec-setfunctionname" aoid="SetFunctionName">
      <h1><span class="secnum">9.2.11</span>SetFunctionName (<var>F</var>, <var>name</var> [ , <var>prefix</var> ])<span class="utils"><span class="anchor"><a href="#sec-setfunctionname">#</a></span></span></h1>
      <p>The abstract operation SetFunctionName requires a Function argument <var>F</var>, a String or Symbol argument <var>name</var> and optionally a String argument <var>prefix</var>. This operation adds a <code>name</code> property to <var>F</var> by performing the following steps:</p>
      <emu-alg><ol><li>Assert: <var>F</var> is an extensible object that does not have a <code>name</code> own property.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>name</var>) is either Symbol or String.</li><li>Assert: If <var>prefix</var> was passed, then <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>prefix</var>) is String.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>name</var>) is Symbol, then<ol><li>Let <var>description</var> be <var>name</var>'s [[Description]] value.</li><li>If <var>description</var> is <emu-val>undefined</emu-val>, let <var>name</var> be the empty String.</li><li>Else, let <var>name</var> be the concatenation of <code>"["</code>, <var>description</var>, and <code>"]"</code>.</li></ol></li><li>If <var>prefix</var> was passed, then<ol><li>Let <var>name</var> be the concatenation of <var>prefix</var>, code unit 0x0020 (SPACE), and <var>name</var>.</li></ol></li><li>Return ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>"name"</code>, PropertyDescriptor{[[Value]]: <var>name</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.2.12" -->
    <emu-clause id="sec-functiondeclarationinstantiation" aoid="FunctionDeclarationInstantiation">
      <h1><span class="secnum">9.2.12</span>FunctionDeclarationInstantiation (<var>func</var>, <var>argumentsList</var>)<span class="utils"><span class="anchor"><a href="#sec-functiondeclarationinstantiation">#</a></span></span></h1>
      <emu-note><span class="note">Note 1</span>
        <p>When an <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> is established for evaluating an ECMAScript function a new function <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> is created and bindings for each formal parameter are instantiated in that <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.
 Each declaration in the function body is also instantiated. If the 
function's formal parameters do not include any default value 
initializers then the body declarations are instantiated in the same <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> as the parameters. If default value parameter initializers exist, a second <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 is created for the body declarations. Formal parameters and functions 
are initialized as part of FunctionDeclarationInstantiation. All other 
bindings are initialized during evaluation of the function body.</p>
      </emu-note>
      <p>FunctionDeclarationInstantiation is performed as follows using arguments <var>func</var> and <var>argumentsList</var>. <var>func</var> is the function object for which the <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> is being established.</p>
      <!--
        WARNING: If you add, remove, rename, or repurpose any variable names
                 within this algorithm, you may need to update
                 #sec-web-compat-functiondeclarationinstantiation accordingly.
      -->
      <emu-alg><ol><li>Let <var>calleeContext</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>env</var> be the LexicalEnvironment of <var>calleeContext</var>.</li><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>code</var> be <var>func</var>.[[ECMAScriptCode]].</li><li>Let <var>strict</var> be <var>func</var>.[[Strict]].</li><li>Let <var>formals</var> be <var>func</var>.[[FormalParameters]].</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>If <var>parameterNames</var> has any duplicate entries, let <var>hasDuplicates</var> be <emu-val>true</emu-val>. Otherwise, let <var>hasDuplicates</var> be <emu-val>false</emu-val>.</li><li>Let <var>simpleParameterList</var> be IsSimpleParameterList of <var>formals</var>.</li><li>Let <var>hasParameterExpressions</var> be ContainsExpression of <var>formals</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>code</var>.</li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>code</var>.</li><li>Let <var>lexicalNames</var> be the LexicallyDeclaredNames of <var>code</var>.</li><li>Let <var>functionNames</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order do<ol><li>If <var>d</var> is neither a <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> or a <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>, then<ol><li>Assert: <var>d</var> is either a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt> or a <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>functionNames</var>, then<ol><li>Insert <var>fn</var> as the first element of <var>functionNames</var>.</li><li>NOTE If there are multiple <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>s or <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>s for the same name, the last declaration is used.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>true</emu-val>.</li><li>If <var>func</var>.[[ThisMode]] is <emu-const>lexical</emu-const>, then<ol><li>NOTE Arrow functions never have an arguments objects.</li><li>Let <var>argumentsObjectNeeded</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else if <code>"arguments"</code> is an element of <var>parameterNames</var>, then<ol><li>Let <var>argumentsObjectNeeded</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else if <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>If <code>"arguments"</code> is an element of <var>functionNames</var> or if <code>"arguments"</code> is an element of <var>lexicalNames</var>, then<ol><li>Let <var>argumentsObjectNeeded</var> be <emu-val>false</emu-val>.</li></ol></li></ol></li><li>For each String <var>paramName</var> in <var>parameterNames</var>, do<ol><li>Let <var>alreadyDeclared</var> be <var>envRec</var>.HasBinding(<var>paramName</var>).</li><li>NOTE
 Early errors ensure that duplicate parameter names can only occur in 
non-strict functions that do not have parameter default values or rest 
parameters.</li><li>If <var>alreadyDeclared</var> is <emu-val>false</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>paramName</var>, <emu-val>false</emu-val>).</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.InitializeBinding(<var>paramName</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li></ol></li><li>If <var>argumentsObjectNeeded</var> is <emu-val>true</emu-val>, then<ol><li>If <var>strict</var> is <emu-val>true</emu-val> or if <var>simpleParameterList</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>ao</var> be <emu-xref aoid="CreateUnmappedArgumentsObject"><a href="#sec-createunmappedargumentsobject">CreateUnmappedArgumentsObject</a></emu-xref>(<var>argumentsList</var>).</li></ol></li><li>Else,<ol><li>NOTE
 mapped argument object is only provided for non-strict functions that 
don't have a rest parameter, any parameter default value initializers, 
or any destructured parameters.</li><li>Let <var>ao</var> be <emu-xref aoid="CreateMappedArgumentsObject"><a href="#sec-createmappedargumentsobject">CreateMappedArgumentsObject</a></emu-xref>(<var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>envRec</var>).</li></ol></li><li>If <var>strict</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<code>"arguments"</code>, <emu-val>false</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<code>"arguments"</code>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>envRec</var>.InitializeBinding(<code>"arguments"</code>, <var>ao</var>).</li><li>Append <code>"arguments"</code> to <var>parameterNames</var>.</li></ol></li><li>Let <var>iteratorRecord</var> be <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> {[[Iterator]]: <emu-xref aoid="CreateListIterator"><a href="#sec-createlistiterator">CreateListIterator</a></emu-xref>(<var>argumentsList</var>), [[Done]]: <emu-val>false</emu-val>}.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <emu-val>undefined</emu-val> as arguments.</li></ol></li><li>Else,<ol><li>Perform ? IteratorBindingInitialization for <var>formals</var> with <var>iteratorRecord</var> and <var>env</var> as arguments.</li></ol></li><li>If <var>hasParameterExpressions</var> is <emu-val>false</emu-val>, then<ol><li>NOTE Only a single lexical environment is needed for the parameters and top-level vars.</li><li>Let <var>instantiatedVarNames</var> be a copy of the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> <var>parameterNames</var>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>Call <var>envRec</var>.InitializeBinding(<var>n</var>, <emu-val>undefined</emu-val>).</li></ol></li></ol></li><li>Let <var>varEnv</var> be <var>env</var>.</li><li>Let <var>varEnvRec</var> be <var>envRec</var>.</li></ol></li><li>Else,<ol><li>NOTE A separate <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 is needed to ensure that closures created by expressions in the formal 
parameter list do not have visibility of declarations in the function 
body.</li><li>Let <var>varEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>env</var>).</li><li>Let <var>varEnvRec</var> be <var>varEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Set the VariableEnvironment of <var>calleeContext</var> to <var>varEnv</var>.</li><li>Let <var>instantiatedVarNames</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>For each <var>n</var> in <var>varNames</var>, do<ol><li>If <var>n</var> is not an element of <var>instantiatedVarNames</var>, then<ol><li>Append <var>n</var> to <var>instantiatedVarNames</var>.</li><li>Perform ! <var>varEnvRec</var>.CreateMutableBinding(<var>n</var>, <emu-val>false</emu-val>).</li><li>If <var>n</var> is not an element of <var>parameterNames</var> or if <var>n</var> is an element of <var>functionNames</var>, let <var>initialValue</var> be <emu-val>undefined</emu-val>.</li><li>Else,<ol><li>Let <var>initialValue</var> be ! <var>envRec</var>.GetBindingValue(<var>n</var>, <emu-val>false</emu-val>).</li></ol></li><li>Call <var>varEnvRec</var>.InitializeBinding(<var>n</var>, <var>initialValue</var>).</li><li>NOTE
 vars whose names are the same as a formal parameter, initially have the
 same value as the corresponding initialized parameter.</li></ol></li></ol></li></ol></li><li>NOTE: Annex <emu-xref href="#sec-web-compat-functiondeclarationinstantiation"><a href="#sec-web-compat-functiondeclarationinstantiation">B.3.3.1</a></emu-xref> adds additional steps at this point.</li><li>If <var>strict</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lexEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>varEnv</var>).</li><li>NOTE: Non-strict functions use a separate lexical <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for top-level lexical declarations so that a <emu-xref href="#sec-function-calls-runtime-semantics-evaluation"><a href="#sec-function-calls-runtime-semantics-evaluation">direct eval</a></emu-xref>
 can determine whether any var scoped declarations introduced by the 
eval code conflict with pre-existing top-level lexically scoped 
declarations. This is not needed for strict functions because a strict <emu-xref href="#sec-function-calls-runtime-semantics-evaluation"><a href="#sec-function-calls-runtime-semantics-evaluation">direct eval</a></emu-xref> always places all declarations into a new <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</li></ol></li><li>Else, let <var>lexEnv</var> be <var>varEnv</var>.</li><li>Let <var>lexEnvRec</var> be <var>lexEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Set the LexicalEnvironment of <var>calleeContext</var> to <var>lexEnv</var>.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var> do<ol><li>NOTE
 A lexically declared name cannot be the same as a function/generator 
declaration, formal parameter, or a var name. Lexically declared names 
are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var> do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>lexEnvRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>lexEnvRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each parsed grammar phrase <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be the result of performing InstantiateFunctionObject for <var>f</var> with argument <var>lexEnv</var>.</li><li>Perform ! <var>varEnvRec</var>.SetMutableBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 2</span>
        <p><emu-xref href="#sec-block-level-function-declarations-web-legacy-compatibility-semantics"><a href="#sec-block-level-function-declarations-web-legacy-compatibility-semantics">B.3.3</a></emu-xref>
 provides an extension to the above algorithm that is necessary for 
backwards compatibility with web browser implementations of ECMAScript 
that predate ECMAScript 2015.</p>
      </emu-note>
      <emu-note><span class="note">Note 3</span>
        <p>Parameter <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>s may contain <emu-xref href="#sec-function-calls-runtime-semantics-evaluation"><a href="#sec-function-calls-runtime-semantics-evaluation">direct eval</a></emu-xref> expressions. Any top level declarations of such evals are only visible to the eval code (<emu-xref href="#sec-types-of-source-code"><a href="#sec-types-of-source-code">10.2</a></emu-xref>). The creation of the environment for such declarations is described in  <emu-xref href="#sec-function-definitions-runtime-semantics-iteratorbindinginitialization"><a href="#sec-function-definitions-runtime-semantics-iteratorbindinginitialization">14.1.19</a></emu-xref>.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="9.3" -->
  <emu-clause id="sec-built-in-function-objects">
    <h1><span class="secnum">9.3</span>Built-in Function Objects<span class="utils"><span class="anchor"><a href="#sec-built-in-function-objects">#</a></span></span></h1>
    <p>The built-in function objects defined in this specification may be implemented as either ECMAScript function objects (<emu-xref href="#sec-ecmascript-function-objects"><a href="#sec-ecmascript-function-objects">9.2</a></emu-xref>)
 whose behaviour is provided using ECMAScript code or as implementation 
provided exotic function objects whose behaviour is provided in some 
other manner. In either case, the effect of calling such functions must 
conform to their specifications. An implementation may also provide 
additional built-in function objects that are not defined in this 
specification.</p>
    <p>If a built-in function object is implemented as an exotic object it must have the ordinary object behaviour specified in  <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>. All such exotic function objects also have [[Prototype]], [[Extensible]], [[Realm]], and [[ScriptOrModule]] internal slots.</p>
    <p>Unless otherwise specified every built-in function object has the <emu-xref href="#sec-properties-of-the-function-prototype-object"><a href="#sec-properties-of-the-function-prototype-object">%FunctionPrototype%</a></emu-xref> object as the initial value of its [[Prototype]] internal slot.</p>
    <p>The behaviour specified for each built-in function via algorithm 
steps or other means is the specification of the function body behaviour
 for both [[Call]] and [[Construct]] invocations of the function. 
However, [[Construct]] invocation is not supported by all built-in 
functions. For each built-in function, when invoked with [[Call]], the 
[[Call]] <var>thisArgument</var> provides the <emu-val>this</emu-val> value, the [[Call]] <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>. When invoked with [[Construct]], the <emu-val>this</emu-val> value is uninitialized, the [[Construct]] <var>argumentsList</var> provides the named parameters, and the [[Construct]] <var>newTarget</var>
 parameter provides the NewTarget value. If the built-in function is 
implemented as an ECMAScript function object then this specified 
behaviour must be implemented by the ECMAScript code that is the body of
 the function. Built-in functions that are ECMAScript function objects 
must be strict functions. If a built-in constructor has any [[Call]] 
behaviour other than throwing a <emu-val>TypeError</emu-val> exception, 
an ECMAScript implementation of the function must be done in a manner 
that does not cause the function's [[FunctionKind]] internal slot to 
have the value <code>"classConstructor"</code>.</p>
    <p>Built-in function objects that are not identified as constructors
 do not implement the [[Construct]] internal method unless otherwise 
specified in the description of a particular function. When a built-in 
constructor is called as part of a <code>new</code> expression the <var>argumentsList</var> parameter of the invoked [[Construct]] internal method provides the values for the built-in constructor's named parameters.</p>
    <p>Built-in functions that are not constructors do not have a <code>prototype</code> property unless otherwise specified in the description of a particular function.</p>
    <p>If a built-in function object is not implemented as an ECMAScript
 function it must provide [[Call]] and [[Construct]] internal methods 
that conform to the following definitions:</p>

    <!-- es6num="9.3.1" -->
    <emu-clause id="sec-built-in-function-objects-call-thisargument-argumentslist">
      <h1><span class="secnum">9.3.1</span>[[Call]] ( <var>thisArgument</var>, <var>argumentsList</var>)<span class="utils"><span class="anchor"><a href="#sec-built-in-function-objects-call-thisargument-argumentslist">#</a></span></span></h1>
      <p>The [[Call]] internal method for a built-in function object <var>F</var> is called with parameters <var>thisArgument</var> and <var>argumentsList</var>, a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>
      <emu-alg><ol><li>Let <var>callerContext</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>If <var>callerContext</var> is not already suspended, suspend <var>callerContext</var>.</li><li>Let <var>calleeContext</var> be a new ECMAScript code <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref>.</li><li>Set the Function of <var>calleeContext</var> to <var>F</var>.</li><li>Let <var>calleeRealm</var> be <var>F</var>.[[Realm]].</li><li>Set the <emu-xref href="#realm"><a href="#realm">Realm</a></emu-xref> of <var>calleeContext</var> to <var>calleeRealm</var>.</li><li>Set the ScriptOrModule of <var>calleeContext</var> to <var>F</var>.[[ScriptOrModule]].</li><li>Perform any necessary implementation defined initialization of <var>calleeContext</var>.</li><li>Push <var>calleeContext</var> onto the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref>; <var>calleeContext</var> is now the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>result</var> be the <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> that is the result of evaluating <var>F</var> in an implementation defined manner that conforms to the specification of <var>F</var>. <var>thisArgument</var> is the <emu-val>this</emu-val> value, <var>argumentsList</var> provides the named parameters, and the NewTarget value is <emu-val>undefined</emu-val>.</li><li>Remove <var>calleeContext</var> from the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> and restore <var>callerContext</var> as the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Return <var>result</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>When <var>calleeContext</var> is removed from the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> it must not be destroyed if it has been suspended and retained by an accessible generator object for later resumption.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.3.2" -->
    <emu-clause id="sec-built-in-function-objects-construct-argumentslist-newtarget">
      <h1><span class="secnum">9.3.2</span>[[Construct]] (<var>argumentsList</var>, <var>newTarget</var>)<span class="utils"><span class="anchor"><a href="#sec-built-in-function-objects-construct-argumentslist-newtarget">#</a></span></span></h1>
      <p>The [[Construct]] internal method for built-in function object <var>F</var> is called with parameters <var>argumentsList</var> and <var>newTarget</var>. The steps performed are the same as [[Call]] (see  <emu-xref href="#sec-built-in-function-objects-call-thisargument-argumentslist"><a href="#sec-built-in-function-objects-call-thisargument-argumentslist">9.3.1</a></emu-xref>) except that step 10 is replaced by:</p>
      <emu-alg><ol start="10"><li>Let <var>result</var> be the <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">Completion Record</a></emu-xref> that is the result of evaluating <var>F</var> in an implementation defined manner that conforms to the specification of <var>F</var>. The <emu-val>this</emu-val> value is uninitialized, <var>argumentsList</var> provides the named parameters, and <var>newTarget</var> provides the NewTarget value.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="9.3.3" -->
    <emu-clause id="sec-createbuiltinfunction" aoid="CreateBuiltinFunction">
      <h1><span class="secnum">9.3.3</span>CreateBuiltinFunction (<var>realm</var>, <var>steps</var>, <var>prototype</var> [ , <var>internalSlotsList</var> ])<span class="utils"><span class="anchor"><a href="#sec-createbuiltinfunction">#</a></span></span></h1>
      <p>The abstract operation CreateBuiltinFunction takes arguments <var>realm</var>, <var>steps</var>, and <var>prototype</var>. The optional argument <var>internalSlotsList</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of the names of additional internal slots that must be defined as part of the object. If the list is not provided, a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> is used. CreateBuiltinFunction returns a built-in function object created by the following steps:</p>
      <emu-alg><ol><li>Assert: <var>realm</var> is a <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref>.</li><li>Assert: <var>steps</var> is either a set of algorithm steps or other definition of a function's behaviour provided in this specification.</li><li>Let <var>func</var> be a new built-in function object that when called performs the action described by <var>steps</var>. The new function object has internal slots whose names are the elements of <var>internalSlotsList</var>. The initial value of each of those internal slots is <emu-val>undefined</emu-val>.</li><li>Set <var>func</var>.[[Realm]] to <var>realm</var>.</li><li>Set <var>func</var>.[[Prototype]] to <var>prototype</var>.</li><li>Set <var>func</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>func</var>.[[ScriptOrModule]] to <emu-val>null</emu-val>.</li><li>Return <var>func</var>.
      </li></ol></emu-alg>
      <p>Each built-in function defined in this specification is created
 as if by calling the CreateBuiltinFunction abstract operation, unless 
otherwise specified.</p>
    </emu-clause>
  </emu-clause>

  <!-- es6num="9.4" -->
  <emu-clause id="sec-built-in-exotic-object-internal-methods-and-slots">
    <h1><span class="secnum">9.4</span>Built-in Exotic Object Internal Methods and Slots<span class="utils"><span class="anchor"><a href="#sec-built-in-exotic-object-internal-methods-and-slots">#</a></span></span></h1>
    <p>This specification defines several kinds of built-in exotic 
objects. These objects generally behave similar to ordinary objects 
except for a few specific situations. The following exotic objects use 
the ordinary object internal methods except where it is explicitly 
specified otherwise below:</p>

    <!-- es6num="9.4.1" -->
    <emu-clause id="sec-bound-function-exotic-objects">
      <h1><span class="secnum">9.4.1</span>Bound Function Exotic Objects<span class="utils"><span class="anchor"><a href="#sec-bound-function-exotic-objects">#</a></span></span></h1>
      <p>A  <dfn>bound function</dfn> is an exotic object that wraps 
another function object. A bound function is callable (it has a [[Call]]
 internal method and may have a [[Construct]] internal method). Calling a
 bound function generally results in a call of its wrapped function.</p>
      <p>Bound function objects do not have the internal slots of ECMAScript function objects defined in  <emu-xref href="#table-27"><a href="#table-27">Table 27</a></emu-xref>. Instead they have the internal slots defined in  <emu-xref href="#table-28"><a href="#table-28">Table 28</a></emu-xref>.</p>
      <emu-table id="table-28" caption="Internal Slots of Exotic Bound Function Objects"><figure><figcaption>Table 28: Internal Slots of Exotic Bound Function Objects</figcaption>
        <table>
          <tbody>
          <tr>
            <th>
              Internal Slot
            
            </th>
            <th>
              Type
            
            </th>
            <th>
              Description
            
            </th>
          </tr>
          <tr>
            <td>
              [[BoundTargetFunction]]
            
            </td>
            <td>
              Callable Object
            
            </td>
            <td>
              The wrapped function object.
            
            </td>
          </tr>
          <tr>
            <td>
              [[BoundThis]]
            
            </td>
            <td>
              Any
            
            </td>
            <td>
              The value that is always passed as the <emu-val>this</emu-val> value when calling the wrapped function.
            
            </td>
          </tr>
          <tr>
            <td>
              [[BoundArguments]]
            
            </td>
            <td>
              <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of Any
            
            </td>
            <td>
              A list of values whose elements are used as the first arguments to any call to the wrapped function.
            
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>
      <p>Bound function objects provide all of the essential internal methods as specified in  <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>. However, they use the following definitions for the essential internal methods of function objects.</p>

      <!-- es6num="9.4.1.1" -->
      <emu-clause id="sec-bound-function-exotic-objects-call-thisargument-argumentslist">
        <h1><span class="secnum">9.4.1.1</span>[[Call]] ( <var>thisArgument</var>, <var>argumentsList</var>)<span class="utils"><span class="anchor"><a href="#sec-bound-function-exotic-objects-call-thisargument-argumentslist">#</a></span></span></h1>
        <p>When the [[Call]] internal method of an exotic <emu-xref href="#sec-bound-function-exotic-objects"><a href="#sec-bound-function-exotic-objects">bound function</a></emu-xref> object, <var>F</var>, which was created using the bind function is called with parameters <var>thisArgument</var> and <var>argumentsList</var>, a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ECMAScript language values, the following steps are taken:</p>
        <emu-alg><ol><li>Let <var>target</var> be <var>F</var>.[[BoundTargetFunction]].</li><li>Let <var>boundThis</var> be <var>F</var>.[[BoundThis]].</li><li>Let <var>boundArgs</var> be <var>F</var>.[[BoundArguments]].</li><li>Let <var>args</var> be a new list containing the same values as the list <var>boundArgs</var> in the same order followed by the same values as the list <var>argumentsList</var> in the same order.</li><li>Return ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>target</var>, <var>boundThis</var>, <var>args</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.1.2" -->
      <emu-clause id="sec-bound-function-exotic-objects-construct-argumentslist-newtarget">
        <h1><span class="secnum">9.4.1.2</span>[[Construct]] (<var>argumentsList</var>, <var>newTarget</var>)<span class="utils"><span class="anchor"><a href="#sec-bound-function-exotic-objects-construct-argumentslist-newtarget">#</a></span></span></h1>
        <p>When the [[Construct]] internal method of an exotic <emu-xref href="#sec-bound-function-exotic-objects"><a href="#sec-bound-function-exotic-objects">bound function</a></emu-xref> object, <var>F</var> that was created using the bind function is called with a list of arguments <var>argumentsList</var> and <var>newTarget</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Let <var>target</var> be <var>F</var>.[[BoundTargetFunction]].</li><li>Assert: <var>target</var> has a [[Construct]] internal method.</li><li>Let <var>boundArgs</var> be <var>F</var>.[[BoundArguments]].</li><li>Let <var>args</var> be a new list containing the same values as the list <var>boundArgs</var> in the same order followed by the same values as the list <var>argumentsList</var> in the same order.</li><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>F</var>, <var>newTarget</var>) is <emu-val>true</emu-val>, let <var>newTarget</var> be <var>target</var>.</li><li>Return ? <emu-xref aoid="Construct"><a href="#sec-construct">Construct</a></emu-xref>(<var>target</var>, <var>args</var>, <var>newTarget</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.1.3" -->
      <emu-clause id="sec-boundfunctioncreate" aoid="BoundFunctionCreate">
        <h1><span class="secnum">9.4.1.3</span>BoundFunctionCreate (<var>targetFunction</var>, <var>boundThis</var>, <var>boundArgs</var>)<span class="utils"><span class="anchor"><a href="#sec-boundfunctioncreate">#</a></span></span></h1>
        <p>The abstract operation BoundFunctionCreate with arguments <var>targetFunction</var>, <var>boundThis</var> and <var>boundArgs</var> is used to specify the creation of new Bound Function exotic objects. It performs the following steps:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>targetFunction</var>) is Object.</li><li>Let <var>proto</var> be ? <var>targetFunction</var>.[[GetPrototypeOf]]().</li><li>Let <var>obj</var> be a newly created object.</li><li>Set <var>obj</var>'s essential internal methods to the default ordinary object definitions specified in <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>.</li><li>Set the [[Call]] internal method of <var>obj</var> as described in <emu-xref href="#sec-bound-function-exotic-objects-call-thisargument-argumentslist"><a href="#sec-bound-function-exotic-objects-call-thisargument-argumentslist">9.4.1.1</a></emu-xref>.</li><li>If <var>targetFunction</var> has a [[Construct]] internal method, then<ol><li>Set the [[Construct]] internal method of <var>obj</var> as described in <emu-xref href="#sec-bound-function-exotic-objects-construct-argumentslist-newtarget"><a href="#sec-bound-function-exotic-objects-construct-argumentslist-newtarget">9.4.1.2</a></emu-xref>.</li></ol></li><li>Set <var>obj</var>.[[Prototype]] to <var>proto</var>.</li><li>Set <var>obj</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Set <var>obj</var>.[[BoundTargetFunction]] to <var>targetFunction</var>.</li><li>Set <var>obj</var>.[[BoundThis]] to <var>boundThis</var>.</li><li>Set <var>obj</var>.[[BoundArguments]] to <var>boundArgs</var>.</li><li>Return <var>obj</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.4.2" -->
    <emu-clause id="sec-array-exotic-objects">
      <h1><span class="secnum">9.4.2</span>Array Exotic Objects<span class="utils"><span class="anchor"><a href="#sec-array-exotic-objects">#</a></span></span></h1>
      <p>An  <em>Array object</em> is an exotic object that gives special treatment to array index property keys (see  <emu-xref href="#sec-object-type"><a href="#sec-object-type">6.1.7</a></emu-xref>). A property whose property name is an array index is also called an  <em>element</em>. Every Array object has a <code>length</code> property whose value is always a nonnegative integer less than 2<sup>32</sup>. The value of the <code>length</code>
 property is numerically greater than the name of every own property 
whose name is an array index; whenever an own property of an Array 
object is created or changed, other properties are adjusted as necessary
 to maintain this invariant. Specifically, whenever an own property is 
added whose name is an array index, the value of the <code>length</code> property is changed, if necessary, to be one more than the numeric value of that array index; and whenever the value of the <code>length</code>
 property is changed, every own property whose name is an array index 
whose value is not smaller than the new length is deleted. This 
constraint applies only to own properties of an Array object and is 
unaffected by <code>length</code> or array index properties that may be inherited from its prototypes.</p>
      <emu-note><span class="note">Note</span>
        <p>A String property name <var>P</var> is an  <em>array index</em> if and only if <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>P</var>)) is equal to <var>P</var> and <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>P</var>) is not equal to  <emu-eqn class="inline">2<sup>32</sup>-1</emu-eqn>.</p>
      </emu-note>
      <p>Array exotic objects always have a non-configurable property named <code>"length"</code>.</p>
      <p>Array exotic objects provide an alternative definition for the 
[[DefineOwnProperty]] internal method. Except for that internal method, 
Array exotic objects provide all of the other essential internal methods
 as specified in  <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>.</p>

      <!-- es6num="9.4.2.1" -->
      <emu-clause id="sec-array-exotic-objects-defineownproperty-p-desc">
        <h1><span class="secnum">9.4.2.1</span>[[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var>)<span class="utils"><span class="anchor"><a href="#sec-array-exotic-objects-defineownproperty-p-desc">#</a></span></span></h1>
        <p>When the [[DefineOwnProperty]] internal method of an Array exotic object <var>A</var> is called with property key <var>P</var>, and <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <var>P</var> is <code>"length"</code>, then<ol><li>Return ? <emu-xref aoid="ArraySetLength"><a href="#sec-arraysetlength">ArraySetLength</a></emu-xref>(<var>A</var>, <var>Desc</var>).</li></ol></li><li>Else if <var>P</var> is an array index, then<ol><li>Let <var>oldLenDesc</var> be <emu-xref aoid="OrdinaryGetOwnProperty"><a href="#sec-ordinarygetownproperty">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <code>"length"</code>).</li><li>Assert: <var>oldLenDesc</var> will never be <emu-val>undefined</emu-val> or an accessor descriptor because Array objects are created with a length data property that cannot be deleted or reconfigured.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li>Let <var>index</var> be ! <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> â¥ <var>oldLen</var> and <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>succeeded</var> be ! <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <var>P</var>, <var>Desc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>index</var> â¥ <var>oldLen</var>, then<ol><li>Set <var>oldLenDesc</var>.[[Value]] to <var>index</var> + 1.</li><li>Let <var>succeeded</var> be <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <code>"length"</code>, <var>oldLenDesc</var>).</li><li>Assert: <var>succeeded</var> is <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <var>P</var>, <var>Desc</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.2.2" -->
      <emu-clause id="sec-arraycreate" aoid="ArrayCreate">
        <h1><span class="secnum">9.4.2.2</span>ArrayCreate (<var>length</var> [ , <var>proto</var> ])<span class="utils"><span class="anchor"><a href="#sec-arraycreate">#</a></span></span></h1>
        <p>The abstract operation ArrayCreate with argument <var>length</var> (either 0 or a positive integer) and optional argument <var>proto</var> is used to specify the creation of new Array exotic objects. It performs the following steps:</p>
        <emu-alg><ol><li>Assert: <var>length</var> is an integer Number â¥ 0.</li><li>If <var>length</var> is <emu-val>-0</emu-val>, let <var>length</var> be <emu-val>+0</emu-val>.</li><li>If <var>length</var>&gt;2<sup>32</sup>-1, throw a <emu-val>RangeError</emu-val> exception.</li><li>If the <var>proto</var> argument was not passed, let <var>proto</var> be the intrinsic object <emu-xref href="#sec-properties-of-the-array-prototype-object"><a href="#sec-properties-of-the-array-prototype-object">%ArrayPrototype%</a></emu-xref>.</li><li>Let <var>A</var> be a newly created Array exotic object.</li><li>Set <var>A</var>'s essential internal methods except for [[DefineOwnProperty]] to the default ordinary object definitions specified in <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>.</li><li>Set the [[DefineOwnProperty]] internal method of <var>A</var> as specified in <emu-xref href="#sec-array-exotic-objects-defineownproperty-p-desc"><a href="#sec-array-exotic-objects-defineownproperty-p-desc">9.4.2.1</a></emu-xref>.</li><li>Set <var>A</var>.[[Prototype]] to <var>proto</var>.</li><li>Set <var>A</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Perform ! <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <code>"length"</code>, PropertyDescriptor{[[Value]]: <var>length</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Return <var>A</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.2.3" -->
      <emu-clause id="sec-arrayspeciescreate" aoid="ArraySpeciesCreate">
        <h1><span class="secnum">9.4.2.3</span>ArraySpeciesCreate (<var>originalArray</var>, <var>length</var>)<span class="utils"><span class="anchor"><a href="#sec-arrayspeciescreate">#</a></span></span></h1>
        <p>The abstract operation ArraySpeciesCreate with arguments <var>originalArray</var> and <var>length</var> is used to specify the creation of a new Array object using a constructor function that is derived from <var>originalArray</var>. It performs the following steps:</p>
        <emu-alg><ol><li>Assert: <var>length</var> is an integer Number â¥ 0.</li><li>If <var>length</var> is <emu-val>-0</emu-val>, let <var>length</var> be <emu-val>+0</emu-val>.</li><li>Let <var>isArray</var> be ? <emu-xref aoid="IsArray"><a href="#sec-isarray">IsArray</a></emu-xref>(<var>originalArray</var>).</li><li>If <var>isArray</var> is <emu-val>false</emu-val>, return ? <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(<var>length</var>).</li><li>Let <var>C</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>originalArray</var>, <code>"constructor"</code>).</li><li>If <emu-xref aoid="IsConstructor"><a href="#sec-isconstructor">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisRealm</var> be <emu-xref href="#current-realm"><a href="#current-realm">the current Realm Record</a></emu-xref>.</li><li>Let <var>realmC</var> be ? <emu-xref aoid="GetFunctionRealm"><a href="#sec-getfunctionrealm">GetFunctionRealm</a></emu-xref>(<var>C</var>).</li><li>If <var>thisRealm</var> and <var>realmC</var> are not the same <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref>, then<ol><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>C</var>, <var>realmC</var>.[[Intrinsics]].[[<emu-xref href="#sec-array-constructor"><a href="#sec-array-constructor">%Array%</a></emu-xref>]]) is <emu-val>true</emu-val>, let <var>C</var> be <emu-val>undefined</emu-val>.</li></ol></li></ol></li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>C</var>) is Object, then<ol><li>Let <var>C</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>C</var>, @@species).</li><li>If <var>C</var> is <emu-val>null</emu-val>, let <var>C</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>If <var>C</var> is <emu-val>undefined</emu-val>, return ? <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(<var>length</var>).</li><li>If <emu-xref aoid="IsConstructor"><a href="#sec-isconstructor">IsConstructor</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ? <emu-xref aoid="Construct"><a href="#sec-construct">Construct</a></emu-xref>(<var>C</var>, Â« <var>length</var> Â»).
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>If <var>originalArray</var> was created using the standard built-in Array constructor for a <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> that is not the <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>, then a new Array is created using the <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.
 This maintains compatibility with Web browsers that have historically 
had that behaviour for the Array.prototype methods that now are defined 
using ArraySpeciesCreate.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="9.4.2.4" -->
      <emu-clause id="sec-arraysetlength" aoid="ArraySetLength">
        <h1><span class="secnum">9.4.2.4</span>ArraySetLength (<var>A</var>, <var>Desc</var>)<span class="utils"><span class="anchor"><a href="#sec-arraysetlength">#</a></span></span></h1>
        <p>When the abstract operation ArraySetLength is called with an Array exotic object <var>A</var>, and <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
        <emu-alg><ol><li>If the [[Value]] field of <var>Desc</var> is absent, then<ol><li>Return <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <code>"length"</code>, <var>Desc</var>).</li></ol></li><li>Let <var>newLenDesc</var> be a copy of <var>Desc</var>.</li><li>Let <var>newLen</var> be ? <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li>Let <var>numberLen</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>Desc</var>.[[Value]]).</li><li>If <var>newLen</var> â  <var>numberLen</var>, throw a <emu-val>RangeError</emu-val> exception.</li><li>Set <var>newLenDesc</var>.[[Value]] to <var>newLen</var>.</li><li>Let <var>oldLenDesc</var> be <emu-xref aoid="OrdinaryGetOwnProperty"><a href="#sec-ordinarygetownproperty">OrdinaryGetOwnProperty</a></emu-xref>(<var>A</var>, <code>"length"</code>).</li><li>Assert: <var>oldLenDesc</var> will never be <emu-val>undefined</emu-val> or an accessor descriptor because Array objects are created with a length data property that cannot be deleted or reconfigured.</li><li>Let <var>oldLen</var> be <var>oldLenDesc</var>.[[Value]].</li><li>If <var>newLen</var> â¥ <var>oldLen</var>, then<ol><li>Return <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <code>"length"</code>, <var>newLenDesc</var>).</li></ol></li><li>If <var>oldLenDesc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>newLenDesc</var>.[[Writable]] is absent or has the value <emu-val>true</emu-val>, let <var>newWritable</var> be <emu-val>true</emu-val>.</li><li>Else,<ol><li>Need to defer setting the [[Writable]] attribute to <emu-val>false</emu-val> in case any elements cannot be deleted.</li><li>Let <var>newWritable</var> be <emu-val>false</emu-val>.</li><li>Set <var>newLenDesc</var>.[[Writable]] to <emu-val>true</emu-val>.</li></ol></li><li>Let <var>succeeded</var> be ! <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <code>"length"</code>, <var>newLenDesc</var>).</li><li>If <var>succeeded</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>While <var>newLen</var> &lt; <var>oldLen</var> repeat,<ol><li>Set <var>oldLen</var> to <var>oldLen</var> - 1.</li><li>Let <var>deleteSucceeded</var> be ! <var>A</var>.[[Delete]](! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>oldLen</var>)).</li><li>If <var>deleteSucceeded</var> is <emu-val>false</emu-val>, then<ol><li>Set <var>newLenDesc</var>.[[Value]] to <var>oldLen</var> + 1.</li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, set <var>newLenDesc</var>.[[Writable]] to <emu-val>false</emu-val>.</li><li>Let <var>succeeded</var> be ! <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <code>"length"</code>, <var>newLenDesc</var>).</li><li>Return <emu-val>false</emu-val>.</li></ol></li></ol></li><li>If <var>newWritable</var> is <emu-val>false</emu-val>, then<ol><li>Return <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>A</var>, <code>"length"</code>, PropertyDescriptor{[[Writable]]: <emu-val>false</emu-val>}). This call will always return <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>In steps 3 and 4, if <var>Desc</var>.[[Value]] is an object then its <code>valueOf</code> method is called twice. This is legacy behaviour that was specified with this effect starting with the 2<sup>nd</sup> Edition of this specification.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.4.3" -->
    <emu-clause id="sec-string-exotic-objects">
      <h1><span class="secnum">9.4.3</span>String Exotic Objects<span class="utils"><span class="anchor"><a href="#sec-string-exotic-objects">#</a></span></span></h1>
      <p>A  <em>String object</em> is an exotic object that encapsulates
 a String value and exposes virtual integer indexed data properties 
corresponding to the individual code unit elements of the String value. 
Exotic String objects always have a data property named <code>"length"</code> whose value is the number of code unit elements in the encapsulated String value. Both the code unit data properties and the <code>"length"</code> property are non-writable and non-configurable.</p>
      <p>Exotic String objects have the same internal slots as ordinary objects. They also have a [[StringData]] internal slot.</p>
      <p>Exotic String objects provide alternative definitions for the 
following internal methods. All of the other exotic String object 
essential internal methods that are not defined below are as specified 
in  <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>.</p>

      <!-- es6num="9.4.3.1" -->
      <emu-clause id="sec-string-exotic-objects-getownproperty-p">
        <h1><span class="secnum">9.4.3.1</span>[[GetOwnProperty]] ( <var>P</var> )<span class="utils"><span class="anchor"><a href="#sec-string-exotic-objects-getownproperty-p">#</a></span></span></h1>
        <p>When the [[GetOwnProperty]] internal method of an exotic String object <var>S</var> is called with property key <var>P</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>desc</var> be <emu-xref aoid="OrdinaryGetOwnProperty"><a href="#sec-ordinarygetownproperty">OrdinaryGetOwnProperty</a></emu-xref>(<var>S</var>, <var>P</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val>, return <var>desc</var>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is not String, return <emu-val>undefined</emu-val>.</li><li>Let <var>index</var> be ! <emu-xref aoid="CanonicalNumericIndexString"><a href="#sec-canonicalnumericindexstring">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>index</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <emu-xref aoid="IsInteger"><a href="#sec-isinteger">IsInteger</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>index</var> = <emu-val>-0</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>str</var> be the String value of <var>S</var>.[[StringData]].</li><li>Let <var>len</var> be the number of elements in <var>str</var>.</li><li>If <var>index</var> &lt; 0 or <var>len</var> â¤ <var>index</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>resultStr</var> be a String value of length 1, containing one code unit from <var>str</var>, specifically the code unit at index <var>index</var>.</li><li>Return a PropertyDescriptor{[[Value]]: <var>resultStr</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.3.3" -->
      <emu-clause id="sec-string-exotic-objects-ownpropertykeys">
        <h1><span class="secnum">9.4.3.2</span>[[OwnPropertyKeys]] ( )<span class="utils"><span class="anchor"><a href="#sec-string-exotic-objects-ownpropertykeys">#</a></span></span></h1>
        <p>When the [[OwnPropertyKeys]] internal method of a String exotic object <var>O</var> is called, the following steps are taken:</p>
        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Let <var>str</var> be the String value of <var>O</var>.[[StringData]].</li><li>Let <var>len</var> be the number of elements in <var>str</var>.</li><li>For each integer <var>i</var> starting with 0 such that <var>i</var> &lt; <var>len</var>, in ascending order,<ol><li>Add ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>i</var>) as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <var>P</var> is an integer index and <emu-xref aoid="ToInteger"><a href="#sec-tointeger">ToInteger</a></emu-xref>(<var>P</var>) â¥ <var>len</var>, in ascending numeric index order,<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not an integer index, in ascending chronological order of property creation,<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation,<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.3.4" -->
      <emu-clause id="sec-stringcreate" aoid="StringCreate">
        <h1><span class="secnum">9.4.3.3</span>StringCreate ( <var>value</var>, <var>prototype</var>)<span class="utils"><span class="anchor"><a href="#sec-stringcreate">#</a></span></span></h1>
        <p>The abstract operation StringCreate with arguments <var>value</var> and <var>prototype</var> is used to specify the creation of new exotic String objects. It performs the following steps:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>value</var>) is String.</li><li>Let <var>S</var> be a newly created String exotic object.</li><li>Set <var>S</var>.[[StringData]] to <var>value</var>.</li><li>Set <var>S</var>'s essential internal methods to the default ordinary object definitions specified in <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>.</li><li>Set the [[GetOwnProperty]] internal method of <var>S</var> as specified in <emu-xref href="#sec-string-exotic-objects-getownproperty-p"><a href="#sec-string-exotic-objects-getownproperty-p">9.4.3.1</a></emu-xref>.</li><li>Set the [[OwnPropertyKeys]] internal method of <var>S</var> as specified in <emu-xref href="#sec-string-exotic-objects-ownpropertykeys"><a href="#sec-string-exotic-objects-ownpropertykeys">9.4.3.2</a></emu-xref>.</li><li>Set <var>S</var>.[[Prototype]] to <var>prototype</var>.</li><li>Set <var>S</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Let <var>length</var> be the number of code unit elements in <var>value</var>.</li><li>Perform ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>S</var>, <code>"length"</code>, PropertyDescriptor{[[Value]]: <var>length</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }).</li><li>Return <var>S</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.4.4" -->
    <emu-clause id="sec-arguments-exotic-objects">
      <h1><span class="secnum">9.4.4</span>Arguments Exotic Objects<span class="utils"><span class="anchor"><a href="#sec-arguments-exotic-objects">#</a></span></span></h1>
      <p>Most ECMAScript functions make an arguments object available to
 their code. Depending upon the characteristics of the function 
definition, its arguments object is either an ordinary object or an  <em>arguments exotic object</em>.
 An arguments exotic object is an exotic object whose array index 
properties map to the formal parameters bindings of an invocation of its
 associated ECMAScript function.</p>
      <p>Arguments exotic objects have the same internal slots as 
ordinary objects. They also have a [[ParameterMap]] internal slot. 
Ordinary arguments objects also have a [[ParameterMap]] internal slot 
whose value is always undefined. For ordinary argument objects the 
[[ParameterMap]] internal slot is only used by <code>Object.prototype.toString</code> (<emu-xref href="#sec-object.prototype.tostring"><a href="#sec-object.prototype.tostring">19.1.3.6</a></emu-xref>) to identify them as such.</p>
      <p>Arguments exotic objects provide alternative definitions for 
the following internal methods. All of the other exotic arguments object
 essential internal methods that are not defined below are as specified 
in  <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref></p>
      <emu-note><span class="note">Note 1</span>
        <p>For non-strict functions the integer indexed data properties 
of an arguments object whose numeric name values are less than the 
number of formal parameters of the corresponding function object 
initially share their values with the corresponding argument bindings in
 the function's <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref>.
 This means that changing the property changes the corresponding value 
of the argument binding and vice-versa. This correspondence is broken if
 such a property is deleted and then redefined or if the property is 
changed into an accessor property. For strict functions, the values of 
the arguments object's properties are simply a copy of the arguments 
passed to the function and there is no dynamic linkage between the 
property values and the formal parameter values.</p>
      </emu-note>
      <emu-note><span class="note">Note 2</span>
        <p>The ParameterMap object and its property values are used as a
 device for specifying the arguments object correspondence to argument 
bindings. The ParameterMap object and the objects that are the values of
 its properties are not directly observable from ECMAScript code. An 
ECMAScript implementation does not need to actually create or use such 
objects to implement the specified semantics.</p>
      </emu-note>
      <emu-note><span class="note">Note 3</span>
        <p>Arguments objects for strict functions define a non-configurable accessor property named <code>"callee"</code> which throws a <emu-val>TypeError</emu-val> exception on access. The <code>"callee"</code>
 property has a more specific meaning for non-strict functions. The 
strict mode definition of this property exists to ensure that it is not 
defined in any other manner by conforming ECMAScript implementations.</p>
      </emu-note>
      <emu-note><span class="note">Note 4</span>
        <p>ECMAScript implementations of arguments objects have historically contained an accessor property named ``"caller"<code>. Prior to ECMAScript 2017, this specification included the definition of a throwing </code>"caller"<code> property on arguments objects for strict functions. Since implementations do not contain this extension any longer, ECMAScript 2017 dropped the requirement for a throwing </code>"caller"` accessor.</p>
      </emu-note>

      <!-- es6num="9.4.4.1" -->
      <emu-clause id="sec-arguments-exotic-objects-getownproperty-p">
        <h1><span class="secnum">9.4.4.1</span>[[GetOwnProperty]] (<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-arguments-exotic-objects-getownproperty-p">#</a></span></span></h1>
        <p>The [[GetOwnProperty]] internal method of an arguments exotic object when called with a property key <var>P</var> performs the following steps:</p>
        <emu-alg><ol><li>Let <var>args</var> be the arguments object.</li><li>Let <var>desc</var> be <emu-xref aoid="OrdinaryGetOwnProperty"><a href="#sec-ordinarygetownproperty">OrdinaryGetOwnProperty</a></emu-xref>(<var>args</var>, <var>P</var>).</li><li>If <var>desc</var> is <emu-val>undefined</emu-val>, return <var>desc</var>.</li><li>Let <var>map</var> be <var>args</var>.[[ParameterMap]].</li><li>Let <var>isMapped</var> be ! <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>map</var>, <var>P</var>).</li><li>If <var>isMapped</var> is <emu-val>true</emu-val>, then<ol><li>Set <var>desc</var>.[[Value]] to <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>map</var>, <var>P</var>).</li></ol></li><li>Return <var>desc</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.4.2" -->
      <emu-clause id="sec-arguments-exotic-objects-defineownproperty-p-desc">
        <h1><span class="secnum">9.4.4.2</span>[[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)<span class="utils"><span class="anchor"><a href="#sec-arguments-exotic-objects-defineownproperty-p-desc">#</a></span></span></h1>
        <p>The [[DefineOwnProperty]] internal method of an arguments exotic object when called with a property key <var>P</var> and <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var> performs the following steps:</p>
        <emu-alg><ol><li>Let <var>args</var> be the arguments object.</li><li>Let <var>map</var> be <var>args</var>.[[ParameterMap]].</li><li>Let <var>isMapped</var> be <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>map</var>, <var>P</var>).</li><li>Let <var>newArgDesc</var> be <var>Desc</var>.</li><li>If <var>isMapped</var> is <emu-val>true</emu-val> and <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>If <var>Desc</var>.[[Value]] is not present and <var>Desc</var>.[[Writable]] is present and its value is <emu-val>false</emu-val>, then<ol><li>Let <var>newArgDesc</var> be a copy of <var>Desc</var>.</li><li>Set <var>newArgDesc</var>.[[Value]] to <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>map</var>, <var>P</var>).</li></ol></li></ol></li><li>Let <var>allowed</var> be ? <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>args</var>, <var>P</var>, <var>newArgDesc</var>).</li><li>If <var>allowed</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>isMapped</var> is <emu-val>true</emu-val>, then<ol><li>If <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, then<ol><li>Call <var>map</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Else,<ol><li>If <var>Desc</var>.[[Value]] is present, then<ol><li>Let <var>setStatus</var> be <emu-xref aoid="Set"><a href="#sec-set-o-p-v-throw">Set</a></emu-xref>(<var>map</var>, <var>P</var>, <var>Desc</var>.[[Value]], <emu-val>false</emu-val>).</li><li>Assert: <var>setStatus</var> is <emu-val>true</emu-val> because formal parameters mapped by argument objects are always writable.</li></ol></li><li>If <var>Desc</var>.[[Writable]] is present and its value is <emu-val>false</emu-val>, then<ol><li>Call <var>map</var>.[[Delete]](<var>P</var>).</li></ol></li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.4.3" -->
      <emu-clause id="sec-arguments-exotic-objects-get-p-receiver">
        <h1><span class="secnum">9.4.4.3</span>[[Get]] (<var>P</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-arguments-exotic-objects-get-p-receiver">#</a></span></span></h1>
        <p>The [[Get]] internal method of an arguments exotic object when called with a property key <var>P</var> and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var> performs the following steps:</p>
        <emu-alg><ol><li>Let <var>args</var> be the arguments object.</li><li>Let <var>map</var> be <var>args</var>.[[ParameterMap]].</li><li>Let <var>isMapped</var> be ! <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>map</var>, <var>P</var>).</li><li>If <var>isMapped</var> is <emu-val>false</emu-val>, then<ol><li>Return ? <emu-xref aoid="OrdinaryGet"><a href="#sec-ordinaryget">OrdinaryGet</a></emu-xref>(<var>args</var>, <var>P</var>, <var>Receiver</var>).</li></ol></li><li>Else <var>map</var> contains a formal parameter mapping for <var>P</var>,<ol><li>Return <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>map</var>, <var>P</var>).
        </li></ol></li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.4.4" -->
      <emu-clause id="sec-arguments-exotic-objects-set-p-v-receiver">
        <h1><span class="secnum">9.4.4.4</span>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-arguments-exotic-objects-set-p-v-receiver">#</a></span></span></h1>
        <p>The [[Set]] internal method of an arguments exotic object when called with property key <var>P</var>, value <var>V</var>, and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var> performs the following steps:</p>
        <emu-alg><ol><li>Let <var>args</var> be the arguments object.</li><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>args</var>, <var>Receiver</var>) is <emu-val>false</emu-val>, then<ol><li>Let <var>isMapped</var> be <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>map</var> be <var>args</var>.[[ParameterMap]].</li><li>Let <var>isMapped</var> be ! <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>map</var>, <var>P</var>).</li></ol></li><li>If <var>isMapped</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>setStatus</var> be <emu-xref aoid="Set"><a href="#sec-set-o-p-v-throw">Set</a></emu-xref>(<var>map</var>, <var>P</var>, <var>V</var>, <emu-val>false</emu-val>).</li><li>Assert: <var>setStatus</var> is <emu-val>true</emu-val> because formal parameters mapped by argument objects are always writable.</li></ol></li><li>Return ? <emu-xref aoid="OrdinarySet"><a href="#sec-ordinaryset">OrdinarySet</a></emu-xref>(<var>args</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.4.5" -->
      <emu-clause id="sec-arguments-exotic-objects-delete-p">
        <h1><span class="secnum">9.4.4.5</span>[[Delete]] (<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-arguments-exotic-objects-delete-p">#</a></span></span></h1>
        <p>The [[Delete]] internal method of an arguments exotic object when called with a property key <var>P</var> performs the following steps:</p>
        <emu-alg><ol><li>Let <var>args</var> be the arguments object.</li><li>Let <var>map</var> be <var>args</var>.[[ParameterMap]].</li><li>Let <var>isMapped</var> be ! <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>map</var>, <var>P</var>).</li><li>Let <var>result</var> be ? <emu-xref aoid="OrdinaryDelete"><a href="#sec-ordinarydelete">OrdinaryDelete</a></emu-xref>(<var>args</var>, <var>P</var>).</li><li>If <var>result</var> is <emu-val>true</emu-val> and <var>isMapped</var> is <emu-val>true</emu-val>, then<ol><li>Call <var>map</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Return <var>result</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.4.6" -->
      <emu-clause id="sec-createunmappedargumentsobject" aoid="CreateUnmappedArgumentsObject">
        <h1><span class="secnum">9.4.4.6</span>CreateUnmappedArgumentsObject (<var>argumentsList</var>)<span class="utils"><span class="anchor"><a href="#sec-createunmappedargumentsobject">#</a></span></span></h1>
        <p>The abstract operation CreateUnmappedArgumentsObject called with an argument <var>argumentsList</var> performs the following steps:</p>
        <emu-alg><ol><li>Let <var>len</var> be the number of elements in <var>argumentsList</var>.</li><li>Let <var>obj</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>, Â« [[ParameterMap]] Â»).</li><li>Set <var>obj</var>.[[ParameterMap]] to <emu-val>undefined</emu-val>.</li><li>Perform <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <code>"length"</code>, PropertyDescriptor{[[Value]]: <var>len</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}).</li><li>Let <var>index</var> be 0.</li><li>Repeat while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>val</var> be <var>argumentsList</var>[<var>index</var>].</li><li>Perform <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>obj</var>, ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>index</var>), <var>val</var>).</li><li>Let <var>index</var> be <var>index</var> + 1.</li></ol></li><li>Perform ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, @@iterator, PropertyDescriptor {[[Value]]: <emu-xref href="#sec-array.prototype.values"><a href="#sec-array.prototype.values">%ArrayProto_values%</a></emu-xref>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}).</li><li>Perform ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <code>"callee"</code>, PropertyDescriptor {[[Get]]: <emu-xref href="#sec-%throwtypeerror%"><a href="#sec-%throwtypeerror%">%ThrowTypeError%</a></emu-xref>, [[Set]]: <emu-xref href="#sec-%throwtypeerror%"><a href="#sec-%throwtypeerror%">%ThrowTypeError%</a></emu-xref>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Return <var>obj</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.4.7" -->
      <emu-clause id="sec-createmappedargumentsobject" aoid="CreateMappedArgumentsObject">
        <h1><span class="secnum">9.4.4.7</span>CreateMappedArgumentsObject ( <var>func</var>, <var>formals</var>, <var>argumentsList</var>, <var>env</var> )<span class="utils"><span class="anchor"><a href="#sec-createmappedargumentsobject">#</a></span></span></h1>
        <p>The abstract operation CreateMappedArgumentsObject is called with object <var>func</var>, parsed grammar phrase <var>formals</var>, <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> <var>argumentsList</var>, and <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> <var>env</var>. The following steps are performed:</p>
        <emu-alg><ol><li>Assert: <var>formals</var> does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers.</li><li>Let <var>len</var> be the number of elements in <var>argumentsList</var>.</li><li>Let <var>obj</var> be a newly created arguments exotic object with a [[ParameterMap]] internal slot.</li><li>Set the [[GetOwnProperty]] internal method of <var>obj</var> as specified in <emu-xref href="#sec-arguments-exotic-objects-getownproperty-p"><a href="#sec-arguments-exotic-objects-getownproperty-p">9.4.4.1</a></emu-xref>.</li><li>Set the [[DefineOwnProperty]] internal method of <var>obj</var> as specified in <emu-xref href="#sec-arguments-exotic-objects-defineownproperty-p-desc"><a href="#sec-arguments-exotic-objects-defineownproperty-p-desc">9.4.4.2</a></emu-xref>.</li><li>Set the [[Get]] internal method of <var>obj</var> as specified in <emu-xref href="#sec-arguments-exotic-objects-get-p-receiver"><a href="#sec-arguments-exotic-objects-get-p-receiver">9.4.4.3</a></emu-xref>.</li><li>Set the [[Set]] internal method of <var>obj</var> as specified in <emu-xref href="#sec-arguments-exotic-objects-set-p-v-receiver"><a href="#sec-arguments-exotic-objects-set-p-v-receiver">9.4.4.4</a></emu-xref>.</li><li>Set the [[HasProperty]] internal method of <var>obj</var> as specified in <emu-xref href="#sec-arguments-exotic-objects-hasproperty"></emu-xref>.</li><li>Set the [[Delete]] internal method of <var>obj</var> as specified in <emu-xref href="#sec-arguments-exotic-objects-delete-p"><a href="#sec-arguments-exotic-objects-delete-p">9.4.4.5</a></emu-xref>.</li><li>Set the remainder of <var>obj</var>'s essential internal methods to the default ordinary object definitions specified in <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>.</li><li>Set <var>obj</var>.[[Prototype]] to <emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>.</li><li>Set <var>obj</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Let <var>map</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-val>null</emu-val>).</li><li>Set <var>obj</var>.[[ParameterMap]] to <var>map</var>.</li><li>Let <var>parameterNames</var> be the BoundNames of <var>formals</var>.</li><li>Let <var>numberOfParameters</var> be the number of elements in <var>parameterNames</var>.</li><li>Let <var>index</var> be 0.</li><li>Repeat while <var>index</var> &lt; <var>len</var>,<ol><li>Let <var>val</var> be <var>argumentsList</var>[<var>index</var>].</li><li>Perform <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>obj</var>, ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>index</var>), <var>val</var>).</li><li>Let <var>index</var> be <var>index</var> + 1.</li></ol></li><li>Perform <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <code>"length"</code>, PropertyDescriptor{[[Value]]: <var>len</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}).</li><li>Let <var>mappedNames</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Let <var>index</var> be <var>numberOfParameters</var> - 1.</li><li>Repeat while <var>index</var> â¥ 0,<ol><li>Let <var>name</var> be <var>parameterNames</var>[<var>index</var>].</li><li>If <var>name</var> is not an element of <var>mappedNames</var>, then<ol><li>Add <var>name</var> as an element of the list <var>mappedNames</var>.</li><li>If <var>index</var> &lt; <var>len</var>, then<ol><li>Let <var>g</var> be <emu-xref aoid="MakeArgGetter"><a href="#sec-makearggetter">MakeArgGetter</a></emu-xref>(<var>name</var>, <var>env</var>).</li><li>Let <var>p</var> be <emu-xref aoid="MakeArgSetter"><a href="#sec-makeargsetter">MakeArgSetter</a></emu-xref>(<var>name</var>, <var>env</var>).</li><li>Perform <var>map</var>.[[DefineOwnProperty]](! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>index</var>), PropertyDescriptor{[[Set]]: <var>p</var>, [[Get]]: <var>g</var>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}).</li></ol></li></ol></li><li>Let <var>index</var> be <var>index</var> - 1.</li></ol></li><li>Perform ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, @@iterator, PropertyDescriptor {[[Value]]: <emu-xref href="#sec-array.prototype.values"><a href="#sec-array.prototype.values">%ArrayProto_values%</a></emu-xref>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}).</li><li>Perform ! <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>obj</var>, <code>"callee"</code>, PropertyDescriptor {[[Value]]: <var>func</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>true</emu-val>}).</li><li>Return <var>obj</var>.
        </li></ol></emu-alg>

        <!-- es6num="9.4.4.7.1" -->
        <emu-clause id="sec-makearggetter" aoid="MakeArgGetter">
          <h1><span class="secnum">9.4.4.7.1</span>MakeArgGetter ( <var>name</var>, <var>env</var>)<span class="utils"><span class="anchor"><a href="#sec-makearggetter">#</a></span></span></h1>
          <p>The abstract operation MakeArgGetter called with String <var>name</var> and <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> <var>env</var> creates a built-in function object that when executed returns the value bound for <var>name</var> in <var>env</var>. It performs the following steps:</p>
          <emu-alg><ol><li>Let <var>realm</var> be <emu-xref href="#current-realm"><a href="#current-realm">the current Realm Record</a></emu-xref>.</li><li>Let <var>steps</var> be the steps of an ArgGetter function as specified below.</li><li>Let <var>getter</var> be <emu-xref aoid="CreateBuiltinFunction"><a href="#sec-createbuiltinfunction">CreateBuiltinFunction</a></emu-xref>(<var>realm</var>, <var>steps</var>, <emu-xref href="#sec-properties-of-the-function-prototype-object"><a href="#sec-properties-of-the-function-prototype-object">%FunctionPrototype%</a></emu-xref>, Â« [[Name]], [[Env]] Â»).</li><li>Set <var>getter</var>.[[Name]] to <var>name</var>.</li><li>Set <var>getter</var>.[[Env]] to <var>env</var>.</li><li>Return <var>getter</var>.
          </li></ol></emu-alg>
          <p>An ArgGetter function is an anonymous built-in function with [[Name]] and [[Env]] internal slots. When an ArgGetter function <var>f</var> that expects no arguments is called it performs the following steps:</p>
          <emu-alg><ol><li>Let <var>name</var> be <var>f</var>.[[Name]].</li><li>Let <var>env</var> be <var>f</var>.[[Env]].</li><li>Return <var>env</var>.GetBindingValue(<var>name</var>, <emu-val>false</emu-val>).
          </li></ol></emu-alg>
          <emu-note><span class="note">Note</span>
            <p>ArgGetter functions are never directly accessible to ECMAScript code.</p>
          </emu-note>
        </emu-clause>

        <!-- es6num="9.4.4.7.2" -->
        <emu-clause id="sec-makeargsetter" aoid="MakeArgSetter">
          <h1><span class="secnum">9.4.4.7.2</span>MakeArgSetter ( <var>name</var>, <var>env</var>)<span class="utils"><span class="anchor"><a href="#sec-makeargsetter">#</a></span></span></h1>
          <p>The abstract operation MakeArgSetter called with String <var>name</var> and <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> <var>env</var> creates a built-in function object that when executed sets the value bound for <var>name</var> in <var>env</var>. It performs the following steps:</p>
          <emu-alg><ol><li>Let <var>realm</var> be <emu-xref href="#current-realm"><a href="#current-realm">the current Realm Record</a></emu-xref>.</li><li>Let <var>steps</var> be the steps of an ArgSetter function as specified below.</li><li>Let <var>setter</var> be <emu-xref aoid="CreateBuiltinFunction"><a href="#sec-createbuiltinfunction">CreateBuiltinFunction</a></emu-xref>(<var>realm</var>, <var>steps</var>, <emu-xref href="#sec-properties-of-the-function-prototype-object"><a href="#sec-properties-of-the-function-prototype-object">%FunctionPrototype%</a></emu-xref>, Â« [[Name]], [[Env]] Â»).</li><li>Set <var>setter</var>.[[Name]] to <var>name</var>.</li><li>Set <var>setter</var>.[[Env]] to <var>env</var>.</li><li>Return <var>setter</var>.
          </li></ol></emu-alg>
          <p>An ArgSetter function is an anonymous built-in function with [[Name]] and [[Env]] internal slots. When an ArgSetter function <var>f</var> is called with argument <var>value</var> it performs the following steps:</p>
          <emu-alg><ol><li>Let <var>name</var> be <var>f</var>.[[Name]].</li><li>Let <var>env</var> be <var>f</var>.[[Env]].</li><li>Return <var>env</var>.SetMutableBinding(<var>name</var>, <var>value</var>, <emu-val>false</emu-val>).
          </li></ol></emu-alg>
          <emu-note><span class="note">Note</span>
            <p>ArgSetter functions are never directly accessible to ECMAScript code.</p>
          </emu-note>
        </emu-clause>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.4.5" -->
    <emu-clause id="sec-integer-indexed-exotic-objects">
      <h1><span class="secnum">9.4.5</span>Integer Indexed Exotic Objects<span class="utils"><span class="anchor"><a href="#sec-integer-indexed-exotic-objects">#</a></span></span></h1>
      <p>An  <em>Integer Indexed object</em> is an exotic object that performs special handling of integer index property keys.</p>
      <p>Integer Indexed exotic objects have the same internal slots as 
ordinary objects and additionally [[ViewedArrayBuffer]], 
[[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal slots.</p>
      <p>Integer Indexed exotic objects provide alternative definitions 
for the following internal methods. All of the other Integer Indexed 
exotic object essential internal methods that are not defined below are 
as specified in  <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>.</p>

      <!-- es6num="9.4.5.1" -->
      <emu-clause id="sec-integer-indexed-exotic-objects-getownproperty-p">
        <h1><span class="secnum">9.4.5.1</span>[[GetOwnProperty]] ( <var>P</var> )<span class="utils"><span class="anchor"><a href="#sec-integer-indexed-exotic-objects-getownproperty-p">#</a></span></span></h1>
        <p>When the [[GetOwnProperty]] internal method of an Integer Indexed exotic object <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Assert: <var>O</var> is an Object that has a [[ViewedArrayBuffer]] internal slot.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be ! <emu-xref aoid="CanonicalNumericIndexString"><a href="#sec-canonicalnumericindexstring">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>value</var> be ? <emu-xref aoid="IntegerIndexedElementGet"><a href="#sec-integerindexedelementget">IntegerIndexedElementGet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>).</li><li>If <var>value</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Return a PropertyDescriptor{[[Value]]: <var>value</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}.</li></ol></li></ol></li><li>Return <emu-xref aoid="OrdinaryGetOwnProperty"><a href="#sec-ordinarygetownproperty">OrdinaryGetOwnProperty</a></emu-xref>(<var>O</var>, <var>P</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.5.2" -->
      <emu-clause id="sec-integer-indexed-exotic-objects-hasproperty-p">
        <h1><span class="secnum">9.4.5.2</span>[[HasProperty]](<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-integer-indexed-exotic-objects-hasproperty-p">#</a></span></span></h1>
        <p>When the [[HasProperty]] internal method of an Integer Indexed exotic object <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Assert: <var>O</var> is an Object that has a [[ViewedArrayBuffer]] internal slot.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be ! <emu-xref aoid="CanonicalNumericIndexString"><a href="#sec-canonicalnumericindexstring">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid="IsDetachedBuffer"><a href="#sec-isdetachedbuffer">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid="IsInteger"><a href="#sec-isinteger">IsInteger</a></emu-xref>(<var>numericIndex</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>numericIndex</var> = <emu-val>-0</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>numericIndex</var> &lt; 0, return <emu-val>false</emu-val>.</li><li>If <var>numericIndex</var> â¥ <var>O</var>.[[ArrayLength]], return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return ? <emu-xref aoid="OrdinaryHasProperty"><a href="#sec-ordinaryhasproperty">OrdinaryHasProperty</a></emu-xref>(<var>O</var>, <var>P</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.5.3" -->
      <emu-clause id="sec-integer-indexed-exotic-objects-defineownproperty-p-desc">
        <h1><span class="secnum">9.4.5.3</span>[[DefineOwnProperty]] ( <var>P</var>, <var>Desc</var>)<span class="utils"><span class="anchor"><a href="#sec-integer-indexed-exotic-objects-defineownproperty-p-desc">#</a></span></span></h1>
        <p>When the [[DefineOwnProperty]] internal method of an Integer Indexed exotic object <var>O</var> is called with property key <var>P</var>, and <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Assert: <var>O</var> is an Object that has a [[ViewedArrayBuffer]] internal slot.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be ! <emu-xref aoid="CanonicalNumericIndexString"><a href="#sec-canonicalnumericindexstring">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid="IsInteger"><a href="#sec-isinteger">IsInteger</a></emu-xref>(<var>numericIndex</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>numericIndex</var> = <emu-val>-0</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>numericIndex</var> &lt; 0, return <emu-val>false</emu-val>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>numericIndex</var> â¥ <var>length</var>, return <emu-val>false</emu-val>.</li><li>If <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>Desc</var>) is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has a [[Configurable]] field and if <var>Desc</var>.[[Configurable]] is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has an [[Enumerable]] field and if <var>Desc</var>.[[Enumerable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has a [[Writable]] field and if <var>Desc</var>.[[Writable]] is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>Desc</var> has a [[Value]] field, then<ol><li>Let <var>value</var> be <var>Desc</var>.[[Value]].</li><li>Return ? <emu-xref aoid="IntegerIndexedElementSet"><a href="#sec-integerindexedelementset">IntegerIndexedElementSet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>, <var>value</var>).</li></ol></li><li>Return <emu-val>true</emu-val>.</li></ol></li></ol></li><li>Return ! <emu-xref aoid="OrdinaryDefineOwnProperty"><a href="#sec-ordinarydefineownproperty">OrdinaryDefineOwnProperty</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Desc</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.5.4" -->
      <emu-clause id="sec-integer-indexed-exotic-objects-get-p-receiver">
        <h1><span class="secnum">9.4.5.4</span>[[Get]] (<var>P</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-integer-indexed-exotic-objects-get-p-receiver">#</a></span></span></h1>
        <p>When the [[Get]] internal method of an Integer Indexed exotic object <var>O</var> is called with property key <var>P</var> and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be ! <emu-xref aoid="CanonicalNumericIndexString"><a href="#sec-canonicalnumericindexstring">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ? <emu-xref aoid="IntegerIndexedElementGet"><a href="#sec-integerindexedelementget">IntegerIndexedElementGet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>).</li></ol></li></ol></li><li>Return ? <emu-xref aoid="OrdinaryGet"><a href="#sec-ordinaryget">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.5.5" -->
      <emu-clause id="sec-integer-indexed-exotic-objects-set-p-v-receiver">
        <h1><span class="secnum">9.4.5.5</span>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-integer-indexed-exotic-objects-set-p-v-receiver">#</a></span></span></h1>
        <p>When the [[Set]] internal method of an Integer Indexed exotic object <var>O</var> is called with property key <var>P</var>, value <var>V</var>, and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is String, then<ol><li>Let <var>numericIndex</var> be ! <emu-xref aoid="CanonicalNumericIndexString"><a href="#sec-canonicalnumericindexstring">CanonicalNumericIndexString</a></emu-xref>(<var>P</var>).</li><li>If <var>numericIndex</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return ? <emu-xref aoid="IntegerIndexedElementSet"><a href="#sec-integerindexedelementset">IntegerIndexedElementSet</a></emu-xref>(<var>O</var>, <var>numericIndex</var>, <var>V</var>).</li></ol></li></ol></li><li>Return ? <emu-xref aoid="OrdinarySet"><a href="#sec-ordinaryset">OrdinarySet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>V</var>, <var>Receiver</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.5.6" -->
      <emu-clause id="sec-integer-indexed-exotic-objects-ownpropertykeys">
        <h1><span class="secnum">9.4.5.6</span>[[OwnPropertyKeys]] ()<span class="utils"><span class="anchor"><a href="#sec-integer-indexed-exotic-objects-ownpropertykeys">#</a></span></span></h1>
        <p>When the [[OwnPropertyKeys]] internal method of an Integer Indexed exotic object <var>O</var> is called, the following steps are taken:</p>
        <emu-alg><ol><li>Let <var>keys</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Assert: <var>O</var> is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal slots.</li><li>Let <var>len</var> be <var>O</var>.[[ArrayLength]].</li><li>For each integer <var>i</var> starting with 0 such that <var>i</var> &lt; <var>len</var>, in ascending order,<ol><li>Add ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>i</var>) as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is String and <var>P</var> is not an integer index, in ascending chronological order of property creation<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>For each own property key <var>P</var> of <var>O</var> such that <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is Symbol, in ascending chronological order of property creation<ol><li>Add <var>P</var> as the last element of <var>keys</var>.</li></ol></li><li>Return <var>keys</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.5.7" -->
      <emu-clause id="sec-integerindexedobjectcreate" aoid="IntegerIndexedObjectCreate">
        <h1><span class="secnum">9.4.5.7</span>IntegerIndexedObjectCreate (<var>prototype</var>, <var>internalSlotsList</var>)<span class="utils"><span class="anchor"><a href="#sec-integerindexedobjectcreate">#</a></span></span></h1>
        <p>The abstract operation IntegerIndexedObjectCreate with arguments <var>prototype</var> and <var>internalSlotsList</var> is used to specify the creation of new Integer Indexed exotic objects. The argument <var>internalSlotsList</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>
 of the names of additional internal slots that must be defined as part 
of the object. IntegerIndexedObjectCreate performs the following steps:</p>
        <emu-alg><ol><li>Assert: <var>internalSlotsList</var> contains the names [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]].</li><li>Let <var>A</var> be a newly created object with an internal slot for each name in <var>internalSlotsList</var>.</li><li>Set <var>A</var>'s essential internal methods to the default ordinary object definitions specified in <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"><a href="#sec-ordinary-object-internal-methods-and-internal-slots">9.1</a></emu-xref>.</li><li>Set the [[GetOwnProperty]] internal method of <var>A</var> as specified in <emu-xref href="#sec-integer-indexed-exotic-objects-getownproperty-p"><a href="#sec-integer-indexed-exotic-objects-getownproperty-p">9.4.5.1</a></emu-xref>.</li><li>Set the [[HasProperty]] internal method of <var>A</var> as specified in <emu-xref href="#sec-integer-indexed-exotic-objects-hasproperty-p"><a href="#sec-integer-indexed-exotic-objects-hasproperty-p">9.4.5.2</a></emu-xref>.</li><li>Set the [[DefineOwnProperty]] internal method of <var>A</var> as specified in <emu-xref href="#sec-integer-indexed-exotic-objects-defineownproperty-p-desc"><a href="#sec-integer-indexed-exotic-objects-defineownproperty-p-desc">9.4.5.3</a></emu-xref>.</li><li>Set the [[Get]] internal method of <var>A</var> as specified in <emu-xref href="#sec-integer-indexed-exotic-objects-get-p-receiver"><a href="#sec-integer-indexed-exotic-objects-get-p-receiver">9.4.5.4</a></emu-xref>.</li><li>Set the [[Set]] internal method of <var>A</var> as specified in <emu-xref href="#sec-integer-indexed-exotic-objects-set-p-v-receiver"><a href="#sec-integer-indexed-exotic-objects-set-p-v-receiver">9.4.5.5</a></emu-xref>.</li><li>Set the [[OwnPropertyKeys]] internal method of <var>A</var> as specified in <emu-xref href="#sec-integer-indexed-exotic-objects-ownpropertykeys"><a href="#sec-integer-indexed-exotic-objects-ownpropertykeys">9.4.5.6</a></emu-xref>.</li><li>Set <var>A</var>.[[Prototype]] to <var>prototype</var>.</li><li>Set <var>A</var>.[[Extensible]] to <emu-val>true</emu-val>.</li><li>Return <var>A</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.5.8" -->
      <emu-clause id="sec-integerindexedelementget" aoid="IntegerIndexedElementGet">
        <h1><span class="secnum">9.4.5.8</span>IntegerIndexedElementGet ( <var>O</var>, <var>index</var> )<span class="utils"><span class="anchor"><a href="#sec-integerindexedelementget">#</a></span></span></h1>
        <p>The abstract operation IntegerIndexedElementGet with arguments <var>O</var> and <var>index</var> performs the following steps:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>index</var>) is Number.</li><li>Assert: <var>O</var> is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal slots.</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid="IsDetachedBuffer"><a href="#sec-isdetachedbuffer">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid="IsInteger"><a href="#sec-isinteger">IsInteger</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>index</var> = <emu-val>-0</emu-val>, return <emu-val>undefined</emu-val>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>index</var> &lt; 0 or <var>index</var> â¥ <var>length</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Number value of the Element Size value specified in <emu-xref href="#table-49"><a href="#table-49">Table 50</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>index</var> Ã <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href="#table-49"><a href="#table-49">Table 50</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Return <emu-xref aoid="GetValueFromBuffer"><a href="#sec-getvaluefrombuffer">GetValueFromBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.5.9" -->
      <emu-clause id="sec-integerindexedelementset" aoid="IntegerIndexedElementSet">
        <h1><span class="secnum">9.4.5.9</span>IntegerIndexedElementSet ( <var>O</var>, <var>index</var>, <var>value</var> )<span class="utils"><span class="anchor"><a href="#sec-integerindexedelementset">#</a></span></span></h1>
        <p>The abstract operation IntegerIndexedElementSet with arguments <var>O</var>, <var>index</var>, and <var>value</var> performs the following steps:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>index</var>) is Number.</li><li>Assert: <var>O</var> is an Object that has [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]], and [[TypedArrayName]] internal slots.</li><li>Let <var>numValue</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>value</var>).</li><li>Let <var>buffer</var> be <var>O</var>.[[ViewedArrayBuffer]].</li><li>If <emu-xref aoid="IsDetachedBuffer"><a href="#sec-isdetachedbuffer">IsDetachedBuffer</a></emu-xref>(<var>buffer</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid="IsInteger"><a href="#sec-isinteger">IsInteger</a></emu-xref>(<var>index</var>) is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>If <var>index</var> = <emu-val>-0</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>length</var> be <var>O</var>.[[ArrayLength]].</li><li>If <var>index</var> &lt; 0 or <var>index</var> â¥ <var>length</var>, return <emu-val>false</emu-val>.</li><li>Let <var>offset</var> be <var>O</var>.[[ByteOffset]].</li><li>Let <var>arrayTypeName</var> be the String value of <var>O</var>.[[TypedArrayName]].</li><li>Let <var>elementSize</var> be the Number value of the Element Size value specified in <emu-xref href="#table-49"><a href="#table-49">Table 50</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Let <var>indexedPosition</var> be (<var>index</var> Ã <var>elementSize</var>) + <var>offset</var>.</li><li>Let <var>elementType</var> be the String value of the Element Type value in <emu-xref href="#table-49"><a href="#table-49">Table 50</a></emu-xref> for <var>arrayTypeName</var>.</li><li>Perform <emu-xref aoid="SetValueInBuffer"><a href="#sec-setvalueinbuffer">SetValueInBuffer</a></emu-xref>(<var>buffer</var>, <var>indexedPosition</var>, <var>elementType</var>, <var>numValue</var>).</li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="9.4.6" -->
    <emu-clause id="sec-module-namespace-exotic-objects">
      <h1><span class="secnum">9.4.6</span>Module Namespace Exotic Objects<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects">#</a></span></span></h1>
      <p>A  <em>module namespace object</em> is an exotic object that exposes the bindings exported from an ECMAScript <emu-nt><a href="#prod-Module">Module</a></emu-nt> (See  <emu-xref href="#sec-exports"><a href="#sec-exports">15.2.3</a></emu-xref>).
 There is a one-to-one correspondence between the String-keyed own 
properties of a module namespace exotic object and the binding names 
exported by the <emu-nt><a href="#prod-Module">Module</a></emu-nt>. The exported bindings include any bindings that are indirectly exported using <code>export *</code>
 export items. Each String-valued own property key is the StringValue of
 the corresponding exported binding name. These are the only 
String-keyed properties of a module namespace exotic object. Each such 
property has the attributes { [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }. Module namespace objects are not extensible.</p>
      <p>Module namespace objects have the internal slots defined in  <emu-xref href="#table-29"><a href="#table-29">Table 29</a></emu-xref>.</p>
      <emu-table id="table-29" caption="Internal Slots of Module Namespace Exotic Objects"><figure><figcaption>Table 29: Internal Slots of Module Namespace Exotic Objects</figcaption>
        <table>
          <tbody>
          <tr>
            <th>
              Internal Slot
            
            </th>
            <th>
              Type
            
            </th>
            <th>
              Description
            
            </th>
          </tr>
          <tr>
            <td>
              [[Module]]
            
            </td>
            <td>
              <emu-xref href="#sec-abstract-module-records"><a href="#sec-abstract-module-records">Module Record</a></emu-xref>
            
            </td>
            <td>
              The <emu-xref href="#sec-abstract-module-records"><a href="#sec-abstract-module-records">Module Record</a></emu-xref> whose exports this namespace exposes.
            
            </td>
          </tr>
          <tr>
            <td>
              [[Exports]]
            
            </td>
            <td>
              <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of String
            
            </td>
            <td>
              A <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>
 containing the String values of the exported names exposed as own 
properties of this object. The list is ordered as if an Array of those 
String values had been sorted using <code>Array.prototype.sort</code> using <emu-xref aoid="SortCompare"><a href="#sec-sortcompare">SortCompare</a></emu-xref> as <var>comparefn</var>.
            
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>
      <p>Module namespace exotic objects provide alternative definitions for all of the internal methods.</p>

      <!-- es6num="9.4.6.1" -->
      <emu-clause id="sec-module-namespace-exotic-objects-getprototypeof">
        <h1><span class="secnum">9.4.6.1</span>[[GetPrototypeOf]] ( )<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-getprototypeof">#</a></span></span></h1>
        <p>When the [[GetPrototypeOf]] internal method of a module namespace exotic object <var>O</var> is called, the following steps are taken:</p>
        <emu-alg><ol><li>Return <emu-val>null</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.6.2" -->
      <emu-clause id="sec-module-namespace-exotic-objects-setprototypeof-v">
        <h1><span class="secnum">9.4.6.2</span>[[SetPrototypeOf]] (<var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-setprototypeof-v">#</a></span></span></h1>
        <p>When the [[SetPrototypeOf]] internal method of a module namespace exotic object <var>O</var> is called with argument <var>V</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: Either <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is Object or <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is Null.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.6.3" -->
      <emu-clause id="sec-module-namespace-exotic-objects-isextensible">
        <h1><span class="secnum">9.4.6.3</span>[[IsExtensible]] ( )<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-isextensible">#</a></span></span></h1>
        <p>When the [[IsExtensible]] internal method of a module namespace exotic object <var>O</var> is called, the following steps are taken:</p>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.6.4" -->
      <emu-clause id="sec-module-namespace-exotic-objects-preventextensions">
        <h1><span class="secnum">9.4.6.4</span>[[PreventExtensions]] ( )<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-preventextensions">#</a></span></span></h1>
        <p>When the [[PreventExtensions]] internal method of a module namespace exotic object <var>O</var> is called, the following steps are taken:</p>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.6.5" -->
      <emu-clause id="sec-module-namespace-exotic-objects-getownproperty-p">
        <h1><span class="secnum">9.4.6.5</span>[[GetOwnProperty]] (<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-getownproperty-p">#</a></span></span></h1>
        <p>When the [[GetOwnProperty]] internal method of a module namespace exotic object <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
        <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is Symbol, return <emu-xref aoid="OrdinaryGetOwnProperty"><a href="#sec-ordinarygetownproperty">OrdinaryGetOwnProperty</a></emu-xref>(<var>O</var>, <var>P</var>).</li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is not an element of <var>exports</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>value</var> be ? <var>O</var>.[[Get]](<var>P</var>, <var>O</var>).</li><li>Return PropertyDescriptor{[[Value]]: <var>value</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val> }.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.6.6" -->
      <emu-clause id="sec-module-namespace-exotic-objects-defineownproperty-p-desc">
        <h1><span class="secnum">9.4.6.6</span>[[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-defineownproperty-p-desc">#</a></span></span></h1>
        <p>When the [[DefineOwnProperty]] internal method of a module namespace exotic object <var>O</var> is called with property key <var>P</var> and <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.6.7" -->
      <emu-clause id="sec-module-namespace-exotic-objects-hasproperty-p">
        <h1><span class="secnum">9.4.6.7</span>[[HasProperty]] (<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-hasproperty-p">#</a></span></span></h1>
        <p>When the [[HasProperty]] internal method of a module namespace exotic object <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
        <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is Symbol, return <emu-xref aoid="OrdinaryHasProperty"><a href="#sec-ordinaryhasproperty">OrdinaryHasProperty</a></emu-xref>(<var>O</var>, <var>P</var>).</li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is an element of <var>exports</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.6.8" -->
      <emu-clause id="sec-module-namespace-exotic-objects-get-p-receiver">
        <h1><span class="secnum">9.4.6.8</span>[[Get]] (<var>P</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-get-p-receiver">#</a></span></span></h1>
        <p>When the [[Get]] internal method of a module namespace exotic object <var>O</var> is called with property key <var>P</var> and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>P</var>) is Symbol, then<ol><li>Return ? <emu-xref aoid="OrdinaryGet"><a href="#sec-ordinaryget">OrdinaryGet</a></emu-xref>(<var>O</var>, <var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is not an element of <var>exports</var>, return <emu-val>undefined</emu-val>.</li><li>Let <var>m</var> be <var>O</var>.[[Module]].</li><li>Let <var>binding</var> be ! <var>m</var>.ResolveExport(<var>P</var>, Â« Â», Â« Â»).</li><li>Assert: <var>binding</var> is neither <emu-val>null</emu-val> nor <code>"ambiguous"</code>.</li><li>Let <var>targetModule</var> be <var>binding</var>.[[Module]].</li><li>Assert: <var>targetModule</var> is not <emu-val>undefined</emu-val>.</li><li>Let <var>targetEnv</var> be <var>targetModule</var>.[[Environment]].</li><li>If <var>targetEnv</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>targetEnvRec</var> be <var>targetEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Return ? <var>targetEnvRec</var>.GetBindingValue(<var>binding</var>.[[BindingName]], <emu-val>true</emu-val>).
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>ResolveExport is idempotent and side-effect free. An 
implementation might choose to pre-compute or cache the ResolveExport 
results for the [[Exports]] of each module namespace exotic object.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="9.4.6.9" -->
      <emu-clause id="sec-module-namespace-exotic-objects-set-p-v-receiver">
        <h1><span class="secnum">9.4.6.9</span>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-set-p-v-receiver">#</a></span></span></h1>
        <p>When the [[Set]] internal method of a module namespace exotic object <var>O</var> is called with property key <var>P</var>, value <var>V</var>, and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.6.10" -->
      <emu-clause id="sec-module-namespace-exotic-objects-delete-p">
        <h1><span class="secnum">9.4.6.10</span>[[Delete]] (<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-delete-p">#</a></span></span></h1>
        <p>When the [[Delete]] internal method of a module namespace exotic object <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>exports</var> be <var>O</var>.[[Exports]].</li><li>If <var>P</var> is an element of <var>exports</var>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.6.12" -->
      <emu-clause id="sec-module-namespace-exotic-objects-ownpropertykeys">
        <h1><span class="secnum">9.4.6.11</span>[[OwnPropertyKeys]] ( )<span class="utils"><span class="anchor"><a href="#sec-module-namespace-exotic-objects-ownpropertykeys">#</a></span></span></h1>
        <p>When the [[OwnPropertyKeys]] internal method of a module namespace exotic object <var>O</var> is called, the following steps are taken:</p>
        <emu-alg><ol><li>Let <var>exports</var> be a copy of <var>O</var>.[[Exports]].</li><li>Let <var>symbolKeys</var> be ! <emu-xref aoid="OrdinaryOwnPropertyKeys"><a href="#sec-ordinaryownpropertykeys">OrdinaryOwnPropertyKeys</a></emu-xref>(<var>O</var>).</li><li>Append all the entries of <var>symbolKeys</var> to the end of <var>exports</var>.</li><li>Return <var>exports</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.4.6.13" -->
      <emu-clause id="sec-modulenamespacecreate" aoid="ModuleNamespaceCreate">
        <h1><span class="secnum">9.4.6.12</span>ModuleNamespaceCreate (<var>module</var>, <var>exports</var>)<span class="utils"><span class="anchor"><a href="#sec-modulenamespacecreate">#</a></span></span></h1>
        <p>The abstract operation ModuleNamespaceCreate with arguments <var>module</var>, and <var>exports</var> is used to specify the creation of new module namespace exotic objects. It performs the following steps:</p>
        <emu-alg><ol><li>Assert: <var>module</var> is a <emu-xref href="#sec-abstract-module-records"><a href="#sec-abstract-module-records">Module Record</a></emu-xref>.</li><li>Assert: <var>module</var>.[[Namespace]] is <emu-val>undefined</emu-val>.</li><li>Assert: <var>exports</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of String values.</li><li>Let <var>M</var> be a newly created object.</li><li>Set <var>M</var>'s essential internal methods to the definitions specified in <emu-xref href="#sec-module-namespace-exotic-objects"><a href="#sec-module-namespace-exotic-objects">9.4.6</a></emu-xref>.</li><li>Set <var>M</var>.[[Module]] to <var>module</var>.</li><li>Let <var>sortedExports</var> be a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing the same values as the list <var>exports</var> where the values are ordered as if an Array of the same values had been sorted using <code>Array.prototype.sort</code> using <emu-xref aoid="SortCompare"><a href="#sec-sortcompare">SortCompare</a></emu-xref> as <var>comparefn</var>.</li><li>Set <var>M</var>.[[Exports]] to <var>sortedExports</var>.</li><li>Create own properties of <var>M</var> corresponding to the definitions in <emu-xref href="#sec-module-namespace-objects"><a href="#sec-module-namespace-objects">26.3</a></emu-xref>.</li><li>Set <var>module</var>.[[Namespace]] to <var>M</var>.</li><li>Return <var>M</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <emu-clause id="sec-immutable-prototype-exotic-objects">
      <h1><span class="secnum">9.4.7</span>Immutable Prototype Exotic Objects<span class="utils"><span class="anchor"><a href="#sec-immutable-prototype-exotic-objects">#</a></span></span></h1>
      <p>An  <dfn>immutable prototype exotic object</dfn> is an exotic object that has an immutable [[Prototype]] internal slot.</p>

      <emu-clause id="sec-immutable-prototype-exotic-objects-setprototypeof-v">
        <h1><span class="secnum">9.4.7.1</span>[[SetPrototypeOf]] (<var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-immutable-prototype-exotic-objects-setprototypeof-v">#</a></span></span></h1>
        <p>When the [[SetPrototypeOf]] internal method of an <emu-xref href="#sec-immutable-prototype-exotic-objects"><a href="#sec-immutable-prototype-exotic-objects">immutable prototype exotic object</a></emu-xref> <var>O</var> is called with argument <var>V</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: Either <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is Object or <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is Null.</li><li>Let <var>current</var> be <var>O</var>.[[Prototype]].</li><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>V</var>, <var>current</var>) is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="9.5" -->
  <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots">
    <h1><span class="secnum">9.5</span>Proxy Object Internal Methods and Internal Slots<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots">#</a></span></span></h1>
    <p>A proxy object is an exotic object whose essential internal 
methods are partially implemented using ECMAScript code. Every proxy 
objects has an internal slot called [[ProxyHandler]]. The value of 
[[ProxyHandler]] is an object, called the proxy's  <em>handler object</em>, or <emu-val>null</emu-val>. Methods (see  <emu-xref href="#table-30"><a href="#table-30">Table 30</a></emu-xref>)
 of a handler object may be used to augment the implementation for one 
or more of the proxy object's internal methods. Every proxy object also 
has an internal slot called [[ProxyTarget]] whose value is either an 
object or the <emu-val>null</emu-val> value. This object is called the proxy's  <em>target object</em>.</p>
    <emu-table id="table-30" caption="Proxy Handler Methods"><figure><figcaption>Table 30: Proxy Handler Methods</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Internal Method
          
          </th>
          <th>
            Handler Method
          
          </th>
        </tr>
        <tr>
          <td>
            [[GetPrototypeOf]]
          
          </td>
          <td>
            <code>getPrototypeOf</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[SetPrototypeOf]]
          
          </td>
          <td>
            <code>setPrototypeOf</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[IsExtensible]]
          
          </td>
          <td>
            <code>isExtensible</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[PreventExtensions]]
          
          </td>
          <td>
            <code>preventExtensions</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[GetOwnProperty]]
          
          </td>
          <td>
            <code>getOwnPropertyDescriptor</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[HasProperty]]
          
          </td>
          <td>
            <code>has</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[Get]]
          
          </td>
          <td>
            <code>get</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[Set]]
          
          </td>
          <td>
            <code>set</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[Delete]]
          
          </td>
          <td>
            <code>deleteProperty</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[DefineOwnProperty]]
          
          </td>
          <td>
            <code>defineProperty</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[OwnPropertyKeys]]
          
          </td>
          <td>
            <code>ownKeys</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[Call]]
          
          </td>
          <td>
            <code>apply</code>
          
          </td>
        </tr>
        <tr>
          <td>
            [[Construct]]
          
          </td>
          <td>
            <code>construct</code>
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>
    <p>When a handler method is called to provide the implementation of a
 proxy object internal method, the handler method is passed the proxy's 
target object as a parameter. A proxy's handler object does not 
necessarily have a method corresponding to every essential internal 
method. Invoking an internal method on the proxy results in the 
invocation of the corresponding internal method on the proxy's target 
object if the handler object does not have a method corresponding to the
 internal trap.</p>
    <p>The [[ProxyHandler]] and [[ProxyTarget]] internal slots of a 
proxy object are always initialized when the object is created and 
typically may not be modified. Some proxy objects are created in a 
manner that permits them to be subsequently  <em>revoked</em>. When a proxy is revoked, its [[ProxyHandler]] and [[ProxyTarget]] internal slots are set to <emu-val>null</emu-val> causing subsequent invocations of internal methods on that proxy object to throw a <emu-val>TypeError</emu-val> exception.</p>
    <p>Because proxy objects permit the implementation of internal 
methods to be provided by arbitrary ECMAScript code, it is possible to 
define a proxy object whose handler methods violates the invariants 
defined in  <emu-xref href="#sec-invariants-of-the-essential-internal-methods"><a href="#sec-invariants-of-the-essential-internal-methods">6.1.7.3</a></emu-xref>. Some of the internal method invariants defined in  <emu-xref href="#sec-invariants-of-the-essential-internal-methods"><a href="#sec-invariants-of-the-essential-internal-methods">6.1.7.3</a></emu-xref>
 are essential integrity invariants. These invariants are explicitly 
enforced by the proxy object internal methods specified in this section.
 An ECMAScript implementation must be robust in the presence of all 
possible invariant violations.</p>
    <p>In the following algorithm descriptions, assume <var>O</var> is an ECMAScript proxy object, <var>P</var> is a property key value, <var>V</var> is any <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> and <var>Desc</var> is a <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> record.</p>

    <!-- es6num="9.5.1" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-getprototypeof">
      <h1><span class="secnum">9.5.1</span>[[GetPrototypeOf]] ( )<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-getprototypeof">#</a></span></span></h1>
      <p>When the [[GetPrototypeOf]] internal method of a Proxy exotic object <var>O</var> is called, the following steps are taken:</p>
      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"getPrototypeOf"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[GetPrototypeOf]]().</li></ol></li><li>Let <var>handlerProto</var> be ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var> Â»).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handlerProto</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <var>handlerProto</var>.</li><li>Let <var>targetProto</var> be ? <var>target</var>.[[GetPrototypeOf]]().</li><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>handlerProto</var>, <var>targetProto</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>handlerProto</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[GetPrototypeOf]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[GetPrototypeOf]] must be either an Object or <emu-val>null</emu-val>.
          
          </li>
          <li>
            If the target object is not extensible, [[GetPrototypeOf]] 
applied to the proxy object must return the same value as 
[[GetPrototypeOf]] applied to the proxy object's target object.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.2" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v">
      <h1><span class="secnum">9.5.2</span>[[SetPrototypeOf]] (<var>V</var>)<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v">#</a></span></span></h1>
      <p>When the [[SetPrototypeOf]] internal method of a Proxy exotic object <var>O</var> is called with argument <var>V</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Assert: Either <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is Object or <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>V</var>) is Null.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"setPrototypeOf"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[SetPrototypeOf]](<var>V</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var>, <var>V</var> Â»)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>extensibleTarget</var> be ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>targetProto</var> be ? <var>target</var>.[[GetPrototypeOf]]().</li><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>V</var>, <var>targetProto</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[SetPrototypeOf]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[SetPrototypeOf]] is a Boolean value.
          
          </li>
          <li>
            If the target object is not extensible, the argument value 
must be the same as the result of [[GetPrototypeOf]] applied to target 
object.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.3" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-isextensible">
      <h1><span class="secnum">9.5.3</span>[[IsExtensible]] ( )<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-isextensible">#</a></span></span></h1>
      <p>When the [[IsExtensible]] internal method of a Proxy exotic object <var>O</var> is called, the following steps are taken:</p>
      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"isExtensible"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[IsExtensible]]().</li></ol></li><li>Let <var>booleanTrapResult</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var> Â»)).</li><li>Let <var>targetResult</var> be ? <var>target</var>.[[IsExtensible]]().</li><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>booleanTrapResult</var>, <var>targetResult</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>booleanTrapResult</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[IsExtensible]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[IsExtensible]] is a Boolean value.
          
          </li>
          <li>
            [[IsExtensible]] applied to the proxy object must return the
 same value as [[IsExtensible]] applied to the proxy object's target 
object with the same argument.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.4" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-preventextensions">
      <h1><span class="secnum">9.5.4</span>[[PreventExtensions]] ( )<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-preventextensions">#</a></span></span></h1>
      <p>When the [[PreventExtensions]] internal method of a Proxy exotic object <var>O</var> is called, the following steps are taken:</p>
      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"preventExtensions"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[PreventExtensions]]().</li></ol></li><li>Let <var>booleanTrapResult</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var> Â»)).</li><li>If <var>booleanTrapResult</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>targetIsExtensible</var> be ? <var>target</var>.[[IsExtensible]]().</li><li>If <var>targetIsExtensible</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <var>booleanTrapResult</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[PreventExtensions]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[PreventExtensions]] is a Boolean value.
          
          </li>
          <li>
            [[PreventExtensions]] applied to the proxy object only returns <emu-val>true</emu-val> if [[IsExtensible]] applied to the proxy object's target object is <emu-val>false</emu-val>.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.5" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p">
      <h1><span class="secnum">9.5.5</span>[[GetOwnProperty]] (<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p">#</a></span></span></h1>
      <p>When the [[GetOwnProperty]] internal method of a Proxy exotic object <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"getOwnPropertyDescriptor"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li></ol></li><li>Let <var>trapResultObj</var> be ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var>, <var>P</var> Â»).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>trapResultObj</var>) is neither Object nor Undefined, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>trapResultObj</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, return <emu-val>undefined</emu-val>.</li><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>extensibleTarget</var>) is Boolean.</li><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>extensibleTarget</var> be ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>resultDesc</var> be ? <emu-xref aoid="ToPropertyDescriptor"><a href="#sec-topropertydescriptor">ToPropertyDescriptor</a></emu-xref>(<var>trapResultObj</var>).</li><li>Call <emu-xref aoid="CompletePropertyDescriptor"><a href="#sec-completepropertydescriptor">CompletePropertyDescriptor</a></emu-xref>(<var>resultDesc</var>).</li><li>Let <var>valid</var> be <emu-xref aoid="IsCompatiblePropertyDescriptor"><a href="#sec-iscompatiblepropertydescriptor">IsCompatiblePropertyDescriptor</a></emu-xref>(<var>extensibleTarget</var>, <var>resultDesc</var>, <var>targetDesc</var>).</li><li>If <var>valid</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>resultDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val> or <var>targetDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, then<ol><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>resultDesc</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[GetOwnProperty]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[GetOwnProperty]] must be either an Object or <emu-val>undefined</emu-val>.
          
          </li>
          <li>
            A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.
          
          </li>
          <li>
            A property cannot be reported as non-existent, if it exists 
as an own property of the target object and the target object is not 
extensible.
          
          </li>
          <li>
            A property cannot be reported as existent, if it does not 
exist as an own property of the target object and the target object is 
not extensible.
          
          </li>
          <li>
            A property cannot be reported as non-configurable, if it 
does not exist as an own property of the target object or if it exists 
as a configurable own property of the target object.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.6" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc">
      <h1><span class="secnum">9.5.6</span>[[DefineOwnProperty]] (<var>P</var>, <var>Desc</var>)<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc">#</a></span></span></h1>
      <p>When the [[DefineOwnProperty]] internal method of a Proxy exotic object <var>O</var> is called with property key <var>P</var> and <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> <var>Desc</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"defineProperty"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[DefineOwnProperty]](<var>P</var>, <var>Desc</var>).</li></ol></li><li>Let <var>descObj</var> be <emu-xref aoid="FromPropertyDescriptor"><a href="#sec-frompropertydescriptor">FromPropertyDescriptor</a></emu-xref>(<var>Desc</var>).</li><li>Let <var>booleanTrapResult</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var>, <var>P</var>, <var>descObj</var> Â»)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>Let <var>extensibleTarget</var> be ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>Desc</var> has a [[Configurable]] field and if <var>Desc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Let <var>settingConfigFalse</var> be <emu-val>true</emu-val>.</li></ol></li><li>Else, let <var>settingConfigFalse</var> be <emu-val>false</emu-val>.</li><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, then<ol><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>settingConfigFalse</var> is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Else <var>targetDesc</var> is not <emu-val>undefined</emu-val>,<ol><li>If <emu-xref aoid="IsCompatiblePropertyDescriptor"><a href="#sec-iscompatiblepropertydescriptor">IsCompatiblePropertyDescriptor</a></emu-xref>(<var>extensibleTarget</var>, <var>Desc</var>, <var>targetDesc</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>settingConfigFalse</var> is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[DefineOwnProperty]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[DefineOwnProperty]] is a Boolean value.
          
          </li>
          <li>
            A property cannot be added, if the target object is not extensible.
          
          </li>
          <li>
            A property cannot be non-configurable, unless there exists a
 corresponding non-configurable own property of the target object.
          
          </li>
          <li>
            If a property has a corresponding target object property then applying the <emu-xref href="#sec-property-descriptor-specification-type"><a href="#sec-property-descriptor-specification-type">Property Descriptor</a></emu-xref> of the property to the target object using [[DefineOwnProperty]] will not throw an exception.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.7" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p">
      <h1><span class="secnum">9.5.7</span>[[HasProperty]] (<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p">#</a></span></span></h1>
      <p>When the [[HasProperty]] internal method of a Proxy exotic object <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"has"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[HasProperty]](<var>P</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var>, <var>P</var> Â»)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>extensibleTarget</var> be ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>If <var>extensibleTarget</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>booleanTrapResult</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[HasProperty]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[HasProperty]] is a Boolean value.
          
          </li>
          <li>
            A property cannot be reported as non-existent, if it exists as a non-configurable own property of the target object.
          
          </li>
          <li>
            A property cannot be reported as non-existent, if it exists 
as an own property of the target object and the target object is not 
extensible.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.8" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver">
      <h1><span class="secnum">9.5.8</span>[[Get]] (<var>P</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver">#</a></span></span></h1>
      <p>When the [[Get]] internal method of a Proxy exotic object <var>O</var> is called with property key <var>P</var> and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"get"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[Get]](<var>P</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>trapResult</var> be ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var>, <var>P</var>, <var>Receiver</var> Â»).</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val> and <var>targetDesc</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>trapResult</var>, <var>targetDesc</var>.[[Value]]) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val> and <var>targetDesc</var>.[[Get]] is <emu-val>undefined</emu-val>, then<ol><li>If <var>trapResult</var> is not <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <var>trapResult</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[Get]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The value reported for a property must be the same as the 
value of the corresponding target object property if the target object 
property is a non-writable, non-configurable own data property.
          
          </li>
          <li>
            The value reported for a property must be <emu-val>undefined</emu-val> if the corresponding target object property is a non-configurable own accessor property that has <emu-val>undefined</emu-val> as its [[Get]] attribute.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.9" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver">
      <h1><span class="secnum">9.5.9</span>[[Set]] ( <var>P</var>, <var>V</var>, <var>Receiver</var>)<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver">#</a></span></span></h1>
      <p>When the [[Set]] internal method of a Proxy exotic object <var>O</var> is called with property key <var>P</var>, value <var>V</var>, and <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language value</a></emu-xref> <var>Receiver</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"set"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[Set]](<var>P</var>, <var>V</var>, <var>Receiver</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var>, <var>P</var>, <var>V</var>, <var>Receiver</var> Â»)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is not <emu-val>undefined</emu-val>, then<ol><li>If <emu-xref aoid="IsDataDescriptor"><a href="#sec-isdatadescriptor">IsDataDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val> and <var>targetDesc</var>.[[Writable]] is <emu-val>false</emu-val>, then<ol><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>V</var>, <var>targetDesc</var>.[[Value]]) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li><li>If <emu-xref aoid="IsAccessorDescriptor"><a href="#sec-isaccessordescriptor">IsAccessorDescriptor</a></emu-xref>(<var>targetDesc</var>) is <emu-val>true</emu-val> and <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>If <var>targetDesc</var>.[[Set]] is <emu-val>undefined</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[Set]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[Set]] is a Boolean value.
          
          </li>
          <li>
            Cannot change the value of a property to be different from 
the value of the corresponding target object property if the 
corresponding target object property is a non-writable, non-configurable
 own data property.
          
          </li>
          <li>
            Cannot set the value of a property if the corresponding 
target object property is a non-configurable own accessor property that 
has <emu-val>undefined</emu-val> as its [[Set]] attribute.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.10" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-delete-p">
      <h1><span class="secnum">9.5.10</span>[[Delete]] (<var>P</var>)<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-delete-p">#</a></span></span></h1>
      <p>When the [[Delete]] internal method of a Proxy exotic object <var>O</var> is called with property key <var>P</var>, the following steps are taken:</p>
      <emu-alg><ol><li>Assert: <emu-xref aoid="IsPropertyKey"><a href="#sec-ispropertykey">IsPropertyKey</a></emu-xref>(<var>P</var>) is <emu-val>true</emu-val>.</li><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"deleteProperty"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[Delete]](<var>P</var>).</li></ol></li><li>Let <var>booleanTrapResult</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var>, <var>P</var> Â»)).</li><li>If <var>booleanTrapResult</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>targetDesc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>P</var>).</li><li>If <var>targetDesc</var> is <emu-val>undefined</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>targetDesc</var>.[[Configurable]] is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[Delete]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[Delete]] is a Boolean value.
          
          </li>
          <li>
            A property cannot be reported as deleted, if it exists as a non-configurable own property of the target object.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.12" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys">
      <h1><span class="secnum">9.5.11</span>[[OwnPropertyKeys]] ( )<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys">#</a></span></span></h1>
      <p>When the [[OwnPropertyKeys]] internal method of a Proxy exotic object <var>O</var> is called, the following steps are taken:</p>
      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"ownKeys"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <var>target</var>.[[OwnPropertyKeys]]().</li></ol></li><li>Let <var>trapResultArray</var> be ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var> Â»).</li><li>Let <var>trapResult</var> be ? <emu-xref aoid="CreateListFromArrayLike"><a href="#sec-createlistfromarraylike">CreateListFromArrayLike</a></emu-xref>(<var>trapResultArray</var>, Â« String, Symbol Â»).</li><li>Let <var>extensibleTarget</var> be ? <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref>(<var>target</var>).</li><li>Let <var>targetKeys</var> be ? <var>target</var>.[[OwnPropertyKeys]]().</li><li>Assert: <var>targetKeys</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing only String and Symbol values.</li><li>Let <var>targetConfigurableKeys</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Let <var>targetNonconfigurableKeys</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Repeat, for each element <var>key</var> of <var>targetKeys</var>,<ol><li>Let <var>desc</var> be ? <var>target</var>.[[GetOwnProperty]](<var>key</var>).</li><li>If <var>desc</var> is not <emu-val>undefined</emu-val> and <var>desc</var>.[[Configurable]] is <emu-val>false</emu-val>, then<ol><li>Append <var>key</var> as an element of <var>targetNonconfigurableKeys</var>.</li></ol></li><li>Else,<ol><li>Append <var>key</var> as an element of <var>targetConfigurableKeys</var>.</li></ol></li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val> and <var>targetNonconfigurableKeys</var> is empty, then<ol><li>Return <var>trapResult</var>.</li></ol></li><li>Let <var>uncheckedResultKeys</var> be a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> which is a copy of <var>trapResult</var>.</li><li>Repeat, for each <var>key</var> that is an element of <var>targetNonconfigurableKeys</var>,<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove all occurrences of <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>extensibleTarget</var> is <emu-val>true</emu-val>, return <var>trapResult</var>.</li><li>Repeat, for each <var>key</var> that is an element of <var>targetConfigurableKeys</var>,<ol><li>If <var>key</var> is not an element of <var>uncheckedResultKeys</var>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Remove all occurrences of <var>key</var> from <var>uncheckedResultKeys</var>.</li></ol></li><li>If <var>uncheckedResultKeys</var> is not empty, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>trapResult</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>[[OwnPropertyKeys]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[OwnPropertyKeys]] is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
          
          </li>
          <li>
            The Type of each result <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> element is either String or Symbol.
          
          </li>
          <li>
            The result <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> must contain the keys of all non-configurable own properties of the target object.
          
          </li>
          <li>
            If the target object is not extensible, then the result <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> must contain all the keys of the own properties of the target object and no other values.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.13" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist">
      <h1><span class="secnum">9.5.12</span>[[Call]] (<var>thisArgument</var>, <var>argumentsList</var>)<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist">#</a></span></span></h1>
      <p>The [[Call]] internal method of a Proxy exotic object <var>O</var> is called with parameters <var>thisArgument</var> and <var>argumentsList</var>, a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ECMAScript language values. The following steps are taken:</p>
      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"apply"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Return ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>target</var>, <var>thisArgument</var>, <var>argumentsList</var>).</li></ol></li><li>Let <var>argArray</var> be <emu-xref aoid="CreateArrayFromList"><a href="#sec-createarrayfromlist">CreateArrayFromList</a></emu-xref>(<var>argumentsList</var>).</li><li>Return ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var>, <var>thisArgument</var>, <var>argArray</var> Â»).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>A Proxy exotic object only has a [[Call]] internal method if 
the initial value of its [[ProxyTarget]] internal slot is an object that
 has a [[Call]] internal method.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.14" -->
    <emu-clause id="sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget">
      <h1><span class="secnum">9.5.13</span>[[Construct]] ( <var>argumentsList</var>, <var>newTarget</var>)<span class="utils"><span class="anchor"><a href="#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget">#</a></span></span></h1>
      <p>The [[Construct]] internal method of a Proxy exotic object <var>O</var> is called with parameters <var>argumentsList</var> which is a possibly empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ECMAScript language values and <var>newTarget</var>. The following steps are taken:</p>
      <emu-alg><ol><li>Let <var>handler</var> be <var>O</var>.[[ProxyHandler]].</li><li>If <var>handler</var> is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is Object.</li><li>Let <var>target</var> be <var>O</var>.[[ProxyTarget]].</li><li>Let <var>trap</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>handler</var>, <code>"construct"</code>).</li><li>If <var>trap</var> is <emu-val>undefined</emu-val>, then<ol><li>Assert: <var>target</var> has a [[Construct]] internal method.</li><li>Return ? <emu-xref aoid="Construct"><a href="#sec-construct">Construct</a></emu-xref>(<var>target</var>, <var>argumentsList</var>, <var>newTarget</var>).</li></ol></li><li>Let <var>argArray</var> be <emu-xref aoid="CreateArrayFromList"><a href="#sec-createarrayfromlist">CreateArrayFromList</a></emu-xref>(<var>argumentsList</var>).</li><li>Let <var>newObj</var> be ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>trap</var>, <var>handler</var>, Â« <var>target</var>, <var>argArray</var>, <var>newTarget</var> Â»).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>newObj</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>newObj</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 1</span>
        <p>A Proxy exotic object only has a [[Construct]] internal 
method if the initial value of its [[ProxyTarget]] internal slot is an 
object that has a [[Construct]] internal method.</p>
      </emu-note>
      <emu-note><span class="note">Note 2</span>
        <p>[[Construct]] for proxy objects enforces the following invariants:</p>
        <ul>
          <li>
            The result of [[Construct]] must be an Object.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="9.5.15" -->
    <emu-clause id="sec-proxycreate" aoid="ProxyCreate">
      <h1><span class="secnum">9.5.14</span>ProxyCreate (<var>target</var>, <var>handler</var>)<span class="utils"><span class="anchor"><a href="#sec-proxycreate">#</a></span></span></h1>
      <p>The abstract operation ProxyCreate with arguments <var>target</var> and <var>handler</var> is used to specify the creation of new Proxy exotic objects. It performs the following steps:</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>target</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>target</var> is a Proxy exotic object and <var>target</var>.[[ProxyHandler]] is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>handler</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>handler</var> is a Proxy exotic object and <var>handler</var>.[[ProxyHandler]] is <emu-val>null</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>P</var> be a newly created object.</li><li>Set <var>P</var>'s essential internal methods (except for [[Call]] and [[Construct]]) to the definitions specified in <emu-xref href="#sec-proxy-object-internal-methods-and-internal-slots"><a href="#sec-proxy-object-internal-methods-and-internal-slots">9.5</a></emu-xref>.</li><li>If <emu-xref aoid="IsCallable"><a href="#sec-iscallable">IsCallable</a></emu-xref>(<var>target</var>) is <emu-val>true</emu-val>, then<ol><li>Set the [[Call]] internal method of <var>P</var> as specified in <emu-xref href="#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist"><a href="#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist">9.5.12</a></emu-xref>.</li><li>If <var>target</var> has a [[Construct]] internal method, then<ol><li>Set the [[Construct]] internal method of <var>P</var> as specified in <emu-xref href="#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget"><a href="#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget">9.5.13</a></emu-xref>.</li></ol></li></ol></li><li>Set <var>P</var>.[[ProxyTarget]] to <var>target</var>.</li><li>Set <var>P</var>.[[ProxyHandler]] to <var>handler</var>.</li><li>Return <var>P</var>.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>
</emu-clause>

<!-- es6num="10" -->
<emu-clause id="sec-ecmascript-language-source-code">
  <h1><span class="secnum">10</span>ECMAScript Language: Source Code<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-source-code">#</a></span></span></h1>

  <!-- es6num="10.1" -->
  <emu-clause id="sec-source-text">
    <h1><span class="secnum">10.1</span>Source Text<span class="utils"><span class="anchor"><a href="#sec-source-text">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="SourceCharacter" type="lexical" id="prod-SourceCharacter">
    <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="c64b38bd"><emu-gprose>any Unicode code point</emu-gprose></emu-rhs>
</emu-production></emu-grammar>
    <p>ECMAScript code is expressed using Unicode. ECMAScript source 
text is a sequence of code points. All Unicode code point values from 
U+0000 to U+10FFFF, including surrogate code points, may occur in source
 text where permitted by the ECMAScript grammars. The actual encodings 
used to store and interchange ECMAScript source text is not relevant to 
this specification. Regardless of the external source text encoding, a 
conforming ECMAScript implementation processes the source text as if it 
was an equivalent sequence of <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt> values, each <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt>
 being a Unicode code point. Conforming ECMAScript implementations are 
not required to perform any normalization of source text, or behave as 
though they were performing normalization of source text.</p>
    <p>The components of a combining character sequence are treated as 
individual Unicode code points even though a user might think of the 
whole sequence as a single character.</p>
    <emu-note><span class="note">Note</span>
      <p>In string literals, regular expression literals, template 
literals and identifiers, any Unicode code point may also be expressed 
using Unicode escape sequences that explicitly express a code point's 
numeric value. Within a comment, such an escape sequence is effectively 
ignored as part of the comment.</p>
      <p>ECMAScript differs from the Java programming language in the 
behaviour of Unicode escape sequences. In a Java program, if the Unicode
 escape sequence <code>\u000A</code>, for example, occurs within a 
single-line comment, it is interpreted as a line terminator (Unicode 
code point U+000A is LINE FEED (LF)) and therefore the next code point 
is not part of the comment. Similarly, if the Unicode escape sequence <code>\u000A</code>
 occurs within a string literal in a Java program, it is likewise 
interpreted as a line terminator, which is not allowed within a string 
literalâone must write <code>\n</code> instead of <code>\u000A</code> to
 cause a LINE FEED (LF) to be part of the String value of a string 
literal. In an ECMAScript program, a Unicode escape sequence occurring 
within a comment is never interpreted and therefore cannot contribute to
 termination of the comment. Similarly, a Unicode escape sequence 
occurring within a string literal in an ECMAScript program always 
contributes to the literal and is never interpreted as a line terminator
 or as a code point that might terminate the string literal.</p>
    </emu-note>

    <!-- es6num="10.1.1" -->
    <emu-clause id="sec-utf16encoding" aoid="UTF16Encoding">
      <h1><span class="secnum">10.1.1</span>Static Semantics: UTF16Encoding ( <var>cp</var> )<span class="utils"><span class="anchor"><a href="#sec-utf16encoding">#</a></span></span></h1>
      <p>The UTF16Encoding of a numeric code point value, <var>cp</var>, is determined as follows:</p>
      <emu-alg><ol><li>Assert: 0 â¤ <var>cp</var> â¤ 0x10FFFF.</li><li>If <var>cp</var> â¤ 0xFFFF, return <var>cp</var>.</li><li>Let <var>cu1</var> be <emu-xref aoid="floor"><a href="#sec-algorithm-conventions">floor</a></emu-xref>((<var>cp</var> - 0x10000) / 0x400) + 0xD800.</li><li>Let <var>cu2</var> be ((<var>cp</var> - 0x10000) <emu-xref aoid="modulo"><a href="#sec-algorithm-conventions">modulo</a></emu-xref> 0x400) + 0xDC00.</li><li>Return the code unit sequence consisting of <var>cu1</var> followed by <var>cu2</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="10.1.2" -->
    <emu-clause id="sec-utf16decode" aoid="UTF16Decode">
      <h1><span class="secnum">10.1.2</span>Static Semantics: UTF16Decode( <var>lead</var>, <var>trail</var> )<span class="utils"><span class="anchor"><a href="#sec-utf16decode">#</a></span></span></h1>
      <p>Two code units, <var>lead</var> and <var>trail</var>, that form a UTF-16 surrogate pair are converted to a code point by performing the following steps:</p>
      <emu-alg><ol><li>Assert: 0xD800 â¤ <var>lead</var> â¤ 0xDBFF and 0xDC00 â¤ <var>trail</var> â¤ 0xDFFF.</li><li>Let <var>cp</var> be (<var>lead</var> - 0xD800) Ã 0x400 + (<var>trail</var> - 0xDC00) + 0x10000.</li><li>Return the code point <var>cp</var>.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="10.2" -->
  <emu-clause id="sec-types-of-source-code">
    <h1><span class="secnum">10.2</span>Types of Source Code<span class="utils"><span class="anchor"><a href="#sec-types-of-source-code">#</a></span></span></h1>
    <p>There are four types of ECMAScript code:</p>
    <ul>
      <li>
        <em>Global code</em> is source text that is treated as an ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt>. The global code of a particular <emu-nt><a href="#prod-Script">Script</a></emu-nt> does not include any source text that is parsed as part of a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt>, <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt>, <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt>, <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt>, <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt>, or <emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt>.
      
      </li>
      <li>
        <em>Eval code</em> is the source text supplied to the built-in <code>eval</code> function. More precisely, if the parameter to the built-in <code>eval</code> function is a String, it is treated as an ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt>. The eval code for a particular invocation of <code>eval</code> is the global code portion of that <emu-nt><a href="#prod-Script">Script</a></emu-nt>.
      
      </li>
      <li>
        <em>Function code</em> is source text that is parsed to supply the value of the [[ECMAScriptCode]] and [[FormalParameters]] internal slots (see  <emu-xref href="#sec-ecmascript-function-objects"><a href="#sec-ecmascript-function-objects">9.2</a></emu-xref>)
 of an ECMAScript function object. The function code of a particular 
ECMAScript function does not include any source text that is parsed as 
the function code of a nested <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt>, <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt>, <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt>, <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt>, <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt>, or <emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt>.
      
      </li>
      <li>
        <em>Module code</em> is source text that is code that is provided as a <emu-nt><a href="#prod-ModuleBody">ModuleBody</a></emu-nt>.
 It is the code that is directly evaluated when a module is initialized.
 The module code of a particular module does not include any source text
 that is parsed as part of a nested <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt>, <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt>, <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt>, <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt>, <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt>, or <emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt>.
      
      </li>
    </ul>
    <emu-note><span class="note">Note</span>
      <p>Function code is generally provided as the bodies of Function Definitions (<emu-xref href="#sec-function-definitions"><a href="#sec-function-definitions">14.1</a></emu-xref>), Arrow Function Definitions (<emu-xref href="#sec-arrow-function-definitions"><a href="#sec-arrow-function-definitions">14.2</a></emu-xref>), Method Definitions (<emu-xref href="#sec-method-definitions"><a href="#sec-method-definitions">14.3</a></emu-xref>) and Generator Definitions (<emu-xref href="#sec-generator-function-definitions"><a href="#sec-generator-function-definitions">14.4</a></emu-xref>). Function code is also derived from the arguments to the <code>Function</code> constructor (<emu-xref href="#sec-function-p1-p2-pn-body"><a href="#sec-function-p1-p2-pn-body">19.2.1.1</a></emu-xref>) and the GeneratorFunction constructor (<emu-xref href="#sec-generatorfunction"><a href="#sec-generatorfunction">25.2.1.1</a></emu-xref>).</p>
    </emu-note>

    <!-- es6num="10.2.1" -->
    <emu-clause id="sec-strict-mode-code">
      <h1><span class="secnum">10.2.1</span>Strict Mode Code<span class="utils"><span class="anchor"><a href="#sec-strict-mode-code">#</a></span></span></h1>
      <p>An ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt> syntactic unit may be processed using either unrestricted or strict mode syntax and semantics. Code is interpreted as  <dfn>strict mode code</dfn> in the following situations:</p>
      <ul>
        <li>
          Global code is strict mode code if it begins with a <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref> that contains a <emu-xref href="#use-strict-directive"><a href="#use-strict-directive">Use Strict Directive</a></emu-xref>.
        
        </li>
        <li>
          Module code is always strict mode code.
        
        </li>
        <li>
          All parts of a <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt> or a <emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt> are strict mode code.
        
        </li>
        <li>
          Eval code is strict mode code if it begins with a <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref> that contains a <emu-xref href="#use-strict-directive"><a href="#use-strict-directive">Use Strict Directive</a></emu-xref> or if the call to <code>eval</code> is a <emu-xref href="#sec-function-calls-runtime-semantics-evaluation"><a href="#sec-function-calls-runtime-semantics-evaluation">direct eval</a></emu-xref> that is contained in strict mode code.
        
        </li>
        <li>
          Function code is strict mode code if the associated <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt>, <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt>, <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt>, or <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt>
 is contained in strict mode code or if the code that produces the value
 of the function's [[ECMAScriptCode]] internal slot begins with a <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref> that contains a <emu-xref href="#use-strict-directive"><a href="#use-strict-directive">Use Strict Directive</a></emu-xref>.
        
        </li>
        <li>
          Function code that is supplied as the arguments to the built-in <code>Function</code> and <code>Generator</code> constructors is strict mode code if the last argument is a String that when processed is a <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> that begins with a <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref> that contains a <emu-xref href="#use-strict-directive"><a href="#use-strict-directive">Use Strict Directive</a></emu-xref>.
        
        </li>
      </ul>
      <p>ECMAScript code that is not strict mode code is called  <dfn id="non-strict-code">non-strict code</dfn>.</p>
    </emu-clause>

    <!-- es6num="10.2.2" -->
    <emu-clause id="sec-non-ecmascript-functions">
      <h1><span class="secnum">10.2.2</span>Non-ECMAScript Functions<span class="utils"><span class="anchor"><a href="#sec-non-ecmascript-functions">#</a></span></span></h1>
      <p>An ECMAScript implementation may support the evaluation of 
exotic function objects whose evaluative behaviour is expressed in some 
implementation defined form of executable code other than via ECMAScript
 code. Whether a function object is an ECMAScript code function or a 
non-ECMAScript function is not semantically observable from the 
perspective of an ECMAScript code function that calls or is called by 
such a non-ECMAScript function.</p>
    </emu-clause>
  </emu-clause>
</emu-clause>

<!-- es6num="11" -->
<emu-clause id="sec-ecmascript-language-lexical-grammar">
  <h1><span class="secnum">11</span>ECMAScript Language: Lexical Grammar<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-lexical-grammar">#</a></span></span></h1>
  <p>The source text of an ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>
 is first converted into a sequence of input elements, which are tokens,
 line terminators, comments, or white space. The source text is scanned 
from left to right, repeatedly taking the longest possible sequence of 
code points as the next input element.</p>
  <p>There are several situations where the identification of lexical 
input elements is sensitive to the syntactic grammar context that is 
consuming the input elements. This requires multiple goal symbols for 
the lexical grammar. The <emu-nt><a href="#prod-InputElementRegExpOrTemplateTail">InputElementRegExpOrTemplateTail</a></emu-nt> goal is used in syntactic grammar contexts where a <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt>, a <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt>, or a <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href="#prod-InputElementRegExp">InputElementRegExp</a></emu-nt> <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> is used in all syntactic grammar contexts where a <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt> is permitted but neither a <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt>, nor a <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt> is permitted. The <emu-nt><a href="#prod-InputElementTemplateTail">InputElementTemplateTail</a></emu-nt> goal is used in all syntactic grammar contexts where a <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt> or a <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt> is permitted but a <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt> is not permitted. In all other contexts, <emu-nt><a href="#prod-InputElementDiv">InputElementDiv</a></emu-nt> is used as the lexical <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.</p>
  <emu-note><span class="note">Note</span>
    <p>The use of multiple lexical goals ensures that there are no 
lexical ambiguities that would affect automatic semicolon insertion. For
 example, there are no syntactic grammar contexts where both a leading 
division or division-assignment, and a leading <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt> are permitted. This is not affected by semicolon insertion (see  <emu-xref href="#sec-automatic-semicolon-insertion"><a href="#sec-automatic-semicolon-insertion">11.9</a></emu-xref>); in examples such as the following:</p>
    <pre><code class="javascript hljs">a = b
/hi/g.exec(c).map(d);</code></pre>
    <p>where the first non-whitespace, non-comment code point after a <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> is U+002F (SOLIDUS) and the syntactic context allows division or division-assignment, no semicolon is inserted at the <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt>. That is, the above example is interpreted in the same way as:</p>
    <pre><code class="javascript hljs">a = b / hi / g.exec(c).map(d);</code></pre>
  </emu-note>
  <h2>Syntax</h2>
  <emu-grammar><emu-production name="InputElementDiv" type="lexical" id="prod-InputElementDiv">
    <emu-nt><a href="#prod-InputElementDiv">InputElementDiv</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1424dc49"><emu-nt><a href="#prod-WhiteSpace">WhiteSpace</a></emu-nt></emu-rhs>
    <emu-rhs a="3b331ccd"><emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-rhs>
    <emu-rhs a="153d7a58"><emu-nt><a href="#prod-Comment">Comment</a></emu-nt></emu-rhs>
    <emu-rhs a="83158895"><emu-nt><a href="#prod-CommonToken">CommonToken</a></emu-nt></emu-rhs>
    <emu-rhs a="28035084"><emu-nt><a href="#prod-DivPunctuator">DivPunctuator</a></emu-nt></emu-rhs>
    <emu-rhs a="121314a7"><emu-nt><a href="#prod-RightBracePunctuator">RightBracePunctuator</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="InputElementRegExp" type="lexical" id="prod-InputElementRegExp">
    <emu-nt><a href="#prod-InputElementRegExp">InputElementRegExp</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1424dc49"><emu-nt><a href="#prod-WhiteSpace">WhiteSpace</a></emu-nt></emu-rhs>
    <emu-rhs a="3b331ccd"><emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-rhs>
    <emu-rhs a="153d7a58"><emu-nt><a href="#prod-Comment">Comment</a></emu-nt></emu-rhs>
    <emu-rhs a="83158895"><emu-nt><a href="#prod-CommonToken">CommonToken</a></emu-nt></emu-rhs>
    <emu-rhs a="121314a7"><emu-nt><a href="#prod-RightBracePunctuator">RightBracePunctuator</a></emu-nt></emu-rhs>
    <emu-rhs a="31b672e8"><emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="InputElementRegExpOrTemplateTail" type="lexical" id="prod-InputElementRegExpOrTemplateTail">
    <emu-nt><a href="#prod-InputElementRegExpOrTemplateTail">InputElementRegExpOrTemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1424dc49"><emu-nt><a href="#prod-WhiteSpace">WhiteSpace</a></emu-nt></emu-rhs>
    <emu-rhs a="3b331ccd"><emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-rhs>
    <emu-rhs a="153d7a58"><emu-nt><a href="#prod-Comment">Comment</a></emu-nt></emu-rhs>
    <emu-rhs a="83158895"><emu-nt><a href="#prod-CommonToken">CommonToken</a></emu-nt></emu-rhs>
    <emu-rhs a="31b672e8"><emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="62ae6eb9"><emu-nt><a href="#prod-TemplateSubstitutionTail">TemplateSubstitutionTail</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="InputElementTemplateTail" type="lexical" id="prod-InputElementTemplateTail">
    <emu-nt><a href="#prod-InputElementTemplateTail">InputElementTemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1424dc49"><emu-nt><a href="#prod-WhiteSpace">WhiteSpace</a></emu-nt></emu-rhs>
    <emu-rhs a="3b331ccd"><emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-rhs>
    <emu-rhs a="153d7a58"><emu-nt><a href="#prod-Comment">Comment</a></emu-nt></emu-rhs>
    <emu-rhs a="83158895"><emu-nt><a href="#prod-CommonToken">CommonToken</a></emu-nt></emu-rhs>
    <emu-rhs a="28035084"><emu-nt><a href="#prod-DivPunctuator">DivPunctuator</a></emu-nt></emu-rhs>
    <emu-rhs a="62ae6eb9"><emu-nt><a href="#prod-TemplateSubstitutionTail">TemplateSubstitutionTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>

  <!-- es6num="11.1" -->
  <emu-clause id="sec-unicode-format-control-characters">
    <h1><span class="secnum">11.1</span>Unicode Format-Control Characters<span class="utils"><span class="anchor"><a href="#sec-unicode-format-control-characters">#</a></span></span></h1>
    <p>The Unicode format-control characters (i.e., the characters in 
category âCfâ in the Unicode Character Database such as LEFT-TO-RIGHT 
MARK or RIGHT-TO-LEFT MARK) are control codes used to control the 
formatting of a range of text in the absence of higher-level protocols 
for this (such as mark-up languages).</p>
    <p>It is useful to allow format-control characters in source text to
 facilitate editing and display. All format control characters may be 
used within comments, and within string literals, template literals, and
 regular expression literals.</p>
    <p>U+200C (ZERO WIDTH NON-JOINER) and U+200D (ZERO WIDTH JOINER) are
 format-control characters that are used to make necessary distinctions 
when forming words or phrases in certain languages. In ECMAScript source
 text these code points may also be used in an <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> after the first character.</p>
    <p>U+FEFF (ZERO WIDTH NO-BREAK SPACE) is a format-control character 
used primarily at the start of a text to mark it as Unicode and to allow
 detection of the text's encoding and byte order. &lt;ZWNBSP&gt; 
characters intended for this purpose can sometimes also appear after the
 start of a text, for example as a result of concatenating files. In 
ECMAScript source text &lt;ZWNBSP&gt; code points are treated as white 
space characters (see  <emu-xref href="#sec-white-space"><a href="#sec-white-space">11.2</a></emu-xref>).</p>
    <p>The special treatment of certain format-control characters 
outside of comments, string literals, and regular expression literals is
 summarized in  <emu-xref href="#table-31"><a href="#table-31">Table 31</a></emu-xref>.</p>
    <emu-table id="table-31" caption="Format-Control Code Point Usage"><figure><figcaption>Table 31: Format-Control Code Point Usage</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Code Point
          
          </th>
          <th>
            Name
          
          </th>
          <th>
            Abbreviation
          
          </th>
          <th>
            Usage
          
          </th>
        </tr>
        <tr>
          <td>
            <code>U+200C</code>
          
          </td>
          <td>
            ZERO WIDTH NON-JOINER
          
          </td>
          <td>
            &lt;ZWNJ&gt;
          
          </td>
          <td>
            <emu-nt><a href="#prod-IdentifierPart">IdentifierPart</a></emu-nt>
          
          </td>
        </tr>
        <tr>
          <td>
            <code>U+200D</code>
          
          </td>
          <td>
            ZERO WIDTH JOINER
          
          </td>
          <td>
            &lt;ZWJ&gt;
          
          </td>
          <td>
            <emu-nt><a href="#prod-IdentifierPart">IdentifierPart</a></emu-nt>
          
          </td>
        </tr>
        <tr>
          <td>
            <code>U+FEFF</code>
          
          </td>
          <td>
            ZERO WIDTH NO-BREAK SPACE
          
          </td>
          <td>
            &lt;ZWNBSP&gt;
          
          </td>
          <td>
            <emu-nt><a href="#prod-WhiteSpace">WhiteSpace</a></emu-nt>
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>
  </emu-clause>

  <!-- es6num="11.2" -->
  <emu-clause id="sec-white-space">
    <h1><span class="secnum">11.2</span>White Space<span class="utils"><span class="anchor"><a href="#sec-white-space">#</a></span></span></h1>
    <p>White space code points are used to improve source text 
readability and to separate tokens (indivisible lexical units) from each
 other, but are otherwise insignificant. White space code points may 
occur between any two tokens and at the start or end of input. White 
space code points may occur within a <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt>, a <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt>, a <emu-nt><a href="#prod-Template">Template</a></emu-nt>, or a <emu-nt><a href="#prod-TemplateSubstitutionTail">TemplateSubstitutionTail</a></emu-nt> where they are considered significant code points forming part of a literal value. They may also occur within a <emu-nt><a href="#prod-Comment">Comment</a></emu-nt>, but cannot appear within any other kind of token.</p>
    <p>The ECMAScript white space code points are listed in  <emu-xref href="#table-32"><a href="#table-32">Table 32</a></emu-xref>.</p>
    <emu-table id="table-32" caption="White Space Code Points"><figure><figcaption>Table 32: White Space Code Points</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Code Point
          
          </th>
          <th>
            Name
          
          </th>
          <th>
            Abbreviation
          
          </th>
        </tr>
        <tr>
          <td>
            <code>U+0009</code>
          
          </td>
          <td>
            CHARACTER TABULATION
          
          </td>
          <td>
            &lt;TAB&gt;
          
          </td>
        </tr>
        <tr>
          <td>
            <code>U+000B</code>
          
          </td>
          <td>
            LINE TABULATION
          
          </td>
          <td>
            &lt;VT&gt;
          
          </td>
        </tr>
        <tr>
          <td>
            <code>U+000C</code>
          
          </td>
          <td>
            FORM FEED (FF)
          
          </td>
          <td>
            &lt;FF&gt;
          
          </td>
        </tr>
        <tr>
          <td>
            <code>U+0020</code>
          
          </td>
          <td>
            SPACE
          
          </td>
          <td>
            &lt;SP&gt;
          
          </td>
        </tr>
        <tr>
          <td>
            <code>U+00A0</code>
          
          </td>
          <td>
            NO-BREAK SPACE
          
          </td>
          <td>
            &lt;NBSP&gt;
          
          </td>
        </tr>
        <tr>
          <td>
            <code>U+FEFF</code>
          
          </td>
          <td>
            ZERO WIDTH NO-BREAK SPACE
          
          </td>
          <td>
            &lt;ZWNBSP&gt;
          
          </td>
        </tr>
        <tr>
          <td>
            Other category âZsâ
          
          </td>
          <td>
            Any other Unicode âSpace_Separatorâ code point
          
          </td>
          <td>
            &lt;USP&gt;
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>
    <p>ECMAScript implementations must recognize as <emu-nt><a href="#prod-WhiteSpace">WhiteSpace</a></emu-nt> code points listed in the âSpace_Separatorâ (âZsâ) category.</p>
    <emu-note><span class="note">Note</span>
      <p>Other than for the code points listed in  <emu-xref href="#table-32"><a href="#table-32">Table 32</a></emu-xref>, ECMAScript <emu-nt><a href="#prod-WhiteSpace">WhiteSpace</a></emu-nt>
 intentionally excludes all code points that have the Unicode 
âWhite_Spaceâ property but which are not classified in category 
âSpace_Separatorâ (âZsâ).</p>
    </emu-note>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="WhiteSpace" type="lexical" id="prod-WhiteSpace">
    <emu-nt><a href="#prod-WhiteSpace">WhiteSpace</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="9384a802"><emu-gprose>&lt;TAB&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="c3f7084f"><emu-gprose>&lt;VT&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="0d57c596"><emu-gprose>&lt;FF&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="d35745b8"><emu-gprose>&lt;SP&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="404e9052"><emu-gprose>&lt;NBSP&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="fb8196ba"><emu-gprose>&lt;ZWNBSP&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="ebc9d288"><emu-gprose>&lt;USP&gt;</emu-gprose></emu-rhs>
</emu-production></emu-grammar>
  </emu-clause>

  <!-- es6num="11.3" -->
  <emu-clause id="sec-line-terminators">
    <h1><span class="secnum">11.3</span>Line Terminators<span class="utils"><span class="anchor"><a href="#sec-line-terminators">#</a></span></span></h1>
    <p>Like white space code points, line terminator code points are 
used to improve source text readability and to separate tokens 
(indivisible lexical units) from each other. However, unlike white space
 code points, line terminators have some influence over the behaviour of
 the syntactic grammar. In general, line terminators may occur between 
any two tokens, but there are a few places where they are forbidden by 
the syntactic grammar. Line terminators also affect the process of 
automatic semicolon insertion (<emu-xref href="#sec-automatic-semicolon-insertion"><a href="#sec-automatic-semicolon-insertion">11.9</a></emu-xref>). A line terminator cannot occur within any token except a <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt>, <emu-nt><a href="#prod-Template">Template</a></emu-nt>, or <emu-nt><a href="#prod-TemplateSubstitutionTail">TemplateSubstitutionTail</a></emu-nt>. Line terminators may only occur within a <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt> token as part of a <emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt>.</p>
    <p>A line terminator can occur within a <emu-nt><a href="#prod-MultiLineComment">MultiLineComment</a></emu-nt> but cannot occur within a <emu-nt><a href="#prod-SingleLineComment">SingleLineComment</a></emu-nt>.</p>
    <p>Line terminators are included in the set of white space code points that are matched by the <code>\s</code> class in regular expressions.</p>
    <p>The ECMAScript line terminator code points are listed in  <emu-xref href="#table-33"><a href="#table-33">Table 33</a></emu-xref>.</p>
    <emu-table id="table-33" caption="Line Terminator Code Points"><figure><figcaption>Table 33: Line Terminator Code Points</figcaption>
      <table>
        <tbody>
        <tr>
          <th>
            Code Point
          
          </th>
          <th>
            Unicode Name
          
          </th>
          <th>
            Abbreviation
          
          </th>
        </tr>
        <tr>
          <td>
            <code>U+000A</code>
          
          </td>
          <td>
            LINE FEED (LF)
          
          </td>
          <td>
            &lt;LF&gt;
          
          </td>
        </tr>
        <tr>
          <td>
            <code>U+000D</code>
          
          </td>
          <td>
            CARRIAGE RETURN (CR)
          
          </td>
          <td>
            &lt;CR&gt;
          
          </td>
        </tr>
        <tr>
          <td>
            <code>U+2028</code>
          
          </td>
          <td>
            LINE SEPARATOR
          
          </td>
          <td>
            &lt;LS&gt;
          
          </td>
        </tr>
        <tr>
          <td>
            <code>U+2029</code>
          
          </td>
          <td>
            PARAGRAPH SEPARATOR
          
          </td>
          <td>
            &lt;PS&gt;
          
          </td>
        </tr>
        </tbody>
      </table>
    </figure></emu-table>
    <p>Only the Unicode code points in  <emu-xref href="#table-33"><a href="#table-33">Table 33</a></emu-xref>
 are treated as line terminators. Other new line or line breaking 
Unicode code points are not treated as line terminators but are treated 
as white space if they meet the requirements listed in  <emu-xref href="#table-32"><a href="#table-32">Table 32</a></emu-xref>. The sequence &lt;CR&gt;&lt;LF&gt; is commonly used as a line terminator. It should be considered a single <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt> for the purpose of reporting line numbers.</p>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="LineTerminator" type="lexical" id="prod-LineTerminator">
    <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7b39d525"><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="435c91d5"><emu-gprose>&lt;CR&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="10022ab3"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="cfc875d1"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>
</emu-production>
<emu-production name="LineTerminatorSequence" type="lexical" id="prod-LineTerminatorSequence">
    <emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7b39d525"><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="1e22ed49"><emu-gprose>&lt;CR&gt;</emu-gprose><emu-gann>[lookahead â  <emu-gprose>&lt;LF&gt;</emu-gprose>]</emu-gann></emu-rhs>
    <emu-rhs a="10022ab3"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="cfc875d1"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="2da252ec"><emu-gprose>&lt;CR&gt;</emu-gprose><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>
</emu-production></emu-grammar>
  </emu-clause>

  <!-- es6num="11.4" -->
  <emu-clause id="sec-comments">
    <h1><span class="secnum">11.4</span>Comments<span class="utils"><span class="anchor"><a href="#sec-comments">#</a></span></span></h1>
    <p>Comments can be either single or multi-line. Multi-line comments cannot nest.</p>
    <p>Because a single-line comment can contain any Unicode code point except a <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt>
 code point, and because of the general rule that a token is always as 
long as possible, a single-line comment always consists of all code 
points from the <code>//</code> marker to the end of the line. However, the <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt>
 at the end of the line is not considered to be part of the single-line 
comment; it is recognized separately by the lexical grammar and becomes 
part of the stream of input elements for the syntactic grammar. This 
point is very important, because it implies that the presence or absence
 of single-line comments does not affect the process of automatic 
semicolon insertion (see  <emu-xref href="#sec-automatic-semicolon-insertion"><a href="#sec-automatic-semicolon-insertion">11.9</a></emu-xref>).</p>
    <p>Comments behave like white space and are discarded except that, if a <emu-nt><a href="#prod-MultiLineComment">MultiLineComment</a></emu-nt> contains a line terminator code point, then the entire comment is considered to be a <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> for purposes of parsing by the syntactic grammar.</p>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="Comment" type="lexical" id="prod-Comment">
    <emu-nt><a href="#prod-Comment">Comment</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b221187a"><emu-nt><a href="#prod-MultiLineComment">MultiLineComment</a></emu-nt></emu-rhs>
    <emu-rhs a="49272b29"><emu-nt><a href="#prod-SingleLineComment">SingleLineComment</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="MultiLineComment" type="lexical" id="prod-MultiLineComment">
    <emu-nt><a href="#prod-MultiLineComment">MultiLineComment</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1e164ceb"><emu-t>/*</emu-t><emu-nt optional=""><a href="#prod-MultiLineCommentChars">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>*/</emu-t></emu-rhs>
</emu-production>
<emu-production name="MultiLineCommentChars" type="lexical" id="prod-MultiLineCommentChars">
    <emu-nt><a href="#prod-MultiLineCommentChars">MultiLineCommentChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="24a6effb"><emu-nt><a href="#prod-MultiLineNotAsteriskChar">MultiLineNotAsteriskChar</a></emu-nt><emu-nt optional=""><a href="#prod-MultiLineCommentChars">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="6fcb6b58"><emu-t>*</emu-t><emu-nt optional=""><a href="#prod-PostAsteriskCommentChars">PostAsteriskCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="PostAsteriskCommentChars" type="lexical" id="prod-PostAsteriskCommentChars">
    <emu-nt><a href="#prod-PostAsteriskCommentChars">PostAsteriskCommentChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="25615007"><emu-nt><a href="#prod-MultiLineNotForwardSlashOrAsteriskChar">MultiLineNotForwardSlashOrAsteriskChar</a></emu-nt><emu-nt optional=""><a href="#prod-MultiLineCommentChars">MultiLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="6fcb6b58"><emu-t>*</emu-t><emu-nt optional=""><a href="#prod-PostAsteriskCommentChars">PostAsteriskCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="MultiLineNotAsteriskChar" type="lexical" id="prod-MultiLineNotAsteriskChar">
    <emu-nt><a href="#prod-MultiLineNotAsteriskChar">MultiLineNotAsteriskChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="9452de17"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not <emu-t>*</emu-t></emu-gmod></emu-rhs>
</emu-production>
<emu-production name="MultiLineNotForwardSlashOrAsteriskChar" type="lexical" id="prod-MultiLineNotForwardSlashOrAsteriskChar">
    <emu-nt><a href="#prod-MultiLineNotForwardSlashOrAsteriskChar">MultiLineNotForwardSlashOrAsteriskChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1dd7e7ae"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>/</emu-t> or <emu-t>*</emu-t></emu-gmod></emu-rhs>
</emu-production>
<emu-production name="SingleLineComment" type="lexical" id="prod-SingleLineComment">
    <emu-nt><a href="#prod-SingleLineComment">SingleLineComment</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="53edd61c"><emu-t>//</emu-t><emu-nt optional=""><a href="#prod-SingleLineCommentChars">SingleLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="SingleLineCommentChars" type="lexical" id="prod-SingleLineCommentChars">
    <emu-nt><a href="#prod-SingleLineCommentChars">SingleLineCommentChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="4521d447"><emu-nt><a href="#prod-SingleLineCommentChar">SingleLineCommentChar</a></emu-nt><emu-nt optional=""><a href="#prod-SingleLineCommentChars">SingleLineCommentChars</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="SingleLineCommentChar" type="lexical" id="prod-SingleLineCommentChar">
    <emu-nt><a href="#prod-SingleLineCommentChar">SingleLineCommentChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="2d5bdfa7"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar>
  </emu-clause>

  <!-- es6num="11.5" -->
  <emu-clause id="sec-tokens">
    <h1><span class="secnum">11.5</span>Tokens<span class="utils"><span class="anchor"><a href="#sec-tokens">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="CommonToken" type="lexical" id="prod-CommonToken">
    <emu-nt><a href="#prod-CommonToken">CommonToken</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0ebb31e2"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="ee18f3d6"><emu-nt><a href="#prod-Punctuator">Punctuator</a></emu-nt></emu-rhs>
    <emu-rhs a="a548b407"><emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="5c74e54d"><emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="3ec1ae06"><emu-nt><a href="#prod-Template">Template</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note</span>
      <p>The <emu-nt><a href="#prod-DivPunctuator">DivPunctuator</a></emu-nt>, <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt>, <emu-nt><a href="#prod-RightBracePunctuator">RightBracePunctuator</a></emu-nt>, and <emu-nt><a href="#prod-TemplateSubstitutionTail">TemplateSubstitutionTail</a></emu-nt> productions derive additional tokens that are not included in the <emu-nt><a href="#prod-CommonToken">CommonToken</a></emu-nt> production.</p>
    </emu-note>
  </emu-clause>

  <!-- es6num="11.6" -->
  <emu-clause id="sec-names-and-keywords">
    <h1><span class="secnum">11.6</span>Names and Keywords<span class="utils"><span class="anchor"><a href="#sec-names-and-keywords">#</a></span></span></h1>
    <p><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> and <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt>
 are tokens that are interpreted according to the Default Identifier 
Syntax given in Unicode Standard Annex #31, Identifier and Pattern 
Syntax, with some small modifications. <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt> is an enumerated subset of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>. The syntactic grammar defines <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt> as an <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> that is not a <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt>.
 The Unicode identifier grammar is based on character properties 
specified by the Unicode Standard. The Unicode code points in the 
specified categories in the latest version of the Unicode standard must 
be treated as in those categories by all conforming ECMAScript 
implementations. ECMAScript implementations may recognize identifier 
code points defined in later editions of the Unicode Standard.</p>
    <emu-note><span class="note">Note 1</span>
      <p>This standard specifies specific code point additions: U+0024 (DOLLAR SIGN) and U+005F (LOW LINE) are permitted anywhere in an <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>,
 and the code points U+200C (ZERO WIDTH NON-JOINER) and U+200D (ZERO 
WIDTH JOINER) are permitted anywhere after the first code point of an <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>.</p>
    </emu-note>
    <p>Unicode escape sequences are permitted in an <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>, where they contribute a single Unicode code point to the <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>. The code point is expressed by the <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt> of the <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt> (see  <emu-xref href="#sec-literals-string-literals"><a href="#sec-literals-string-literals">11.8.4</a></emu-xref>). The <code>\</code> preceding the <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt> and the <code>u</code> and <code>{ }</code> code units, if they appear, do not contribute code points to the <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>. A <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt> cannot be used to put a code point into an <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> that would otherwise be illegal. In other words, if a <code>\</code> <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt> sequence were replaced by the <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt> it contributes, the result must still be a valid <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> that has the exact same sequence of <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt> elements as the original <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>. All interpretations of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>
 within this specification are based upon their actual code points 
regardless of whether or not an escape sequence was used to contribute 
any particular code point.</p>
    <p>Two <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>s that are canonically equivalent according to the Unicode standard are  <em>not</em> equal unless, after replacement of each <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt>, they are represented by the exact same sequence of code points.</p>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="IdentifierName" type="lexical" id="prod-IdentifierName">
    <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="434685ab"><emu-nt><a href="#prod-IdentifierStart">IdentifierStart</a></emu-nt></emu-rhs>
    <emu-rhs a="700c1cee"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt><emu-nt><a href="#prod-IdentifierPart">IdentifierPart</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="IdentifierStart" type="lexical" id="prod-IdentifierStart">
    <emu-nt><a href="#prod-IdentifierStart">IdentifierStart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0862e30c"><emu-nt><a href="#prod-UnicodeIDStart">UnicodeIDStart</a></emu-nt></emu-rhs>
    <emu-rhs a="1262cc92"><emu-t>$</emu-t></emu-rhs>
    <emu-rhs a="07564b94"><emu-t>_</emu-t></emu-rhs>
    <emu-rhs a="6fbc8b19"><emu-t>\</emu-t><emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="IdentifierPart" type="lexical" id="prod-IdentifierPart">
    <emu-nt><a href="#prod-IdentifierPart">IdentifierPart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="364ac675"><emu-nt><a href="#prod-UnicodeIDContinue">UnicodeIDContinue</a></emu-nt></emu-rhs>
    <emu-rhs a="1262cc92"><emu-t>$</emu-t></emu-rhs>
    <emu-rhs a="07564b94"><emu-t>_</emu-t></emu-rhs>
    <emu-rhs a="6fbc8b19"><emu-t>\</emu-t><emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt></emu-rhs>
    <emu-rhs a="60d2dd13"><emu-gprose>&lt;ZWNJ&gt;</emu-gprose></emu-rhs>
    <emu-rhs a="cdf80ff5"><emu-gprose>&lt;ZWJ&gt;</emu-gprose></emu-rhs>
</emu-production>
<emu-production name="UnicodeIDStart" type="lexical" id="prod-UnicodeIDStart">
    <emu-nt><a href="#prod-UnicodeIDStart">UnicodeIDStart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="404c2c95"><emu-gprose>any Unicode code point with the Unicode property &amp;ldquo;ID_Start&amp;rdquo;</emu-gprose></emu-rhs>
</emu-production>
<emu-production name="UnicodeIDContinue" type="lexical" id="prod-UnicodeIDContinue">
    <emu-nt><a href="#prod-UnicodeIDContinue">UnicodeIDContinue</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b5684bed"><emu-gprose>any Unicode code point with the Unicode property &amp;ldquo;ID_Continue&amp;rdquo;</emu-gprose></emu-rhs>
</emu-production></emu-grammar>
    <p>The definitions of the nonterminal <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt> is given in  <emu-xref href="#sec-literals-string-literals"><a href="#sec-literals-string-literals">11.8.4</a></emu-xref>.</p>
    <emu-note><span class="note">Note 2</span>
      <p>The sets of code points with Unicode properties âID_Startâ and 
âID_Continueâ include, respectively, the code points with Unicode 
properties âOther_ID_Startâ and âOther_ID_Continueâ.</p>
    </emu-note>

    <!-- es6num="11.6.1" -->
    <emu-clause id="sec-identifier-names">
      <h1><span class="secnum">11.6.1</span>Identifier Names<span class="utils"><span class="anchor"><a href="#sec-identifier-names">#</a></span></span></h1>

      <!-- es6num="11.6.1.1" -->
      <emu-clause id="sec-identifier-names-static-semantics-early-errors">
        <h1><span class="secnum">11.6.1.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-identifier-names-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="IdentifierStart" type="lexical" collapsed="">
    <emu-nt><a href="#prod-IdentifierStart">IdentifierStart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="6fbc8b19"><emu-t>\</emu-t><emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if SV(<emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt>) is none of <code>"$"</code>, or <code>"_"</code>, or the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of a code point matched by the <emu-nt><a href="#prod-UnicodeIDStart">UnicodeIDStart</a></emu-nt> lexical grammar production.
          
          </li>
        </ul>
        <emu-grammar><emu-production name="IdentifierPart" type="lexical" collapsed="">
    <emu-nt><a href="#prod-IdentifierPart">IdentifierPart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="6fbc8b19"><emu-t>\</emu-t><emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if SV(<emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt>) is none of <code>"$"</code>, or <code>"_"</code>, or the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of either &lt;ZWNJ&gt; or &lt;ZWJ&gt;, or the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of a Unicode code point that would be matched by the <emu-nt><a href="#prod-UnicodeIDContinue">UnicodeIDContinue</a></emu-nt> lexical grammar production.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="11.6.1.2" -->
      <emu-clause id="sec-identifier-names-static-semantics-stringvalue">
        <h1><span class="secnum">11.6.1.2</span>Static Semantics: StringValue<span class="utils"><span class="anchor"><a href="#sec-identifier-names-static-semantics-stringvalue">#</a></span></span></h1>
        <emu-see-also-para op="StringValue"></emu-see-also-para>
        <emu-grammar><emu-production name="IdentifierName" type="lexical">
    <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="434685ab"><emu-nt><a href="#prod-IdentifierStart">IdentifierStart</a></emu-nt></emu-rhs>
    <emu-rhs a="700c1cee"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt><emu-nt><a href="#prod-IdentifierPart">IdentifierPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the String value consisting of the sequence of code units corresponding to <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>. In determining the sequence any occurrences of <code>\</code> <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt> are first replaced with the code point represented by the <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt> and then the code points of the entire <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> are converted to code units by <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> each code point.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="11.6.2" -->
    <emu-clause id="sec-reserved-words">
      <h1><span class="secnum">11.6.2</span>Reserved Words<span class="utils"><span class="anchor"><a href="#sec-reserved-words">#</a></span></span></h1>
      <p>A reserved word is an <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> that cannot be used as an <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt>.</p>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="ReservedWord" type="lexical" id="prod-ReservedWord">
    <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a3926e03"><emu-nt><a href="#prod-Keyword">Keyword</a></emu-nt></emu-rhs>
    <emu-rhs a="9d71bdc1"><emu-nt><a href="#prod-FutureReservedWord">FutureReservedWord</a></emu-nt></emu-rhs>
    <emu-rhs a="54f84188"><emu-nt><a href="#prod-NullLiteral">NullLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="3508e1fd"><emu-nt><a href="#prod-BooleanLiteral">BooleanLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-note><span class="note">Note</span>
        <p>The <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt> definitions are specified as literal sequences of specific <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt> elements. A code point in a <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt> cannot be expressed by a <code>\</code> <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt>.</p>
      </emu-note>

      <!-- es6num="11.6.2.1" -->
      <emu-clause id="sec-keywords">
        <h1><span class="secnum">11.6.2.1</span>Keywords<span class="utils"><span class="anchor"><a href="#sec-keywords">#</a></span></span></h1>
        <p>The following tokens are ECMAScript keywords and may not be used as <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt>s in ECMAScript programs.</p>
        <h2>Syntax</h2>
        <emu-grammar><emu-production name="Keyword" type="lexical" oneof="" id="prod-Keyword">
    <emu-nt><a href="#prod-Keyword">Keyword</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>break</emu-t><emu-t>do</emu-t><emu-t>in</emu-t><emu-t>typeof</emu-t><emu-t>case</emu-t><emu-t>else</emu-t><emu-t>instanceof</emu-t><emu-t>var</emu-t><emu-t>catch</emu-t><emu-t>export</emu-t><emu-t>new</emu-t><emu-t>void</emu-t><emu-t>class</emu-t><emu-t>extends</emu-t><emu-t>return</emu-t><emu-t>while</emu-t><emu-t>const</emu-t><emu-t>finally</emu-t><emu-t>super</emu-t><emu-t>with</emu-t><emu-t>continue</emu-t><emu-t>for</emu-t><emu-t>switch</emu-t><emu-t>yield</emu-t><emu-t>debugger</emu-t><emu-t>function</emu-t><emu-t>this</emu-t><emu-t>default</emu-t><emu-t>if</emu-t><emu-t>throw</emu-t><emu-t>delete</emu-t><emu-t>import</emu-t><emu-t>try</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-note><span class="note">Note</span>
          <p>In some contexts <code>yield</code> is given the semantics of an <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt>. See  <emu-xref href="#sec-identifiers-static-semantics-early-errors"><a href="#sec-identifiers-static-semantics-early-errors">12.1.1</a></emu-xref>. In <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, <code>let</code> and <code>static</code> are treated as reserved keywords through static semantic restrictions (see  <emu-xref href="#sec-identifiers-static-semantics-early-errors"><a href="#sec-identifiers-static-semantics-early-errors">12.1.1</a></emu-xref>,  <emu-xref href="#sec-let-and-const-declarations-static-semantics-early-errors"><a href="#sec-let-and-const-declarations-static-semantics-early-errors">13.3.1.1</a></emu-xref>,  <emu-xref href="#sec-for-in-and-for-of-statements-static-semantics-early-errors"><a href="#sec-for-in-and-for-of-statements-static-semantics-early-errors">13.7.5.1</a></emu-xref>, and  <emu-xref href="#sec-class-definitions-static-semantics-early-errors"><a href="#sec-class-definitions-static-semantics-early-errors">14.5.1</a></emu-xref>) rather than the lexical grammar.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="11.6.2.2" -->
      <emu-clause id="sec-future-reserved-words">
        <h1><span class="secnum">11.6.2.2</span>Future Reserved Words<span class="utils"><span class="anchor"><a href="#sec-future-reserved-words">#</a></span></span></h1>
        <p>The following tokens are reserved for used as keywords in future language extensions.</p>
        <h2>Syntax</h2>
        <emu-grammar><emu-production name="FutureReservedWord" type="lexical" id="prod-FutureReservedWord">
    <emu-nt><a href="#prod-FutureReservedWord">FutureReservedWord</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="4fb2fe95"><emu-t>enum</emu-t></emu-rhs>
    <emu-rhs a="857d4354"><emu-t>await</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <p><code>await</code> is only treated as a <emu-nt><a href="#prod-FutureReservedWord">FutureReservedWord</a></emu-nt> when <emu-nt><a href="#prod-Module">Module</a></emu-nt> is the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> of the syntactic grammar.</p>
        <emu-note><span class="note">Note</span>
          <p>Use of the following tokens within <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> is also reserved. That usage is restricted using static semantic restrictions (see  <emu-xref href="#sec-identifiers-static-semantics-early-errors"><a href="#sec-identifiers-static-semantics-early-errors">12.1.1</a></emu-xref>) rather than the lexical grammar:</p>
          <figure>
            <table class="lightweight-table">
              <tbody>
              <tr>
                <td>
                  <code>implements</code>
                
                </td>
                <td>
                  <code>package</code>
                
                </td>
                <td>
                  <code>protected</code>
                
                </td>
                <td>
                </td>
              </tr>
              <tr>
                <td>
                  <code>interface</code>
                
                </td>
                <td>
                  <code>private</code>
                
                </td>
                <td>
                  <code>public</code>
                
                </td>
                <td>
                </td>
              </tr>
              </tbody>
            </table>
          </figure>
        </emu-note>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="11.7" -->
  <emu-clause id="sec-punctuators">
    <h1><span class="secnum">11.7</span>Punctuators<span class="utils"><span class="anchor"><a href="#sec-punctuators">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="Punctuator" type="lexical" oneof="" id="prod-Punctuator">
    <emu-nt><a href="#prod-Punctuator">Punctuator</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>{</emu-t><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>[</emu-t><emu-t>]</emu-t><emu-t>.</emu-t><emu-t>...</emu-t><emu-t>;</emu-t><emu-t>,</emu-t><emu-t>&lt;</emu-t><emu-t>&gt;</emu-t><emu-t>&lt;=</emu-t><emu-t>&gt;=</emu-t><emu-t>==</emu-t><emu-t>!=</emu-t><emu-t>===</emu-t><emu-t>!==</emu-t><emu-t>+</emu-t><emu-t>-</emu-t><emu-t>*</emu-t><emu-t>%</emu-t><emu-t>++</emu-t><emu-t>--</emu-t><emu-t>&lt;&lt;</emu-t><emu-t>&gt;&gt;</emu-t><emu-t>&gt;&gt;&gt;</emu-t><emu-t>&amp;</emu-t><emu-t>|</emu-t><emu-t>^</emu-t><emu-t>!</emu-t><emu-t>~</emu-t><emu-t>&amp;&amp;</emu-t><emu-t>||</emu-t><emu-t>?</emu-t><emu-t>:</emu-t><emu-t>=</emu-t><emu-t>+=</emu-t><emu-t>-=</emu-t><emu-t>*=</emu-t><emu-t>%=</emu-t><emu-t>&lt;&lt;=</emu-t><emu-t>&gt;&gt;=</emu-t><emu-t>&gt;&gt;&gt;=</emu-t><emu-t>&amp;=</emu-t><emu-t>|=</emu-t><emu-t>^=</emu-t><emu-t>=&gt;</emu-t><emu-t>**</emu-t><emu-t>**=</emu-t></emu-rhs>
</emu-production>
<emu-production name="DivPunctuator" type="lexical" id="prod-DivPunctuator">
    <emu-nt><a href="#prod-DivPunctuator">DivPunctuator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="d3fd5f53"><emu-t>/</emu-t></emu-rhs>
    <emu-rhs a="2e077fe3"><emu-t>/=</emu-t></emu-rhs>
</emu-production>
<emu-production name="RightBracePunctuator" type="lexical" id="prod-RightBracePunctuator">
    <emu-nt><a href="#prod-RightBracePunctuator">RightBracePunctuator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="255cb7fd"><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
  </emu-clause>

  <!-- es6num="11.8" -->
  <emu-clause id="sec-ecmascript-language-lexical-grammar-literals">
    <h1><span class="secnum">11.8</span>Literals<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-lexical-grammar-literals">#</a></span></span></h1>

    <!-- es6num="11.8.1" -->
    <emu-clause id="sec-null-literals">
      <h1><span class="secnum">11.8.1</span>Null Literals<span class="utils"><span class="anchor"><a href="#sec-null-literals">#</a></span></span></h1>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="NullLiteral" type="lexical" id="prod-NullLiteral">
    <emu-nt><a href="#prod-NullLiteral">NullLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="77b50868"><emu-t>null</emu-t></emu-rhs>
</emu-production></emu-grammar>
    </emu-clause>

    <!-- es6num="11.8.2" -->
    <emu-clause id="sec-boolean-literals">
      <h1><span class="secnum">11.8.2</span>Boolean Literals<span class="utils"><span class="anchor"><a href="#sec-boolean-literals">#</a></span></span></h1>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="BooleanLiteral" type="lexical" id="prod-BooleanLiteral">
    <emu-nt><a href="#prod-BooleanLiteral">BooleanLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="fa30b8c6"><emu-t>true</emu-t></emu-rhs>
    <emu-rhs a="23d2c69d"><emu-t>false</emu-t></emu-rhs>
</emu-production></emu-grammar>
    </emu-clause>

    <!-- es6num="11.8.3" -->
    <emu-clause id="sec-literals-numeric-literals">
      <h1><span class="secnum">11.8.3</span>Numeric Literals<span class="utils"><span class="anchor"><a href="#sec-literals-numeric-literals">#</a></span></span></h1>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="NumericLiteral" type="lexical" id="prod-NumericLiteral">
    <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="18c0356f"><emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="d3d71ddd"><emu-nt><a href="#prod-BinaryIntegerLiteral">BinaryIntegerLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="832f57ee"><emu-nt><a href="#prod-OctalIntegerLiteral">OctalIntegerLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="1d0c4a66"><emu-nt><a href="#prod-HexIntegerLiteral">HexIntegerLiteral</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="DecimalLiteral" type="lexical" id="prod-DecimalLiteral">
    <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="fb5198a6"><emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt optional=""><a href="#prod-DecimalDigits">DecimalDigits</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt optional=""><a href="#prod-ExponentPart">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="5cf3aa35"><emu-t>.</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt optional=""><a href="#prod-ExponentPart">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="13dbaf21"><emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-nt optional=""><a href="#prod-ExponentPart">ExponentPart</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="DecimalIntegerLiteral" type="lexical" id="prod-DecimalIntegerLiteral">
    <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5259a431"><emu-t>0</emu-t></emu-rhs>
    <emu-rhs a="2353f0a3"><emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-nt optional=""><a href="#prod-DecimalDigits">DecimalDigits</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="DecimalDigits" type="lexical" id="prod-DecimalDigits">
    <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b3831ee0"><emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt></emu-rhs>
    <emu-rhs a="9f250657"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="DecimalDigit" type="lexical" oneof="" id="prod-DecimalDigit">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t></emu-rhs>
</emu-production>
<emu-production name="NonZeroDigit" type="lexical" oneof="" id="prod-NonZeroDigit">
    <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t></emu-rhs>
</emu-production>
<emu-production name="ExponentPart" type="lexical" id="prod-ExponentPart">
    <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7f837518"><emu-nt><a href="#prod-ExponentIndicator">ExponentIndicator</a></emu-nt><emu-nt><a href="#prod-SignedInteger">SignedInteger</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ExponentIndicator" type="lexical" oneof="" id="prod-ExponentIndicator">
    <emu-nt><a href="#prod-ExponentIndicator">ExponentIndicator</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>e</emu-t><emu-t>E</emu-t></emu-rhs>
</emu-production>
<emu-production name="SignedInteger" type="lexical" id="prod-SignedInteger">
    <emu-nt><a href="#prod-SignedInteger">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="6d7b4e5f"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
    <emu-rhs a="3bd7fe57"><emu-t>+</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
    <emu-rhs a="58000348"><emu-t>-</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BinaryIntegerLiteral" type="lexical" id="prod-BinaryIntegerLiteral">
    <emu-nt><a href="#prod-BinaryIntegerLiteral">BinaryIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="600d7817"><emu-t>0b</emu-t><emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt></emu-rhs>
    <emu-rhs a="7c1f17d9"><emu-t>0B</emu-t><emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BinaryDigits" type="lexical" id="prod-BinaryDigits">
    <emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="e5f1ee23"><emu-nt><a href="#prod-BinaryDigit">BinaryDigit</a></emu-nt></emu-rhs>
    <emu-rhs a="82aa7443"><emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt><emu-nt><a href="#prod-BinaryDigit">BinaryDigit</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BinaryDigit" type="lexical" oneof="" id="prod-BinaryDigit">
    <emu-nt><a href="#prod-BinaryDigit">BinaryDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t></emu-rhs>
</emu-production>
<emu-production name="OctalIntegerLiteral" type="lexical" id="prod-OctalIntegerLiteral">
    <emu-nt><a href="#prod-OctalIntegerLiteral">OctalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a8056cb0"><emu-t>0o</emu-t><emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt></emu-rhs>
    <emu-rhs a="3a3652fa"><emu-t>0O</emu-t><emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="OctalDigits" type="lexical" id="prod-OctalDigits">
    <emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="99bc1d53"><emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt></emu-rhs>
    <emu-rhs a="37a295fe"><emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt><emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="OctalDigit" type="lexical" oneof="" id="prod-OctalDigit">
    <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t></emu-rhs>
</emu-production>
<emu-production name="HexIntegerLiteral" type="lexical" id="prod-HexIntegerLiteral">
    <emu-nt><a href="#prod-HexIntegerLiteral">HexIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="cf154180"><emu-t>0x</emu-t><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt></emu-rhs>
    <emu-rhs a="9ef756f3"><emu-t>0X</emu-t><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="HexDigits" type="lexical" id="prod-HexDigits">
    <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a0c48a71"><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
    <emu-rhs a="c8221899"><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="HexDigit" type="lexical" oneof="" id="prod-HexDigit">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>0</emu-t><emu-t>1</emu-t><emu-t>2</emu-t><emu-t>3</emu-t><emu-t>4</emu-t><emu-t>5</emu-t><emu-t>6</emu-t><emu-t>7</emu-t><emu-t>8</emu-t><emu-t>9</emu-t><emu-t>a</emu-t><emu-t>b</emu-t><emu-t>c</emu-t><emu-t>d</emu-t><emu-t>e</emu-t><emu-t>f</emu-t><emu-t>A</emu-t><emu-t>B</emu-t><emu-t>C</emu-t><emu-t>D</emu-t><emu-t>E</emu-t><emu-t>F</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <p>The <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt> immediately following a <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt> must not be an <emu-nt><a href="#prod-IdentifierStart">IdentifierStart</a></emu-nt> or <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt>.</p>
      <emu-note><span class="note">Note</span>
        <p>For example: <code>3in</code> is an error and not the two input elements <code>3</code> and <code>in</code>.</p>
      </emu-note>
      <p>A conforming implementation, when processing <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, must not extend, as described in  <emu-xref href="#sec-additional-syntax-numeric-literals"><a href="#sec-additional-syntax-numeric-literals">B.1.1</a></emu-xref>, the syntax of <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt> to include  <emu-xref href="#prod-annexB-LegacyOctalIntegerLiteral"><a href="#prod-annexB-LegacyOctalIntegerLiteral"><emu-nt>LegacyOctalIntegerLiteral</emu-nt></a></emu-xref>, nor extend the syntax of <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt> to include  <emu-xref href="#prod-annexB-NonOctalDecimalIntegerLiteral"><a href="#prod-annexB-NonOctalDecimalIntegerLiteral"><emu-nt>NonOctalDecimalIntegerLiteral</emu-nt></a></emu-xref>.</p>

      <!-- es6num="11.8.3.1" -->
      <emu-clause id="sec-static-semantics-mv">
        <h1><span class="secnum">11.8.3.1</span>Static Semantics: MV<span class="utils"><span class="anchor"><a href="#sec-static-semantics-mv">#</a></span></span></h1>
        <p>A numeric literal stands for a value of the Number type. This
 value is determined in two steps: first, a mathematical value (MV) is 
derived from the literal; second, this mathematical value is rounded as 
described below.</p>
        <ul>
          <li>
            The MV of  <emu-grammar><emu-production name="NumericLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="18c0356f"><emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="NumericLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="d3d71ddd"><emu-nt><a href="#prod-BinaryIntegerLiteral">BinaryIntegerLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-BinaryIntegerLiteral">BinaryIntegerLiteral</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="NumericLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="832f57ee"><emu-nt><a href="#prod-OctalIntegerLiteral">OctalIntegerLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-OctalIntegerLiteral">OctalIntegerLiteral</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="NumericLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1d0c4a66"><emu-nt><a href="#prod-HexIntegerLiteral">HexIntegerLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-HexIntegerLiteral">HexIntegerLiteral</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="bf0728f3"><emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="8af49841"><emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt> plus (the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> Ã 10<sup>-<var>n</var></sup>), where <var>n</var> is the number of code points in <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="971b5362"><emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt> Ã 10<sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ef115d8a"><emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is (the MV of <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt> plus (the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> Ã 10<sup>-<var>n</var></sup>)) Ã 10<sup><var>e</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="c1f33372"><emu-t>.</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> Ã 10<sup>-<var>n</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0cd5f3c3"><emu-t>.</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> Ã 10<sup><var>e</var>-<var>n</var></sup>, where <var>n</var> is the number of code points in <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> and <var>e</var> is the MV of <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b404bcda"><emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="6d1f87c1"><emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt> Ã 10<sup><var>e</var></sup>, where <var>e</var> is the MV of <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalIntegerLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5259a431"><emu-t>0</emu-t></emu-rhs>
</emu-production></emu-grammar> is 0.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalIntegerLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="d4c393e5"><emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalIntegerLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalIntegerLiteral">DecimalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="3f4b150f"><emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is (the MV of <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt> Ã 10<sup><var>n</var></sup>) plus the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>, where <var>n</var> is the number of code points in <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b3831ee0"><emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="9f250657"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt><emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is (the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt> Ã 10) plus the MV of <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="ExponentPart" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7f837518"><emu-nt><a href="#prod-ExponentIndicator">ExponentIndicator</a></emu-nt><emu-nt><a href="#prod-SignedInteger">SignedInteger</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-SignedInteger">SignedInteger</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="SignedInteger" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-SignedInteger">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="6d7b4e5f"><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="SignedInteger" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-SignedInteger">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="3bd7fe57"><emu-t>+</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="SignedInteger" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-SignedInteger">SignedInteger</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="58000348"><emu-t>-</emu-t><emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the negative of the MV of <emu-nt><a href="#prod-DecimalDigits">DecimalDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5259a431"><emu-t>0</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5259a431"><emu-t>0</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="OctalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5259a431"><emu-t>0</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="BinaryDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-BinaryDigit">BinaryDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5259a431"><emu-t>0</emu-t></emu-rhs>
</emu-production></emu-grammar> is 0.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="292aa5dd"><emu-t>1</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="NonZeroDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="292aa5dd"><emu-t>1</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="292aa5dd"><emu-t>1</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="OctalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="292aa5dd"><emu-t>1</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="BinaryDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-BinaryDigit">BinaryDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="292aa5dd"><emu-t>1</emu-t></emu-rhs>
</emu-production></emu-grammar> is 1.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5ca73105"><emu-t>2</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="NonZeroDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5ca73105"><emu-t>2</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5ca73105"><emu-t>2</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="OctalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5ca73105"><emu-t>2</emu-t></emu-rhs>
</emu-production></emu-grammar> is 2.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ec6bb6b2"><emu-t>3</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="NonZeroDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ec6bb6b2"><emu-t>3</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ec6bb6b2"><emu-t>3</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="OctalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ec6bb6b2"><emu-t>3</emu-t></emu-rhs>
</emu-production></emu-grammar> is 3.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="58ec4a73"><emu-t>4</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="NonZeroDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="58ec4a73"><emu-t>4</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="58ec4a73"><emu-t>4</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="OctalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="58ec4a73"><emu-t>4</emu-t></emu-rhs>
</emu-production></emu-grammar> is 4.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="8fcdef77"><emu-t>5</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="NonZeroDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="8fcdef77"><emu-t>5</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="8fcdef77"><emu-t>5</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="OctalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="8fcdef77"><emu-t>5</emu-t></emu-rhs>
</emu-production></emu-grammar> is 5.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0b64877d"><emu-t>6</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="NonZeroDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0b64877d"><emu-t>6</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0b64877d"><emu-t>6</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="OctalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0b64877d"><emu-t>6</emu-t></emu-rhs>
</emu-production></emu-grammar> is 6.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ea5e07a4"><emu-t>7</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="NonZeroDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ea5e07a4"><emu-t>7</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ea5e07a4"><emu-t>7</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="OctalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ea5e07a4"><emu-t>7</emu-t></emu-rhs>
</emu-production></emu-grammar> is 7.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7a5bd8c3"><emu-t>8</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="NonZeroDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7a5bd8c3"><emu-t>8</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7a5bd8c3"><emu-t>8</emu-t></emu-rhs>
</emu-production></emu-grammar> is 8.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="DecimalDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="163f4308"><emu-t>9</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="NonZeroDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NonZeroDigit">NonZeroDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="163f4308"><emu-t>9</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="163f4308"><emu-t>9</emu-t></emu-rhs>
</emu-production></emu-grammar> is 9.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a61fcfde"><emu-t>a</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="9d7d0fdb"><emu-t>A</emu-t></emu-rhs>
</emu-production></emu-grammar> is 10.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0185ce89"><emu-t>b</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0a26d628"><emu-t>B</emu-t></emu-rhs>
</emu-production></emu-grammar> is 11.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="d594c144"><emu-t>c</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5f87cc5b"><emu-t>C</emu-t></emu-rhs>
</emu-production></emu-grammar> is 12.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="f0f32729"><emu-t>d</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="919b1483"><emu-t>D</emu-t></emu-rhs>
</emu-production></emu-grammar> is 13.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0d7c9fba"><emu-t>e</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b15f6792"><emu-t>E</emu-t></emu-rhs>
</emu-production></emu-grammar> is 14.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="4068cae7"><emu-t>f</emu-t></emu-rhs>
</emu-production></emu-grammar> or of  <emu-grammar><emu-production name="HexDigit" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0d544f70"><emu-t>F</emu-t></emu-rhs>
</emu-production></emu-grammar> is 15.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="BinaryIntegerLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-BinaryIntegerLiteral">BinaryIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="600d7817"><emu-t>0b</emu-t><emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="BinaryIntegerLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-BinaryIntegerLiteral">BinaryIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7c1f17d9"><emu-t>0B</emu-t><emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="BinaryDigits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="e5f1ee23"><emu-nt><a href="#prod-BinaryDigit">BinaryDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-BinaryDigit">BinaryDigit</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="BinaryDigits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="82aa7443"><emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt><emu-nt><a href="#prod-BinaryDigit">BinaryDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is (the MV of <emu-nt><a href="#prod-BinaryDigits">BinaryDigits</a></emu-nt> Ã 2) plus the MV of <emu-nt><a href="#prod-BinaryDigit">BinaryDigit</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="OctalIntegerLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalIntegerLiteral">OctalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a8056cb0"><emu-t>0o</emu-t><emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="OctalIntegerLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalIntegerLiteral">OctalIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="3a3652fa"><emu-t>0O</emu-t><emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="OctalDigits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="99bc1d53"><emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="OctalDigits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="37a295fe"><emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt><emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is (the MV of <emu-nt><a href="#prod-OctalDigits">OctalDigits</a></emu-nt> Ã 8) plus the MV of <emu-nt><a href="#prod-OctalDigit">OctalDigit</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="HexIntegerLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexIntegerLiteral">HexIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="cf154180"><emu-t>0x</emu-t><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="HexIntegerLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexIntegerLiteral">HexIntegerLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="9ef756f3"><emu-t>0X</emu-t><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="HexDigits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a0c48a71"><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the MV of <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>.
          
          </li>
          <li>
            The MV of  <emu-grammar><emu-production name="HexDigits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="c8221899"><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is (the MV of <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt> Ã 16) plus the MV of <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>.
          
          </li>
        </ul>
        <p>Once the exact MV for a numeric literal has been determined, 
it is then rounded to a value of the Number type. If the MV is 0, then 
the rounded value is <emu-val>+0</emu-val>; otherwise, the rounded value must be the Number value for the MV (as specified in  <emu-xref href="#sec-ecmascript-language-types-number-type"><a href="#sec-ecmascript-language-types-number-type">6.1.6</a></emu-xref>), unless the literal is a <emu-nt><a href="#prod-DecimalLiteral">DecimalLiteral</a></emu-nt>
 and the literal has more than 20 significant digits, in which case the 
Number value may be either the Number value for the MV of a literal 
produced by replacing each significant digit after the 20th with a <code>0</code> digit or the Number value for the MV of a literal produced by replacing each significant digit after the 20th with a <code>0</code> digit and then incrementing the literal at the 20th significant digit position. A digit is  <em>significant</em> if it is not part of an <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt> and</p>
        <ul>
          <li>
            it is not <code>0</code>; or
          
          </li>
          <li>
            there is a nonzero digit to its left and there is a nonzero digit, not in the <emu-nt><a href="#prod-ExponentPart">ExponentPart</a></emu-nt>, to its right.
          
          </li>
        </ul>
      </emu-clause>
    </emu-clause>

    <!-- es6num="11.8.4" -->
    <emu-clause id="sec-literals-string-literals">
      <h1><span class="secnum">11.8.4</span>String Literals<span class="utils"><span class="anchor"><a href="#sec-literals-string-literals">#</a></span></span></h1>
      <emu-note><span class="note">Note 1</span>
        <p>A string literal is zero or more Unicode code points enclosed
 in single or double quotes. Unicode code points may also be represented
 by an escape sequence. All code points may appear literally in a string
 literal except for the closing quote code points, U+005C (REVERSE 
SOLIDUS), U+000D (CARRIAGE RETURN), U+2028 (LINE SEPARATOR), U+2029 
(PARAGRAPH SEPARATOR), and U+000A (LINE FEED). Any code points may 
appear in the form of an escape sequence. String literals evaluate to 
ECMAScript String values. When generating these String values Unicode 
code points are UTF-16 encoded as defined in  <emu-xref href="#sec-utf16encoding"><a href="#sec-utf16encoding">10.1.1</a></emu-xref>.
 Code points belonging to the Basic Multilingual Plane are encoded as a 
single code unit element of the string. All other code points are 
encoded as two code unit elements of the string.</p>
      </emu-note>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="StringLiteral" type="lexical" id="prod-StringLiteral">
    <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="15d8b1f1"><emu-t>"</emu-t><emu-nt optional=""><a href="#prod-DoubleStringCharacters">DoubleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>"</emu-t></emu-rhs>
    <emu-rhs a="82ecb3d9"><emu-t>'</emu-t><emu-nt optional=""><a href="#prod-SingleStringCharacters">SingleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>'</emu-t></emu-rhs>
</emu-production>
<emu-production name="DoubleStringCharacters" type="lexical" id="prod-DoubleStringCharacters">
    <emu-nt><a href="#prod-DoubleStringCharacters">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="8bdabc77"><emu-nt><a href="#prod-DoubleStringCharacter">DoubleStringCharacter</a></emu-nt><emu-nt optional=""><a href="#prod-DoubleStringCharacters">DoubleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="SingleStringCharacters" type="lexical" id="prod-SingleStringCharacters">
    <emu-nt><a href="#prod-SingleStringCharacters">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="17d28457"><emu-nt><a href="#prod-SingleStringCharacter">SingleStringCharacter</a></emu-nt><emu-nt optional=""><a href="#prod-SingleStringCharacters">SingleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="DoubleStringCharacter" type="lexical" id="prod-DoubleStringCharacter">
    <emu-nt><a href="#prod-DoubleStringCharacter">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a87f95ed"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>"</emu-t> or <emu-t>\</emu-t> or <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
    <emu-rhs a="ea7d8d26"><emu-t>\</emu-t><emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt></emu-rhs>
    <emu-rhs a="00992933"><emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="SingleStringCharacter" type="lexical" id="prod-SingleStringCharacter">
    <emu-nt><a href="#prod-SingleStringCharacter">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5ea9e1d2"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>'</emu-t> or <emu-t>\</emu-t> or <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
    <emu-rhs a="ea7d8d26"><emu-t>\</emu-t><emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt></emu-rhs>
    <emu-rhs a="00992933"><emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="LineContinuation" type="lexical" id="prod-LineContinuation">
    <emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="c4893d63"><emu-t>\</emu-t><emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="EscapeSequence" type="lexical" id="prod-EscapeSequence">
    <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="e9e86f07"><emu-nt><a href="#prod-CharacterEscapeSequence">CharacterEscapeSequence</a></emu-nt></emu-rhs>
    <emu-rhs a="6964a19d"><emu-t>0</emu-t><emu-gann>[lookahead â <emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt>]</emu-gann></emu-rhs>
    <emu-rhs a="a8071b85"><emu-nt><a href="#prod-HexEscapeSequence">HexEscapeSequence</a></emu-nt></emu-rhs>
    <emu-rhs a="44bd6f55"><emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>A conforming implementation, when processing <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, must not extend the syntax of <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt> to include  <emu-xref href="#prod-annexB-LegacyOctalEscapeSequence"><a href="#prod-annexB-LegacyOctalEscapeSequence"><emu-nt>LegacyOctalEscapeSequence</emu-nt></a></emu-xref> as described in  <emu-xref href="#sec-additional-syntax-string-literals"><a href="#sec-additional-syntax-string-literals">B.1.2</a></emu-xref>.</p>
      <emu-grammar><emu-production name="CharacterEscapeSequence" type="lexical" id="prod-CharacterEscapeSequence">
    <emu-nt><a href="#prod-CharacterEscapeSequence">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7444838f"><emu-nt><a href="#prod-SingleEscapeCharacter">SingleEscapeCharacter</a></emu-nt></emu-rhs>
    <emu-rhs a="b7980a98"><emu-nt><a href="#prod-NonEscapeCharacter">NonEscapeCharacter</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="SingleEscapeCharacter" type="lexical" oneof="" id="prod-SingleEscapeCharacter">
    <emu-nt><a href="#prod-SingleEscapeCharacter">SingleEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>'</emu-t><emu-t>"</emu-t><emu-t>\</emu-t><emu-t>b</emu-t><emu-t>f</emu-t><emu-t>n</emu-t><emu-t>r</emu-t><emu-t>t</emu-t><emu-t>v</emu-t></emu-rhs>
</emu-production>
<emu-production name="NonEscapeCharacter" type="lexical" id="prod-NonEscapeCharacter">
    <emu-nt><a href="#prod-NonEscapeCharacter">NonEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1bac6127"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-nt><a href="#prod-EscapeCharacter">EscapeCharacter</a></emu-nt> or <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
</emu-production>
<emu-production name="EscapeCharacter" type="lexical" id="prod-EscapeCharacter">
    <emu-nt><a href="#prod-EscapeCharacter">EscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7444838f"><emu-nt><a href="#prod-SingleEscapeCharacter">SingleEscapeCharacter</a></emu-nt></emu-rhs>
    <emu-rhs a="b3831ee0"><emu-nt><a href="#prod-DecimalDigit">DecimalDigit</a></emu-nt></emu-rhs>
    <emu-rhs a="150383a9"><emu-t>x</emu-t></emu-rhs>
    <emu-rhs a="8c2e6655"><emu-t>u</emu-t></emu-rhs>
</emu-production>
<emu-production name="HexEscapeSequence" type="lexical" id="prod-HexEscapeSequence">
    <emu-nt><a href="#prod-HexEscapeSequence">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="d8ef973c"><emu-t>x</emu-t><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="UnicodeEscapeSequence" type="lexical" id="prod-UnicodeEscapeSequence">
    <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="8072ad8d"><emu-t>u</emu-t><emu-nt><a href="#prod-Hex4Digits">Hex4Digits</a></emu-nt></emu-rhs>
    <emu-rhs a="bc0db51f"><emu-t>u{</emu-t><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="Hex4Digits" type="lexical" id="prod-Hex4Digits">
    <emu-nt><a href="#prod-Hex4Digits">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0ba8de61"><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>The definition of the nonterminal <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt> is given in  <emu-xref href="#sec-literals-numeric-literals"><a href="#sec-literals-numeric-literals">11.8.3</a></emu-xref>. <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt> is defined in  <emu-xref href="#sec-source-text"><a href="#sec-source-text">10.1</a></emu-xref>.</p>
      <emu-note><span class="note">Note 2</span>
        <p>A line terminator code point cannot appear in a string literal, except as part of a <emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt>
 to produce the empty code points sequence. The proper way to cause a 
line terminator code point to be part of the String value of a string 
literal is to use an escape sequence such as <code>\n</code> or <code>\u000A</code>.</p>
      </emu-note>

      <!-- es6num="11.8.4.1" -->
      <emu-clause id="sec-string-literals-static-semantics-early-errors">
        <h1><span class="secnum">11.8.4.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-string-literals-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="UnicodeEscapeSequence" type="lexical" collapsed="">
    <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="bc0db51f"><emu-t>u{</emu-t><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if the MV of <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt> &gt; 0x10FFFF.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="11.8.4.2" -->
      <emu-clause id="sec-string-literals-static-semantics-stringvalue">
        <h1><span class="secnum">11.8.4.2</span>Static Semantics: StringValue<span class="utils"><span class="anchor"><a href="#sec-string-literals-static-semantics-stringvalue">#</a></span></span></h1>
        <emu-see-also-para op="StringValue"></emu-see-also-para>
        <emu-grammar><emu-production name="StringLiteral" type="lexical">
    <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="15d8b1f1"><emu-t>"</emu-t><emu-nt optional=""><a href="#prod-DoubleStringCharacters">DoubleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>"</emu-t></emu-rhs>
    <emu-rhs a="82ecb3d9"><emu-t>'</emu-t><emu-nt optional=""><a href="#prod-SingleStringCharacters">SingleStringCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>'</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the String value whose elements are the SV of this <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="11.8.4.3" -->
      <emu-clause id="sec-static-semantics-sv">
        <h1><span class="secnum">11.8.4.3</span>Static Semantics: SV<span class="utils"><span class="anchor"><a href="#sec-static-semantics-sv">#</a></span></span></h1>
        <p>A string literal stands for a value of the String type. The 
String value (SV) of the literal is described in terms of code unit 
values contributed by the various parts of the string literal. As part 
of this process, some Unicode code points within the string literal are 
interpreted as having a mathematical value (MV), as described below or 
in  <emu-xref href="#sec-literals-numeric-literals"><a href="#sec-literals-numeric-literals">11.8.3</a></emu-xref>.</p>
        <ul>
          <li>
            The SV of  <emu-grammar><emu-production name="StringLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a2dff6c6"><emu-t>"</emu-t><emu-t>"</emu-t></emu-rhs>
</emu-production></emu-grammar> is the empty code unit sequence.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="StringLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="74786b0a"><emu-t>'</emu-t><emu-t>'</emu-t></emu-rhs>
</emu-production></emu-grammar> is the empty code unit sequence.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="StringLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="e7eba5c6"><emu-t>"</emu-t><emu-nt><a href="#prod-DoubleStringCharacters">DoubleStringCharacters</a></emu-nt><emu-t>"</emu-t></emu-rhs>
</emu-production></emu-grammar> is the SV of <emu-nt><a href="#prod-DoubleStringCharacters">DoubleStringCharacters</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="StringLiteral" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="314db585"><emu-t>'</emu-t><emu-nt><a href="#prod-SingleStringCharacters">SingleStringCharacters</a></emu-nt><emu-t>'</emu-t></emu-rhs>
</emu-production></emu-grammar> is the SV of <emu-nt><a href="#prod-SingleStringCharacters">SingleStringCharacters</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="DoubleStringCharacters" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DoubleStringCharacters">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b3d57705"><emu-nt><a href="#prod-DoubleStringCharacter">DoubleStringCharacter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is a sequence of one or two code units that is the SV of <emu-nt><a href="#prod-DoubleStringCharacter">DoubleStringCharacter</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="DoubleStringCharacters" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DoubleStringCharacters">DoubleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="9b3f247e"><emu-nt><a href="#prod-DoubleStringCharacter">DoubleStringCharacter</a></emu-nt><emu-nt><a href="#prod-DoubleStringCharacters">DoubleStringCharacters</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is a sequence of one or two code units that is the SV of <emu-nt><a href="#prod-DoubleStringCharacter">DoubleStringCharacter</a></emu-nt> followed by all the code units in the SV of <emu-nt><a href="#prod-DoubleStringCharacters">DoubleStringCharacters</a></emu-nt> in order.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="SingleStringCharacters" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-SingleStringCharacters">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1b4d0b3a"><emu-nt><a href="#prod-SingleStringCharacter">SingleStringCharacter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is a sequence of one or two code units that is the SV of <emu-nt><a href="#prod-SingleStringCharacter">SingleStringCharacter</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="SingleStringCharacters" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-SingleStringCharacters">SingleStringCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="89ebe999"><emu-nt><a href="#prod-SingleStringCharacter">SingleStringCharacter</a></emu-nt><emu-nt><a href="#prod-SingleStringCharacters">SingleStringCharacters</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is a sequence of one or two code units that is the SV of <emu-nt><a href="#prod-SingleStringCharacter">SingleStringCharacter</a></emu-nt> followed by all the code units in the SV of <emu-nt><a href="#prod-SingleStringCharacters">SingleStringCharacters</a></emu-nt> in order.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="DoubleStringCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DoubleStringCharacter">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a87f95ed"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>"</emu-t> or <emu-t>\</emu-t> or <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar> is the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="DoubleStringCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DoubleStringCharacter">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ea7d8d26"><emu-t>\</emu-t><emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the SV of the <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="DoubleStringCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-DoubleStringCharacter">DoubleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="00992933"><emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the empty code unit sequence.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="SingleStringCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-SingleStringCharacter">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5ea9e1d2"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>'</emu-t> or <emu-t>\</emu-t> or <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar> is the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="SingleStringCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-SingleStringCharacter">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ea7d8d26"><emu-t>\</emu-t><emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the SV of the <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="SingleStringCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-SingleStringCharacter">SingleStringCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="00992933"><emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the empty code unit sequence.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="EscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="e9e86f07"><emu-nt><a href="#prod-CharacterEscapeSequence">CharacterEscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the SV of the <emu-nt><a href="#prod-CharacterEscapeSequence">CharacterEscapeSequence</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="EscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5259a431"><emu-t>0</emu-t></emu-rhs>
</emu-production></emu-grammar> is the code unit value 0.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="EscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a8071b85"><emu-nt><a href="#prod-HexEscapeSequence">HexEscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the SV of the <emu-nt><a href="#prod-HexEscapeSequence">HexEscapeSequence</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="EscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="44bd6f55"><emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the SV of the <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="CharacterEscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-CharacterEscapeSequence">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7444838f"><emu-nt><a href="#prod-SingleEscapeCharacter">SingleEscapeCharacter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the code unit whose value is determined by the <emu-nt><a href="#prod-SingleEscapeCharacter">SingleEscapeCharacter</a></emu-nt> according to  <emu-xref href="#table-34"><a href="#table-34">Table 34</a></emu-xref>.
          
          </li>
        </ul>
        <emu-table id="table-34" caption="String Single Character Escape Sequences"><figure><figcaption>Table 34: String Single Character Escape Sequences</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Escape Sequence
              
              </th>
              <th>
                Code Unit Value
              
              </th>
              <th>
                Unicode Character Name
              
              </th>
              <th>
                Symbol
              
              </th>
            </tr>
            <tr>
              <td>
                <code>\b</code>
              
              </td>
              <td>
                <code>0x0008</code>
              
              </td>
              <td>
                BACKSPACE
              
              </td>
              <td>
                &lt;BS&gt;
              
              </td>
            </tr>
            <tr>
              <td>
                <code>\t</code>
              
              </td>
              <td>
                <code>0x0009</code>
              
              </td>
              <td>
                CHARACTER TABULATION
              
              </td>
              <td>
                &lt;HT&gt;
              
              </td>
            </tr>
            <tr>
              <td>
                <code>\n</code>
              
              </td>
              <td>
                <code>0x000A</code>
              
              </td>
              <td>
                LINE FEED (LF)
              
              </td>
              <td>
                &lt;LF&gt;
              
              </td>
            </tr>
            <tr>
              <td>
                <code>\v</code>
              
              </td>
              <td>
                <code>0x000B</code>
              
              </td>
              <td>
                LINE TABULATION
              
              </td>
              <td>
                &lt;VT&gt;
              
              </td>
            </tr>
            <tr>
              <td>
                <code>\f</code>
              
              </td>
              <td>
                <code>0x000C</code>
              
              </td>
              <td>
                FORM FEED (FF)
              
              </td>
              <td>
                &lt;FF&gt;
              
              </td>
            </tr>
            <tr>
              <td>
                <code>\r</code>
              
              </td>
              <td>
                <code>0x000D</code>
              
              </td>
              <td>
                CARRIAGE RETURN (CR)
              
              </td>
              <td>
                &lt;CR&gt;
              
              </td>
            </tr>
            <tr>
              <td>
                <code>\"</code>
              
              </td>
              <td>
                <code>0x0022</code>
              
              </td>
              <td>
                QUOTATION MARK
              
              </td>
              <td>
                <code>"</code>
              
              </td>
            </tr>
            <tr>
              <td>
                <code>\'</code>
              
              </td>
              <td>
                <code>0x0027</code>
              
              </td>
              <td>
                APOSTROPHE
              
              </td>
              <td>
                <code>'</code>
              
              </td>
            </tr>
            <tr>
              <td>
                <code>\\</code>
              
              </td>
              <td>
                <code>0x005C</code>
              
              </td>
              <td>
                REVERSE SOLIDUS
              
              </td>
              <td>
                <code>\</code>
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <ul>
          <li>
            The SV of  <emu-grammar><emu-production name="CharacterEscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-CharacterEscapeSequence">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b7980a98"><emu-nt><a href="#prod-NonEscapeCharacter">NonEscapeCharacter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the SV of the <emu-nt><a href="#prod-NonEscapeCharacter">NonEscapeCharacter</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="NonEscapeCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NonEscapeCharacter">NonEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1bac6127"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-nt><a href="#prod-EscapeCharacter">EscapeCharacter</a></emu-nt> or <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar> is the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="HexEscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexEscapeSequence">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="d8ef973c"><emu-t>x</emu-t><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the code unit value that is (16 times the MV of the first <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>) plus the MV of the second <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="UnicodeEscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="8072ad8d"><emu-t>u</emu-t><emu-nt><a href="#prod-Hex4Digits">Hex4Digits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the SV of <emu-nt><a href="#prod-Hex4Digits">Hex4Digits</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="Hex4Digits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Hex4Digits">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0ba8de61"><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the code unit value that is (0x1000 times the MV of the first <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>) plus (0x100 times the MV of the second <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>) plus (0x10 times the MV of the third <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>) plus the MV of the fourth <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>.
          
          </li>
          <li>
            The SV of  <emu-grammar><emu-production name="UnicodeEscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="bc0db51f"><emu-t>u{</emu-t><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar> is the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of the MV of <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt>.
          
          </li>
        </ul>
      </emu-clause>
    </emu-clause>

    <!-- es6num="11.8.5" -->
    <emu-clause id="sec-literals-regular-expression-literals">
      <h1><span class="secnum">11.8.5</span>Regular Expression Literals<span class="utils"><span class="anchor"><a href="#sec-literals-regular-expression-literals">#</a></span></span></h1>
      <emu-note><span class="note">Note 1</span>
        <p>A regular expression literal is an input element that is converted to a RegExp object (see  <emu-xref href="#sec-regexp-regular-expression-objects"><a href="#sec-regexp-regular-expression-objects">21.2</a></emu-xref>)
 each time the literal is evaluated. Two regular expression literals in a
 program evaluate to regular expression objects that never compare as <code>===</code> to each other even if the two literals' contents are identical. A RegExp object may also be created at runtime by <code>new RegExp</code> or calling the <code>RegExp</code> constructor as a function (see  <emu-xref href="#sec-regexp-constructor"><a href="#sec-regexp-constructor">21.2.3</a></emu-xref>).</p>
      </emu-note>
      <p>The productions below describe the syntax for a regular 
expression literal and are used by the input element scanner to find the
 end of the regular expression literal. The source text comprising the <emu-nt><a href="#prod-RegularExpressionBody">RegularExpressionBody</a></emu-nt> and the <emu-nt><a href="#prod-RegularExpressionFlags">RegularExpressionFlags</a></emu-nt> are subsequently parsed again using the more stringent ECMAScript Regular Expression grammar (<emu-xref href="#sec-patterns"><a href="#sec-patterns">21.2.1</a></emu-xref>).</p>
      <p>An implementation may extend the ECMAScript Regular Expression grammar defined in  <emu-xref href="#sec-patterns"><a href="#sec-patterns">21.2.1</a></emu-xref>, but it must not extend the <emu-nt><a href="#prod-RegularExpressionBody">RegularExpressionBody</a></emu-nt> and <emu-nt><a href="#prod-RegularExpressionFlags">RegularExpressionFlags</a></emu-nt> productions defined below or the productions used by these productions.</p>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="RegularExpressionLiteral" type="lexical" id="prod-RegularExpressionLiteral">
    <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5778053b"><emu-t>/</emu-t><emu-nt><a href="#prod-RegularExpressionBody">RegularExpressionBody</a></emu-nt><emu-t>/</emu-t><emu-nt><a href="#prod-RegularExpressionFlags">RegularExpressionFlags</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="RegularExpressionBody" type="lexical" id="prod-RegularExpressionBody">
    <emu-nt><a href="#prod-RegularExpressionBody">RegularExpressionBody</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="bba7969e"><emu-nt><a href="#prod-RegularExpressionFirstChar">RegularExpressionFirstChar</a></emu-nt><emu-nt><a href="#prod-RegularExpressionChars">RegularExpressionChars</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="RegularExpressionChars" type="lexical" id="prod-RegularExpressionChars">
    <emu-nt><a href="#prod-RegularExpressionChars">RegularExpressionChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
    <emu-rhs a="a9881cec"><emu-nt><a href="#prod-RegularExpressionChars">RegularExpressionChars</a></emu-nt><emu-nt><a href="#prod-RegularExpressionChar">RegularExpressionChar</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="RegularExpressionFirstChar" type="lexical" id="prod-RegularExpressionFirstChar">
    <emu-nt><a href="#prod-RegularExpressionFirstChar">RegularExpressionFirstChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="da1b0c0a"><emu-nt><a href="#prod-RegularExpressionNonTerminator">RegularExpressionNonTerminator</a></emu-nt><emu-gmod>but not one of <emu-t>*</emu-t> or <emu-t>\</emu-t> or <emu-t>/</emu-t> or <emu-t>[</emu-t></emu-gmod></emu-rhs>
    <emu-rhs a="9c9579a7"><emu-nt><a href="#prod-RegularExpressionBackslashSequence">RegularExpressionBackslashSequence</a></emu-nt></emu-rhs>
    <emu-rhs a="5cc6858e"><emu-nt><a href="#prod-RegularExpressionClass">RegularExpressionClass</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="RegularExpressionChar" type="lexical" id="prod-RegularExpressionChar">
    <emu-nt><a href="#prod-RegularExpressionChar">RegularExpressionChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="f0c3ff14"><emu-nt><a href="#prod-RegularExpressionNonTerminator">RegularExpressionNonTerminator</a></emu-nt><emu-gmod>but not one of <emu-t>\</emu-t> or <emu-t>/</emu-t> or <emu-t>[</emu-t></emu-gmod></emu-rhs>
    <emu-rhs a="9c9579a7"><emu-nt><a href="#prod-RegularExpressionBackslashSequence">RegularExpressionBackslashSequence</a></emu-nt></emu-rhs>
    <emu-rhs a="5cc6858e"><emu-nt><a href="#prod-RegularExpressionClass">RegularExpressionClass</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="RegularExpressionBackslashSequence" type="lexical" id="prod-RegularExpressionBackslashSequence">
    <emu-nt><a href="#prod-RegularExpressionBackslashSequence">RegularExpressionBackslashSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="d7656bad"><emu-t>\</emu-t><emu-nt><a href="#prod-RegularExpressionNonTerminator">RegularExpressionNonTerminator</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="RegularExpressionNonTerminator" type="lexical" id="prod-RegularExpressionNonTerminator">
    <emu-nt><a href="#prod-RegularExpressionNonTerminator">RegularExpressionNonTerminator</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="2d5bdfa7"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
</emu-production>
<emu-production name="RegularExpressionClass" type="lexical" id="prod-RegularExpressionClass">
    <emu-nt><a href="#prod-RegularExpressionClass">RegularExpressionClass</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="4c1bc40a"><emu-t>[</emu-t><emu-nt><a href="#prod-RegularExpressionClassChars">RegularExpressionClassChars</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production>
<emu-production name="RegularExpressionClassChars" type="lexical" id="prod-RegularExpressionClassChars">
    <emu-nt><a href="#prod-RegularExpressionClassChars">RegularExpressionClassChars</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
    <emu-rhs a="76bdcb05"><emu-nt><a href="#prod-RegularExpressionClassChars">RegularExpressionClassChars</a></emu-nt><emu-nt><a href="#prod-RegularExpressionClassChar">RegularExpressionClassChar</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="RegularExpressionClassChar" type="lexical" id="prod-RegularExpressionClassChar">
    <emu-nt><a href="#prod-RegularExpressionClassChar">RegularExpressionClassChar</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7fd10851"><emu-nt><a href="#prod-RegularExpressionNonTerminator">RegularExpressionNonTerminator</a></emu-nt><emu-gmod>but not one of <emu-t>]</emu-t> or <emu-t>\</emu-t></emu-gmod></emu-rhs>
    <emu-rhs a="9c9579a7"><emu-nt><a href="#prod-RegularExpressionBackslashSequence">RegularExpressionBackslashSequence</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="RegularExpressionFlags" type="lexical" id="prod-RegularExpressionFlags">
    <emu-nt><a href="#prod-RegularExpressionFlags">RegularExpressionFlags</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
    <emu-rhs a="fceefdcd"><emu-nt><a href="#prod-RegularExpressionFlags">RegularExpressionFlags</a></emu-nt><emu-nt><a href="#prod-IdentifierPart">IdentifierPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-note><span class="note">Note 2</span>
        <p>Regular expression literals may not be empty; instead of 
representing an empty regular expression literal, the code unit sequence
 <code>//</code> starts a single-line comment. To specify an empty regular expression, use: <code>/(?:)/</code>.</p>
      </emu-note>

      <!-- es6num="11.8.5.1" -->
      <emu-clause id="sec-literals-regular-expression-literals-static-semantics-early-errors">
        <h1><span class="secnum">11.8.5.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-literals-regular-expression-literals-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="RegularExpressionFlags" type="lexical" collapsed="">
    <emu-nt><a href="#prod-RegularExpressionFlags">RegularExpressionFlags</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="fceefdcd"><emu-nt><a href="#prod-RegularExpressionFlags">RegularExpressionFlags</a></emu-nt><emu-nt><a href="#prod-IdentifierPart">IdentifierPart</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if <emu-nt><a href="#prod-IdentifierPart">IdentifierPart</a></emu-nt> contains a Unicode escape sequence.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="11.8.5.2" -->
      <emu-clause id="sec-static-semantics-bodytext">
        <h1><span class="secnum">11.8.5.2</span>Static Semantics: BodyText<span class="utils"><span class="anchor"><a href="#sec-static-semantics-bodytext">#</a></span></span></h1>
        <emu-grammar><emu-production name="RegularExpressionLiteral" type="lexical" collapsed="">
    <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5778053b"><emu-t>/</emu-t><emu-nt><a href="#prod-RegularExpressionBody">RegularExpressionBody</a></emu-nt><emu-t>/</emu-t><emu-nt><a href="#prod-RegularExpressionFlags">RegularExpressionFlags</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the source text that was recognized as <emu-nt><a href="#prod-RegularExpressionBody">RegularExpressionBody</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="11.8.5.3" -->
      <emu-clause id="sec-static-semantics-flagtext">
        <h1><span class="secnum">11.8.5.3</span>Static Semantics: FlagText<span class="utils"><span class="anchor"><a href="#sec-static-semantics-flagtext">#</a></span></span></h1>
        <emu-grammar><emu-production name="RegularExpressionLiteral" type="lexical" collapsed="">
    <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5778053b"><emu-t>/</emu-t><emu-nt><a href="#prod-RegularExpressionBody">RegularExpressionBody</a></emu-nt><emu-t>/</emu-t><emu-nt><a href="#prod-RegularExpressionFlags">RegularExpressionFlags</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the source text that was recognized as <emu-nt><a href="#prod-RegularExpressionFlags">RegularExpressionFlags</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="11.8.6" -->
    <emu-clause id="sec-template-literal-lexical-components">
      <h1><span class="secnum">11.8.6</span>Template Literal Lexical Components<span class="utils"><span class="anchor"><a href="#sec-template-literal-lexical-components">#</a></span></span></h1>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="Template" type="lexical" id="prod-Template">
    <emu-nt><a href="#prod-Template">Template</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7bf3ad2b"><emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt></emu-rhs>
    <emu-rhs a="ab9a4b96"><emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="NoSubstitutionTemplate" type="lexical" id="prod-NoSubstitutionTemplate">
    <emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="056f5c6b"><emu-t>`</emu-t><emu-nt optional=""><a href="#prod-TemplateCharacters">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>`</emu-t></emu-rhs>
</emu-production>
<emu-production name="TemplateHead" type="lexical" id="prod-TemplateHead">
    <emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="bfb172fc"><emu-t>`</emu-t><emu-nt optional=""><a href="#prod-TemplateCharacters">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>${</emu-t></emu-rhs>
</emu-production>
<emu-production name="TemplateSubstitutionTail" type="lexical" id="prod-TemplateSubstitutionTail">
    <emu-nt><a href="#prod-TemplateSubstitutionTail">TemplateSubstitutionTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ccbc035d"><emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt></emu-rhs>
    <emu-rhs a="57fe6188"><emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="TemplateMiddle" type="lexical" id="prod-TemplateMiddle">
    <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="37635b4e"><emu-t>}</emu-t><emu-nt optional=""><a href="#prod-TemplateCharacters">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>${</emu-t></emu-rhs>
</emu-production>
<emu-production name="TemplateTail" type="lexical" id="prod-TemplateTail">
    <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="fcef5bc0"><emu-t>}</emu-t><emu-nt optional=""><a href="#prod-TemplateCharacters">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>`</emu-t></emu-rhs>
</emu-production>
<emu-production name="TemplateCharacters" type="lexical" id="prod-TemplateCharacters">
    <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="f8c26ac5"><emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-nt optional=""><a href="#prod-TemplateCharacters">TemplateCharacters</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="TemplateCharacter" type="lexical" id="prod-TemplateCharacter">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="03c3b542"><emu-t>$</emu-t><emu-gann>[lookahead â  <emu-t>{</emu-t>]</emu-gann></emu-rhs>
    <emu-rhs a="ea7d8d26"><emu-t>\</emu-t><emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt></emu-rhs>
    <emu-rhs a="00992933"><emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt></emu-rhs>
    <emu-rhs a="544825da"><emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt></emu-rhs>
    <emu-rhs a="4c80ea41"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>`</emu-t> or <emu-t>\</emu-t> or <emu-t>$</emu-t> or <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar>
      <p>A conforming implementation must not use the extended definition of <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt> described in  <emu-xref href="#sec-additional-syntax-string-literals"><a href="#sec-additional-syntax-string-literals">B.1.2</a></emu-xref> when parsing a <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt>.</p>
      <emu-note><span class="note">Note</span>
        <p><emu-nt><a href="#prod-TemplateSubstitutionTail">TemplateSubstitutionTail</a></emu-nt> is used by the <emu-nt><a href="#prod-InputElementTemplateTail">InputElementTemplateTail</a></emu-nt> alternative lexical goal.</p>
      </emu-note>

      <!-- es6num="11.8.6.1" -->
      <emu-clause id="sec-static-semantics-tv-and-trv">
        <h1><span class="secnum">11.8.6.1</span>Static Semantics: TV and TRV<span class="utils"><span class="anchor"><a href="#sec-static-semantics-tv-and-trv">#</a></span></span></h1>
        <p>A template literal component is interpreted as a sequence of 
Unicode code points. The Template Value (TV) of a literal component is 
described in terms of code unit values (SV,  <emu-xref href="#sec-literals-string-literals"><a href="#sec-literals-string-literals">11.8.4</a></emu-xref>)
 contributed by the various parts of the template literal component. As 
part of this process, some Unicode code points within the template 
component are interpreted as having a mathematical value (MV,  <emu-xref href="#sec-literals-numeric-literals"><a href="#sec-literals-numeric-literals">11.8.3</a></emu-xref>).
 In determining a TV, escape sequences are replaced by the UTF-16 code 
unit(s) of the Unicode code point represented by the escape sequence. 
The Template Raw Value (TRV) is similar to a Template Value with the 
difference that in TRVs escape sequences are interpreted literally.</p>
        <ul>
          <li>
            The TV and TRV of  <emu-grammar><emu-production name="NoSubstitutionTemplate" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7718e620"><emu-t>`</emu-t><emu-t>`</emu-t></emu-rhs>
</emu-production></emu-grammar> is the empty code unit sequence.
          
          </li>
          <li>
            The TV and TRV of  <emu-grammar><emu-production name="TemplateHead" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="25732601"><emu-t>`</emu-t><emu-t>${</emu-t></emu-rhs>
</emu-production></emu-grammar> is the empty code unit sequence.
          
          </li>
          <li>
            The TV and TRV of  <emu-grammar><emu-production name="TemplateMiddle" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="046dadff"><emu-t>}</emu-t><emu-t>${</emu-t></emu-rhs>
</emu-production></emu-grammar> is the empty code unit sequence.
          
          </li>
          <li>
            The TV and TRV of  <emu-grammar><emu-production name="TemplateTail" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7a8ba1d2"><emu-t>}</emu-t><emu-t>`</emu-t></emu-rhs>
</emu-production></emu-grammar> is the empty code unit sequence.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="NoSubstitutionTemplate" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="2d6bd81e"><emu-t>`</emu-t><emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-t>`</emu-t></emu-rhs>
</emu-production></emu-grammar> is the TV of <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt>.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="TemplateHead" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5451d6b2"><emu-t>`</emu-t><emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-t>${</emu-t></emu-rhs>
</emu-production></emu-grammar> is the TV of <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt>.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="TemplateMiddle" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b95ec100"><emu-t>}</emu-t><emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-t>${</emu-t></emu-rhs>
</emu-production></emu-grammar> is the TV of <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt>.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="TemplateTail" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ab941abd"><emu-t>}</emu-t><emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-t>`</emu-t></emu-rhs>
</emu-production></emu-grammar> is the TV of <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt>.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="TemplateCharacters" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="feb9caa8"><emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TV of <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt>.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="TemplateCharacters" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5f9e47ad"><emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is a sequence consisting of the code units in the TV of <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt> followed by all the code units in the TV of <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt> in order.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="TemplateCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="4c80ea41"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>`</emu-t> or <emu-t>\</emu-t> or <emu-t>$</emu-t> or <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar> is the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt>.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="TemplateCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1262cc92"><emu-t>$</emu-t></emu-rhs>
</emu-production></emu-grammar> is the code unit value 0x0024.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="TemplateCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ea7d8d26"><emu-t>\</emu-t><emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the SV of <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt>.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="TemplateCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="00992933"><emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TV of <emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt>.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="TemplateCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="544825da"><emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TRV of <emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt>.
          
          </li>
          <li>
            The TV of  <emu-grammar><emu-production name="LineContinuation" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="c4893d63"><emu-t>\</emu-t><emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the empty code unit sequence.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="NoSubstitutionTemplate" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="2d6bd81e"><emu-t>`</emu-t><emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-t>`</emu-t></emu-rhs>
</emu-production></emu-grammar> is the TRV of <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="TemplateHead" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5451d6b2"><emu-t>`</emu-t><emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-t>${</emu-t></emu-rhs>
</emu-production></emu-grammar> is the TRV of <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="TemplateMiddle" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b95ec100"><emu-t>}</emu-t><emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-t>${</emu-t></emu-rhs>
</emu-production></emu-grammar> is the TRV of <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="TemplateTail" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ab941abd"><emu-t>}</emu-t><emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-t>`</emu-t></emu-rhs>
</emu-production></emu-grammar> is the TRV of <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="TemplateCharacters" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="feb9caa8"><emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TRV of <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="TemplateCharacters" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5f9e47ad"><emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is a sequence consisting of the code units in the TRV of <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt> followed by all the code units in the TRV of <emu-nt><a href="#prod-TemplateCharacters">TemplateCharacters</a></emu-nt>, in order.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="TemplateCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="4c80ea41"><emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt><emu-gmod>but not one of <emu-t>`</emu-t> or <emu-t>\</emu-t> or <emu-t>$</emu-t> or <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar> is the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of the code point value of <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="TemplateCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="1262cc92"><emu-t>$</emu-t></emu-rhs>
</emu-production></emu-grammar> is the code unit value 0x0024.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="TemplateCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="ea7d8d26"><emu-t>\</emu-t><emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the sequence consisting of the code unit value 0x005C followed by the code units of TRV of <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="TemplateCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="00992933"><emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TRV of <emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="TemplateCharacter" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-TemplateCharacter">TemplateCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="544825da"><emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TRV of <emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="EscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="e9e86f07"><emu-nt><a href="#prod-CharacterEscapeSequence">CharacterEscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TRV of the <emu-nt><a href="#prod-CharacterEscapeSequence">CharacterEscapeSequence</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="EscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="5259a431"><emu-t>0</emu-t></emu-rhs>
</emu-production></emu-grammar> is the code unit value 0x0030 (DIGIT ZERO).
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="EscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a8071b85"><emu-nt><a href="#prod-HexEscapeSequence">HexEscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TRV of the <emu-nt><a href="#prod-HexEscapeSequence">HexEscapeSequence</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="EscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="44bd6f55"><emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TRV of the <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="CharacterEscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-CharacterEscapeSequence">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7444838f"><emu-nt><a href="#prod-SingleEscapeCharacter">SingleEscapeCharacter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TRV of the <emu-nt><a href="#prod-SingleEscapeCharacter">SingleEscapeCharacter</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="CharacterEscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-CharacterEscapeSequence">CharacterEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="b7980a98"><emu-nt><a href="#prod-NonEscapeCharacter">NonEscapeCharacter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the SV of the <emu-nt><a href="#prod-NonEscapeCharacter">NonEscapeCharacter</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="SingleEscapeCharacter" type="lexical" oneof="" class=" inline">
    <emu-nt><a href="#prod-SingleEscapeCharacter">SingleEscapeCharacter</a></emu-nt><emu-geq>::</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>'</emu-t><emu-t>"</emu-t><emu-t>\</emu-t><emu-t>b</emu-t><emu-t>f</emu-t><emu-t>n</emu-t><emu-t>r</emu-t><emu-t>t</emu-t><emu-t>v</emu-t></emu-rhs>
</emu-production></emu-grammar> is the SV of the <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt> that is that single code point.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="HexEscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexEscapeSequence">HexEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="d8ef973c"><emu-t>x</emu-t><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the sequence consisting of code unit value 0x0078 followed by TRV of the first <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt> followed by the TRV of the second <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="UnicodeEscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="8072ad8d"><emu-t>u</emu-t><emu-nt><a href="#prod-Hex4Digits">Hex4Digits</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the sequence consisting of code unit value 0x0075 followed by TRV of <emu-nt><a href="#prod-Hex4Digits">Hex4Digits</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="UnicodeEscapeSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-UnicodeEscapeSequence">UnicodeEscapeSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="bc0db51f"><emu-t>u{</emu-t><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar> is the sequence consisting of code unit value 0x0075 followed by code unit value 0x007B followed by TRV of <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt> followed by code unit value 0x007D.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="Hex4Digits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Hex4Digits">Hex4Digits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="0ba8de61"><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the sequence consisting of the TRV of the first <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt> followed by the TRV of the second <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt> followed by the TRV of the third <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt> followed by the TRV of the fourth <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="HexDigits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="a0c48a71"><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the TRV of <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="HexDigits" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="c8221899"><emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt><emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the sequence consisting of TRV of <emu-nt><a href="#prod-HexDigits">HexDigits</a></emu-nt> followed by TRV of <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>.
          
          </li>
          <li>
            The TRV of a <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt> is the SV of the <emu-nt><a href="#prod-SourceCharacter">SourceCharacter</a></emu-nt> that is that <emu-nt><a href="#prod-HexDigit">HexDigit</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="LineContinuation" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="c4893d63"><emu-t>\</emu-t><emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> is the sequence consisting of the code unit value 0x005C followed by the code units of TRV of <emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt>.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="LineTerminatorSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="7b39d525"><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>
</emu-production></emu-grammar> is the code unit value 0x000A.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="LineTerminatorSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="435c91d5"><emu-gprose>&lt;CR&gt;</emu-gprose></emu-rhs>
</emu-production></emu-grammar> is the code unit value 0x000A.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="LineTerminatorSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="10022ab3"><emu-gprose>&lt;LS&gt;</emu-gprose></emu-rhs>
</emu-production></emu-grammar> is the code unit value 0x2028.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="LineTerminatorSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="cfc875d1"><emu-gprose>&lt;PS&gt;</emu-gprose></emu-rhs>
</emu-production></emu-grammar> is the code unit value 0x2029.
          
          </li>
          <li>
            The TRV of  <emu-grammar><emu-production name="LineTerminatorSequence" type="lexical" collapsed="" class=" inline">
    <emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt><emu-geq>::</emu-geq><emu-rhs a="2da252ec"><emu-gprose>&lt;CR&gt;</emu-gprose><emu-gprose>&lt;LF&gt;</emu-gprose></emu-rhs>
</emu-production></emu-grammar> is the sequence consisting of the code unit value 0x000A.
          
          </li>
        </ul>
        <emu-note><span class="note">Note</span>
          <p>TV excludes the code units of <emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt> while TRV includes them. &lt;CR&gt;&lt;LF&gt; and &lt;CR&gt; <emu-nt><a href="#prod-LineTerminatorSequence">LineTerminatorSequence</a></emu-nt>s are normalized to &lt;LF&gt; for both TV and TRV. An explicit <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt> is needed to include a &lt;CR&gt; or &lt;CR&gt;&lt;LF&gt; sequence.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="11.9" -->
  <emu-clause id="sec-automatic-semicolon-insertion">
    <h1><span class="secnum">11.9</span>Automatic Semicolon Insertion<span class="utils"><span class="anchor"><a href="#sec-automatic-semicolon-insertion">#</a></span></span></h1>
    <p>Most ECMAScript statements and declarations must be terminated 
with a semicolon. Such semicolons may always appear explicitly in the 
source text. For convenience, however, such semicolons may be omitted 
from the source text in certain situations. These situations are 
described by saying that semicolons are automatically inserted into the 
source code token stream in those situations.</p>

    <!-- es6num="11.9.1" -->
    <emu-clause id="sec-rules-of-automatic-semicolon-insertion" namespace="asi-rules">
      <h1><span class="secnum">11.9.1</span>Rules of Automatic Semicolon Insertion<span class="utils"><span class="anchor"><a href="#sec-rules-of-automatic-semicolon-insertion">#</a></span></span></h1>
      <p>In the following rules, âtokenâ means the actual recognized lexical token determined using the current lexical <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> as described in clause  <emu-xref href="#sec-ecmascript-language-lexical-grammar"><a href="#sec-ecmascript-language-lexical-grammar">11</a></emu-xref>.</p>
      <p>There are three basic rules of semicolon insertion:</p>
      <ol>
        <li>
          <p>When, as a <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt> is parsed from left to right, a token (called the  <em>offending token</em>)
 is encountered that is not allowed by any production of the grammar, 
then a semicolon is automatically inserted before the offending token if
 one or more of the following conditions is true:</p>
          <ul>
            <li>
              The offending token is separated from the previous token by at least one <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt>.
            
            </li>
            <li>
              The offending token is <code>}</code>.
            
            </li>
            <li>
              The previous token is <code>)</code> and the inserted semicolon would then be parsed as the terminating semicolon of a do-while statement (<emu-xref href="#sec-do-while-statement"><a href="#sec-do-while-statement">13.7.2</a></emu-xref>).
            
            </li>
          </ul>
        </li>
        <li>
          When, as the <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>
 is parsed from left to right, the end of the input stream of tokens is 
encountered and the parser is unable to parse the input token stream as a
 single complete ECMAScript <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>, then a semicolon is automatically inserted at the end of the input stream.
        
        </li>
        <li>
          When, as the <emu-nt><a href="#prod-Script">Script</a></emu-nt> or <emu-nt><a href="#prod-Module">Module</a></emu-nt>
 is parsed from left to right, a token is encountered that is allowed by
 some production of the grammar, but the production is a  <em>restricted production</em> and the token would be the first token for a terminal or nonterminal immediately following the annotation â[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt>
 here]â within the restricted production (and therefore such a token is 
called a restricted token), and the restricted token is separated from 
the previous token by at least one <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt>, then a semicolon is automatically inserted before the restricted token.
        
        </li>
      </ol>
      <p>However, there is an additional overriding condition on the 
preceding rules: a semicolon is never inserted automatically if the 
semicolon would then be parsed as an empty statement or if that 
semicolon would become one of the two semicolons in the header of a <code>for</code> statement (see  <emu-xref href="#sec-for-statement"><a href="#sec-for-statement">13.7.4</a></emu-xref>).</p>
      <emu-note><span class="note">Note</span>
        <p>The following are the only restricted productions in the grammar:</p>
        <emu-grammar><emu-production name="UpdateExpression" params="Yield" id="prod-asi-rules-UpdateExpression">
    <emu-nt params="Yield"><a href="#prod-asi-rules-UpdateExpression">UpdateExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="01e0f909"><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>++</emu-t></emu-rhs>
    <emu-rhs a="f1ad4cc5"><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>--</emu-t></emu-rhs>
</emu-production>
<emu-production name="ContinueStatement" params="Yield" id="prod-asi-rules-ContinueStatement">
    <emu-nt params="Yield"><a href="#prod-asi-rules-ContinueStatement">ContinueStatement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e903cf81"><emu-t>continue</emu-t><emu-t>;</emu-t></emu-rhs>
    <emu-rhs a="aa0a32b6"><emu-t>continue</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params="?Yield"><a href="#prod-LabelIdentifier">LabelIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production>
<emu-production name="BreakStatement" params="Yield" id="prod-asi-rules-BreakStatement">
    <emu-nt params="Yield"><a href="#prod-asi-rules-BreakStatement">BreakStatement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b65229e7"><emu-t>break</emu-t><emu-t>;</emu-t></emu-rhs>
    <emu-rhs a="8393d74c"><emu-t>break</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params="?Yield"><a href="#prod-LabelIdentifier">LabelIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production>
<emu-production name="ReturnStatement" params="Yield" id="prod-asi-rules-ReturnStatement">
    <emu-nt params="Yield"><a href="#prod-asi-rules-ReturnStatement">ReturnStatement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b293381"><emu-t>return</emu-t><emu-t>;</emu-t></emu-rhs>
    <emu-rhs a="55b8d19e"><emu-t>return</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production>
<emu-production name="ThrowStatement" params="Yield" id="prod-asi-rules-ThrowStatement">
    <emu-nt params="Yield"><a href="#prod-asi-rules-ThrowStatement">ThrowStatement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8d5d0423"><emu-t>throw</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production>
<emu-production name="ArrowFunction" params="In, Yield" id="prod-asi-rules-ArrowFunction">
    <emu-nt params="In, Yield"><a href="#prod-asi-rules-ArrowFunction">ArrowFunction</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5a88b959"><emu-nt params="?Yield"><a href="#prod-ArrowParameters">ArrowParameters</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params="?In"><a href="#prod-ConciseBody">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="YieldExpression" params="In" id="prod-asi-rules-YieldExpression">
    <emu-nt params="In"><a href="#prod-asi-rules-YieldExpression">YieldExpression</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="121b36eb"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>*</emu-t><emu-nt params="?In, +Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="ca260fec"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params="?In, +Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <p>The practical effect of these restricted productions is as follows:</p>
        <ul>
          <li>
            When a <code>++</code> or <code>--</code> token is encountered where the parser would treat it as a postfix operator, and at least one <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> occurred between the preceding token and the <code>++</code> or <code>--</code> token, then a semicolon is automatically inserted before the <code>++</code> or <code>--</code> token.
          
          </li>
          <li>
            When a <code>continue</code>, <code>break</code>, <code>return</code>, <code>throw</code>, or <code>yield</code> token is encountered and a <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> is encountered before the next token, a semicolon is automatically inserted after the <code>continue</code>, <code>break</code>, <code>return</code>, <code>throw</code>, or <code>yield</code> token.
          
          </li>
        </ul>
        <p>The resulting practical advice to ECMAScript programmers is:</p>
        <ul>
          <li>
            A postfix <code>++</code> or <code>--</code> operator should appear on the same line as its operand.
          
          </li>
          <li>
            An <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> in a <code>return</code> or <code>throw</code> statement or an <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt> in a <code>yield</code> expression should start on the same line as the <code>return</code>, <code>throw</code>, or <code>yield</code> token.
          
          </li>
          <li>
            A <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt> in a <code>break</code> or <code>continue</code> statement should be on the same line as the <code>break</code> or <code>continue</code> token.
          
          </li>
        </ul>
      </emu-note>
    </emu-clause>

    <!-- es6num="11.9.2" -->
    <emu-clause id="sec-examples-of-automatic-semicolon-insertion">
      <h1><span class="secnum">11.9.2</span>Examples of Automatic Semicolon Insertion<span class="utils"><span class="anchor"><a href="#sec-examples-of-automatic-semicolon-insertion">#</a></span></span></h1>
      <p>The source</p>
      <pre><code class="javascript hljs">{ <span class="hljs-number">1</span> <span class="hljs-number">2</span> } <span class="hljs-number">3</span></code></pre>
      <p>is not a valid sentence in the ECMAScript grammar, even with the automatic semicolon insertion rules. In contrast, the source</p>
      <pre><code class="javascript hljs">{ <span class="hljs-number">1</span>
<span class="hljs-number">2</span> } <span class="hljs-number">3</span></code></pre>
      <p>is also not a valid ECMAScript sentence, but is transformed by automatic semicolon insertion into the following:</p>
      <pre><code class="javascript hljs">{ <span class="hljs-number">1</span>
;<span class="hljs-number">2</span> ;} <span class="hljs-number">3</span>;</code></pre>
      <p>which is a valid ECMAScript sentence.</p>
      <p>The source</p>
      <pre><code class="javascript hljs"><span class="hljs-keyword">for</span> (a; b
)</code></pre>
      <p>is not a valid ECMAScript sentence and is not altered by 
automatic semicolon insertion because the semicolon is needed for the 
header of a <code>for</code> statement. Automatic semicolon insertion never inserts one of the two semicolons in the header of a <code>for</code> statement.</p>
      <p>The source</p>
      <pre><code class="javascript hljs"><span class="hljs-keyword">return</span>
a + b</code></pre>
      <p>is transformed by automatic semicolon insertion into the following:</p>
      <pre><code class="javascript hljs"><span class="hljs-keyword">return</span>;
a + b;</code></pre>
      <emu-note><span class="note">Note 1</span>
        <p>The expression <code>a + b</code> is not treated as a value to be returned by the <code>return</code> statement, because a <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> separates it from the token <code>return</code>.</p>
      </emu-note>
      <p>The source</p>
      <pre><code class="javascript hljs">a = b
++c</code></pre>
      <p>is transformed by automatic semicolon insertion into the following:</p>
      <pre><code class="javascript hljs">a = b;
++c;</code></pre>
      <emu-note><span class="note">Note 2</span>
        <p>The token <code>++</code> is not treated as a postfix operator applying to the variable <code>b</code>, because a <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> occurs between <code>b</code> and <code>++</code>.</p>
      </emu-note>
      <p>The source</p>
      <pre><code class="javascript hljs"><span class="hljs-keyword">if</span> (a &gt; b)
<span class="hljs-keyword">else</span> c = d</code></pre>
      <p>is not a valid ECMAScript sentence and is not altered by automatic semicolon insertion before the <code>else</code>
 token, even though no production of the grammar applies at that point, 
because an automatically inserted semicolon would then be parsed as an 
empty statement.</p>
      <p>The source</p>
      <pre><code class="javascript hljs">a = b + c
(d + e).print()</code></pre>
      <p>is  <em>not</em> transformed by automatic semicolon insertion, 
because the parenthesized expression that begins the second line can be 
interpreted as an argument list for a function call:</p>
      <pre><code class="javascript hljs">a = b + c(d + e).print()</code></pre>
      <p>In the circumstance that an assignment statement must begin 
with a left parenthesis, it is a good idea for the programmer to provide
 an explicit semicolon at the end of the preceding statement rather than
 to rely on automatic semicolon insertion.</p>
    </emu-clause>
  </emu-clause>
</emu-clause>

<!-- es6num="12" -->
<emu-clause id="sec-ecmascript-language-expressions">
  <h1><span class="secnum">12</span>ECMAScript Language: Expressions<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-expressions">#</a></span></span></h1>

  <!-- es6num="12.1" -->
  <emu-clause id="sec-identifiers">
    <h1><span class="secnum">12.1</span>Identifiers<span class="utils"><span class="anchor"><a href="#sec-identifiers">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="IdentifierReference" params="Yield" id="prod-IdentifierReference">
    <emu-nt params="Yield"><a href="#prod-IdentifierReference">IdentifierReference</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
    <emu-rhs a="481cca15" constraints="~Yield"><emu-constraints>[~Yield]</emu-constraints><emu-t>yield</emu-t></emu-rhs>
</emu-production>
<emu-production name="BindingIdentifier" params="Yield" id="prod-BindingIdentifier">
    <emu-nt params="Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
    <emu-rhs a="481cca15" constraints="~Yield"><emu-constraints>[~Yield]</emu-constraints><emu-t>yield</emu-t></emu-rhs>
</emu-production>
<emu-production name="LabelIdentifier" params="Yield" id="prod-LabelIdentifier">
    <emu-nt params="Yield"><a href="#prod-LabelIdentifier">LabelIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
    <emu-rhs a="481cca15" constraints="~Yield"><emu-constraints>[~Yield]</emu-constraints><emu-t>yield</emu-t></emu-rhs>
</emu-production>
<emu-production name="Identifier" id="prod-Identifier">
    <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bfa5c374"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt><emu-gmod>but not <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.1.1" -->
    <emu-clause id="sec-identifiers-static-semantics-early-errors">
      <h1><span class="secnum">12.1.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-identifiers-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="BindingIdentifier" collapsed="">
    <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if the code matched by this production is contained in <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> and the StringValue of <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt> is <code>"arguments"</code> or <code>"eval"</code>.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="IdentifierReference" collapsed="">
    <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production>
<emu-production name="BindingIdentifier" collapsed="">
    <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production>
<emu-production name="LabelIdentifier" collapsed="">
    <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if the code matched by this production is contained in <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="IdentifierReference" params="Yield" collapsed="">
    <emu-nt params="Yield"><a href="#prod-IdentifierReference">IdentifierReference</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BindingIdentifier" params="Yield" collapsed="">
    <emu-nt params="Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="LabelIdentifier" params="Yield" collapsed="">
    <emu-nt params="Yield"><a href="#prod-LabelIdentifier">LabelIdentifier</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if this production has a  <sub>[Yield]</sub> parameter and StringValue of <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt> is <code>"yield"</code>.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="Identifier" collapsed="">
    <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bfa5c374"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt><emu-gmod>but not <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if this phrase is contained in <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> and the StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> is: <code>"implements"</code>, <code>"interface"</code>, <code>"let"</code>, <code>"package"</code>, <code>"private"</code>, <code>"protected"</code>, <code>"public"</code>, <code>"static"</code>, or <code>"yield"</code>.
        
        </li>
        <li>
          It is a Syntax Error if StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> is the same String value as the StringValue of any <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt> except for <code>yield</code>.
        
        </li>
      </ul>
      <emu-note><span class="note">Note</span>
        <p>StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> normalizes any Unicode escape sequences in <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> hence such escapes cannot be used to write an <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt> whose code point sequence is the same as a <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt>.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="12.1.2" -->
    <emu-clause id="sec-identifiers-static-semantics-boundnames">
      <h1><span class="secnum">12.1.2</span>Static Semantics: BoundNames<span class="utils"><span class="anchor"><a href="#sec-identifiers-static-semantics-boundnames">#</a></span></span></h1>
      <emu-see-also-para op="BoundNames"></emu-see-also-para>
      <emu-grammar><emu-production name="BindingIdentifier" collapsed="">
    <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing the StringValue of <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="BindingIdentifier" collapsed="">
    <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing <code>"yield"</code>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.1.3" -->
    <emu-clause id="sec-identifiers-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.1.3</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-identifiers-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="IdentifierReference" collapsed="">
    <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If this <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt> is contained in <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> and StringValue of <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt> is <code>"eval"</code> or <code>"arguments"</code>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="IdentifierReference" collapsed="">
    <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.1.4" -->
    <emu-clause id="sec-identifiers-static-semantics-stringvalue">
      <h1><span class="secnum">12.1.4</span>Static Semantics: StringValue<span class="utils"><span class="anchor"><a href="#sec-identifiers-static-semantics-stringvalue">#</a></span></span></h1>
      <emu-see-also-para op="StringValue"></emu-see-also-para>
      <emu-grammar><emu-production name="IdentifierReference" collapsed="">
    <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production>
<emu-production name="BindingIdentifier" collapsed="">
    <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production>
<emu-production name="LabelIdentifier" collapsed="">
    <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <code>"yield"</code>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="Identifier" collapsed="">
    <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bfa5c374"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt><emu-gmod>but not <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt></emu-gmod></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.1.5" -->
    <emu-clause id="sec-identifiers-runtime-semantics-bindinginitialization">
      <h1><span class="secnum">12.1.5</span>Runtime Semantics: BindingInitialization<span class="utils"><span class="anchor"><a href="#sec-identifiers-runtime-semantics-bindinginitialization">#</a></span></span></h1>
      <p>With arguments <var>value</var> and <var>environment</var>.</p>
      <emu-see-also-para op="BindingInitialization"></emu-see-also-para>
      <emu-note><span class="note">Note</span>
        <p><emu-val>undefined</emu-val> is passed for <var>environment</var> to indicate that a <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for <code>var</code> statements and formal parameter lists of some non-strict functions (See  <emu-xref href="#sec-functiondeclarationinstantiation"><a href="#sec-functiondeclarationinstantiation">9.2.12</a></emu-xref>). In those cases a lexical binding is hoisted and preinitialized prior to evaluation of its initializer.</p>
      </emu-note>
      <emu-grammar><emu-production name="BindingIdentifier" collapsed="">
    <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>name</var> be StringValue of <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt>.</li><li>Return ? <emu-xref aoid="InitializeBoundName"><a href="#sec-initializeboundname">InitializeBoundName</a></emu-xref>(<var>name</var>, <var>value</var>, <var>environment</var>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="BindingIdentifier" collapsed="">
    <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ? <emu-xref aoid="InitializeBoundName"><a href="#sec-initializeboundname">InitializeBoundName</a></emu-xref>(<code>"yield"</code>, <var>value</var>, <var>environment</var>).
      </li></ol></emu-alg>

      <!-- es6num="12.1.5.1" -->
      <emu-clause id="sec-initializeboundname" aoid="InitializeBoundName">
        <h1><span class="secnum">12.1.5.1</span>Runtime Semantics: InitializeBoundName(<var>name</var>, <var>value</var>, <var>environment</var>)<span class="utils"><span class="anchor"><a href="#sec-initializeboundname">#</a></span></span></h1>
        <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>name</var>) is String.</li><li>If <var>environment</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>env</var> be the <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref> component of <var>environment</var>.</li><li>Perform <var>env</var>.InitializeBinding(<var>name</var>, <var>value</var>).</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>lhs</var> be <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(<var>name</var>).</li><li>Return ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).
        </li></ol></li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.1.6" -->
    <emu-clause id="sec-identifiers-runtime-semantics-evaluation">
      <h1><span class="secnum">12.1.6</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-identifiers-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="IdentifierReference" collapsed="">
    <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="06b6ace8"><emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ? <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(StringValue of <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="IdentifierReference" collapsed="">
    <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ? <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(<code>"yield"</code>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 1</span>
        <p>The result of evaluating an <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt> is always a value of type <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>.</p>
      </emu-note>
      <emu-note><span class="note">Note 2</span>
        <p>In <emu-xref href="#non-strict-code"><a href="#non-strict-code">non-strict code</a></emu-xref>, the keyword <code>yield</code> may be used as an identifier. Evaluating the <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt> production resolves the binding of <code>yield</code> as if it was an <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt>. Early Error restriction ensures that such an evaluation only can occur for <emu-xref href="#non-strict-code"><a href="#non-strict-code">non-strict code</a></emu-xref>. See  <emu-xref href="#sec-let-and-const-declarations"><a href="#sec-let-and-const-declarations">13.3.1</a></emu-xref> for the handling of <code>yield</code> in binding creation contexts.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.2" -->
  <emu-clause id="sec-primary-expression">
    <h1><span class="secnum">12.2</span>Primary Expression<span class="utils"><span class="anchor"><a href="#sec-primary-expression">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="PrimaryExpression" params="Yield" id="prod-PrimaryExpression">
    <emu-nt params="Yield"><a href="#prod-PrimaryExpression">PrimaryExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8cee0c59"><emu-t>this</emu-t></emu-rhs>
    <emu-rhs a="3a0131bb"><emu-nt params="?Yield"><a href="#prod-IdentifierReference">IdentifierReference</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="92e97e03"><emu-nt><a href="#prod-Literal">Literal</a></emu-nt></emu-rhs>
    <emu-rhs a="ac47bb6b"><emu-nt params="?Yield"><a href="#prod-ArrayLiteral">ArrayLiteral</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="0392c02a"><emu-nt params="?Yield"><a href="#prod-ObjectLiteral">ObjectLiteral</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="242eeccd"><emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="c2664089"><emu-nt params="?Yield"><a href="#prod-ClassExpression">ClassExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="abb7f7f4"><emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="31b672e8"><emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="2d2930d1"><emu-nt params="?Yield"><a href="#prod-TemplateLiteral">TemplateLiteral</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="parencover"><emu-nt params="?Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="CoverParenthesizedExpressionAndArrowParameterList" params="Yield" id="prod-CoverParenthesizedExpressionAndArrowParameterList">
    <emu-nt params="Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aff23fda"><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="78e44c33"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="1f3e167a"><emu-t>(</emu-t><emu-t>...</emu-t><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="32792516"><emu-t>(</emu-t><emu-t>...</emu-t><emu-nt params="?Yield"><a href="#prod-BindingPattern">BindingPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="939f8720"><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="05422135"><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params="?Yield"><a href="#prod-BindingPattern">BindingPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar>
    <h2>Supplemental Syntax</h2>
    <p>When processing the production
      
      <br>
      <emu-grammar><emu-production name="PrimaryExpression" params="Yield" collapsed="" class=" inline">
    <emu-nt params="Yield"><a href="#prod-PrimaryExpression">PrimaryExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b3fd8fa6"><emu-nt params="?Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <br>
      the interpretation of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> is refined using the following grammar:</p>
    <emu-grammar><emu-production name="ParenthesizedExpression" params="Yield" id="prod-ParenthesizedExpression">
    <emu-nt params="Yield"><a href="#prod-ParenthesizedExpression">ParenthesizedExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aff23fda"><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.2.1" -->
    <emu-clause id="sec-primary-expression-semantics">
      <h1><span class="secnum">12.2.1</span>Semantics<span class="utils"><span class="anchor"><a href="#sec-primary-expression-semantics">#</a></span></span></h1>

      <!-- es6num="12.2.1.1" -->
      <emu-clause id="sec-static-semantics-coveredparenthesizedexpression">
        <h1><span class="secnum">12.2.1.1</span>Static Semantics: CoveredParenthesizedExpression<span class="utils"><span class="anchor"><a href="#sec-static-semantics-coveredparenthesizedexpression">#</a></span></span></h1>
        <emu-grammar><emu-production name="CoverParenthesizedExpressionAndArrowParameterList" params="Yield" collapsed="">
    <emu-nt params="Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aff23fda"><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of parsing the lexical token stream matched by <emu-nt params="Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> using either <emu-nt params="~Yield"><a href="#prod-ParenthesizedExpression">ParenthesizedExpression</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt> or <emu-nt params="+Yield"><a href="#prod-ParenthesizedExpression">ParenthesizedExpression</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> depending upon whether the <sub>[Yield]</sub> grammar parameter was present when <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> was matched.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.1.2" -->
      <emu-clause id="sec-semantics-static-semantics-hasname">
        <h1><span class="secnum">12.2.1.2</span>Static Semantics: HasName<span class="utils"><span class="anchor"><a href="#sec-semantics-static-semantics-hasname">#</a></span></span></h1>
        <emu-see-also-para op="HasName"></emu-see-also-para>
        <emu-grammar><emu-production name="PrimaryExpression" collapsed="">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be CoveredParenthesizedExpression of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>If IsFunctionDefinition of <var>expr</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Return HasName of <var>expr</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.1.3" -->
      <emu-clause id="sec-semantics-static-semantics-isfunctiondefinition">
        <h1><span class="secnum">12.2.1.3</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-semantics-static-semantics-isfunctiondefinition">#</a></span></span></h1>
        <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
        <emu-grammar><emu-production name="PrimaryExpression">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8cee0c59"><emu-t>this</emu-t></emu-rhs>
    <emu-rhs a="2361f19d"><emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt></emu-rhs>
    <emu-rhs a="92e97e03"><emu-nt><a href="#prod-Literal">Literal</a></emu-nt></emu-rhs>
    <emu-rhs a="1bf32393"><emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="cd178913"><emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="31b672e8"><emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="d9922ce8"><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="PrimaryExpression" collapsed="">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be CoveredParenthesizedExpression of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return IsFunctionDefinition of <var>expr</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.1.4" -->
      <emu-clause id="sec-semantics-static-semantics-isidentifierref">
        <h1><span class="secnum">12.2.1.4</span>Static Semantics: IsIdentifierRef<span class="utils"><span class="anchor"><a href="#sec-semantics-static-semantics-isidentifierref">#</a></span></span></h1>
        <emu-see-also-para op="IsIdentifierRef"></emu-see-also-para>
        <emu-grammar><emu-production name="PrimaryExpression" collapsed="">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2361f19d"><emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="PrimaryExpression">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8cee0c59"><emu-t>this</emu-t></emu-rhs>
    <emu-rhs a="92e97e03"><emu-nt><a href="#prod-Literal">Literal</a></emu-nt></emu-rhs>
    <emu-rhs a="1bf32393"><emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="cd178913"><emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="242eeccd"><emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="d8ce6db1"><emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="abb7f7f4"><emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="31b672e8"><emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="d9922ce8"><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.1.5" -->
      <emu-clause id="sec-semantics-static-semantics-isvalidsimpleassignmenttarget">
        <h1><span class="secnum">12.2.1.5</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-semantics-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
        <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="PrimaryExpression">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8cee0c59"><emu-t>this</emu-t></emu-rhs>
    <emu-rhs a="92e97e03"><emu-nt><a href="#prod-Literal">Literal</a></emu-nt></emu-rhs>
    <emu-rhs a="1bf32393"><emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="cd178913"><emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="242eeccd"><emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="d8ce6db1"><emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="abb7f7f4"><emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="31b672e8"><emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="d9922ce8"><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="PrimaryExpression" collapsed="">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be CoveredParenthesizedExpression of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return IsValidSimpleAssignmentTarget of <var>expr</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.2.2" -->
    <emu-clause id="sec-this-keyword">
      <h1><span class="secnum">12.2.2</span>The <code>this</code> Keyword<span class="utils"><span class="anchor"><a href="#sec-this-keyword">#</a></span></span></h1>

      <!-- es6num="12.2.2.1" -->
      <emu-clause id="sec-this-keyword-runtime-semantics-evaluation">
        <h1><span class="secnum">12.2.2.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-this-keyword-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="PrimaryExpression" collapsed="">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8cee0c59"><emu-t>this</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ? <emu-xref aoid="ResolveThisBinding"><a href="#sec-resolvethisbinding">ResolveThisBinding</a></emu-xref>( ).
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.2.3" -->
    <emu-clause id="sec-identifier-reference">
      <h1><span class="secnum">12.2.3</span>Identifier Reference<span class="utils"><span class="anchor"><a href="#sec-identifier-reference">#</a></span></span></h1>
      <p>See  <emu-xref href="#sec-identifiers"><a href="#sec-identifiers">12.1</a></emu-xref> for <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt>.</p>
    </emu-clause>

    <!-- es6num="12.2.4" -->
    <emu-clause id="sec-primary-expression-literals">
      <h1><span class="secnum">12.2.4</span>Literals<span class="utils"><span class="anchor"><a href="#sec-primary-expression-literals">#</a></span></span></h1>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="Literal" id="prod-Literal">
    <emu-nt><a href="#prod-Literal">Literal</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="54f84188"><emu-nt><a href="#prod-NullLiteral">NullLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="3508e1fd"><emu-nt><a href="#prod-BooleanLiteral">BooleanLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="a548b407"><emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="5c74e54d"><emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>

      <!-- es6num="12.2.4.1" -->
      <emu-clause id="sec-literals-runtime-semantics-evaluation">
        <h1><span class="secnum">12.2.4.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-literals-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="Literal" collapsed="">
    <emu-nt><a href="#prod-Literal">Literal</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="54f84188"><emu-nt><a href="#prod-NullLiteral">NullLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>null</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="Literal" collapsed="">
    <emu-nt><a href="#prod-Literal">Literal</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3508e1fd"><emu-nt><a href="#prod-BooleanLiteral">BooleanLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val> if <emu-nt><a href="#prod-BooleanLiteral">BooleanLiteral</a></emu-nt> is the token <code>false</code>.</li><li>Return <emu-val>true</emu-val> if <emu-nt><a href="#prod-BooleanLiteral">BooleanLiteral</a></emu-nt> is the token <code>true</code>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="Literal" collapsed="">
    <emu-nt><a href="#prod-Literal">Literal</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a548b407"><emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the number whose value is MV of <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt> as defined in <emu-xref href="#sec-literals-numeric-literals"><a href="#sec-literals-numeric-literals">11.8.3</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="Literal" collapsed="">
    <emu-nt><a href="#prod-Literal">Literal</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5c74e54d"><emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the StringValue of <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt> as defined in <emu-xref href="#sec-string-literals-static-semantics-stringvalue"><a href="#sec-string-literals-static-semantics-stringvalue">11.8.4.2</a></emu-xref>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.2.5" -->
    <emu-clause id="sec-array-initializer">
      <h1><span class="secnum">12.2.5</span>Array Initializer<span class="utils"><span class="anchor"><a href="#sec-array-initializer">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>An <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt>
 is an expression describing the initialization of an Array object, 
using a list, of zero or more expressions each of which represents an 
array element, enclosed in square brackets. The elements need not be 
literals; they are evaluated each time the array initializer is 
evaluated.</p>
      </emu-note>
      <p>Array elements may be elided at the beginning, middle or end of
 the element list. Whenever a comma in the element list is not preceded 
by an <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>
 (i.e., a comma at the beginning or after another comma), the missing 
array element contributes to the length of the Array and increases the 
index of subsequent elements. Elided array elements are not defined. If 
an element is elided at the end of an array, that element does not 
contribute to the length of the Array.</p>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="ArrayLiteral" params="Yield" id="prod-ArrayLiteral">
    <emu-nt params="Yield"><a href="#prod-ArrayLiteral">ArrayLiteral</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="906e476b"><emu-t>[</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="71e00db5"><emu-t>[</emu-t><emu-nt params="?Yield"><a href="#prod-ElementList">ElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="eaaf3387"><emu-t>[</emu-t><emu-nt params="?Yield"><a href="#prod-ElementList">ElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production>
<emu-production name="ElementList" params="Yield" id="prod-ElementList">
    <emu-nt params="Yield"><a href="#prod-ElementList">ElementList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c186e35a"><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="05f42a48"><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-SpreadElement">SpreadElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="1e1cc512"><emu-nt params="?Yield"><a href="#prod-ElementList">ElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="df01e14f"><emu-nt params="?Yield"><a href="#prod-ElementList">ElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-SpreadElement">SpreadElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="Elision" id="prod-Elision">
    <emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9471f753"><emu-t>,</emu-t></emu-rhs>
    <emu-rhs a="806d0124"><emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>
</emu-production>
<emu-production name="SpreadElement" params="Yield" id="prod-SpreadElement">
    <emu-nt params="Yield"><a href="#prod-SpreadElement">SpreadElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bce6d30c"><emu-t>...</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

      <!-- es6num="12.2.5.1" -->
      <emu-clause id="sec-static-semantics-elisionwidth">
        <h1><span class="secnum">12.2.5.1</span>Static Semantics: ElisionWidth<span class="utils"><span class="anchor"><a href="#sec-static-semantics-elisionwidth">#</a></span></span></h1>
        <emu-grammar><emu-production name="Elision" collapsed="">
    <emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9471f753"><emu-t>,</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the numeric value 1.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="Elision" collapsed="">
    <emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="806d0124"><emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>preceding</var> be the ElisionWidth of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt>.</li><li>Return <var>preceding</var>+1.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.5.2" -->
      <emu-clause id="sec-runtime-semantics-arrayaccumulation">
        <h1><span class="secnum">12.2.5.2</span>Runtime Semantics: ArrayAccumulation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-arrayaccumulation">#</a></span></span></h1>
        <p>With parameters <var>array</var> and <var>nextIndex</var>.</p>
        <emu-grammar><emu-production name="ElementList" collapsed="">
    <emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d806b57a"><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>padding</var> be the ElisionWidth of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt>; if <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>array</var>, <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>nextIndex</var>+<var>padding</var>)), <var>initValue</var>).</li><li>Assert: <var>created</var> is <emu-val>true</emu-val>.</li><li>Return <var>nextIndex</var>+<var>padding</var>+1.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ElementList" collapsed="">
    <emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="141a73d1"><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-SpreadElement">SpreadElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>padding</var> be the ElisionWidth of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt>; if <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href="#prod-SpreadElement">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>+<var>padding</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ElementList" collapsed="">
    <emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fd2af9b1"><emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>postIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>postIndex</var>).</li><li>Let <var>padding</var> be the ElisionWidth of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt>; if <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Let <var>initResult</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>initValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>initResult</var>).</li><li>Let <var>created</var> be <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>array</var>, <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>postIndex</var>+<var>padding</var>)), <var>initValue</var>).</li><li>Assert: <var>created</var> is <emu-val>true</emu-val>.</li><li>Return <var>postIndex</var>+<var>padding</var>+1.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ElementList" collapsed="">
    <emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6a579a6a"><emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-SpreadElement">SpreadElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>postIndex</var> be the result of performing ArrayAccumulation for <emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt> with arguments <var>array</var> and <var>nextIndex</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>postIndex</var>).</li><li>Let <var>padding</var> be the ElisionWidth of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt>; if <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Return the result of performing ArrayAccumulation for <emu-nt><a href="#prod-SpreadElement">SpreadElement</a></emu-nt> with arguments <var>array</var> and <var>postIndex</var>+<var>padding</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SpreadElement" collapsed="">
    <emu-nt><a href="#prod-SpreadElement">SpreadElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5bb8853e"><emu-t>...</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iterator</var> be ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat<ol><li>Let <var>next</var> be ? <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iterator</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>nextIndex</var>.</li><li>Let <var>nextValue</var> be ? <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Let <var>status</var> be <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>array</var>, <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>nextIndex</var>)), <var>nextValue</var>).</li><li>Assert: <var>status</var> is <emu-val>true</emu-val>.</li><li>Let <var>nextIndex</var> be <var>nextIndex</var> + 1.
        </li></ol></li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p><emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>
 is used to ensure that own properties are defined for the array even if
 the standard built-in Array prototype object has been modified in a 
manner that would preclude the creation of new own properties using 
[[Set]].</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="12.2.5.3" -->
      <emu-clause id="sec-array-initializer-runtime-semantics-evaluation">
        <h1><span class="secnum">12.2.5.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-array-initializer-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="ArrayLiteral" collapsed="">
    <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="906e476b"><emu-t>[</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>array</var> be <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>pad</var> be the ElisionWidth of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt>; if <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Perform <emu-xref aoid="Set"><a href="#sec-set-o-p-v-throw">Set</a></emu-xref>(<var>array</var>, <code>"length"</code>, <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>pad</var>), <emu-val>false</emu-val>).</li><li>NOTE: The above Set cannot fail because of the nature of the object returned by <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>.</li><li>Return <var>array</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayLiteral" collapsed="">
    <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0aa8c9b8"><emu-t>[</emu-t><emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>array</var> be <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>len</var> be the result of performing ArrayAccumulation for <emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt> with arguments <var>array</var> and 0.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>len</var>).</li><li>Perform <emu-xref aoid="Set"><a href="#sec-set-o-p-v-throw">Set</a></emu-xref>(<var>array</var>, <code>"length"</code>, <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>len</var>), <emu-val>false</emu-val>).</li><li>NOTE: The above Set cannot fail because of the nature of the object returned by <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>.</li><li>Return <var>array</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayLiteral" collapsed="">
    <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c8973de1"><emu-t>[</emu-t><emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>array</var> be <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>len</var> be the result of performing ArrayAccumulation for <emu-nt><a href="#prod-ElementList">ElementList</a></emu-nt> with arguments <var>array</var> and 0.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>len</var>).</li><li>Let <var>padding</var> be the ElisionWidth of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt>; if <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> is not present, use the numeric value zero.</li><li>Perform <emu-xref aoid="Set"><a href="#sec-set-o-p-v-throw">Set</a></emu-xref>(<var>array</var>, <code>"length"</code>, <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>padding</var>+<var>len</var>), <emu-val>false</emu-val>).</li><li>NOTE: The above Set cannot fail because of the nature of the object returned by <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>.</li><li>Return <var>array</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.2.6" -->
    <emu-clause id="sec-object-initializer">
      <h1><span class="secnum">12.2.6</span>Object Initializer<span class="utils"><span class="anchor"><a href="#sec-object-initializer">#</a></span></span></h1>
      <emu-note><span class="note">Note 1</span>
        <p>An object initializer is an expression describing the 
initialization of an Object, written in a form resembling a literal. It 
is a list of zero or more pairs of property keys and associated values, 
enclosed in curly brackets. The values need not be literals; they are 
evaluated each time the object initializer is evaluated.</p>
      </emu-note>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="ObjectLiteral" params="Yield" id="prod-ObjectLiteral">
    <emu-nt params="Yield"><a href="#prod-ObjectLiteral">ObjectLiteral</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="e8cab933"><emu-t>{</emu-t><emu-nt params="?Yield"><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="f3799aaa"><emu-t>{</emu-t><emu-nt params="?Yield"><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="PropertyDefinitionList" params="Yield" id="prod-PropertyDefinitionList">
    <emu-nt params="Yield"><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9c5ab7a0"><emu-nt params="?Yield"><a href="#prod-PropertyDefinition">PropertyDefinition</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="fa54c4a2"><emu-nt params="?Yield"><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="?Yield"><a href="#prod-PropertyDefinition">PropertyDefinition</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="PropertyDefinition" params="Yield" id="prod-PropertyDefinition">
    <emu-nt params="Yield"><a href="#prod-PropertyDefinition">PropertyDefinition</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3a0131bb"><emu-nt params="?Yield"><a href="#prod-IdentifierReference">IdentifierReference</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="024b5337"><emu-nt params="?Yield"><a href="#prod-CoverInitializedName">CoverInitializedName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="8aec5117"><emu-nt params="?Yield"><a href="#prod-PropertyName">PropertyName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="da6bdd4c"><emu-nt params="?Yield"><a href="#prod-MethodDefinition">MethodDefinition</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="PropertyName" params="Yield" id="prod-PropertyName">
    <emu-nt params="Yield"><a href="#prod-PropertyName">PropertyName</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e71e2304"><emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt></emu-rhs>
    <emu-rhs a="cb2923ed"><emu-nt params="?Yield"><a href="#prod-ComputedPropertyName">ComputedPropertyName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="LiteralPropertyName" id="prod-LiteralPropertyName">
    <emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ebb31e2"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="5c74e54d"><emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="a548b407"><emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ComputedPropertyName" params="Yield" id="prod-ComputedPropertyName">
    <emu-nt params="Yield"><a href="#prod-ComputedPropertyName">ComputedPropertyName</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="043961a4"><emu-t>[</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production>
<emu-production name="CoverInitializedName" params="Yield" id="prod-CoverInitializedName">
    <emu-nt params="Yield"><a href="#prod-CoverInitializedName">CoverInitializedName</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="86d3d38d"><emu-nt params="?Yield"><a href="#prod-IdentifierReference">IdentifierReference</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="+In, ?Yield"><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="Initializer" params="In, Yield" id="prod-Initializer">
    <emu-nt params="In, Yield"><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="345dd547"><emu-t>=</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-note><span class="note">Note 2</span>
        <p><emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is defined in  <emu-xref href="#sec-method-definitions"><a href="#sec-method-definitions">14.3</a></emu-xref>.</p>
      </emu-note>
      <emu-note><span class="note">Note 3</span>
        <p>In certain contexts, <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> is used as a cover grammar for a more restricted secondary grammar. The <emu-nt><a href="#prod-CoverInitializedName">CoverInitializedName</a></emu-nt>
 production is necessary to fully cover these secondary grammars. 
However, use of this production results in an early Syntax Error in 
normal contexts where an actual <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> is expected.</p>
      </emu-note>

      <!-- es6num="12.2.6.1" -->
      <emu-clause id="sec-object-initializer-static-semantics-early-errors">
        <h1><span class="secnum">12.2.6.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-object-initializer-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="PropertyDefinition" collapsed="">
    <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4bc22514"><emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if HasDirectSuper of <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.
          
          </li>
        </ul>
        <p>In addition to describing an actual object initializer the <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> productions are also used as a cover grammar for <emu-nt><a href="#prod-ObjectAssignmentPattern">ObjectAssignmentPattern</a></emu-nt>. and may be recognized as part of a <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>. When <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> appears in a context where <emu-nt><a href="#prod-ObjectAssignmentPattern">ObjectAssignmentPattern</a></emu-nt> is required the following Early Error rules are  <b>not</b> applied. In addition, they are not applied when initially parsing a <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</p>
        <emu-grammar><emu-production name="PropertyDefinition" collapsed="">
    <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="df01ba41"><emu-nt><a href="#prod-CoverInitializedName">CoverInitializedName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            Always throw a Syntax Error if code matches this production.
          
          </li>
        </ul>
        <emu-note><span class="note">Note</span>
          <p>This production exists so that <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> can serve as a cover grammar for <emu-nt><a href="#prod-ObjectAssignmentPattern">ObjectAssignmentPattern</a></emu-nt>. It cannot occur in an actual object initializer.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="12.2.6.2" -->
      <emu-clause id="sec-object-initializer-static-semantics-computedpropertycontains">
        <h1><span class="secnum">12.2.6.2</span>Static Semantics: ComputedPropertyContains<span class="utils"><span class="anchor"><a href="#sec-object-initializer-static-semantics-computedpropertycontains">#</a></span></span></h1>
        <p>With parameter <var>symbol</var>.</p>
        <emu-see-also-para op="ComputedPropertyContains"></emu-see-also-para>
        <emu-grammar><emu-production name="PropertyName" collapsed="">
    <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e71e2304"><emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="PropertyName" collapsed="">
    <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="34832631"><emu-nt><a href="#prod-ComputedPropertyName">ComputedPropertyName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of <emu-nt><a href="#prod-ComputedPropertyName">ComputedPropertyName</a></emu-nt> Contains <var>symbol</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.6.3" -->
      <emu-clause id="sec-object-initializer-static-semantics-contains">
        <h1><span class="secnum">12.2.6.3</span>Static Semantics: Contains<span class="utils"><span class="anchor"><a href="#sec-object-initializer-static-semantics-contains">#</a></span></span></h1>
        <p>With parameter <var>symbol</var>.</p>
        <emu-see-also-para op="Contains"></emu-see-also-para>
        <emu-grammar><emu-production name="PropertyDefinition" collapsed="">
    <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4bc22514"><emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <var>symbol</var> is <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return the result of ComputedPropertyContains for <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> with argument <var>symbol</var>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>Static semantic rules that depend upon substructure generally do not look into function definitions.</p>
        </emu-note>
        <emu-grammar><emu-production name="LiteralPropertyName" collapsed="">
    <emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ebb31e2"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <var>symbol</var> is a <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>symbol</var> is an <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt> and StringValue of <var>symbol</var> is the same value as the StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.6.5" -->
      <emu-clause id="sec-static-semantics-iscomputedpropertykey">
        <h1><span class="secnum">12.2.6.4</span>Static Semantics: IsComputedPropertyKey<span class="utils"><span class="anchor"><a href="#sec-static-semantics-iscomputedpropertykey">#</a></span></span></h1>
        <emu-grammar><emu-production name="PropertyName" collapsed="">
    <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e71e2304"><emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="PropertyName" collapsed="">
    <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="34832631"><emu-nt><a href="#prod-ComputedPropertyName">ComputedPropertyName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.6.6" -->
      <emu-clause id="sec-object-initializer-static-semantics-propname">
        <h1><span class="secnum">12.2.6.5</span>Static Semantics: PropName<span class="utils"><span class="anchor"><a href="#sec-object-initializer-static-semantics-propname">#</a></span></span></h1>
        <emu-see-also-para op="PropName"></emu-see-also-para>
        <emu-grammar><emu-production name="PropertyDefinition" collapsed="">
    <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2361f19d"><emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return StringValue of <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="PropertyDefinition" collapsed="">
    <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f2d90b76"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return PropName of <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LiteralPropertyName" collapsed="">
    <emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ebb31e2"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LiteralPropertyName" collapsed="">
    <emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5c74e54d"><emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a String value whose code units are the SV of the <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LiteralPropertyName" collapsed="">
    <emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a548b407"><emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>nbr</var> be the result of forming the value of the <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt>.</li><li>Return ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>nbr</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ComputedPropertyName" collapsed="">
    <emu-nt><a href="#prod-ComputedPropertyName">ComputedPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2ed5550b"><emu-t>[</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-const>empty</emu-const>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.6.7" -->
      <emu-clause id="sec-static-semantics-propertynamelist">
        <h1><span class="secnum">12.2.6.6</span>Static Semantics: PropertyNameList<span class="utils"><span class="anchor"><a href="#sec-static-semantics-propertynamelist">#</a></span></span></h1>
        <emu-grammar><emu-production name="PropertyDefinitionList" collapsed="">
    <emu-nt><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="671a051b"><emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If PropName of <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt> is <emu-const>empty</emu-const>, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Return a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing PropName of <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="PropertyDefinitionList" collapsed="">
    <emu-nt><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3152d601"><emu-nt><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>list</var> be PropertyNameList of <emu-nt><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a></emu-nt>.</li><li>If PropName of <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt> is <emu-const>empty</emu-const>, return <var>list</var>.</li><li>Append PropName of <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt> to the end of <var>list</var>.</li><li>Return <var>list</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.6.8" -->
      <emu-clause id="sec-object-initializer-runtime-semantics-evaluation">
        <h1><span class="secnum">12.2.6.7</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-object-initializer-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="ObjectLiteral" collapsed="">
    <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ObjectLiteral">
    <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1bef8ed3"><emu-t>{</emu-t><emu-nt><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="8703527f"><emu-t>{</emu-t><emu-nt><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a></emu-nt><emu-t>,</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>obj</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>).</li><li>Let <var>status</var> be the result of performing PropertyDefinitionEvaluation of <emu-nt><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a></emu-nt> with arguments <var>obj</var> and <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return <var>obj</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LiteralPropertyName" collapsed="">
    <emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ebb31e2"><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LiteralPropertyName" collapsed="">
    <emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5c74e54d"><emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a String value whose code units are the SV of the <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LiteralPropertyName" collapsed="">
    <emu-nt><a href="#prod-LiteralPropertyName">LiteralPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a548b407"><emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>nbr</var> be the result of forming the value of the <emu-nt><a href="#prod-NumericLiteral">NumericLiteral</a></emu-nt>.</li><li>Return ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>nbr</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ComputedPropertyName" collapsed="">
    <emu-nt><a href="#prod-ComputedPropertyName">ComputedPropertyName</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2ed5550b"><emu-t>[</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propName</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Return ? <emu-xref aoid="ToPropertyKey"><a href="#sec-topropertykey">ToPropertyKey</a></emu-xref>(<var>propName</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.6.9" -->
      <emu-clause id="sec-object-initializer-runtime-semantics-propertydefinitionevaluation">
        <h1><span class="secnum">12.2.6.8</span>Runtime Semantics: PropertyDefinitionEvaluation<span class="utils"><span class="anchor"><a href="#sec-object-initializer-runtime-semantics-propertydefinitionevaluation">#</a></span></span></h1>
        <p>With parameters <var>object</var> and <var>enumerable</var>.</p>
        <emu-see-also-para op="PropertyDefinitionEvaluation"></emu-see-also-para>
        <emu-grammar><emu-production name="PropertyDefinitionList" collapsed="">
    <emu-nt><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3152d601"><emu-nt><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>status</var> be the result of performing PropertyDefinitionEvaluation of <emu-nt><a href="#prod-PropertyDefinitionList">PropertyDefinitionList</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return the result of performing PropertyDefinitionEvaluation of <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt> with arguments <var>object</var> and <var>enumerable</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="PropertyDefinition" collapsed="">
    <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2361f19d"><emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>propName</var> be StringValue of <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt>.</li><li>Let <var>exprValue</var> be the result of evaluating <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt>.</li><li>Let <var>propValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprValue</var>).</li><li>Assert: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid="CreateDataPropertyOrThrow"><a href="#sec-createdatapropertyorthrow">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propName</var>, <var>propValue</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="PropertyDefinition" collapsed="">
    <emu-nt><a href="#prod-PropertyDefinition">PropertyDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f2d90b76"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>Let <var>exprValueRef</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>propValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprValueRef</var>).</li><li>If <emu-xref aoid="IsAnonymousFunctionDefinition"><a href="#sec-isanonymousfunctiondefinition">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>propValue</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>propValue</var>, <var>propKey</var>).</li></ol></li><li>Assert: <var>enumerable</var> is <emu-val>true</emu-val>.</li><li>Return <emu-xref aoid="CreateDataPropertyOrThrow"><a href="#sec-createdatapropertyorthrow">CreateDataPropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>propValue</var>).
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>An alternative semantics for this production is given in  <emu-xref href="#sec-__proto__-property-names-in-object-initializers"><a href="#sec-__proto__-property-names-in-object-initializers">B.3.1</a></emu-xref>.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.2.7" -->
    <emu-clause id="sec-function-defining-expressions">
      <h1><span class="secnum">12.2.7</span>Function Defining Expressions<span class="utils"><span class="anchor"><a href="#sec-function-defining-expressions">#</a></span></span></h1>
      <p>See  <emu-xref href="#sec-function-definitions"><a href="#sec-function-definitions">14.1</a></emu-xref> for  <emu-grammar><emu-production name="PrimaryExpression" collapsed="" class=" inline">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="242eeccd"><emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>.</p>
      <p>See  <emu-xref href="#sec-generator-function-definitions"><a href="#sec-generator-function-definitions">14.4</a></emu-xref> for  <emu-grammar><emu-production name="PrimaryExpression" collapsed="" class=" inline">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="abb7f7f4"><emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>.</p>
      <p>See  <emu-xref href="#sec-class-definitions"><a href="#sec-class-definitions">14.5</a></emu-xref> for  <emu-grammar><emu-production name="PrimaryExpression" collapsed="" class=" inline">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d8ce6db1"><emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>.</p>
    </emu-clause>

    <!-- es6num="12.2.8" -->
    <emu-clause id="sec-primary-expression-regular-expression-literals">
      <h1><span class="secnum">12.2.8</span>Regular Expression Literals<span class="utils"><span class="anchor"><a href="#sec-primary-expression-regular-expression-literals">#</a></span></span></h1>
      <h2>Syntax</h2>
      <p>See  <emu-xref href="#sec-literals-regular-expression-literals"><a href="#sec-literals-regular-expression-literals">11.8.5</a></emu-xref>.</p>

      <!-- es6num="12.2.8.1" -->
      <emu-clause id="sec-primary-expression-regular-expression-literals-static-semantics-early-errors">
        <h1><span class="secnum">12.2.8.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-primary-expression-regular-expression-literals-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="PrimaryExpression" collapsed="">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="31b672e8"><emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if BodyText of <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt> cannot be recognized using the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> <emu-nt><a href="#prod-Pattern">Pattern</a></emu-nt> of the ECMAScript RegExp grammar specified in  <emu-xref href="#sec-patterns"><a href="#sec-patterns">21.2.1</a></emu-xref>.
          
          </li>
          <li>
            It is a Syntax Error if FlagText of <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt> contains any code points other than <code>"g"</code>, <code>"i"</code>, <code>"m"</code>, <code>"u"</code>, or <code>"y"</code>, or if it contains the same code point more than once.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="12.2.8.2" -->
      <emu-clause id="sec-regular-expression-literals-runtime-semantics-evaluation">
        <h1><span class="secnum">12.2.8.2</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-regular-expression-literals-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="PrimaryExpression" collapsed="">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="31b672e8"><emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>pattern</var> be the String value consisting of the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of each code point of BodyText of <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt>.</li><li>Let <var>flags</var> be the String value consisting of the <emu-xref aoid="UTF16Encoding"><a href="#sec-utf16encoding">UTF16Encoding</a></emu-xref> of each code point of FlagText of <emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt>.</li><li>Return <emu-xref aoid="RegExpCreate"><a href="#sec-regexpcreate">RegExpCreate</a></emu-xref>(<var>pattern</var>, <var>flags</var>).
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.2.9" -->
    <emu-clause id="sec-template-literals">
      <h1><span class="secnum">12.2.9</span>Template Literals<span class="utils"><span class="anchor"><a href="#sec-template-literals">#</a></span></span></h1>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="TemplateLiteral" params="Yield" id="prod-TemplateLiteral">
    <emu-nt params="Yield"><a href="#prod-TemplateLiteral">TemplateLiteral</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7bf3ad2b"><emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt></emu-rhs>
    <emu-rhs a="c7882410"><emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-TemplateSpans">TemplateSpans</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="TemplateSpans" params="Yield" id="prod-TemplateSpans">
    <emu-nt params="Yield"><a href="#prod-TemplateSpans">TemplateSpans</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="57fe6188"><emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt></emu-rhs>
    <emu-rhs a="2a7f8392"><emu-nt params="?Yield"><a href="#prod-TemplateMiddleList">TemplateMiddleList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="TemplateMiddleList" params="Yield" id="prod-TemplateMiddleList">
    <emu-nt params="Yield"><a href="#prod-TemplateMiddleList">TemplateMiddleList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fbfceaa6"><emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="360595ec"><emu-nt params="?Yield"><a href="#prod-TemplateMiddleList">TemplateMiddleList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

      <!-- es6num="12.2.9.1" -->
      <emu-clause id="sec-static-semantics-templatestrings">
        <h1><span class="secnum">12.2.9.1</span>Static Semantics: TemplateStrings<span class="utils"><span class="anchor"><a href="#sec-static-semantics-templatestrings">#</a></span></span></h1>
        <p>With parameter <var>raw</var>.</p>
        <emu-grammar><emu-production name="TemplateLiteral" collapsed="">
    <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7bf3ad2b"><emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>string</var> be the TV of <emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>string</var> be the TRV of <emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing the single element, <var>string</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateLiteral" collapsed="">
    <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="be95cc40"><emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>head</var> be the TV of <emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>head</var> be the TRV of <emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt>.</li></ol></li><li>Let <var>tail</var> be TemplateStrings of <emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt> with argument <var>raw</var>.</li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing <var>head</var> followed by the elements, in order, of <var>tail</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateSpans" collapsed="">
    <emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="57fe6188"><emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>tail</var> be the TV of <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>tail</var> be the TRV of <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing the single element, <var>tail</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateSpans" collapsed="">
    <emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b0b4f425"><emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>middle</var> be TemplateStrings of <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt> with argument <var>raw</var>.</li><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>tail</var> be the TV of <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>tail</var> be the TRV of <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing the elements, in order, of <var>middle</var> followed by <var>tail</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateMiddleList" collapsed="">
    <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="dc7ec961"><emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>string</var> be the TV of <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>string</var> be the TRV of <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing the single element, <var>string</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateMiddleList" collapsed="">
    <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="47acf041"><emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>front</var> be TemplateStrings of <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt> with argument <var>raw</var>.</li><li>If <var>raw</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>last</var> be the TV of <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>last</var> be the TRV of <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt>.</li></ol></li><li>Append <var>last</var> as the last element of the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> <var>front</var>.</li><li>Return <var>front</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.9.2" -->
      <emu-clause id="sec-template-literals-runtime-semantics-argumentlistevaluation">
        <h1><span class="secnum">12.2.9.2</span>Runtime Semantics: ArgumentListEvaluation<span class="utils"><span class="anchor"><a href="#sec-template-literals-runtime-semantics-argumentlistevaluation">#</a></span></span></h1>
        <emu-see-also-para op="ArgumentListEvaluation"></emu-see-also-para>
        <emu-grammar><emu-production name="TemplateLiteral" collapsed="">
    <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7bf3ad2b"><emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid="GetTemplateObject"><a href="#sec-gettemplateobject">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing the one element which is <var>siteObj</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateLiteral" collapsed="">
    <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="be95cc40"><emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>templateLiteral</var> be this <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt>.</li><li>Let <var>siteObj</var> be <emu-xref aoid="GetTemplateObject"><a href="#sec-gettemplateobject">GetTemplateObject</a></emu-xref>(<var>templateLiteral</var>).</li><li>Let <var>firstSubRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>firstSub</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>firstSubRef</var>).</li><li>Let <var>restSub</var> be SubstitutionEvaluation of <emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>restSub</var>).</li><li>Assert: <var>restSub</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> whose first element is <var>siteObj</var>, whose second elements is <var>firstSub</var>, and whose subsequent elements are the elements of <var>restSub</var>, in order. <var>restSub</var> may contain no elements.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.9.3" -->
      <emu-clause id="sec-gettemplateobject" aoid="GetTemplateObject">
        <h1><span class="secnum">12.2.9.3</span>Runtime Semantics: GetTemplateObject ( <var>templateLiteral</var> )<span class="utils"><span class="anchor"><a href="#sec-gettemplateobject">#</a></span></span></h1>
        <p>The abstract operation GetTemplateObject is called with a grammar production, <var>templateLiteral</var>, as an argument. It performs the following steps:</p>
        <emu-alg><ol><li>Let <var>rawStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>true</emu-val>.</li><li>Let <var>realm</var> be <emu-xref href="#current-realm"><a href="#current-realm">the current Realm Record</a></emu-xref>.</li><li>Let <var>templateRegistry</var> be <var>realm</var>.[[TemplateMap]].</li><li>For each element <var>e</var> of <var>templateRegistry</var>, do<ol><li>If <var>e</var>.[[Strings]] and <var>rawStrings</var> contain the same values in the same order, then<ol><li>Return <var>e</var>.[[Array]].</li></ol></li></ol></li><li>Let <var>cookedStrings</var> be TemplateStrings of <var>templateLiteral</var> with argument <emu-val>false</emu-val>.</li><li>Let <var>count</var> be the number of elements in the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> <var>cookedStrings</var>.</li><li>Let <var>template</var> be <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>rawObj</var> be <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(<var>count</var>).</li><li>Let <var>index</var> be 0.</li><li>Repeat while <var>index</var> &lt; <var>count</var><ol><li>Let <var>prop</var> be ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>index</var>).</li><li>Let <var>cookedValue</var> be the String value <var>cookedStrings</var>[<var>index</var>].</li><li>Call <var>template</var>.[[DefineOwnProperty]](<var>prop</var>, PropertyDescriptor{[[Value]]: <var>cookedValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Let <var>rawValue</var> be the String value <var>rawStrings</var>[<var>index</var>].</li><li>Call <var>rawObj</var>.[[DefineOwnProperty]](<var>prop</var>, PropertyDescriptor{[[Value]]: <var>rawValue</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>true</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Let <var>index</var> be <var>index</var>+1.</li></ol></li><li>Perform <emu-xref aoid="SetIntegrityLevel"><a href="#sec-setintegritylevel">SetIntegrityLevel</a></emu-xref>(<var>rawObj</var>, <code>"frozen"</code>).</li><li>Call <var>template</var>.[[DefineOwnProperty]](<code>"raw"</code>, PropertyDescriptor{[[Value]]: <var>rawObj</var>, [[Writable]]: <emu-val>false</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Perform <emu-xref aoid="SetIntegrityLevel"><a href="#sec-setintegritylevel">SetIntegrityLevel</a></emu-xref>(<var>template</var>, <code>"frozen"</code>).</li><li>Append the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref>{[[Strings]]: <var>rawStrings</var>, [[Array]]: <var>template</var>} to <var>templateRegistry</var>.</li><li>Return <var>template</var>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note 1</span>
          <p>The creation of a template object cannot result in an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>.</p>
        </emu-note>
        <emu-note><span class="note">Note 2</span>
          <p>Each <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt> in the program code of a <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> is associated with a unique template object that is used in the evaluation of tagged Templates (<emu-xref href="#sec-template-literals-runtime-semantics-evaluation"><a href="#sec-template-literals-runtime-semantics-evaluation">12.2.9.5</a></emu-xref>).
 The template objects are frozen and the same template object is used 
each time a specific tagged Template is evaluated. Whether template 
objects are created lazily upon first evaluation of the <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt> or eagerly prior to first evaluation is an implementation choice that is not observable to ECMAScript code.</p>
        </emu-note>
        <emu-note><span class="note">Note 3</span>
          <p>Future editions of this specification may define additional non-enumerable properties of template objects.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="12.2.9.4" -->
      <emu-clause id="sec-runtime-semantics-substitutionevaluation">
        <h1><span class="secnum">12.2.9.4</span>Runtime Semantics: SubstitutionEvaluation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-substitutionevaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="TemplateSpans" collapsed="">
    <emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="57fe6188"><emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateSpans" collapsed="">
    <emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b0b4f425"><emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of SubstitutionEvaluation of <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateMiddleList" collapsed="">
    <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="dc7ec961"><emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>subRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>sub</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>subRef</var>).</li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing only <var>sub</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateMiddleList" collapsed="">
    <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="47acf041"><emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>preceding</var> be the result of SubstitutionEvaluation of <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>preceding</var>).</li><li>Let <var>nextRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>next</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>nextRef</var>).</li><li>Append <var>next</var> as the last element of the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> <var>preceding</var>.</li><li>Return <var>preceding</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.9.5" -->
      <emu-clause id="sec-template-literals-runtime-semantics-evaluation">
        <h1><span class="secnum">12.2.9.5</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-template-literals-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="TemplateLiteral" collapsed="">
    <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7bf3ad2b"><emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the String value whose code units are the elements of the TV of <emu-nt><a href="#prod-NoSubstitutionTemplate">NoSubstitutionTemplate</a></emu-nt> as defined in <emu-xref href="#sec-template-literal-lexical-components"><a href="#sec-template-literal-lexical-components">11.8.6</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateLiteral" collapsed="">
    <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="be95cc40"><emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>head</var> be the TV of <emu-nt><a href="#prod-TemplateHead">TemplateHead</a></emu-nt> as defined in <emu-xref href="#sec-template-literal-lexical-components"><a href="#sec-template-literal-lexical-components">11.8.6</a></emu-xref>.</li><li>Let <var>sub</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>sub</var>).</li><li>Let <var>middle</var> be ? <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>sub</var>).</li><li>Let <var>tail</var> be the result of evaluating <emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>tail</var>).</li><li>Return the String value whose code units are the elements of <var>head</var> followed by the elements of <var>middle</var> followed by the elements of <var>tail</var>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note 1</span>
          <p>The string conversion semantics applied to the <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> value are like <code>String.prototype.concat</code> rather than the <code>+</code> operator.</p>
        </emu-note>
        <emu-grammar><emu-production name="TemplateSpans" collapsed="">
    <emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="57fe6188"><emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>tail</var> be the TV of <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt> as defined in <emu-xref href="#sec-template-literal-lexical-components"><a href="#sec-template-literal-lexical-components">11.8.6</a></emu-xref>.</li><li>Return the string consisting of the code units of <var>tail</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateSpans" collapsed="">
    <emu-nt><a href="#prod-TemplateSpans">TemplateSpans</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b0b4f425"><emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>head</var> be the result of evaluating <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>head</var>).</li><li>Let <var>tail</var> be the TV of <emu-nt><a href="#prod-TemplateTail">TemplateTail</a></emu-nt> as defined in <emu-xref href="#sec-template-literal-lexical-components"><a href="#sec-template-literal-lexical-components">11.8.6</a></emu-xref>.</li><li>Return the string whose code units are the elements of <var>head</var> followed by the elements of <var>tail</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TemplateMiddleList" collapsed="">
    <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="dc7ec961"><emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>head</var> be the TV of <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt> as defined in <emu-xref href="#sec-template-literal-lexical-components"><a href="#sec-template-literal-lexical-components">11.8.6</a></emu-xref>.</li><li>Let <var>sub</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>sub</var>).</li><li>Let <var>middle</var> be ? <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>sub</var>).</li><li>Return the sequence of code units consisting of the code units of <var>head</var> followed by the elements of <var>middle</var>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note 2</span>
          <p>The string conversion semantics applied to the <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> value are like <code>String.prototype.concat</code> rather than the <code>+</code> operator.</p>
        </emu-note>
        <emu-grammar><emu-production name="TemplateMiddleList" collapsed="">
    <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="47acf041"><emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt><emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt><emu-nt><a href="#prod-Expression">Expression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>rest</var> be the result of evaluating <emu-nt><a href="#prod-TemplateMiddleList">TemplateMiddleList</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>rest</var>).</li><li>Let <var>middle</var> be the TV of <emu-nt><a href="#prod-TemplateMiddle">TemplateMiddle</a></emu-nt> as defined in <emu-xref href="#sec-template-literal-lexical-components"><a href="#sec-template-literal-lexical-components">11.8.6</a></emu-xref>.</li><li>Let <var>sub</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>sub</var>).</li><li>Let <var>last</var> be ? <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>sub</var>).</li><li>Return the sequence of code units consisting of the elements of <var>rest</var> followed by the code units of <var>middle</var> followed by the elements of <var>last</var>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note 3</span>
          <p>The string conversion semantics applied to the <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> value are like <code>String.prototype.concat</code> rather than the <code>+</code> operator.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.2.10" -->
    <emu-clause id="sec-grouping-operator">
      <h1><span class="secnum">12.2.10</span>The Grouping Operator<span class="utils"><span class="anchor"><a href="#sec-grouping-operator">#</a></span></span></h1>

      <!-- es6num="12.2.10.1" -->
      <emu-clause id="sec-grouping-operator-static-semantics-early-errors">
        <h1><span class="secnum">12.2.10.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-grouping-operator-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="PrimaryExpression" collapsed="">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if the lexical token sequence matched by <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> cannot be parsed with no tokens left over using <emu-nt><a href="#prod-ParenthesizedExpression">ParenthesizedExpression</a></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.
          
          </li>
          <li>
            All Early Errors rules for <emu-nt><a href="#prod-ParenthesizedExpression">ParenthesizedExpression</a></emu-nt> and its derived productions also apply to CoveredParenthesizedExpression of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="12.2.10.2" -->
      <emu-clause id="sec-grouping-operator-static-semantics-isfunctiondefinition">
        <h1><span class="secnum">12.2.10.2</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-grouping-operator-static-semantics-isfunctiondefinition">#</a></span></span></h1>
        <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
        <emu-grammar><emu-production name="ParenthesizedExpression" collapsed="">
    <emu-nt><a href="#prod-ParenthesizedExpression">ParenthesizedExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ba6ef9d"><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return IsFunctionDefinition of <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.10.3" -->
      <emu-clause id="sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget">
        <h1><span class="secnum">12.2.10.3</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
        <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="ParenthesizedExpression" collapsed="">
    <emu-nt><a href="#prod-ParenthesizedExpression">ParenthesizedExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ba6ef9d"><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return IsValidSimpleAssignmentTarget of <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.2.10.4" -->
      <emu-clause id="sec-grouping-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.2.10.4</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-grouping-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="PrimaryExpression" collapsed="">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be CoveredParenthesizedExpression of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return the result of evaluating <var>expr</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ParenthesizedExpression" collapsed="">
    <emu-nt><a href="#prod-ParenthesizedExpression">ParenthesizedExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ba6ef9d"><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>. This may be of type <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>This algorithm does not apply <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref> to the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>. The principal motivation for this is so that operators such as <code>delete</code> and <code>typeof</code> may be applied to parenthesized expressions.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.3" -->
  <emu-clause id="sec-left-hand-side-expressions">
    <h1><span class="secnum">12.3</span>Left-Hand-Side Expressions<span class="utils"><span class="anchor"><a href="#sec-left-hand-side-expressions">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="MemberExpression" params="Yield" id="prod-MemberExpression">
    <emu-nt params="Yield"><a href="#prod-MemberExpression">MemberExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0952d8cb"><emu-nt params="?Yield"><a href="#prod-PrimaryExpression">PrimaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="38f4e0ca"><emu-nt params="?Yield"><a href="#prod-MemberExpression">MemberExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>[</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="629e16ee"><emu-nt params="?Yield"><a href="#prod-MemberExpression">MemberExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="12893548"><emu-nt params="?Yield"><a href="#prod-MemberExpression">MemberExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-TemplateLiteral">TemplateLiteral</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="fcc05c23"><emu-nt params="?Yield"><a href="#prod-SuperProperty">SuperProperty</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="c81ee20f"><emu-nt><a href="#prod-MetaProperty">MetaProperty</a></emu-nt></emu-rhs>
    <emu-rhs a="d5e683a8"><emu-t>new</emu-t><emu-nt params="?Yield"><a href="#prod-MemberExpression">MemberExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-Arguments">Arguments</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="SuperProperty" params="Yield" id="prod-SuperProperty">
    <emu-nt params="Yield"><a href="#prod-SuperProperty">SuperProperty</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6961c204"><emu-t>super</emu-t><emu-t>[</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="f690ec4a"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="MetaProperty" id="prod-MetaProperty">
    <emu-nt><a href="#prod-MetaProperty">MetaProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="733bdb20"><emu-nt><a href="#prod-NewTarget">NewTarget</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="NewTarget" id="prod-NewTarget">
    <emu-nt><a href="#prod-NewTarget">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d2de213d"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>
</emu-production>
<emu-production name="NewExpression" params="Yield" id="prod-NewExpression">
    <emu-nt params="Yield"><a href="#prod-NewExpression">NewExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="26b6da76"><emu-nt params="?Yield"><a href="#prod-MemberExpression">MemberExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="e2186e0c"><emu-t>new</emu-t><emu-nt params="?Yield"><a href="#prod-NewExpression">NewExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="CallExpression" params="Yield" id="prod-CallExpression">
    <emu-nt params="Yield"><a href="#prod-CallExpression">CallExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="eed49138"><emu-nt params="?Yield"><a href="#prod-MemberExpression">MemberExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-Arguments">Arguments</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="91ffa870"><emu-nt params="?Yield"><a href="#prod-SuperCall">SuperCall</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="13f81c0e"><emu-nt params="?Yield"><a href="#prod-CallExpression">CallExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-Arguments">Arguments</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="adc1e181"><emu-nt params="?Yield"><a href="#prod-CallExpression">CallExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>[</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="710733f7"><emu-nt params="?Yield"><a href="#prod-CallExpression">CallExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="e3527637"><emu-nt params="?Yield"><a href="#prod-CallExpression">CallExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-TemplateLiteral">TemplateLiteral</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="SuperCall" params="Yield" id="prod-SuperCall">
    <emu-nt params="Yield"><a href="#prod-SuperCall">SuperCall</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="efa163a3"><emu-t>super</emu-t><emu-nt params="?Yield"><a href="#prod-Arguments">Arguments</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="Arguments" params="Yield" id="prod-Arguments">
    <emu-nt params="Yield"><a href="#prod-Arguments">Arguments</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="78e44c33"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="9c2026a8"><emu-t>(</emu-t><emu-nt params="?Yield"><a href="#prod-ArgumentList">ArgumentList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production>
<emu-production name="ArgumentList" params="Yield" id="prod-ArgumentList">
    <emu-nt params="Yield"><a href="#prod-ArgumentList">ArgumentList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1f8fb91f"><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="bce6d30c"><emu-t>...</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="2f232585"><emu-nt params="?Yield"><a href="#prod-ArgumentList">ArgumentList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="92664ec5"><emu-nt params="?Yield"><a href="#prod-ArgumentList">ArgumentList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="LeftHandSideExpression" params="Yield" id="prod-LeftHandSideExpression">
    <emu-nt params="Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d2389ef6"><emu-nt params="?Yield"><a href="#prod-NewExpression">NewExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="f68183d8"><emu-nt params="?Yield"><a href="#prod-CallExpression">CallExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.3.1" -->
    <emu-clause id="sec-static-semantics">
      <h1><span class="secnum">12.3.1</span>Static Semantics<span class="utils"><span class="anchor"><a href="#sec-static-semantics">#</a></span></span></h1>

      <!-- es6num="12.3.1.1" -->
      <emu-clause id="sec-static-semantics-static-semantics-contains">
        <h1><span class="secnum">12.3.1.1</span>Static Semantics: Contains<span class="utils"><span class="anchor"><a href="#sec-static-semantics-static-semantics-contains">#</a></span></span></h1>
        <p>With parameter <var>symbol</var>.</p>
        <emu-see-also-para op="Contains"></emu-see-also-para>
        <emu-grammar><emu-production name="MemberExpression" collapsed="">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7eb6e3f7"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt> Contains <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>symbol</var> is a <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>symbol</var> is an <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt> and StringValue of <var>symbol</var> is the same value as the StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SuperProperty" collapsed="">
    <emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f690ec4a"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <var>symbol</var> is the <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt> <code>super</code>, return <emu-val>true</emu-val>.</li><li>If <var>symbol</var> is a <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>symbol</var> is an <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt> and StringValue of <var>symbol</var> is the same value as the StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="CallExpression" collapsed="">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bba9526d"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt> Contains <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If <var>symbol</var> is a <emu-nt><a href="#prod-ReservedWord">ReservedWord</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>If <var>symbol</var> is an <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt> and StringValue of <var>symbol</var> is the same value as the StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.3.1.2" -->
      <emu-clause id="sec-static-semantics-static-semantics-isfunctiondefinition">
        <h1><span class="secnum">12.3.1.2</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-static-semantics-static-semantics-isfunctiondefinition">#</a></span></span></h1>
        <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
        <emu-grammar><emu-production name="MemberExpression">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6bbe1777"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="7eb6e3f7"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="149e7618"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="5f8b7394"><emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt></emu-rhs>
    <emu-rhs a="c81ee20f"><emu-nt><a href="#prod-MetaProperty">MetaProperty</a></emu-nt></emu-rhs>
    <emu-rhs a="705abe84"><emu-t>new</emu-t><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="NewExpression">
    <emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e753fad7"><emu-t>new</emu-t><emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="CallExpression">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="be44becf"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
    <emu-rhs a="949290c3"><emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt></emu-rhs>
    <emu-rhs a="42e81a1c"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
    <emu-rhs a="d94d9445"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="bba9526d"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="adcef8e1"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.3.1.3" -->
      <emu-clause id="sec-static-semantics-static-semantics-isdestructuring">
        <h1><span class="secnum">12.3.1.3</span>Static Semantics: IsDestructuring<span class="utils"><span class="anchor"><a href="#sec-static-semantics-static-semantics-isdestructuring">#</a></span></span></h1>
        <emu-see-also-para op="IsDestructuring"></emu-see-also-para>
        <emu-grammar><emu-production name="MemberExpression" collapsed="">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8ef72f7a"><emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt> is either an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> or an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="MemberExpression">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6bbe1777"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="7eb6e3f7"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="149e7618"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="5f8b7394"><emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt></emu-rhs>
    <emu-rhs a="c81ee20f"><emu-nt><a href="#prod-MetaProperty">MetaProperty</a></emu-nt></emu-rhs>
    <emu-rhs a="705abe84"><emu-t>new</emu-t><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="NewExpression">
    <emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e753fad7"><emu-t>new</emu-t><emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="CallExpression">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="be44becf"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
    <emu-rhs a="949290c3"><emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt></emu-rhs>
    <emu-rhs a="42e81a1c"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
    <emu-rhs a="d94d9445"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="bba9526d"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="adcef8e1"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.3.1.4" -->
      <emu-clause id="sec-static-semantics-static-semantics-isidentifierref">
        <h1><span class="secnum">12.3.1.4</span>Static Semantics: IsIdentifierRef<span class="utils"><span class="anchor"><a href="#sec-static-semantics-static-semantics-isidentifierref">#</a></span></span></h1>
        <emu-see-also-para op="IsIdentifierRef"></emu-see-also-para>
        <emu-grammar><emu-production name="LeftHandSideExpression">
    <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8bc7444f"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="MemberExpression">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6bbe1777"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="7eb6e3f7"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="149e7618"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="5f8b7394"><emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt></emu-rhs>
    <emu-rhs a="c81ee20f"><emu-nt><a href="#prod-MetaProperty">MetaProperty</a></emu-nt></emu-rhs>
    <emu-rhs a="705abe84"><emu-t>new</emu-t><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="NewExpression">
    <emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e753fad7"><emu-t>new</emu-t><emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.3.1.5" -->
      <emu-clause id="sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget">
        <h1><span class="secnum">12.3.1.5</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
        <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="CallExpression">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d94d9445"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="bba9526d"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="MemberExpression">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6bbe1777"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="7eb6e3f7"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="5f8b7394"><emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="CallExpression">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="be44becf"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
    <emu-rhs a="949290c3"><emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt></emu-rhs>
    <emu-rhs a="42e81a1c"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
    <emu-rhs a="adcef8e1"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="NewExpression">
    <emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e753fad7"><emu-t>new</emu-t><emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="MemberExpression">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="149e7618"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="705abe84"><emu-t>new</emu-t><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="NewTarget">
    <emu-nt><a href="#prod-NewTarget">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d2de213d"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.3.2" -->
    <emu-clause id="sec-property-accessors">
      <h1><span class="secnum">12.3.2</span>Property Accessors<span class="utils"><span class="anchor"><a href="#sec-property-accessors">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>Properties are accessed by name, using either the dot notation:</p>
        <div class="rhs">
          <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt> <code>.</code> <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>
          
          <br>
          <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt> <code>.</code> <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>
        
        </div>
        <p>or the bracket notation:</p>
        <div class="rhs">
          <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt> <code>[</code> <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> <code>]</code>
          
          <br>
          <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt> <code>[</code> <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> <code>]</code>
        
        </div>
        <p>The dot notation is explained by the following syntactic conversion:</p>
        <div class="rhs">
          <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt> <code>.</code> <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>
        
        </div>
        <p>is identical in its behaviour to</p>
        <div class="rhs">
          <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt> <code>[</code> &lt;<i>identifier-name-string</i>&gt; <code>]</code>
        
        </div>
        <p>and similarly</p>
        <div class="rhs">
          <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt> <code>.</code> <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>
        
        </div>
        <p>is identical in its behaviour to</p>
        <div class="rhs">
          <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt> <code>[</code> &lt;<i>identifier-name-string</i>&gt; <code>]</code>
        
        </div>
        <p>where &lt;<i>identifier-name-string</i>&gt; is the result of evaluating StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>.</p>
      </emu-note>

      <!-- es6num="12.3.2.1" -->
      <emu-clause id="sec-property-accessors-runtime-semantics-evaluation">
        <h1><span class="secnum">12.3.2.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-property-accessors-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="MemberExpression" collapsed="">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6bbe1777"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>bv</var> be ? <emu-xref aoid="RequireObjectCoercible"><a href="#sec-requireobjectcoercible">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyKey</var> be ? <emu-xref aoid="ToPropertyKey"><a href="#sec-topropertykey">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by the syntactic production that is being evaluated is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>, else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return a value of type <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyKey</var>, and whose strict reference flag is <var>strict</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="MemberExpression" collapsed="">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7eb6e3f7"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>baseReference</var> be the result of evaluating <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt>.</li><li>Let <var>baseValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>baseReference</var>).</li><li>Let <var>bv</var> be ? <emu-xref aoid="RequireObjectCoercible"><a href="#sec-requireobjectcoercible">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Let <var>propertyNameString</var> be StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>.</li><li>If the code matched by the syntactic production that is being evaluated is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>, else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return a value of type <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyNameString</var>, and whose strict reference flag is <var>strict</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="CallExpression" collapsed="">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d94d9445"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <p>Is evaluated in exactly the same manner as  <emu-grammar><emu-production name="MemberExpression" collapsed="" class=" inline">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6bbe1777"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar> except that the contained <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt> is evaluated in step 1.</p>
        <emu-grammar><emu-production name="CallExpression" collapsed="">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bba9526d"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <p>Is evaluated in exactly the same manner as  <emu-grammar><emu-production name="MemberExpression" collapsed="" class=" inline">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7eb6e3f7"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> except that the contained <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt> is evaluated in step 1.</p>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.3.3" -->
    <emu-clause id="sec-new-operator">
      <h1><span class="secnum">12.3.3</span>The <code>new</code> Operator<span class="utils"><span class="anchor"><a href="#sec-new-operator">#</a></span></span></h1>

      <!-- es6num="12.3.3.1" -->
      <emu-clause id="sec-new-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.3.3.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-new-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="NewExpression" collapsed="">
    <emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e753fad7"><emu-t>new</emu-t><emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ? <emu-xref aoid="EvaluateNew"><a href="#sec-evaluatenew">EvaluateNew</a></emu-xref>(<emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt>, <emu-const>empty</emu-const>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="MemberExpression" collapsed="">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="705abe84"><emu-t>new</emu-t><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ? <emu-xref aoid="EvaluateNew"><a href="#sec-evaluatenew">EvaluateNew</a></emu-xref>(<emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt>, <emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt>).
        </li></ol></emu-alg>

        <!-- es6num="12.3.3.1.1" -->
        <emu-clause id="sec-evaluatenew" aoid="EvaluateNew">
          <h1><span class="secnum">12.3.3.1.1</span>Runtime Semantics: EvaluateNew(<var>constructProduction</var>, <var>arguments</var>)<span class="utils"><span class="anchor"><a href="#sec-evaluatenew">#</a></span></span></h1>
          <p>The abstract operation EvaluateNew with arguments <var>constructProduction</var>, and <var>arguments</var> performs the following steps:</p>
          <emu-alg><ol><li>Assert: <var>constructProduction</var> is either a <emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt> or a <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt>.</li><li>Assert: <var>arguments</var> is either <emu-const>empty</emu-const> or an <emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt> production.</li><li>Let <var>ref</var> be the result of evaluating <var>constructProduction</var>.</li><li>Let <var>constructor</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <var>arguments</var> is <emu-const>empty</emu-const>, let <var>argList</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Else,<ol><li>Let <var>argList</var> be ArgumentListEvaluation of <var>arguments</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>argList</var>).</li></ol></li><li>If <emu-xref aoid="IsConstructor"><a href="#sec-isconstructor">IsConstructor</a></emu-xref>(<var>constructor</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ? <emu-xref aoid="Construct"><a href="#sec-construct">Construct</a></emu-xref>(<var>constructor</var>, <var>argList</var>).
          </li></ol></emu-alg>
        </emu-clause>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.3.4" -->
    <emu-clause id="sec-function-calls">
      <h1><span class="secnum">12.3.4</span>Function Calls<span class="utils"><span class="anchor"><a href="#sec-function-calls">#</a></span></span></h1>

      <!-- es6num="12.3.4.1" -->
      <emu-clause id="sec-function-calls-runtime-semantics-evaluation">
        <h1><span class="secnum">12.3.4.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-function-calls-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="CallExpression" collapsed="">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="be44becf"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt>.</li><li>Let <var>func</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>ref</var>) is <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> and <emu-xref href="#ao-ispropertyreference"><a href="#ao-ispropertyreference">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val> and <emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>ref</var>) is <code>"eval"</code>, then<ol><li>If <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>func</var>, <emu-xref href="#sec-eval-x"><a href="#sec-eval-x">%eval%</a></emu-xref>) is <emu-val>true</emu-val>, then<ol><li>Let <var>argList</var> be ? ArgumentListEvaluation(<emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt>).</li><li>If <var>argList</var> has no elements, return <emu-val>undefined</emu-val>.</li><li>Let <var>evalText</var> be the first element of <var>argList</var>.</li><li>If the source code matching this <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strictCaller</var> be <emu-val>true</emu-val>. Otherwise let <var>strictCaller</var> be <emu-val>false</emu-val>.</li><li>Let <var>evalRealm</var> be <emu-xref href="#current-realm"><a href="#current-realm">the current Realm Record</a></emu-xref>.</li><li>Perform ? <emu-xref aoid="HostEnsureCanCompileStrings"><a href="#sec-hostensurecancompilestrings">HostEnsureCanCompileStrings</a></emu-xref>(<var>evalRealm</var>, <var>evalRealm</var>).</li><li>Return ? <emu-xref aoid="PerformEval"><a href="#sec-performeval">PerformEval</a></emu-xref>(<var>evalText</var>, <var>evalRealm</var>, <var>strictCaller</var>, <emu-val>true</emu-val>).</li></ol></li></ol></li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>ref</var>) is <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>, then<ol><li>If <emu-xref href="#ao-ispropertyreference"><a href="#ao-ispropertyreference">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisValue</var> be <emu-xref aoid="GetThisValue"><a href="#sec-getthisvalue">GetThisValue</a></emu-xref>(<var>ref</var>).</li></ol></li><li>Else the base of <var>ref</var> is an <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>,<ol><li>Let <var>refEnv</var> be <emu-xref href="#ao-getbase"><a href="#ao-getbase">GetBase</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisValue</var> be <var>refEnv</var>.WithBaseObject().</li></ol></li></ol></li><li>Else <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>ref</var>) is not <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>,<ol><li>Let <var>thisValue</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Let <var>thisCall</var> be this <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid="IsInTailPosition"><a href="#sec-isintailposition">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ? <emu-xref aoid="EvaluateDirectCall"><a href="#sec-evaluatedirectcall">EvaluateDirectCall</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt>, <var>tailCall</var>).
        </li></ol></emu-alg>
        <p>A <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt> evaluation that executes step 3.a.vii is a  <dfn>direct eval</dfn>.</p>
        <emu-grammar><emu-production name="CallExpression" collapsed="">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="42e81a1c"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt>.</li><li>Let <var>thisCall</var> be this <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid="IsInTailPosition"><a href="#sec-isintailposition">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ? <emu-xref aoid="EvaluateCall"><a href="#sec-evaluatecall">EvaluateCall</a></emu-xref>(<var>ref</var>, <emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt>, <var>tailCall</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.3.4.2" -->
      <emu-clause id="sec-evaluatecall" aoid="EvaluateCall">
        <h1><span class="secnum">12.3.4.2</span>Runtime Semantics: EvaluateCall( <var>ref</var>, <var>arguments</var>, <var>tailPosition</var> )<span class="utils"><span class="anchor"><a href="#sec-evaluatecall">#</a></span></span></h1>
        <p>The abstract operation EvaluateCall takes as arguments a value <var>ref</var>, a syntactic grammar production <var>arguments</var>, and a Boolean argument <var>tailPosition</var>. It performs the following steps:</p>
        <emu-alg><ol><li>Let <var>func</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>ref</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>ref</var>) is <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>, then<ol><li>If <emu-xref href="#ao-ispropertyreference"><a href="#ao-ispropertyreference">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>thisValue</var> be <emu-xref aoid="GetThisValue"><a href="#sec-getthisvalue">GetThisValue</a></emu-xref>(<var>ref</var>).</li></ol></li><li>Else the base of <var>ref</var> is an <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>,<ol><li>Let <var>refEnv</var> be <emu-xref href="#ao-getbase"><a href="#ao-getbase">GetBase</a></emu-xref>(<var>ref</var>).</li><li>Let <var>thisValue</var> be <var>refEnv</var>.WithBaseObject().</li></ol></li></ol></li><li>Else <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>ref</var>) is not <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>,<ol><li>Let <var>thisValue</var> be <emu-val>undefined</emu-val>.</li></ol></li><li>Return ? <emu-xref aoid="EvaluateDirectCall"><a href="#sec-evaluatedirectcall">EvaluateDirectCall</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <var>arguments</var>, <var>tailPosition</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.3.4.3" -->
      <emu-clause id="sec-evaluatedirectcall" aoid="EvaluateDirectCall">
        <h1><span class="secnum">12.3.4.3</span>Runtime Semantics: EvaluateDirectCall( <var>func</var>, <var>thisValue</var>, <var>arguments</var>, <var>tailPosition</var> )<span class="utils"><span class="anchor"><a href="#sec-evaluatedirectcall">#</a></span></span></h1>
        <p>The abstract operation EvaluateDirectCall takes as arguments a value <var>func</var>, a value <var>thisValue</var>, a syntactic grammar production <var>arguments</var>, and a Boolean argument <var>tailPosition</var>. It performs the following steps:</p>
        <emu-alg><ol><li>Let <var>argList</var> be ? ArgumentListEvaluation(<var>arguments</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>func</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <emu-xref aoid="IsCallable"><a href="#sec-iscallable">IsCallable</a></emu-xref>(<var>func</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>tailPosition</var> is <emu-val>true</emu-val>, perform <emu-xref aoid="PrepareForTailCall"><a href="#sec-preparefortailcall">PrepareForTailCall</a></emu-xref>().</li><li>Let <var>result</var> be <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>func</var>, <var>thisValue</var>, <var>argList</var>).</li><li>Assert: If <var>tailPosition</var> is <emu-val>true</emu-val>, the above call will not return here, but instead evaluation will continue as if the following return has already occurred.</li><li>Assert: If <var>result</var> is not an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>result</var>) is an <emu-xref href="#sec-ecmascript-language-types"><a href="#sec-ecmascript-language-types">ECMAScript language type</a></emu-xref>.</li><li>Return <var>result</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.3.5" -->
    <emu-clause id="sec-super-keyword">
      <h1><span class="secnum">12.3.5</span>The <code>super</code> Keyword<span class="utils"><span class="anchor"><a href="#sec-super-keyword">#</a></span></span></h1>

      <!-- es6num="12.3.5.1" -->
      <emu-clause id="sec-super-keyword-runtime-semantics-evaluation">
        <h1><span class="secnum">12.3.5.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-super-keyword-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="SuperProperty" collapsed="">
    <emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b698f30f"><emu-t>super</emu-t><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>propertyNameReference</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>propertyNameValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>propertyNameReference</var>).</li><li>Let <var>propertyKey</var> be ? <emu-xref aoid="ToPropertyKey"><a href="#sec-topropertykey">ToPropertyKey</a></emu-xref>(<var>propertyNameValue</var>).</li><li>If the code matched by the syntactic production that is being evaluated is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>, else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ? <emu-xref aoid="MakeSuperPropertyReference"><a href="#sec-makesuperpropertyreference">MakeSuperPropertyReference</a></emu-xref>(<var>propertyKey</var>, <var>strict</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SuperProperty" collapsed="">
    <emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f690ec4a"><emu-t>super</emu-t><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>propertyKey</var> be StringValue of <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt>.</li><li>If the code matched by the syntactic production that is being evaluated is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>, else let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Return ? <emu-xref aoid="MakeSuperPropertyReference"><a href="#sec-makesuperpropertyreference">MakeSuperPropertyReference</a></emu-xref>(<var>propertyKey</var>, <var>strict</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SuperCall" collapsed="">
    <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a833032f"><emu-t>super</emu-t><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>newTarget</var> be <emu-xref aoid="GetNewTarget"><a href="#sec-getnewtarget">GetNewTarget</a></emu-xref>().</li><li>If <var>newTarget</var> is <emu-val>undefined</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>func</var> be ? <emu-xref aoid="GetSuperConstructor"><a href="#sec-getsuperconstructor">GetSuperConstructor</a></emu-xref>().</li><li>Let <var>argList</var> be ArgumentListEvaluation of <emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>argList</var>).</li><li>Let <var>result</var> be ? <emu-xref aoid="Construct"><a href="#sec-construct">Construct</a></emu-xref>(<var>func</var>, <var>argList</var>, <var>newTarget</var>).</li><li>Let <var>thisER</var> be <emu-xref aoid="GetThisEnvironment"><a href="#sec-getthisenvironment">GetThisEnvironment</a></emu-xref>( ).</li><li>Return ? <var>thisER</var>.BindThisValue(<var>result</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.3.5.2" -->
      <emu-clause id="sec-getsuperconstructor" aoid="GetSuperConstructor">
        <h1><span class="secnum">12.3.5.2</span>Runtime Semantics: GetSuperConstructor ( )<span class="utils"><span class="anchor"><a href="#sec-getsuperconstructor">#</a></span></span></h1>
        <p>The abstract operation GetSuperConstructor performs the following steps:</p>
        <emu-alg><ol><li>Let <var>envRec</var> be <emu-xref aoid="GetThisEnvironment"><a href="#sec-getthisenvironment">GetThisEnvironment</a></emu-xref>( ).</li><li>Assert: <var>envRec</var> is a function <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</li><li>Let <var>activeFunction</var> be <var>envRec</var>.[[FunctionObject]].</li><li>Assert: <var>activeFunction</var> is an ECMAScript function object.</li><li>Let <var>superConstructor</var> be ! <var>activeFunction</var>.[[GetPrototypeOf]]().</li><li>If <emu-xref aoid="IsConstructor"><a href="#sec-isconstructor">IsConstructor</a></emu-xref>(<var>superConstructor</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>superConstructor</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.3.5.3" -->
      <emu-clause id="sec-makesuperpropertyreference" aoid="MakeSuperPropertyReference">
        <h1><span class="secnum">12.3.5.3</span>Runtime Semantics: MakeSuperPropertyReference(<var>propertyKey</var>, <var>strict</var>)<span class="utils"><span class="anchor"><a href="#sec-makesuperpropertyreference">#</a></span></span></h1>
        <p>The abstract operation MakeSuperPropertyReference with arguments <var>propertyKey</var> and <var>strict</var> performs the following steps:</p>
        <emu-alg><ol><li>Let <var>env</var> be <emu-xref aoid="GetThisEnvironment"><a href="#sec-getthisenvironment">GetThisEnvironment</a></emu-xref>( ).</li><li>If <var>env</var>.HasSuperBinding() is <emu-val>false</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>actualThis</var> be ? <var>env</var>.GetThisBinding().</li><li>Let <var>baseValue</var> be ? <var>env</var>.GetSuperBase().</li><li>Let <var>bv</var> be ? <emu-xref aoid="RequireObjectCoercible"><a href="#sec-requireobjectcoercible">RequireObjectCoercible</a></emu-xref>(<var>baseValue</var>).</li><li>Return a value of type <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> that is a <emu-xref href="#super-reference"><a href="#super-reference">Super Reference</a></emu-xref> whose base value component is <var>bv</var>, whose referenced name component is <var>propertyKey</var>, whose thisValue component is <var>actualThis</var>, and whose strict reference flag is <var>strict</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.3.6" -->
    <emu-clause id="sec-argument-lists">
      <h1><span class="secnum">12.3.6</span>Argument Lists<span class="utils"><span class="anchor"><a href="#sec-argument-lists">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>The evaluation of an argument list produces a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of values.</p>
      </emu-note>

      <!-- es6num="12.3.6.1" -->
      <emu-clause id="sec-argument-lists-runtime-semantics-argumentlistevaluation">
        <h1><span class="secnum">12.3.6.1</span>Runtime Semantics: ArgumentListEvaluation<span class="utils"><span class="anchor"><a href="#sec-argument-lists-runtime-semantics-argumentlistevaluation">#</a></span></span></h1>
        <emu-see-also-para op="ArgumentListEvaluation"></emu-see-also-para>
        <emu-grammar><emu-production name="Arguments" collapsed="">
    <emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="78e44c33"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArgumentList" collapsed="">
    <emu-nt><a href="#prod-ArgumentList">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d4fc7da4"><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> whose sole item is <var>arg</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArgumentList" collapsed="">
    <emu-nt><a href="#prod-ArgumentList">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5bb8853e"><emu-t>...</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>list</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>spreadObj</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>spreadRef</var>).</li><li>Let <var>iterator</var> be ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(<var>spreadObj</var>).</li><li>Repeat<ol><li>Let <var>next</var> be ? <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iterator</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>list</var>.</li><li>Let <var>nextArg</var> be ? <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>list</var>.
        </li></ol></li></ol></emu-alg>
        <emu-grammar><emu-production name="ArgumentList" collapsed="">
    <emu-nt><a href="#prod-ArgumentList">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7ff23fee"><emu-nt><a href="#prod-ArgumentList">ArgumentList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>precedingArgs</var> be the result of evaluating <emu-nt><a href="#prod-ArgumentList">ArgumentList</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>precedingArgs</var>).</li><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>arg</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>ref</var>).</li><li>Append <var>arg</var> to the end of <var>precedingArgs</var>.</li><li>Return <var>precedingArgs</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArgumentList" collapsed="">
    <emu-nt><a href="#prod-ArgumentList">ArgumentList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="678ad0f9"><emu-nt><a href="#prod-ArgumentList">ArgumentList</a></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>precedingArgs</var> be the result of evaluating <emu-nt><a href="#prod-ArgumentList">ArgumentList</a></emu-nt>.</li><li>Let <var>spreadRef</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>iterator</var> be ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>spreadRef</var>)).</li><li>Repeat<ol><li>Let <var>next</var> be ? <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iterator</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, return <var>precedingArgs</var>.</li><li>Let <var>nextArg</var> be ? <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>Append <var>nextArg</var> as the last element of <var>precedingArgs</var>.
        </li></ol></li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.3.7" -->
    <emu-clause id="sec-tagged-templates">
      <h1><span class="secnum">12.3.7</span>Tagged Templates<span class="utils"><span class="anchor"><a href="#sec-tagged-templates">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>A tagged template is a function call where the arguments of the call are derived from a <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt> (<emu-xref href="#sec-template-literals"><a href="#sec-template-literals">12.2.9</a></emu-xref>). The actual arguments include a template object (<emu-xref href="#sec-gettemplateobject"><a href="#sec-gettemplateobject">12.2.9.3</a></emu-xref>) and the values produced by evaluating the expressions embedded within the <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt>.</p>
      </emu-note>

      <!-- es6num="12.3.7.1" -->
      <emu-clause id="sec-tagged-templates-runtime-semantics-evaluation">
        <h1><span class="secnum">12.3.7.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-tagged-templates-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="MemberExpression" collapsed="">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="149e7618"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>tagRef</var> be the result of evaluating <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt>.</li><li>Let <var>thisCall</var> be this <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid="IsInTailPosition"><a href="#sec-isintailposition">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ? <emu-xref aoid="EvaluateCall"><a href="#sec-evaluatecall">EvaluateCall</a></emu-xref>(<var>tagRef</var>, <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt>, <var>tailCall</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="CallExpression" collapsed="">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="adcef8e1"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>tagRef</var> be the result of evaluating <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt>.</li><li>Let <var>thisCall</var> be this <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt>.</li><li>Let <var>tailCall</var> be <emu-xref aoid="IsInTailPosition"><a href="#sec-isintailposition">IsInTailPosition</a></emu-xref>(<var>thisCall</var>).</li><li>Return ? <emu-xref aoid="EvaluateCall"><a href="#sec-evaluatecall">EvaluateCall</a></emu-xref>(<var>tagRef</var>, <emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt>, <var>tailCall</var>).
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.3.8" -->
    <emu-clause id="sec-meta-properties">
      <h1><span class="secnum">12.3.8</span>Meta Properties<span class="utils"><span class="anchor"><a href="#sec-meta-properties">#</a></span></span></h1>

      <!-- es6num="12.3.8.1" -->
      <emu-clause id="sec-meta-properties-runtime-semantics-evaluation">
        <h1><span class="secnum">12.3.8.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-meta-properties-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="NewTarget" collapsed="">
    <emu-nt><a href="#prod-NewTarget">NewTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d2de213d"><emu-t>new</emu-t><emu-t>.</emu-t><emu-t>target</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-xref aoid="GetNewTarget"><a href="#sec-getnewtarget">GetNewTarget</a></emu-xref>().
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.4" -->
  <emu-clause id="sec-update-expressions">
    <h1><span class="secnum">12.4</span>Update Expressions<span class="utils"><span class="anchor"><a href="#sec-update-expressions">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="UpdateExpression" params="Yield" id="prod-UpdateExpression">
    <emu-nt params="Yield"><a href="#prod-UpdateExpression">UpdateExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="377fae86"><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="01e0f909"><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>++</emu-t></emu-rhs>
    <emu-rhs a="f1ad4cc5"><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>--</emu-t></emu-rhs>
    <emu-rhs a="58097953"><emu-t>++</emu-t><emu-nt params="?Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="b2900693"><emu-t>--</emu-t><emu-nt params="?Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.4.1" -->
    <emu-clause id="sec-update-expressions-static-semantics-early-errors">
      <h1><span class="secnum">12.4.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-update-expressions-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="UpdateExpression">
    <emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8bf8e31b"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>
    <emu-rhs a="8d1d2d72"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is an early <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> Error if IsValidSimpleAssignmentTarget of <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is <emu-val>false</emu-val>.
        
        </li>
      </ul>

      <emu-grammar><emu-production name="UpdateExpression">
    <emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5701b162"><emu-t>++</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="3a745559"><emu-t>--</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is an early <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> Error if IsValidSimpleAssignmentTarget of <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt> is <emu-val>false</emu-val>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="12.4.2" -->
    <emu-clause id="sec-update-expressions-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.4.2</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-update-expressions-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="UpdateExpression">
    <emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8bf8e31b"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>
    <emu-rhs a="8d1d2d72"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>
    <emu-rhs a="5701b162"><emu-t>++</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="3a745559"><emu-t>--</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.4.3" -->
    <emu-clause id="sec-update-expressions-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.4.3</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-update-expressions-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="UpdateExpression">
    <emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8bf8e31b"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>
    <emu-rhs a="8d1d2d72"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>
    <emu-rhs a="5701b162"><emu-t>++</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="3a745559"><emu-t>--</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.4.4" -->
    <emu-clause id="sec-postfix-increment-operator">
      <h1><span class="secnum">12.4.4</span>Postfix Increment Operator<span class="utils"><span class="anchor"><a href="#sec-postfix-increment-operator">#</a></span></span></h1>

      <!-- es6num="12.4.4.1" -->
      <emu-clause id="sec-postfix-increment-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.4.4.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-postfix-increment-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UpdateExpression" collapsed="">
    <emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8bf8e31b"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>lhs</var> be the result of evaluating <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lhs</var>)).</li><li>Let <var>newValue</var> be the result of adding the value 1 to <var>oldValue</var>, using the same rules as for the <code>+</code> operator (see <emu-xref href="#sec-applying-the-additive-operators-to-numbers"><a href="#sec-applying-the-additive-operators-to-numbers">12.8.5</a></emu-xref>).</li><li>Perform ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lhs</var>, <var>newValue</var>).</li><li>Return <var>oldValue</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.4.5" -->
    <emu-clause id="sec-postfix-decrement-operator">
      <h1><span class="secnum">12.4.5</span>Postfix Decrement Operator<span class="utils"><span class="anchor"><a href="#sec-postfix-decrement-operator">#</a></span></span></h1>

      <!-- es6num="12.4.5.1" -->
      <emu-clause id="sec-postfix-decrement-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.4.5.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-postfix-decrement-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UpdateExpression" collapsed="">
    <emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8d1d2d72"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>lhs</var> be the result of evaluating <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lhs</var>)).</li><li>Let <var>newValue</var> be the result of subtracting the value 1 from <var>oldValue</var>, using the same rules as for the <code>-</code> operator (see <emu-xref href="#sec-applying-the-additive-operators-to-numbers"><a href="#sec-applying-the-additive-operators-to-numbers">12.8.5</a></emu-xref>).</li><li>Perform ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lhs</var>, <var>newValue</var>).</li><li>Return <var>oldValue</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.5.7" -->
    <emu-clause id="sec-prefix-increment-operator">
      <h1><span class="secnum">12.4.6</span>Prefix Increment Operator<span class="utils"><span class="anchor"><a href="#sec-prefix-increment-operator">#</a></span></span></h1>

      <!-- es6num="12.5.7.1" -->
      <emu-clause id="sec-prefix-increment-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.4.6.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-prefix-increment-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UpdateExpression" collapsed="">
    <emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5701b162"><emu-t>++</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>newValue</var> be the result of adding the value 1 to <var>oldValue</var>, using the same rules as for the <code>+</code> operator (see <emu-xref href="#sec-applying-the-additive-operators-to-numbers"><a href="#sec-applying-the-additive-operators-to-numbers">12.8.5</a></emu-xref>).</li><li>Perform ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.5.8" -->
    <emu-clause id="sec-prefix-decrement-operator">
      <h1><span class="secnum">12.4.7</span>Prefix Decrement Operator<span class="utils"><span class="anchor"><a href="#sec-prefix-decrement-operator">#</a></span></span></h1>

      <!-- es6num="12.5.8.1" -->
      <emu-clause id="sec-prefix-decrement-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.4.7.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-prefix-decrement-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UpdateExpression" collapsed="">
    <emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3a745559"><emu-t>--</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Let <var>newValue</var> be the result of subtracting the value 1 from <var>oldValue</var>, using the same rules as for the <code>-</code> operator (see <emu-xref href="#sec-applying-the-additive-operators-to-numbers"><a href="#sec-applying-the-additive-operators-to-numbers">12.8.5</a></emu-xref>).</li><li>Perform ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>expr</var>, <var>newValue</var>).</li><li>Return <var>newValue</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.5" -->
  <emu-clause id="sec-unary-operators">
    <h1><span class="secnum">12.5</span>Unary Operators<span class="utils"><span class="anchor"><a href="#sec-unary-operators">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="UnaryExpression" params="Yield" id="prod-UnaryExpression">
    <emu-nt params="Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="059ae3fb"><emu-nt params="?Yield"><a href="#prod-UpdateExpression">UpdateExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="7a45ced6"><emu-t>delete</emu-t><emu-nt params="?Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="fecd74e3"><emu-t>void</emu-t><emu-nt params="?Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="ed6968ab"><emu-t>typeof</emu-t><emu-nt params="?Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="b2138170"><emu-t>+</emu-t><emu-nt params="?Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="d7c5d494"><emu-t>-</emu-t><emu-nt params="?Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="e14bfc0e"><emu-t>~</emu-t><emu-nt params="?Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="0514e7a2"><emu-t>!</emu-t><emu-nt params="?Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.5.2" -->
    <emu-clause id="sec-unary-operators-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.5.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-unary-operators-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="UnaryExpression">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2fbba733"><emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="bfdc08c3"><emu-t>delete</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="e5d8038f"><emu-t>void</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="ab1a2cb9"><emu-t>typeof</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="3b49039a"><emu-t>+</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="a03cca5c"><emu-t>-</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="07d36a79"><emu-t>~</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="b8b0af72"><emu-t>!</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.5.3" -->
    <emu-clause id="sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.5.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="UnaryExpression">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2fbba733"><emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="bfdc08c3"><emu-t>delete</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="e5d8038f"><emu-t>void</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="ab1a2cb9"><emu-t>typeof</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="3b49039a"><emu-t>+</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="a03cca5c"><emu-t>-</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="07d36a79"><emu-t>~</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="b8b0af72"><emu-t>!</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.5.4" -->
    <emu-clause id="sec-delete-operator">
      <h1><span class="secnum">12.5.3</span>The <code>delete</code> Operator<span class="utils"><span class="anchor"><a href="#sec-delete-operator">#</a></span></span></h1>

      <!-- es6num="12.5.4.1" -->
      <emu-clause id="sec-delete-operator-static-semantics-early-errors">
        <h1><span class="secnum">12.5.3.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-delete-operator-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="UnaryExpression" collapsed="">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bfdc08c3"><emu-t>delete</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if the <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt> is contained in <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> and the derived <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt> is  <emu-grammar><emu-production name="PrimaryExpression" collapsed="" class=" inline">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2361f19d"><emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>.
          
          </li>
          <li>
            <p>It is a Syntax Error if the derived <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt> is
              
              <br>
              <emu-grammar><emu-production name="PrimaryExpression" collapsed="" class=" inline">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
              <br>
              and <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt> ultimately derives a phrase that, if used in place of <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt>, would produce a Syntax Error according to these rules. This rule is recursively applied.</p>
          </li>
        </ul>
        <emu-note><span class="note">Note</span>
          <p>The last rule means that expressions such as <code>delete (((foo)))</code> produce early errors because of recursive application of the first rule.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="12.5.4.2" -->
      <emu-clause id="sec-delete-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.5.3.2</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-delete-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UnaryExpression" collapsed="">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bfdc08c3"><emu-t>delete</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>ref</var> be the result of evaluating <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>ref</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>ref</var>) is not <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>, return <emu-val>true</emu-val>.</li><li>If <emu-xref href="#ao-isunresolvablereference"><a href="#ao-isunresolvablereference">IsUnresolvableReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>Assert: <emu-xref href="#ao-isstrictreference"><a href="#ao-isstrictreference">IsStrictReference</a></emu-xref>(<var>ref</var>) is <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.</li></ol></li><li>If <emu-xref href="#ao-ispropertyreference"><a href="#ao-ispropertyreference">IsPropertyReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, then<ol><li>If <emu-xref href="#ao-issuperreference"><a href="#ao-issuperreference">IsSuperReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, throw a <emu-val>ReferenceError</emu-val> exception.</li><li>Let <var>baseObj</var> be ! <emu-xref aoid="ToObject"><a href="#sec-toobject">ToObject</a></emu-xref>(<emu-xref href="#ao-getbase"><a href="#ao-getbase">GetBase</a></emu-xref>(<var>ref</var>)).</li><li>Let <var>deleteStatus</var> be ? <var>baseObj</var>.[[Delete]](<emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>ref</var>)).</li><li>If <var>deleteStatus</var> is <emu-val>false</emu-val> and <emu-xref href="#ao-isstrictreference"><a href="#ao-isstrictreference">IsStrictReference</a></emu-xref>(<var>ref</var>) is <emu-val>true</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return <var>deleteStatus</var>.</li></ol></li><li>Else <var>ref</var> is a <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> to an <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> binding,<ol><li>Let <var>bindings</var> be <emu-xref href="#ao-getbase"><a href="#ao-getbase">GetBase</a></emu-xref>(<var>ref</var>).</li><li>Return ? <var>bindings</var>.DeleteBinding(<emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>ref</var>)).
        </li></ol></li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>When a <code>delete</code> operator occurs within <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, a <emu-val>SyntaxError</emu-val> exception is thrown if its <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt> is a direct reference to a variable, function argument, or function name. In addition, if a <code>delete</code> operator occurs within <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> and the property to be deleted has the attribute { [[Configurable]]: <emu-val>false</emu-val> }, a <emu-val>TypeError</emu-val> exception is thrown.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.5.5" -->
    <emu-clause id="sec-void-operator">
      <h1><span class="secnum">12.5.4</span>The <code>void</code> Operator<span class="utils"><span class="anchor"><a href="#sec-void-operator">#</a></span></span></h1>

      <!-- es6num="12.5.5.1" -->
      <emu-clause id="sec-void-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.5.4.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-void-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UnaryExpression" collapsed="">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e5d8038f"><emu-t>void</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt>.</li><li>Perform ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>expr</var>).</li><li>Return <emu-val>undefined</emu-val>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p><emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref> must be called even though its value is not used because it may have observable side-effects.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.5.6" -->
    <emu-clause id="sec-typeof-operator">
      <h1><span class="secnum">12.5.5</span>The <code>typeof</code> Operator<span class="utils"><span class="anchor"><a href="#sec-typeof-operator">#</a></span></span></h1>

      <!-- es6num="12.5.6.1" -->
      <emu-clause id="sec-typeof-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.5.5.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-typeof-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UnaryExpression" collapsed="">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ab1a2cb9"><emu-t>typeof</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>val</var> be the result of evaluating <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>val</var>) is <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref>, then<ol><li>If <emu-xref href="#ao-isunresolvablereference"><a href="#ao-isunresolvablereference">IsUnresolvableReference</a></emu-xref>(<var>val</var>) is <emu-val>true</emu-val>, return <code>"undefined"</code>.</li></ol></li><li>Let <var>val</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>val</var>).</li><li>Return a String according to <emu-xref href="#table-35"><a href="#table-35">Table 35</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-table id="table-35" caption="typeof Operator Results"><figure><figcaption>Table 35: typeof Operator Results</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Type of <var>val</var>
              
              </th>
              <th>
                Result
              
              </th>
            </tr>
            <tr>
              <td>
                Undefined
              
              </td>
              <td>
                <code>"undefined"</code>
              
              </td>
            </tr>
            <tr>
              <td>
                Null
              
              </td>
              <td>
                <code>"object"</code>
              
              </td>
            </tr>
            <tr>
              <td>
                Boolean
              
              </td>
              <td>
                <code>"boolean"</code>
              
              </td>
            </tr>
            <tr>
              <td>
                Number
              
              </td>
              <td>
                <code>"number"</code>
              
              </td>
            </tr>
            <tr>
              <td>
                String
              
              </td>
              <td>
                <code>"string"</code>
              
              </td>
            </tr>
            <tr>
              <td>
                Symbol
              
              </td>
              <td>
                <code>"symbol"</code>
              
              </td>
            </tr>
            <tr>
              <td>
                Object (ordinary and does not implement [[Call]])
              
              </td>
              <td>
                <code>"object"</code>
              
              </td>
            </tr>
            <tr>
              <td>
                Object (standard exotic and does not implement [[Call]])
              
              </td>
              <td>
                <code>"object"</code>
              
              </td>
            </tr>
            <tr>
              <td>
                Object (implements [[Call]])
              
              </td>
              <td>
                <code>"function"</code>
              
              </td>
            </tr>
            <tr>
              <td>
                Object (non-standard exotic and does not implement [[Call]])
              
              </td>
              <td>
                Implementation-defined. Must not be <code>"undefined"</code>, <code>"boolean"</code>, <code>"function"</code>, <code>"number"</code>, <code>"symbol"</code>, or <code>"string"</code>.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <emu-note><span class="note">Note</span>
          <p>Implementations are discouraged from defining new <code>typeof</code> result values for non-standard exotic objects. If possible <code>"object"</code> should be used for such objects.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>


    <!-- es6num="12.5.9" -->
    <emu-clause id="sec-unary-plus-operator">
      <h1><span class="secnum">12.5.6</span>Unary <code>+</code> Operator<span class="utils"><span class="anchor"><a href="#sec-unary-plus-operator">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>The unary + operator converts its operand to Number type.</p>
      </emu-note>

      <!-- es6num="12.5.9.1" -->
      <emu-clause id="sec-unary-plus-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.5.6.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-unary-plus-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UnaryExpression" collapsed="">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3b49039a"><emu-t>+</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt>.</li><li>Return ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>expr</var>)).
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.5.10" -->
    <emu-clause id="sec-unary-minus-operator">
      <h1><span class="secnum">12.5.7</span>Unary <code>-</code> Operator<span class="utils"><span class="anchor"><a href="#sec-unary-minus-operator">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>The unary <code>-</code> operator converts its operand to Number type and then negates it. Negating <emu-val>+0</emu-val> produces <emu-val>-0</emu-val>, and negating <emu-val>-0</emu-val> produces <emu-val>+0</emu-val>.</p>
      </emu-note>

      <!-- es6num="12.5.10.1" -->
      <emu-clause id="sec-unary-minus-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.5.7.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-unary-minus-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UnaryExpression" collapsed="">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a03cca5c"><emu-t>-</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>If <var>oldValue</var> is <emu-val>NaN</emu-val>, return <emu-val>NaN</emu-val>.</li><li>Return the result of negating <var>oldValue</var>; that is, compute a Number with the same magnitude but opposite sign.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.5.11" -->
    <emu-clause id="sec-bitwise-not-operator">
      <h1><span class="secnum">12.5.8</span>Bitwise NOT Operator ( <code>~</code> )<span class="utils"><span class="anchor"><a href="#sec-bitwise-not-operator">#</a></span></span></h1>

      <!-- es6num="12.5.11.1" -->
      <emu-clause id="sec-bitwise-not-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.5.8.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-bitwise-not-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UnaryExpression" collapsed="">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="07d36a79"><emu-t>~</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be ? <emu-xref aoid="ToInt32"><a href="#sec-toint32">ToInt32</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>Return the result of applying bitwise complement to <var>oldValue</var>. The result is a signed 32-bit integer.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.5.12" -->
    <emu-clause id="sec-logical-not-operator">
      <h1><span class="secnum">12.5.9</span>Logical NOT Operator ( <code>!</code> )<span class="utils"><span class="anchor"><a href="#sec-logical-not-operator">#</a></span></span></h1>

      <!-- es6num="12.5.12.1" -->
      <emu-clause id="sec-logical-not-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.5.9.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-logical-not-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="UnaryExpression" collapsed="">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b8b0af72"><emu-t>!</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be the result of evaluating <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt>.</li><li>Let <var>oldValue</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>expr</var>)).</li><li>If <var>oldValue</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-exp-operator">
    <h1><span class="secnum">12.6</span>Exponentiation Operator<span class="utils"><span class="anchor"><a href="#sec-exp-operator">#</a></span></span></h1>
    <h2>Syntax</h2>

    <emu-grammar><emu-production name="ExponentiationExpression" params="Yield" id="prod-ExponentiationExpression">
    <emu-nt params="Yield"><a href="#prod-ExponentiationExpression">ExponentiationExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d499e73d"><emu-nt params="?Yield"><a href="#prod-UnaryExpression">UnaryExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="42d2c8e6"><emu-nt params="?Yield"><a href="#prod-UpdateExpression">UpdateExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>**</emu-t><emu-nt params="?Yield"><a href="#prod-ExponentiationExpression">ExponentiationExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <emu-clause id="sec-exp-operator-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.6.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-exp-operator-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="ExponentiationExpression">
    <emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1905fcc"><emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-t>**</emu-t><emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <emu-clause id="sec-exp-operator-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.6.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-exp-operator-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="ExponentiationExpression">
    <emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1905fcc"><emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-t>**</emu-t><emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <emu-clause id="sec-exp-operator-runtime-semantics-evaluation">
      <h1><span class="secnum">12.6.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-exp-operator-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="ExponentiationExpression" collapsed="">
    <emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1905fcc"><emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-t>**</emu-t><emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>left</var> be the result of evaluating <var>UpdateExpression</var>.</li><li>Let <var>leftValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>left</var>).</li><li>Let <var>right</var> be the result of evaluating <var>ExponentiationExpression</var>.</li><li>Let <var>rightValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>right</var>).</li><li>Let <var>base</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>leftValue</var>).</li><li>Let <var>exponent</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>rightValue</var>).</li><li>Return the result of <emu-xref href="#sec-applying-the-exp-operator" title=""><a href="#sec-applying-the-exp-operator">Applying the ** operator</a></emu-xref> with <var>base</var> and <var>exponent</var> as specified in <emu-xref href="#sec-applying-the-exp-operator"><a href="#sec-applying-the-exp-operator">12.7.3.4</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.6" -->
  <emu-clause id="sec-multiplicative-operators">
    <h1><span class="secnum">12.7</span>Multiplicative Operators<span class="utils"><span class="anchor"><a href="#sec-multiplicative-operators">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="MultiplicativeExpression" params="Yield" id="prod-MultiplicativeExpression">
    <emu-nt params="Yield"><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="65b284de"><emu-nt params="?Yield"><a href="#prod-ExponentiationExpression">ExponentiationExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="ddc7c1fc"><emu-nt params="?Yield"><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt><a href="#prod-MultiplicativeOperator">MultiplicativeOperator</a></emu-nt><emu-nt params="?Yield"><a href="#prod-ExponentiationExpression">ExponentiationExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="MultiplicativeOperator" oneof="" id="prod-MultiplicativeOperator">
    <emu-nt><a href="#prod-MultiplicativeOperator">MultiplicativeOperator</a></emu-nt><emu-geq>:</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>*</emu-t><emu-t>/</emu-t><emu-t>%</emu-t></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.6.1" -->
    <emu-clause id="sec-multiplicative-operators-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.7.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-multiplicative-operators-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="MultiplicativeExpression" collapsed="">
    <emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fb9fe2a0"><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt><emu-nt><a href="#prod-MultiplicativeOperator">MultiplicativeOperator</a></emu-nt><emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.6.2" -->
    <emu-clause id="sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.7.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="MultiplicativeExpression" collapsed="">
    <emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fb9fe2a0"><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt><emu-nt><a href="#prod-MultiplicativeOperator">MultiplicativeOperator</a></emu-nt><emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.6.3" -->
    <emu-clause id="sec-multiplicative-operators-runtime-semantics-evaluation">
      <h1><span class="secnum">12.7.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-multiplicative-operators-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="MultiplicativeExpression" collapsed="">
    <emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fb9fe2a0"><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt><emu-nt><a href="#prod-MultiplicativeOperator">MultiplicativeOperator</a></emu-nt><emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>left</var> be the result of evaluating <emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt>.</li><li>Let <var>leftValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>left</var>).</li><li>Let <var>right</var> be the result of evaluating <emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt>.</li><li>Let <var>rightValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>right</var>).</li><li>Let <var>lnum</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>leftValue</var>).</li><li>Let <var>rnum</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>rightValue</var>).</li><li>Return the result of applying the <emu-nt><a href="#prod-MultiplicativeOperator">MultiplicativeOperator</a></emu-nt> (<code>*</code>, <code>/</code>, or <code>%</code>) to <var>lnum</var> and <var>rnum</var> as specified in <emu-xref href="#sec-applying-the-mul-operator"><a href="#sec-applying-the-mul-operator">12.7.3.1</a></emu-xref>, <emu-xref href="#sec-applying-the-div-operator"><a href="#sec-applying-the-div-operator">12.7.3.2</a></emu-xref>, or <emu-xref href="#sec-applying-the-mod-operator"><a href="#sec-applying-the-mod-operator">12.7.3.3</a></emu-xref>.
      </li></ol></emu-alg>

      <!-- es6num="12.6.3.1" -->
      <emu-clause id="sec-applying-the-mul-operator">
        <h1><span class="secnum">12.7.3.1</span>Applying the <code>*</code> Operator<span class="utils"><span class="anchor"><a href="#sec-applying-the-mul-operator">#</a></span></span></h1>
        <p>The <code>*</code> <emu-nt><a href="#prod-MultiplicativeOperator">MultiplicativeOperator</a></emu-nt>
 performs multiplication, producing the product of its operands. 
Multiplication is commutative. Multiplication is not always associative 
in ECMAScript, because of finite precision.</p>
        <p>The result of a floating-point multiplication is governed by the rules of IEEE 754-2008 binary double-precision arithmetic:</p>
        <ul>
          <li>
            If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.
          
          </li>
          <li>
            The sign of the result is positive if both operands have the
 same sign, negative if the operands have different signs.
          
          </li>
          <li>
            Multiplication of an infinity by a zero results in <emu-val>NaN</emu-val>.
          
          </li>
          <li>
            Multiplication of an infinity by an infinity results in an 
infinity. The sign is determined by the rule already stated above.
          
          </li>
          <li>
            Multiplication of an infinity by a finite nonzero value 
results in a signed infinity. The sign is determined by the rule already
 stated above.
          
          </li>
          <li>
            In the remaining cases, where neither an infinity nor <emu-val>NaN</emu-val>
 is involved, the product is computed and rounded to the nearest 
representable value using IEEE 754-2008 round to nearest, ties to even 
mode. If the magnitude is too large to represent, the result is then an 
infinity of appropriate sign. If the magnitude is too small to 
represent, the result is then a zero of appropriate sign. The ECMAScript
 language requires support of gradual underflow as defined by IEEE 
754-2008.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="12.6.3.2" -->
      <emu-clause id="sec-applying-the-div-operator">
        <h1><span class="secnum">12.7.3.2</span>Applying the <code>/</code> Operator<span class="utils"><span class="anchor"><a href="#sec-applying-the-div-operator">#</a></span></span></h1>
        <p>The <code>/</code> <emu-nt><a href="#prod-MultiplicativeOperator">MultiplicativeOperator</a></emu-nt>
 performs division, producing the quotient of its operands. The left 
operand is the dividend and the right operand is the divisor. ECMAScript
 does not perform integer division. The operands and result of all 
division operations are double-precision floating-point numbers. The 
result of division is determined by the specification of IEEE 754-2008 
arithmetic:</p>
        <ul>
          <li>
            If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.
          
          </li>
          <li>
            The sign of the result is positive if both operands have the
 same sign, negative if the operands have different signs.
          
          </li>
          <li>
            Division of an infinity by an infinity results in <emu-val>NaN</emu-val>.
          
          </li>
          <li>
            Division of an infinity by a zero results in an infinity. The sign is determined by the rule already stated above.
          
          </li>
          <li>
            Division of an infinity by a nonzero finite value results in
 a signed infinity. The sign is determined by the rule already stated 
above.
          
          </li>
          <li>
            Division of a finite value by an infinity results in zero. The sign is determined by the rule already stated above.
          
          </li>
          <li>
            Division of a zero by a zero results in <emu-val>NaN</emu-val>; division of zero by any other finite value results in zero, with the sign determined by the rule already stated above.
          
          </li>
          <li>
            Division of a nonzero finite value by a zero results in a 
signed infinity. The sign is determined by the rule already stated 
above.
          
          </li>
          <li>
            In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val>
 is involved, the quotient is computed and rounded to the nearest 
representable value using IEEE 754-2008 round to nearest, ties to even 
mode. If the magnitude is too large to represent, the operation 
overflows; the result is then an infinity of appropriate sign. If the 
magnitude is too small to represent, the operation underflows and the 
result is a zero of the appropriate sign. The ECMAScript language 
requires support of gradual underflow as defined by IEEE 754-2008.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="12.6.3.3" -->
      <emu-clause id="sec-applying-the-mod-operator">
        <h1><span class="secnum">12.7.3.3</span>Applying the <code>%</code> Operator<span class="utils"><span class="anchor"><a href="#sec-applying-the-mod-operator">#</a></span></span></h1>
        <p>The <code>%</code> <emu-nt><a href="#prod-MultiplicativeOperator">MultiplicativeOperator</a></emu-nt>
 yields the remainder of its operands from an implied division; the left
 operand is the dividend and the right operand is the divisor.</p>
        <emu-note><span class="note">Note</span>
          <p>In C and C++, the remainder operator accepts only integral operands; in ECMAScript, it also accepts floating-point operands.</p>
        </emu-note>
        <p>The result of a floating-point remainder operation as computed by the <code>%</code>
 operator is not the same as the âremainderâ operation defined by IEEE 
754-2008. The IEEE 754-2008 âremainderâ operation computes the remainder
 from a rounding division, not a truncating division, and so its 
behaviour is not analogous to that of the usual integer remainder 
operator. Instead the ECMAScript language defines <code>%</code> on 
floating-point operations to behave in a manner analogous to that of the
 Java integer remainder operator; this may be compared with the C 
library function fmod.</p>
        <p>The result of an ECMAScript floating-point remainder operation is determined by the rules of IEEE arithmetic:</p>
        <ul>
          <li>
            If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.
          
          </li>
          <li>
            The sign of the result equals the sign of the dividend.
          
          </li>
          <li>
            If the dividend is an infinity, or the divisor is a zero, or both, the result is <emu-val>NaN</emu-val>.
          
          </li>
          <li>
            If the dividend is finite and the divisor is an infinity, the result equals the dividend.
          
          </li>
          <li>
            If the dividend is a zero and the divisor is nonzero and finite, the result is the same as the dividend.
          
          </li>
          <li>
            In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val>
 is involved, the floating-point remainder r from a dividend n and a 
divisor d is defined by the mathematical relation r = n - (d Ã q) where q
 is an integer that is negative only if n/d is negative and positive 
only if n/d is positive, and whose magnitude is as large as possible 
without exceeding the magnitude of the true mathematical quotient of n 
and d. r is computed and rounded to the nearest representable value 
using IEEE 754-2008 round to nearest, ties to even mode.
          
          </li>
        </ul>
      </emu-clause>
      <emu-clause id="sec-applying-the-exp-operator">
        <h1><span class="secnum">12.7.3.4</span>Applying the <code>**</code> Operator<span class="utils"><span class="anchor"><a href="#sec-applying-the-exp-operator">#</a></span></span></h1>
        <p>
          Returns an implementation-dependent approximation of the result of raising <var>base</var> to the power <var>exponent</var>.
        
        </p>
        <ul>
          <li>If <var>exponent</var> is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.</li>
          <li>If <var>exponent</var> is <emu-val>+0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>
          <li>If <var>exponent</var> is <emu-val>-0</emu-val>, the result is 1, even if <var>base</var> is <emu-val>NaN</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>NaN</emu-val> and <var>exponent</var> is nonzero, the result is <emu-val>NaN</emu-val>.</li>
          <li>If <emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>+â</emu-val>, the result is <emu-val>+â</emu-val>.</li>
          <li>If <emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>base</var>) &gt; 1 and <var>exponent</var> is <emu-val>-â</emu-val>, the result is <emu-val>+0</emu-val>.</li>
          <li>If <emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>+â</emu-val>, the result is <emu-val>NaN</emu-val>.</li>
          <li>If <emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>base</var>) is 1 and <var>exponent</var> is <emu-val>-â</emu-val>, the result is <emu-val>NaN</emu-val>.</li>
          <li>If <emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>+â</emu-val>, the result is <emu-val>+0</emu-val>.</li>
          <li>If <emu-xref aoid="abs"><a href="#sec-algorithm-conventions">abs</a></emu-xref>(<var>base</var>) &lt; 1 and <var>exponent</var> is <emu-val>-â</emu-val>, the result is <emu-val>+â</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>+â</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+â</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>+â</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+0</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>-â</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd integer, the result is <emu-val>-â</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>-â</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd integer, the result is <emu-val>+â</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>-â</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd integer, the result is <emu-val>-0</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>-â</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd integer, the result is <emu-val>+0</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &gt; 0, the result is <emu-val>+0</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>+0</emu-val> and <var>exponent</var> &lt; 0, the result is <emu-val>+â</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is an odd integer, the result is <emu-val>-0</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &gt; 0 and <var>exponent</var> is not an odd integer, the result is <emu-val>+0</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is an odd integer, the result is <emu-val>-â</emu-val>.</li>
          <li>If <var>base</var> is <emu-val>-0</emu-val> and <var>exponent</var> &lt; 0 and <var>exponent</var> is not an odd integer, the result is <emu-val>+â</emu-val>.</li>
          <li>If <var>base</var> &lt; 0 and <var>base</var> is finite and <var>exponent</var> is finite and <var>exponent</var> is not an integer, the result is <emu-val>NaN</emu-val>.</li>
        </ul>
        <emu-note><span class="note">Note</span>
          <p>The result of <var>base</var> <code>**</code> <var>exponent</var> when <var>base</var> is <emu-val>1</emu-val> or <emu-val>-1</emu-val> and <var>exponent</var> is <emu-val>+Infinity</emu-val> or <emu-val>-Infinity</emu-val> differs from IEEE 754-2008. The first edition of ECMAScript specified a result of <emu-val>NaN</emu-val> for this operation, whereas later versions of IEEE 754-2008 specified <emu-val>1</emu-val>. The historical ECMAScript behaviour is preserved for compatibility reasons.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.7" -->
  <emu-clause id="sec-additive-operators">
    <h1><span class="secnum">12.8</span>Additive Operators<span class="utils"><span class="anchor"><a href="#sec-additive-operators">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="AdditiveExpression" params="Yield" id="prod-AdditiveExpression">
    <emu-nt params="Yield"><a href="#prod-AdditiveExpression">AdditiveExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="97b824d7"><emu-nt params="?Yield"><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="5ba6cc81"><emu-nt params="?Yield"><a href="#prod-AdditiveExpression">AdditiveExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>+</emu-t><emu-nt params="?Yield"><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="bf0c1119"><emu-nt params="?Yield"><a href="#prod-AdditiveExpression">AdditiveExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>-</emu-t><emu-nt params="?Yield"><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.7.1" -->
    <emu-clause id="sec-additive-operators-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.8.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-additive-operators-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="AdditiveExpression">
    <emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0e497b17"><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-t>+</emu-t><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="ee054414"><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-t>-</emu-t><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.7.2" -->
    <emu-clause id="sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.8.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="AdditiveExpression">
    <emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0e497b17"><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-t>+</emu-t><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="ee054414"><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-t>-</emu-t><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.7.3" -->
    <emu-clause id="sec-addition-operator-plus">
      <h1><span class="secnum">12.8.3</span>The Addition Operator ( <code>+</code> )<span class="utils"><span class="anchor"><a href="#sec-addition-operator-plus">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>The addition operator either performs string concatenation or numeric addition.</p>
      </emu-note>

      <!-- es6num="12.7.3.1" -->
      <emu-clause id="sec-addition-operator-plus-runtime-semantics-evaluation">
        <h1><span class="secnum">12.8.3.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-addition-operator-plus-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="AdditiveExpression" collapsed="">
    <emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0e497b17"><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-t>+</emu-t><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lprim</var> be ? <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rprim</var> be ? <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>(<var>rval</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>lprim</var>) is String or <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>rprim</var>) is String, then<ol><li>Let <var>lstr</var> be ? <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rstr</var> be ? <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>rprim</var>).</li><li>Return the String that is the result of concatenating <var>lstr</var> and <var>rstr</var>.</li></ol></li><li>Let <var>lnum</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>lprim</var>).</li><li>Let <var>rnum</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>rprim</var>).</li><li>Return the result of applying the addition operation to <var>lnum</var> and <var>rnum</var>. See the Note below <emu-xref href="#sec-applying-the-additive-operators-to-numbers"><a href="#sec-applying-the-additive-operators-to-numbers">12.8.5</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note 1</span>
          <p>No hint is provided in the calls to <emu-xref aoid="ToPrimitive"><a href="#sec-toprimitive">ToPrimitive</a></emu-xref>
 in steps 5 and 6. All standard objects except Date objects handle the 
absence of a hint as if the hint Number were given; Date objects handle 
the absence of a hint as if the hint String were given. Exotic objects 
may handle the absence of a hint in some other manner.</p>
        </emu-note>
        <emu-note><span class="note">Note 2</span>
          <p>Step 7 differs from step 5 of the <emu-xref aoid="Abstract Relational Comparison"><a href="#sec-abstract-relational-comparison">Abstract Relational Comparison</a></emu-xref> algorithm, by using the logical-or operation instead of the logical-and operation.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.7.4" -->
    <emu-clause id="sec-subtraction-operator-minus">
      <h1><span class="secnum">12.8.4</span>The Subtraction Operator ( <code>-</code> )<span class="utils"><span class="anchor"><a href="#sec-subtraction-operator-minus">#</a></span></span></h1>

      <!-- es6num="12.7.4.1" -->
      <emu-clause id="sec-subtraction-operator-minus-runtime-semantics-evaluation">
        <h1><span class="secnum">12.8.4.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-subtraction-operator-minus-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="AdditiveExpression" collapsed="">
    <emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ee054414"><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-t>-</emu-t><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ? <emu-xref aoid="ToNumber"><a href="#sec-tonumber">ToNumber</a></emu-xref>(<var>rval</var>).</li><li>Return the result of applying the subtraction operation to <var>lnum</var> and <var>rnum</var>. See the note below <emu-xref href="#sec-applying-the-additive-operators-to-numbers"><a href="#sec-applying-the-additive-operators-to-numbers">12.8.5</a></emu-xref>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.7.5" -->
    <emu-clause id="sec-applying-the-additive-operators-to-numbers">
      <h1><span class="secnum">12.8.5</span>Applying the Additive Operators to Numbers<span class="utils"><span class="anchor"><a href="#sec-applying-the-additive-operators-to-numbers">#</a></span></span></h1>
      <p>The <code>+</code> operator performs addition when applied to two operands of numeric type, producing the sum of the operands. The <code>-</code> operator performs subtraction, producing the difference of two numeric operands.</p>
      <p>Addition is a commutative operation, but not always associative.</p>
      <p>The result of an addition is determined using the rules of IEEE 754-2008 binary double-precision arithmetic:</p>
      <ul>
        <li>
          If either operand is <emu-val>NaN</emu-val>, the result is <emu-val>NaN</emu-val>.
        
        </li>
        <li>
          The sum of two infinities of opposite sign is <emu-val>NaN</emu-val>.
        
        </li>
        <li>
          The sum of two infinities of the same sign is the infinity of that sign.
        
        </li>
        <li>
          The sum of an infinity and a finite value is equal to the infinite operand.
        
        </li>
        <li>
          The sum of two negative zeroes is <emu-val>-0</emu-val>. The sum of two positive zeroes, or of two zeroes of opposite sign, is <emu-val>+0</emu-val>.
        
        </li>
        <li>
          The sum of a zero and a nonzero finite value is equal to the nonzero operand.
        
        </li>
        <li>
          The sum of two nonzero finite values of the same magnitude and opposite sign is <emu-val>+0</emu-val>.
        
        </li>
        <li>
          In the remaining cases, where neither an infinity, nor a zero, nor <emu-val>NaN</emu-val>
 is involved, and the operands have the same sign or have different 
magnitudes, the sum is computed and rounded to the nearest representable
 value using IEEE 754-2008 round to nearest, ties to even mode. If the 
magnitude is too large to represent, the operation overflows and the 
result is then an infinity of appropriate sign. The ECMAScript language 
requires support of gradual underflow as defined by IEEE 754-2008.
        
        </li>
      </ul>
      <emu-note><span class="note">Note</span>
        <p>The <code>-</code> operator performs subtraction when applied
 to two operands of numeric type, producing the difference of its 
operands; the left operand is the minuend and the right operand is the 
subtrahend. Given numeric operands <code>a</code> and <code>b</code>, it is always the case that <code>a-b</code> produces the same result as <code>a+(-b)</code>.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.8" -->
  <emu-clause id="sec-bitwise-shift-operators">
    <h1><span class="secnum">12.9</span>Bitwise Shift Operators<span class="utils"><span class="anchor"><a href="#sec-bitwise-shift-operators">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="ShiftExpression" params="Yield" id="prod-ShiftExpression">
    <emu-nt params="Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2baeb5db"><emu-nt params="?Yield"><a href="#prod-AdditiveExpression">AdditiveExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="1e6dbeb2"><emu-nt params="?Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt params="?Yield"><a href="#prod-AdditiveExpression">AdditiveExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="639cdc26"><emu-nt params="?Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt params="?Yield"><a href="#prod-AdditiveExpression">AdditiveExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="9d297ffd"><emu-nt params="?Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt params="?Yield"><a href="#prod-AdditiveExpression">AdditiveExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.8.1" -->
    <emu-clause id="sec-bitwise-shift-operators-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.9.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-bitwise-shift-operators-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="ShiftExpression">
    <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4b572e10"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="19a05cdb"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="6df3c84c"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.8.2" -->
    <emu-clause id="sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.9.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="ShiftExpression">
    <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4b572e10"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="19a05cdb"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="6df3c84c"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.8.3" -->
    <emu-clause id="sec-left-shift-operator">
      <h1><span class="secnum">12.9.3</span>The Left Shift Operator ( <code>&lt;&lt;</code> )<span class="utils"><span class="anchor"><a href="#sec-left-shift-operator">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>Performs a bitwise left shift operation on the left operand by the amount specified by the right operand.</p>
      </emu-note>

      <!-- es6num="12.8.3.1" -->
      <emu-clause id="sec-left-shift-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.9.3.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-left-shift-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="ShiftExpression" collapsed="">
    <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4b572e10"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ? <emu-xref aoid="ToInt32"><a href="#sec-toint32">ToInt32</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ? <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>rval</var>).</li><li>Let <var>shiftCount</var> be the result of masking out all but the least significant 5 bits of <var>rnum</var>, that is, compute <var>rnum</var> &amp; 0x1F.</li><li>Return the result of left shifting <var>lnum</var> by <var>shiftCount</var> bits. The result is a signed 32-bit integer.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.8.4" -->
    <emu-clause id="sec-signed-right-shift-operator">
      <h1><span class="secnum">12.9.4</span>The Signed Right Shift Operator ( <code>&gt;&gt;</code> )<span class="utils"><span class="anchor"><a href="#sec-signed-right-shift-operator">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>Performs a sign-filling bitwise right shift operation on the left operand by the amount specified by the right operand.</p>
      </emu-note>

      <!-- es6num="12.8.4.1" -->
      <emu-clause id="sec-signed-right-shift-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.9.4.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-signed-right-shift-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="ShiftExpression" collapsed="">
    <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="19a05cdb"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ? <emu-xref aoid="ToInt32"><a href="#sec-toint32">ToInt32</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ? <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>rval</var>).</li><li>Let <var>shiftCount</var> be the result of masking out all but the least significant 5 bits of <var>rnum</var>, that is, compute <var>rnum</var> &amp; 0x1F.</li><li>Return the result of performing a sign-extending right shift of <var>lnum</var> by <var>shiftCount</var> bits. The most significant bit is propagated. The result is a signed 32-bit integer.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="12.8.5" -->
    <emu-clause id="sec-unsigned-right-shift-operator">
      <h1><span class="secnum">12.9.5</span>The Unsigned Right Shift Operator ( <code>&gt;&gt;&gt;</code> )<span class="utils"><span class="anchor"><a href="#sec-unsigned-right-shift-operator">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>Performs a zero-filling bitwise right shift operation on the left operand by the amount specified by the right operand.</p>
      </emu-note>

      <!-- es6num="12.8.5.1" -->
      <emu-clause id="sec-unsigned-right-shift-operator-runtime-semantics-evaluation">
        <h1><span class="secnum">12.9.5.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-unsigned-right-shift-operator-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="ShiftExpression" collapsed="">
    <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6df3c84c"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ? <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ? <emu-xref aoid="ToUint32"><a href="#sec-touint32">ToUint32</a></emu-xref>(<var>rval</var>).</li><li>Let <var>shiftCount</var> be the result of masking out all but the least significant 5 bits of <var>rnum</var>, that is, compute <var>rnum</var> &amp; 0x1F.</li><li>Return the result of performing a zero-filling right shift of <var>lnum</var> by <var>shiftCount</var> bits. Vacated bits are filled with zero. The result is an unsigned 32-bit integer.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.9" -->
  <emu-clause id="sec-relational-operators">
    <h1><span class="secnum">12.10</span>Relational Operators<span class="utils"><span class="anchor"><a href="#sec-relational-operators">#</a></span></span></h1>
    <emu-note><span class="note">Note 1</span>
      <p>The result of evaluating a relational operator is always of 
type Boolean, reflecting whether the relationship named by the operator 
holds between its two operands.</p>
    </emu-note>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="RelationalExpression" params="In, Yield" id="prod-RelationalExpression">
    <emu-nt params="In, Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="14cbe144"><emu-nt params="?Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="862f8bef"><emu-nt params="?In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>&lt;</emu-t><emu-nt params="?Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="e1b30960"><emu-nt params="?In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>&gt;</emu-t><emu-nt params="?Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="707c38bf"><emu-nt params="?In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>&lt;=</emu-t><emu-nt params="?Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="cc6c18fa"><emu-nt params="?In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>&gt;=</emu-t><emu-nt params="?Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="3bd34097"><emu-nt params="?In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>instanceof</emu-t><emu-nt params="?Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="75f6ab4f" constraints="+In"><emu-constraints>[+In]</emu-constraints><emu-nt params="+In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>in</emu-t><emu-nt params="?Yield"><a href="#prod-ShiftExpression">ShiftExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note 2</span>
      <p>The [In] grammar parameter is needed to avoid confusing the <code>in</code> operator in a relational expression with the <code>in</code> operator in a <code>for</code> statement.</p>
    </emu-note>

    <!-- es6num="12.9.1" -->
    <emu-clause id="sec-relational-operators-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.10.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-relational-operators-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="RelationalExpression">
    <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f87a0200"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&lt;</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="a16358ee"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&gt;</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="ff231f22"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&lt;=</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="498fdf34"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&gt;=</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="d440bdac"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>instanceof</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="f66b493e"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.9.2" -->
    <emu-clause id="sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.10.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="RelationalExpression">
    <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f87a0200"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&lt;</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="a16358ee"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&gt;</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="ff231f22"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&lt;=</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="498fdf34"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&gt;=</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="d440bdac"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>instanceof</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="f66b493e"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.9.3" -->
    <emu-clause id="sec-relational-operators-runtime-semantics-evaluation">
      <h1><span class="secnum">12.10.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-relational-operators-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="RelationalExpression" collapsed="">
    <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f87a0200"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&lt;</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid="Abstract Relational Comparison"><a href="#sec-abstract-relational-comparison">Abstract Relational Comparison</a></emu-xref> <var>lval</var> &lt; <var>rval</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="RelationalExpression" collapsed="">
    <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a16358ee"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&gt;</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid="Abstract Relational Comparison"><a href="#sec-abstract-relational-comparison">Abstract Relational Comparison</a></emu-xref> <var>rval</var> &lt; <var>lval</var> with <var>LeftFirst</var> equal to <emu-val>false</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <var>r</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="RelationalExpression" collapsed="">
    <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ff231f22"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&lt;=</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid="Abstract Relational Comparison"><a href="#sec-abstract-relational-comparison">Abstract Relational Comparison</a></emu-xref> <var>rval</var> &lt; <var>lval</var> with <var>LeftFirst</var> equal to <emu-val>false</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="RelationalExpression" collapsed="">
    <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="498fdf34"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&gt;=</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid="Abstract Relational Comparison"><a href="#sec-abstract-relational-comparison">Abstract Relational Comparison</a></emu-xref> <var>lval</var> &lt; <var>rval</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>r</var>).</li><li>If <var>r</var> is <emu-val>true</emu-val> or <emu-val>undefined</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="RelationalExpression" collapsed="">
    <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d440bdac"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>instanceof</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return ? <emu-xref aoid="InstanceofOperator"><a href="#sec-instanceofoperator">InstanceofOperator</a></emu-xref>(<var>lval</var>, <var>rval</var>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="RelationalExpression" collapsed="">
    <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f66b493e"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>rval</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ? <emu-xref aoid="HasProperty"><a href="#sec-hasproperty">HasProperty</a></emu-xref>(<var>rval</var>, <emu-xref aoid="ToPropertyKey"><a href="#sec-topropertykey">ToPropertyKey</a></emu-xref>(<var>lval</var>)).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.9.4" -->
    <emu-clause id="sec-instanceofoperator" aoid="InstanceofOperator">
      <h1><span class="secnum">12.10.4</span>Runtime Semantics: InstanceofOperator(<var>O</var>, <var>C</var>)<span class="utils"><span class="anchor"><a href="#sec-instanceofoperator">#</a></span></span></h1>
      <p>The abstract operation InstanceofOperator(<var>O</var>, <var>C</var>) implements the generic algorithm for determining if an object <var>O</var> inherits from the inheritance path defined by constructor <var>C</var>. This abstract operation performs the following steps:</p>
      <emu-alg><ol><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>C</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>instOfHandler</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>C</var>, @@hasInstance).</li><li>If <var>instOfHandler</var> is not <emu-val>undefined</emu-val>, then<ol><li>Return <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>instOfHandler</var>, <var>C</var>, Â« <var>O</var> Â»)).</li></ol></li><li>If <emu-xref aoid="IsCallable"><a href="#sec-iscallable">IsCallable</a></emu-xref>(<var>C</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Return ? <emu-xref aoid="OrdinaryHasInstance"><a href="#sec-ordinaryhasinstance">OrdinaryHasInstance</a></emu-xref>(<var>C</var>, <var>O</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Steps 4 and 5 provide compatibility with previous editions of ECMAScript that did not use a @@hasInstance method to define the <code>instanceof</code> operator semantics. If a function object does not define or inherit @@hasInstance it uses the default <code>instanceof</code> semantics.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.10" -->
  <emu-clause id="sec-equality-operators">
    <h1><span class="secnum">12.11</span>Equality Operators<span class="utils"><span class="anchor"><a href="#sec-equality-operators">#</a></span></span></h1>
    <emu-note><span class="note">Note</span>
      <p>The result of evaluating an equality operator is always of type
 Boolean, reflecting whether the relationship named by the operator 
holds between its two operands.</p>
    </emu-note>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="EqualityExpression" params="In, Yield" id="prod-EqualityExpression">
    <emu-nt params="In, Yield"><a href="#prod-EqualityExpression">EqualityExpression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2f008b2b"><emu-nt params="?In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="4e8ecf54"><emu-nt params="?In, ?Yield"><a href="#prod-EqualityExpression">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>==</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="73baad0e"><emu-nt params="?In, ?Yield"><a href="#prod-EqualityExpression">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>!=</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="5c018f1f"><emu-nt params="?In, ?Yield"><a href="#prod-EqualityExpression">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>===</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="1f512a7e"><emu-nt params="?In, ?Yield"><a href="#prod-EqualityExpression">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>!==</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-RelationalExpression">RelationalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.10.1" -->
    <emu-clause id="sec-equality-operators-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.11.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-equality-operators-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="EqualityExpression">
    <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="757a342c"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>==</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="70ddad59"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>!=</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="e0753bf6"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>===</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="2113edaf"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>!==</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.10.2" -->
    <emu-clause id="sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.11.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="EqualityExpression">
    <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="757a342c"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>==</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="70ddad59"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>!=</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="e0753bf6"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>===</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="2113edaf"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>!==</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.10.3" -->
    <emu-clause id="sec-equality-operators-runtime-semantics-evaluation">
      <h1><span class="secnum">12.11.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-equality-operators-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="EqualityExpression" collapsed="">
    <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="757a342c"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>==</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return the result of performing <emu-xref aoid="Abstract Equality Comparison"><a href="#sec-abstract-equality-comparison">Abstract Equality Comparison</a></emu-xref> <var>rval</var> == <var>lval</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="EqualityExpression" collapsed="">
    <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="70ddad59"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>!=</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid="Abstract Equality Comparison"><a href="#sec-abstract-equality-comparison">Abstract Equality Comparison</a></emu-xref> <var>rval</var> == <var>lval</var>.</li><li>If <var>r</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="EqualityExpression" collapsed="">
    <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0753bf6"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>===</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Return the result of performing <emu-xref aoid="Strict Equality Comparison"><a href="#sec-strict-equality-comparison">Strict Equality Comparison</a></emu-xref> <var>rval</var> === <var>lval</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="EqualityExpression" collapsed="">
    <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2113edaf"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>!==</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>r</var> be the result of performing <emu-xref aoid="Strict Equality Comparison"><a href="#sec-strict-equality-comparison">Strict Equality Comparison</a></emu-xref> <var>rval</var> === <var>lval</var>.</li><li>If <var>r</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>. Otherwise, return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 1</span>
        <p>Given the above definition of equality:</p>
        <ul>
          <li>
            String comparison can be forced by: <code>"" + a == "" + b</code>.
          
          </li>
          <li>
            Numeric comparison can be forced by: <code>+a == +b</code>.
          
          </li>
          <li>
            Boolean comparison can be forced by: <code>!a == !b</code>.
          
          </li>
        </ul>
      </emu-note>
      <emu-note><span class="note">Note 2</span>
        <p>The equality operators maintain the following invariants:</p>
        <ul>
          <li>
            <code>A != B</code> is equivalent to <code>!(A == B)</code>.
          
          </li>
          <li>
            <code>A == B</code> is equivalent to <code>B == A</code>, except in the order of evaluation of <code>A</code> and <code>B</code>.
          
          </li>
        </ul>
      </emu-note>
      <emu-note><span class="note">Note 3</span>
        <p>The equality operator is not always transitive. For example, 
there might be two distinct String objects, each representing the same 
String value; each String object would be considered equal to the String
 value by the <code>==</code> operator, but the two String objects would not be equal to each other. For example:</p>
        <ul>
          <li>
            <code>new String("a") == "a"</code> and <code>"a" == new String("a")</code> are both <emu-val>true</emu-val>.
          
          </li>
          <li>
            <code>new String("a") == new String("a")</code> is <emu-val>false</emu-val>.
          
          </li>
        </ul>
      </emu-note>
      <emu-note><span class="note">Note 4</span>
        <p>Comparison of Strings uses a simple equality test on 
sequences of code unit values. There is no attempt to use the more 
complex, semantically oriented definitions of character or string 
equality and collating order defined in the Unicode specification. 
Therefore Strings values that are canonically equal according to the 
Unicode standard could test as unequal. In effect this algorithm assumes
 that both Strings are already in normalized form.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.11" -->
  <emu-clause id="sec-binary-bitwise-operators">
    <h1><span class="secnum">12.12</span>Binary Bitwise Operators<span class="utils"><span class="anchor"><a href="#sec-binary-bitwise-operators">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="BitwiseANDExpression" params="In, Yield" id="prod-BitwiseANDExpression">
    <emu-nt params="In, Yield"><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="003e4dd5"><emu-nt params="?In, ?Yield"><a href="#prod-EqualityExpression">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="dc348a15"><emu-nt params="?In, ?Yield"><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>&amp;</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-EqualityExpression">EqualityExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BitwiseXORExpression" params="In, Yield" id="prod-BitwiseXORExpression">
    <emu-nt params="In, Yield"><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="67b2e707"><emu-nt params="?In, ?Yield"><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="2519f36e"><emu-nt params="?In, ?Yield"><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>^</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BitwiseORExpression" params="In, Yield" id="prod-BitwiseORExpression">
    <emu-nt params="In, Yield"><a href="#prod-BitwiseORExpression">BitwiseORExpression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9dfaebf6"><emu-nt params="?In, ?Yield"><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="afb46f89"><emu-nt params="?In, ?Yield"><a href="#prod-BitwiseORExpression">BitwiseORExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>|</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.11.1" -->
    <emu-clause id="sec-binary-bitwise-operators-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.12.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-binary-bitwise-operators-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="BitwiseANDExpression" collapsed="">
    <emu-nt><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e6a36509"><emu-nt><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a></emu-nt><emu-t>&amp;</emu-t><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BitwiseXORExpression" collapsed="">
    <emu-nt><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b463172c"><emu-nt><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a></emu-nt><emu-t>^</emu-t><emu-nt><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BitwiseORExpression" collapsed="">
    <emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="016dfa90"><emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt><emu-t>|</emu-t><emu-nt><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.11.2" -->
    <emu-clause id="sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.12.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="BitwiseANDExpression" collapsed="">
    <emu-nt><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e6a36509"><emu-nt><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a></emu-nt><emu-t>&amp;</emu-t><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BitwiseXORExpression" collapsed="">
    <emu-nt><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b463172c"><emu-nt><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a></emu-nt><emu-t>^</emu-t><emu-nt><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BitwiseORExpression" collapsed="">
    <emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="016dfa90"><emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt><emu-t>|</emu-t><emu-nt><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.11.3" -->
    <emu-clause id="sec-binary-bitwise-operators-runtime-semantics-evaluation">
      <h1><span class="secnum">12.12.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-binary-bitwise-operators-runtime-semantics-evaluation">#</a></span></span></h1>
      <p>The production  <emu-grammar><emu-production name="A" collapsed="" id="prod-A" class=" inline">
    <emu-nt><a href="#prod-A">A</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="262863af"><emu-nt><a href="#prod-A">A</a></emu-nt><emu-t placeholder="">@</emu-t><emu-nt>B</emu-nt></emu-rhs>
</emu-production></emu-grammar>, where @ is one of the bitwise operators in the productions above, is evaluated as follows:</p>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <var>A</var>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <var>B</var>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>lnum</var> be ? <emu-xref aoid="ToInt32"><a href="#sec-toint32">ToInt32</a></emu-xref>(<var>lval</var>).</li><li>Let <var>rnum</var> be ? <emu-xref aoid="ToInt32"><a href="#sec-toint32">ToInt32</a></emu-xref>(<var>rval</var>).</li><li>Return the result of applying the bitwise operator @ to <var>lnum</var> and <var>rnum</var>. The result is a signed 32 bit integer.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.12" -->
  <emu-clause id="sec-binary-logical-operators">
    <h1><span class="secnum">12.13</span>Binary Logical Operators<span class="utils"><span class="anchor"><a href="#sec-binary-logical-operators">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="LogicalANDExpression" params="In, Yield" id="prod-LogicalANDExpression">
    <emu-nt params="In, Yield"><a href="#prod-LogicalANDExpression">LogicalANDExpression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="43e84f3f"><emu-nt params="?In, ?Yield"><a href="#prod-BitwiseORExpression">BitwiseORExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="de0d5414"><emu-nt params="?In, ?Yield"><a href="#prod-LogicalANDExpression">LogicalANDExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-BitwiseORExpression">BitwiseORExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="LogicalORExpression" params="In, Yield" id="prod-LogicalORExpression">
    <emu-nt params="In, Yield"><a href="#prod-LogicalORExpression">LogicalORExpression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6ab59bc8"><emu-nt params="?In, ?Yield"><a href="#prod-LogicalANDExpression">LogicalANDExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="03547d4d"><emu-nt params="?In, ?Yield"><a href="#prod-LogicalORExpression">LogicalORExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>||</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-LogicalANDExpression">LogicalANDExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note</span>
      <p>The value produced by a <code>&amp;&amp;</code> or <code>||</code> operator is not necessarily of type Boolean. The value produced will always be the value of one of the two operand expressions.</p>
    </emu-note>

    <!-- es6num="12.12.1" -->
    <emu-clause id="sec-binary-logical-operators-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.13.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-binary-logical-operators-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="LogicalANDExpression" collapsed="">
    <emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3df1d74a"><emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="LogicalORExpression" collapsed="">
    <emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b6453dd9"><emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-t>||</emu-t><emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.12.2" -->
    <emu-clause id="sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.13.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="LogicalANDExpression" collapsed="">
    <emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3df1d74a"><emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="LogicalORExpression" collapsed="">
    <emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b6453dd9"><emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-t>||</emu-t><emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.12.3" -->
    <emu-clause id="sec-binary-logical-operators-runtime-semantics-evaluation">
      <h1><span class="secnum">12.13.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-binary-logical-operators-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="LogicalANDExpression" collapsed="">
    <emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3df1d74a"><emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>false</emu-val>, return <var>lval</var>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt>.</li><li>Return ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LogicalORExpression" collapsed="">
    <emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b6453dd9"><emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-t>||</emu-t><emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>lbool</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(<var>lval</var>).</li><li>If <var>lbool</var> is <emu-val>true</emu-val>, return <var>lval</var>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt>.</li><li>Return ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.13" -->
  <emu-clause id="sec-conditional-operator">
    <h1><span class="secnum">12.14</span>Conditional Operator ( <code>? :</code> )<span class="utils"><span class="anchor"><a href="#sec-conditional-operator">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="ConditionalExpression" params="In, Yield" id="prod-ConditionalExpression">
    <emu-nt params="In, Yield"><a href="#prod-ConditionalExpression">ConditionalExpression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c932f215"><emu-nt params="?In, ?Yield"><a href="#prod-LogicalORExpression">LogicalORExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="2f0848a3"><emu-nt params="?In, ?Yield"><a href="#prod-LogicalORExpression">LogicalORExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>?</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note</span>
      <p>The grammar for a <emu-nt><a href="#prod-ConditionalExpression">ConditionalExpression</a></emu-nt> in ECMAScript is slightly different from that in C and Java, which each allow the second subexpression to be an <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> but restrict the third expression to be a <emu-nt><a href="#prod-ConditionalExpression">ConditionalExpression</a></emu-nt>.
 The motivation for this difference in ECMAScript is to allow an 
assignment expression to be governed by either arm of a conditional and 
to eliminate the confusing and fairly useless case of a comma expression
 as the centre expression.</p>
    </emu-note>

    <!-- es6num="12.13.1" -->
    <emu-clause id="sec-conditional-operator-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.14.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-conditional-operator-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="ConditionalExpression" collapsed="">
    <emu-nt><a href="#prod-ConditionalExpression">ConditionalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="42ec48bb"><emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-t>?</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.13.2" -->
    <emu-clause id="sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.14.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="ConditionalExpression" collapsed="">
    <emu-nt><a href="#prod-ConditionalExpression">ConditionalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="42ec48bb"><emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-t>?</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.13.3" -->
    <emu-clause id="sec-conditional-operator-runtime-semantics-evaluation">
      <h1><span class="secnum">12.14.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-conditional-operator-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="ConditionalExpression" collapsed="">
    <emu-nt><a href="#prod-ConditionalExpression">ConditionalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="42ec48bb"><emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-t>?</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt>.</li><li>Let <var>lval</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>)).</li><li>If <var>lval</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>trueRef</var> be the result of evaluating the first <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Return ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>trueRef</var>).</li></ol></li><li>Else,<ol><li>Let <var>falseRef</var> be the result of evaluating the second <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Return ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>falseRef</var>).
      </li></ol></li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.14" -->
  <emu-clause id="sec-assignment-operators">
    <h1><span class="secnum">12.15</span>Assignment Operators<span class="utils"><span class="anchor"><a href="#sec-assignment-operators">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="AssignmentExpression" params="In, Yield" id="prod-AssignmentExpression">
    <emu-nt params="In, Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0e9e3100"><emu-nt params="?In, ?Yield"><a href="#prod-ConditionalExpression">ConditionalExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="197afb63" constraints="+Yield"><emu-constraints>[+Yield]</emu-constraints><emu-nt params="?In"><a href="#prod-YieldExpression">YieldExpression</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="a9fcaed4"><emu-nt params="?In, ?Yield"><a href="#prod-ArrowFunction">ArrowFunction</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="assignment"><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>=</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="10c3e4bb"><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt><a href="#prod-AssignmentOperator">AssignmentOperator</a></emu-nt><emu-nt params="?In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="AssignmentOperator" oneof="" id="prod-AssignmentOperator">
    <emu-nt><a href="#prod-AssignmentOperator">AssignmentOperator</a></emu-nt><emu-geq>:</emu-geq><emu-oneof>one of</emu-oneof><emu-rhs><emu-t>*=</emu-t><emu-t>/=</emu-t><emu-t>%=</emu-t><emu-t>+=</emu-t><emu-t>-=</emu-t><emu-t>&lt;&lt;=</emu-t><emu-t>&gt;&gt;=</emu-t><emu-t>&gt;&gt;&gt;=</emu-t><emu-t>&amp;=</emu-t><emu-t>^=</emu-t><emu-t>|=</emu-t><emu-t>**=</emu-t></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.14.1" -->
    <emu-clause id="sec-assignment-operators-static-semantics-early-errors">
      <h1><span class="secnum">12.15.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-assignment-operators-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="AssignmentExpression" collapsed="">
    <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8a33cee0"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is either an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> or an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt> and the lexical token sequence matched by <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> cannot be parsed with no tokens left over using <emu-nt><a href="#prod-AssignmentPattern">AssignmentPattern</a></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.
        
        </li>
        <li>
          It is an early <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> Error if <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt> and IsValidSimpleAssignmentTarget of <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is <emu-val>false</emu-val>.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="AssignmentExpression" collapsed="">
    <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5f3a8747"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-nt><a href="#prod-AssignmentOperator">AssignmentOperator</a></emu-nt><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is an early <emu-xref href="#sec-reference-specification-type"><a href="#sec-reference-specification-type">Reference</a></emu-xref> Error if IsValidSimpleAssignmentTarget of <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is <emu-val>false</emu-val>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="12.14.2" -->
    <emu-clause id="sec-assignment-operators-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.15.2</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-assignment-operators-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="AssignmentExpression" collapsed="">
    <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2bdf3b10"><emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="AssignmentExpression">
    <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5202c84b"><emu-nt><a href="#prod-YieldExpression">YieldExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="8a33cee0"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="5f3a8747"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-nt><a href="#prod-AssignmentOperator">AssignmentOperator</a></emu-nt><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.14.3" -->
    <emu-clause id="sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.15.3</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="AssignmentExpression">
    <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5202c84b"><emu-nt><a href="#prod-YieldExpression">YieldExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="2bdf3b10"><emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt></emu-rhs>
    <emu-rhs a="8a33cee0"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="5f3a8747"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-nt><a href="#prod-AssignmentOperator">AssignmentOperator</a></emu-nt><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.14.4" -->
    <emu-clause id="sec-assignment-operators-runtime-semantics-evaluation">
      <h1><span class="secnum">12.15.4</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-assignment-operators-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="AssignmentExpression" params="In, Yield" collapsed="">
    <emu-nt params="In, Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4894ae74"><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>=</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>If <emu-xref aoid="IsAnonymousFunctionDefinition"><a href="#sec-isanonymousfunctiondefinition">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>rval</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>rval</var>, <emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>lref</var>)).</li></ol></li><li>Perform ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lref</var>, <var>rval</var>).</li><li>Return <var>rval</var>.</li></ol></li><li>Let <var>assignmentPattern</var> be the parse of the source text corresponding to <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> using <emu-nt params="?Yield"><a href="#prod-AssignmentPattern">AssignmentPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>status</var> be the result of performing DestructuringAssignmentEvaluation of <var>assignmentPattern</var> using <var>rval</var> as the argument.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return <var>rval</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="AssignmentExpression" collapsed="">
    <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5f3a8747"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-nt><a href="#prod-AssignmentOperator">AssignmentOperator</a></emu-nt><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>lval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).</li><li>Let <var>op</var> be the <code>@</code> where <emu-nt><a href="#prod-AssignmentOperator">AssignmentOperator</a></emu-nt> is <code>@=</code>.</li><li>Let <var>r</var> be the result of applying <var>op</var> to <var>lval</var> and <var>rval</var> as if evaluating the expression <var>lval</var> <var>op</var> <var>rval</var>.</li><li>Perform ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lref</var>, <var>r</var>).</li><li>Return <var>r</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>When an assignment occurs within <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, it is an runtime error if <var>lref</var> in step 1.f of the first algorithm or step 7 of the second algorithm it is an unresolvable reference. If it is, a <emu-val>ReferenceError</emu-val> exception is thrown. The <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> also may not be a reference to a data property with the attribute value {[[Writable]]: <emu-val>false</emu-val>}, to an accessor property with the attribute value {[[Set]]: <emu-val>undefined</emu-val>}, nor to a non-existent property of an object for which the <emu-xref aoid="IsExtensible"><a href="#sec-isextensible-o">IsExtensible</a></emu-xref> predicate returns the value <emu-val>false</emu-val>. In these cases a <emu-val>TypeError</emu-val> exception is thrown.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="12.14.5" -->
    <emu-clause id="sec-destructuring-assignment">
      <h1><span class="secnum">12.15.5</span>Destructuring Assignment<span class="utils"><span class="anchor"><a href="#sec-destructuring-assignment">#</a></span></span></h1>
      <h2>Supplemental Syntax</h2>
      <p>In certain circumstances when processing the production  <emu-grammar><emu-production name="AssignmentExpression" collapsed="" class=" inline">
    <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8a33cee0"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> the following grammar is used to refine the interpretation of <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt>.</p>
      <emu-grammar><emu-production name="AssignmentPattern" params="Yield" id="prod-AssignmentPattern">
    <emu-nt params="Yield"><a href="#prod-AssignmentPattern">AssignmentPattern</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1fdd62e7"><emu-nt params="?Yield"><a href="#prod-ObjectAssignmentPattern">ObjectAssignmentPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="997ba3e8"><emu-nt params="?Yield"><a href="#prod-ArrayAssignmentPattern">ArrayAssignmentPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ObjectAssignmentPattern" params="Yield" id="prod-ObjectAssignmentPattern">
    <emu-nt params="Yield"><a href="#prod-ObjectAssignmentPattern">ObjectAssignmentPattern</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="c875869a"><emu-t>{</emu-t><emu-nt params="?Yield"><a href="#prod-AssignmentPropertyList">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="a77d3111"><emu-t>{</emu-t><emu-nt params="?Yield"><a href="#prod-AssignmentPropertyList">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="ArrayAssignmentPattern" params="Yield" id="prod-ArrayAssignmentPattern">
    <emu-nt params="Yield"><a href="#prod-ArrayAssignmentPattern">ArrayAssignmentPattern</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b6d9fd11"><emu-t>[</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="?Yield" optional=""><a href="#prod-AssignmentRestElement">AssignmentRestElement</a><emu-mods><emu-params>[?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="83ec6ea3"><emu-t>[</emu-t><emu-nt params="?Yield"><a href="#prod-AssignmentElementList">AssignmentElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="2373f32c"><emu-t>[</emu-t><emu-nt params="?Yield"><a href="#prod-AssignmentElementList">AssignmentElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="?Yield" optional=""><a href="#prod-AssignmentRestElement">AssignmentRestElement</a><emu-mods><emu-params>[?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production>
<emu-production name="AssignmentPropertyList" params="Yield" id="prod-AssignmentPropertyList">
    <emu-nt params="Yield"><a href="#prod-AssignmentPropertyList">AssignmentPropertyList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8b7dd9b5"><emu-nt params="?Yield"><a href="#prod-AssignmentProperty">AssignmentProperty</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="39c3c4c3"><emu-nt params="?Yield"><a href="#prod-AssignmentPropertyList">AssignmentPropertyList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="?Yield"><a href="#prod-AssignmentProperty">AssignmentProperty</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="AssignmentElementList" params="Yield" id="prod-AssignmentElementList">
    <emu-nt params="Yield"><a href="#prod-AssignmentElementList">AssignmentElementList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="21577372"><emu-nt params="?Yield"><a href="#prod-AssignmentElisionElement">AssignmentElisionElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="780dc7c4"><emu-nt params="?Yield"><a href="#prod-AssignmentElementList">AssignmentElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="?Yield"><a href="#prod-AssignmentElisionElement">AssignmentElisionElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="AssignmentElisionElement" params="Yield" id="prod-AssignmentElisionElement">
    <emu-nt params="Yield"><a href="#prod-AssignmentElisionElement">AssignmentElisionElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="baef3882"><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-AssignmentElement">AssignmentElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="AssignmentProperty" params="Yield" id="prod-AssignmentProperty">
    <emu-nt params="Yield"><a href="#prod-AssignmentProperty">AssignmentProperty</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81069e6c"><emu-nt params="?Yield"><a href="#prod-IdentifierReference">IdentifierReference</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="+In, ?Yield" optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[+In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="31019130"><emu-nt params="?Yield"><a href="#prod-PropertyName">PropertyName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params="?Yield"><a href="#prod-AssignmentElement">AssignmentElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="AssignmentElement" params="Yield" id="prod-AssignmentElement">
    <emu-nt params="Yield"><a href="#prod-AssignmentElement">AssignmentElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cb222e48"><emu-nt params="?Yield"><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="+In, ?Yield" optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[+In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="AssignmentRestElement" params="Yield" id="prod-AssignmentRestElement">
    <emu-nt params="Yield"><a href="#prod-AssignmentRestElement">AssignmentRestElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5ea38f97"><emu-t>...</emu-t><emu-nt params="?Yield"><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="DestructuringAssignmentTarget" params="Yield" id="prod-DestructuringAssignmentTarget">
    <emu-nt params="Yield"><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="377fae86"><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

      <!-- es6num="12.14.5.1" -->
      <emu-clause id="sec-destructuring-assignment-static-semantics-early-errors">
        <h1><span class="secnum">12.15.5.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-destructuring-assignment-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="AssignmentProperty" collapsed="">
    <emu-nt><a href="#prod-AssignmentProperty">AssignmentProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c55f7708"><emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if IsValidSimpleAssignmentTarget of <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt> is <emu-val>false</emu-val>.
          
          </li>
        </ul>
        <emu-grammar><emu-production name="DestructuringAssignmentTarget" collapsed="">
    <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="825a817a"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is either an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> or an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt> and if the lexical token sequence matched by <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> cannot be parsed with no tokens left over using <emu-nt><a href="#prod-AssignmentPattern">AssignmentPattern</a></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.
          
          </li>
          <li>
            It is a Syntax Error if <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is neither an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt> and IsValidSimpleAssignmentTarget(<emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt>) is <emu-val>false</emu-val>.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="12.14.5.2" -->
      <emu-clause id="sec-runtime-semantics-destructuringassignmentevaluation">
        <h1><span class="secnum">12.15.5.2</span>Runtime Semantics: DestructuringAssignmentEvaluation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-destructuringassignmentevaluation">#</a></span></span></h1>
        <p>with parameter <var>value</var></p>
        <emu-grammar><emu-production name="ObjectAssignmentPattern" collapsed="">
    <emu-nt><a href="#prod-ObjectAssignmentPattern">ObjectAssignmentPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Perform ? <emu-xref aoid="RequireObjectCoercible"><a href="#sec-requireobjectcoercible">RequireObjectCoercible</a></emu-xref>(<var>value</var>).</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ObjectAssignmentPattern">
    <emu-nt><a href="#prod-ObjectAssignmentPattern">ObjectAssignmentPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="02d75808"><emu-t>{</emu-t><emu-nt><a href="#prod-AssignmentPropertyList">AssignmentPropertyList</a></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="831120ec"><emu-t>{</emu-t><emu-nt><a href="#prod-AssignmentPropertyList">AssignmentPropertyList</a></emu-nt><emu-t>,</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Perform ? <emu-xref aoid="RequireObjectCoercible"><a href="#sec-requireobjectcoercible">RequireObjectCoercible</a></emu-xref>(<var>value</var>).</li><li>Return the result of performing DestructuringAssignmentEvaluation for <emu-nt><a href="#prod-AssignmentPropertyList">AssignmentPropertyList</a></emu-nt> using <var>value</var> as the argument.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayAssignmentPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayAssignmentPattern">ArrayAssignmentPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="99d85234"><emu-t>[</emu-t><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>iterator</var> be ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(<var>value</var>).</li><li>Return ? <emu-xref aoid="IteratorClose"><a href="#sec-iteratorclose">IteratorClose</a></emu-xref>(<var>iterator</var>, <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>)).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayAssignmentPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayAssignmentPattern">ArrayAssignmentPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="31ffe6b2"><emu-t>[</emu-t><emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>iterator</var> be ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(<var>value</var>).</li><li>Let <var>iteratorRecord</var> be <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> {[[Iterator]]: <var>iterator</var>, [[Done]]: <emu-val>false</emu-val>}.</li><li>Let <var>result</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, return ? <emu-xref aoid="IteratorClose"><a href="#sec-iteratorclose">IteratorClose</a></emu-xref>(<var>iterator</var>, <var>result</var>).</li><li>Return <var>result</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayAssignmentPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayAssignmentPattern">ArrayAssignmentPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="72641904"><emu-t>[</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-AssignmentRestElement">AssignmentRestElement</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>iterator</var> be ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(<var>value</var>).</li><li>Let <var>iteratorRecord</var> be <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> {[[Iterator]]: <var>iterator</var>, [[Done]]: <emu-val>false</emu-val>}.</li><li>If <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> is present, then<ol><li>Let <var>status</var> be the result of performing ? IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>NOTE: In the event of an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, the above IteratorDestructuringAssignmentEvaluation will always set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Let <var>result</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-AssignmentRestElement">AssignmentRestElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, return ? <emu-xref aoid="IteratorClose"><a href="#sec-iteratorclose">IteratorClose</a></emu-xref>(<var>iterator</var>, <var>result</var>).</li><li>Return <var>result</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayAssignmentPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayAssignmentPattern">ArrayAssignmentPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="815ecab3"><emu-t>[</emu-t><emu-nt><a href="#prod-AssignmentElementList">AssignmentElementList</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>iterator</var> be ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(<var>value</var>).</li><li>Let <var>iteratorRecord</var> be <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> {[[Iterator]]: <var>iterator</var>, [[Done]]: <emu-val>false</emu-val>}.</li><li>Let <var>result</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-AssignmentElementList">AssignmentElementList</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, return ? <emu-xref aoid="IteratorClose"><a href="#sec-iteratorclose">IteratorClose</a></emu-xref>(<var>iterator</var>, <var>result</var>).</li><li>Return <var>result</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayAssignmentPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayAssignmentPattern">ArrayAssignmentPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cd334403"><emu-t>[</emu-t><emu-nt><a href="#prod-AssignmentElementList">AssignmentElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt optional=""><a href="#prod-AssignmentRestElement">AssignmentRestElement</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>iterator</var> be ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(<var>value</var>).</li><li>Let <var>iteratorRecord</var> be <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> {[[Iterator]]: <var>iterator</var>, [[Done]]: <emu-val>false</emu-val>}.</li><li>Let <var>status</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-AssignmentElementList">AssignmentElementList</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li><li>If <var>status</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, return ? <emu-xref aoid="IteratorClose"><a href="#sec-iteratorclose">IteratorClose</a></emu-xref>(<var>iterator</var>, <var>status</var>).</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>If <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> is present, then<ol><li>Let <var>status</var> be the result of performing ? IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li>NOTE: In the event of an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, the above IteratorDestructuringAssignmentEvaluation will always set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <emu-nt><a href="#prod-AssignmentRestElement">AssignmentRestElement</a></emu-nt> is present, then<ol><li>Let <var>status</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-AssignmentRestElement">AssignmentRestElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, return ? <emu-xref aoid="IteratorClose"><a href="#sec-iteratorclose">IteratorClose</a></emu-xref>(<var>iterator</var>, <var>status</var>).</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>status</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="AssignmentPropertyList" collapsed="">
    <emu-nt><a href="#prod-AssignmentPropertyList">AssignmentPropertyList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c3680459"><emu-nt><a href="#prod-AssignmentPropertyList">AssignmentPropertyList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-AssignmentProperty">AssignmentProperty</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>status</var> be the result of performing DestructuringAssignmentEvaluation for <emu-nt><a href="#prod-AssignmentPropertyList">AssignmentPropertyList</a></emu-nt> using <var>value</var> as the argument.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return the result of performing DestructuringAssignmentEvaluation for <emu-nt><a href="#prod-AssignmentProperty">AssignmentProperty</a></emu-nt> using <var>value</var> as the argument.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="AssignmentProperty" collapsed="">
    <emu-nt><a href="#prod-AssignmentProperty">AssignmentProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c55f7708"><emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>P</var> be StringValue of <emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt>.</li><li>Let <var>lref</var> be ? <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(<var>P</var>).</li><li>Let <var>v</var> be ? <emu-xref aoid="GetV"><a href="#sec-getv">GetV</a></emu-xref>(<var>value</var>, <var>P</var>).</li><li>If <emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>defaultValue</var>).</li><li>If <emu-xref aoid="IsAnonymousFunctionDefinition"><a href="#sec-isanonymousfunctiondefinition">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>v</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>v</var>, <var>P</var>).</li></ol></li></ol></li><li>Return ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="AssignmentProperty" collapsed="">
    <emu-nt><a href="#prod-AssignmentProperty">AssignmentProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c9ac8882"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-AssignmentElement">AssignmentElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>name</var> be the result of evaluating <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>name</var>).</li><li>Return the result of performing KeyedDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-AssignmentElement">AssignmentElement</a></emu-nt> with <var>value</var> and <var>name</var> as the arguments.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.14.5.3" -->
      <emu-clause id="sec-runtime-semantics-iteratordestructuringassignmentevaluation">
        <h1><span class="secnum">12.15.5.3</span>Runtime Semantics: IteratorDestructuringAssignmentEvaluation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-iteratordestructuringassignmentevaluation">#</a></span></span></h1>
        <p>with parameters <var>iteratorRecord</var></p>
        <emu-grammar><emu-production name="AssignmentElementList" collapsed="">
    <emu-nt><a href="#prod-AssignmentElementList">AssignmentElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e2bbd46c"><emu-nt><a href="#prod-AssignmentElisionElement">AssignmentElisionElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-AssignmentElisionElement">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="AssignmentElementList" collapsed="">
    <emu-nt><a href="#prod-AssignmentElementList">AssignmentElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bdc5c277"><emu-nt><a href="#prod-AssignmentElementList">AssignmentElementList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-AssignmentElisionElement">AssignmentElisionElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>status</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-AssignmentElementList">AssignmentElementList</a></emu-nt> using <var>iteratorRecord</var> as the argument.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-AssignmentElisionElement">AssignmentElisionElement</a></emu-nt> using <var>iteratorRecord</var> as the argument.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="AssignmentElisionElement" collapsed="">
    <emu-nt><a href="#prod-AssignmentElisionElement">AssignmentElisionElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="816d4abc"><emu-nt><a href="#prod-AssignmentElement">AssignmentElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-AssignmentElement">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="AssignmentElisionElement" collapsed="">
    <emu-nt><a href="#prod-AssignmentElisionElement">AssignmentElisionElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="696f42ef"><emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-nt><a href="#prod-AssignmentElement">AssignmentElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>status</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-AssignmentElement">AssignmentElement</a></emu-nt> with <var>iteratorRecord</var> as the argument.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="Elision" collapsed="">
    <emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9471f753"><emu-t>,</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>next</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="Elision" collapsed="">
    <emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="806d0124"><emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-t>,</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>status</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>next</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="AssignmentElement" params="Yield" collapsed="">
    <emu-nt params="Yield"><a href="#prod-AssignmentElement">AssignmentElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a73ccacf"><emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>next</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>value</var> be <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>value</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>value</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is present and <var>value</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li><li>Else, let <var>v</var> be <var>value</var>.</li><li>If <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> or an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>nestedAssignmentPattern</var> be the parse of the source text corresponding to <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> using either <emu-nt params="~Yield"><a href="#prod-AssignmentPattern">AssignmentPattern</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt> or <emu-nt params="+Yield"><a href="#prod-AssignmentPattern">AssignmentPattern</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> depending upon whether this <emu-nt><a href="#prod-AssignmentElement">AssignmentElement</a></emu-nt> has the <sub>[Yield]</sub> parameter.</li><li>Return the result of performing DestructuringAssignmentEvaluation of <var>nestedAssignmentPattern</var> with <var>v</var> as the argument.</li></ol></li><li>If <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is present and <var>value</var> is <emu-val>undefined</emu-val> and <emu-xref aoid="IsAnonymousFunctionDefinition"><a href="#sec-isanonymousfunctiondefinition">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>v</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>v</var>, <emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>lref</var>)).</li></ol></li><li>Return ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lref</var>, <var>v</var>).
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>Left to right evaluation order is maintained by evaluating a <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> that is not a destructuring pattern prior to accessing the iterator or evaluating the <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</p>
        </emu-note>
        <emu-grammar><emu-production name="AssignmentRestElement" params="Yield" collapsed="">
    <emu-nt params="Yield"><a href="#prod-AssignmentRestElement">AssignmentRestElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf470c76"><emu-t>...</emu-t><emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>A</var> be <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat while <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>,<ol><li>Let <var>next</var> be <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>next</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>nextValue</var> be <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Let <var>status</var> be <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>A</var>, ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>n</var>), <var>nextValue</var>).</li><li>Assert: <var>status</var> is <emu-val>true</emu-val>.</li><li>Increment <var>n</var> by 1.</li></ol></li></ol></li><li>If <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt>, then<ol><li>Return ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lref</var>, <var>A</var>).</li></ol></li><li>Let <var>nestedAssignmentPattern</var> be the parse of the source text corresponding to <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> using either <emu-nt params="~Yield"><a href="#prod-AssignmentPattern">AssignmentPattern</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt> or <emu-nt params="+Yield"><a href="#prod-AssignmentPattern">AssignmentPattern</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> depending upon whether this <emu-nt><a href="#prod-AssignmentRestElement">AssignmentRestElement</a></emu-nt> has the <sub>[Yield]</sub> parameter.</li><li>Return the result of performing DestructuringAssignmentEvaluation of <var>nestedAssignmentPattern</var> with <var>A</var> as the argument.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="12.14.5.4" -->
      <emu-clause id="sec-runtime-semantics-keyeddestructuringassignmentevaluation">
        <h1><span class="secnum">12.15.5.4</span>Runtime Semantics: KeyedDestructuringAssignmentEvaluation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-keyeddestructuringassignmentevaluation">#</a></span></span></h1>
        <p>with parameters <var>value</var> and <var>propertyName</var></p>
        <emu-grammar><emu-production name="AssignmentElement" params="Yield" collapsed="">
    <emu-nt params="Yield"><a href="#prod-AssignmentElement">AssignmentElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a73ccacf"><emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> is neither an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> nor an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>lref</var>).</li></ol></li><li>Let <var>v</var> be ? <emu-xref aoid="GetV"><a href="#sec-getv">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>rhsValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li><li>Else, let <var>rhsValue</var> be <var>v</var>.</li><li>If <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> is an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> or an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt>, then<ol><li>Let <var>assignmentPattern</var> be the parse of the source text corresponding to <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> using either <emu-nt params="~Yield"><a href="#prod-AssignmentPattern">AssignmentPattern</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt> or <emu-nt params="+Yield"><a href="#prod-AssignmentPattern">AssignmentPattern</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> depending upon whether this <emu-nt><a href="#prod-AssignmentElement">AssignmentElement</a></emu-nt> has the <sub>[Yield]</sub> parameter.</li><li>Return the result of performing DestructuringAssignmentEvaluation of <var>assignmentPattern</var> with <var>rhsValue</var> as the argument.</li></ol></li><li>If <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val> and <emu-xref aoid="IsAnonymousFunctionDefinition"><a href="#sec-isanonymousfunctiondefinition">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>) and IsIdentifierRef of <emu-nt><a href="#prod-DestructuringAssignmentTarget">DestructuringAssignmentTarget</a></emu-nt> are both <emu-val>true</emu-val>, then<ol><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>rhsValue</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>rhsValue</var>, <emu-xref href="#ao-getreferencedname"><a href="#ao-getreferencedname">GetReferencedName</a></emu-xref>(<var>lref</var>)).</li></ol></li><li>Return ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lref</var>, <var>rhsValue</var>).
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="12.15" -->
  <emu-clause id="sec-comma-operator">
    <h1><span class="secnum">12.16</span>Comma Operator ( <code>,</code> )<span class="utils"><span class="anchor"><a href="#sec-comma-operator">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="Expression" params="In, Yield" id="prod-Expression">
    <emu-nt params="In, Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="786f9dbf"><emu-nt params="?In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="903ff309"><emu-nt params="?In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="12.15.1" -->
    <emu-clause id="sec-comma-operator-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">12.16.1</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-comma-operator-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="Expression" collapsed="">
    <emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b039a65"><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.15.2" -->
    <emu-clause id="sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget">
      <h1><span class="secnum">12.16.2</span>Static Semantics: IsValidSimpleAssignmentTarget<span class="utils"><span class="anchor"><a href="#sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget">#</a></span></span></h1>
      <emu-see-also-para op="IsValidSimpleAssignmentTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="Expression" collapsed="">
    <emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b039a65"><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="12.15.3" -->
    <emu-clause id="sec-comma-operator-runtime-semantics-evaluation">
      <h1><span class="secnum">12.16.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-comma-operator-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="Expression" collapsed="">
    <emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b039a65"><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lref</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Perform ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>lref</var>).</li><li>Let <var>rref</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Return ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rref</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p><emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref> must be called even though its value is not used because it may have observable side-effects.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>
</emu-clause>

<!-- es6num="13" -->
<emu-clause id="sec-ecmascript-language-statements-and-declarations">
  <h1><span class="secnum">13</span>ECMAScript Language: Statements and Declarations<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-statements-and-declarations">#</a></span></span></h1>
  <h2>Syntax</h2>
  <emu-grammar><emu-production name="Statement" params="Yield, Return" id="prod-Statement">
    <emu-nt params="Yield, Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a078de59"><emu-nt params="?Yield, ?Return"><a href="#prod-BlockStatement">BlockStatement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="0829ccbc"><emu-nt params="?Yield"><a href="#prod-VariableStatement">VariableStatement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="7338aabb"><emu-nt><a href="#prod-EmptyStatement">EmptyStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="bf83eb13"><emu-nt params="?Yield"><a href="#prod-ExpressionStatement">ExpressionStatement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="74e1fb03"><emu-nt params="?Yield, ?Return"><a href="#prod-IfStatement">IfStatement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="dc2a2400"><emu-nt params="?Yield, ?Return"><a href="#prod-BreakableStatement">BreakableStatement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="b9a5a50f"><emu-nt params="?Yield"><a href="#prod-ContinueStatement">ContinueStatement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="c8c4fc64"><emu-nt params="?Yield"><a href="#prod-BreakStatement">BreakStatement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="27633cf7" constraints="+Return"><emu-constraints>[+Return]</emu-constraints><emu-nt params="?Yield"><a href="#prod-ReturnStatement">ReturnStatement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="6530a28f"><emu-nt params="?Yield, ?Return"><a href="#prod-WithStatement">WithStatement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="86b75733"><emu-nt params="?Yield, ?Return"><a href="#prod-LabelledStatement">LabelledStatement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="6b7b863f"><emu-nt params="?Yield"><a href="#prod-ThrowStatement">ThrowStatement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="1f0b6d58"><emu-nt params="?Yield, ?Return"><a href="#prod-TryStatement">TryStatement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="21212edb"><emu-nt><a href="#prod-DebuggerStatement">DebuggerStatement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="Declaration" params="Yield" id="prod-Declaration">
    <emu-nt params="Yield"><a href="#prod-Declaration">Declaration</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f6dd1f6c"><emu-nt params="?Yield, ~Default"><a href="#prod-HoistableDeclaration">HoistableDeclaration</a><emu-mods><emu-params>[?Yield, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="39ba9ba9"><emu-nt params="?Yield, ~Default"><a href="#prod-ClassDeclaration">ClassDeclaration</a><emu-mods><emu-params>[?Yield, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="8a27d2a6"><emu-nt params="+In, ?Yield"><a href="#prod-LexicalDeclaration">LexicalDeclaration</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="HoistableDeclaration" params="Yield, Default" id="prod-HoistableDeclaration">
    <emu-nt params="Yield, Default"><a href="#prod-HoistableDeclaration">HoistableDeclaration</a><emu-mods><emu-params>[Yield, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a1547821"><emu-nt params="?Yield, ?Default"><a href="#prod-FunctionDeclaration">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ?Default]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="967c0035"><emu-nt params="?Yield, ?Default"><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a><emu-mods><emu-params>[?Yield, ?Default]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BreakableStatement" params="Yield, Return" id="prod-BreakableStatement">
    <emu-nt params="Yield, Return"><a href="#prod-BreakableStatement">BreakableStatement</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a132b5c7"><emu-nt params="?Yield, ?Return"><a href="#prod-IterationStatement">IterationStatement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="ce99464e"><emu-nt params="?Yield, ?Return"><a href="#prod-SwitchStatement">SwitchStatement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

  <!-- es6num="13.1" -->
  <emu-clause id="sec-statement-semantics">
    <h1><span class="secnum">13.1</span>Statement Semantics<span class="utils"><span class="anchor"><a href="#sec-statement-semantics">#</a></span></span></h1>

    <!-- es6num="13.1.1" -->
    <emu-clause id="sec-statement-semantics-static-semantics-containsduplicatelabels">
      <h1><span class="secnum">13.1.1</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-statement-semantics-static-semantics-containsduplicatelabels">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
      <emu-grammar><emu-production name="Statement">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8b0c0df0"><emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="7338aabb"><emu-nt><a href="#prod-EmptyStatement">EmptyStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="1d7d329e"><emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="ab8baff9"><emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="867b4090"><emu-nt><a href="#prod-ThrowStatement">ThrowStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="21212edb"><emu-nt><a href="#prod-DebuggerStatement">DebuggerStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.1.2" -->
    <emu-clause id="sec-statement-semantics-static-semantics-containsundefinedbreaktarget">
      <h1><span class="secnum">13.1.2</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-statement-semantics-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="Statement">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8b0c0df0"><emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="7338aabb"><emu-nt><a href="#prod-EmptyStatement">EmptyStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="1d7d329e"><emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="867b4090"><emu-nt><a href="#prod-ThrowStatement">ThrowStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="21212edb"><emu-nt><a href="#prod-DebuggerStatement">DebuggerStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.1.3" -->
    <emu-clause id="sec-statement-semantics-static-semantics-containsundefinedcontinuetarget">
      <h1><span class="secnum">13.1.3</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-statement-semantics-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="Statement">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8b0c0df0"><emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="7338aabb"><emu-nt><a href="#prod-EmptyStatement">EmptyStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="ab8baff9"><emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="867b4090"><emu-nt><a href="#prod-ThrowStatement">ThrowStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="21212edb"><emu-nt><a href="#prod-DebuggerStatement">DebuggerStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="BreakableStatement" collapsed="">
    <emu-nt><a href="#prod-BreakableStatement">BreakableStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="28c5e5e3"><emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>newIterationSet</var> be a copy of <var>iterationSet</var> with all the elements of <var>labelSet</var> appended.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt> with arguments <var>newIterationSet</var> and Â« Â».
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.1.4" -->
    <emu-clause id="sec-static-semantics-declarationpart">
      <h1><span class="secnum">13.1.4</span>Static Semantics: DeclarationPart<span class="utils"><span class="anchor"><a href="#sec-static-semantics-declarationpart">#</a></span></span></h1>
      <emu-grammar><emu-production name="HoistableDeclaration" collapsed="">
    <emu-nt><a href="#prod-HoistableDeclaration">HoistableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="HoistableDeclaration" collapsed="">
    <emu-nt><a href="#prod-HoistableDeclaration">HoistableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4776666d"><emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="Declaration" collapsed="">
    <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6f02b7cd"><emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="Declaration" collapsed="">
    <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8f102805"><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.1.5" -->
    <emu-clause id="sec-statement-semantics-static-semantics-vardeclarednames">
      <h1><span class="secnum">13.1.5</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-statement-semantics-static-semantics-vardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="Statement">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7338aabb"><emu-nt><a href="#prod-EmptyStatement">EmptyStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="1d7d329e"><emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="ab8baff9"><emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="867b4090"><emu-nt><a href="#prod-ThrowStatement">ThrowStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="21212edb"><emu-nt><a href="#prod-DebuggerStatement">DebuggerStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.1.6" -->
    <emu-clause id="sec-statement-semantics-static-semantics-varscopeddeclarations">
      <h1><span class="secnum">13.1.6</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-statement-semantics-static-semantics-varscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="Statement">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7338aabb"><emu-nt><a href="#prod-EmptyStatement">EmptyStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="1d7d329e"><emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="ab8baff9"><emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="aa6f7913"><emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="867b4090"><emu-nt><a href="#prod-ThrowStatement">ThrowStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="21212edb"><emu-nt><a href="#prod-DebuggerStatement">DebuggerStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.1.7" -->
    <emu-clause id="sec-statement-semantics-runtime-semantics-labelledevaluation">
      <h1><span class="secnum">13.1.7</span>Runtime Semantics: LabelledEvaluation<span class="utils"><span class="anchor"><a href="#sec-statement-semantics-runtime-semantics-labelledevaluation">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="LabelledEvaluation"></emu-see-also-para>
      <emu-grammar><emu-production name="BreakableStatement" collapsed="">
    <emu-nt><a href="#prod-BreakableStatement">BreakableStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="28c5e5e3"><emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>stmtResult</var> be the result of performing LabelledEvaluation of <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Target]] is <emu-const>empty</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Value]] is <emu-const>empty</emu-const>, let <var>stmtResult</var> be <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Else, let <var>stmtResult</var> be <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li></ol></li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>stmtResult</var>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="BreakableStatement" collapsed="">
    <emu-nt><a href="#prod-BreakableStatement">BreakableStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9ee88ef9"><emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>stmtResult</var> be the result of evaluating <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Target]] is <emu-const>empty</emu-const>, then<ol><li>If <var>stmtResult</var>.[[Value]] is <emu-const>empty</emu-const>, let <var>stmtResult</var> be <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Else, let <var>stmtResult</var> be <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li></ol></li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>stmtResult</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>A <emu-nt><a href="#prod-BreakableStatement">BreakableStatement</a></emu-nt> is one that can be exited via an unlabelled <emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt>.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="13.1.8" -->
    <emu-clause id="sec-statement-semantics-runtime-semantics-evaluation">
      <h1><span class="secnum">13.1.8</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-statement-semantics-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="HoistableDeclaration">
    <emu-nt><a href="#prod-HoistableDeclaration">HoistableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4776666d"><emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="HoistableDeclaration">
    <emu-nt><a href="#prod-HoistableDeclaration">HoistableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="BreakableStatement">
    <emu-nt><a href="#prod-BreakableStatement">BreakableStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="28c5e5e3"><emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="9ee88ef9"><emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>newLabelSet</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Return the result of performing LabelledEvaluation of this <emu-nt><a href="#prod-BreakableStatement">BreakableStatement</a></emu-nt> with argument <var>newLabelSet</var>.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.2" -->
  <emu-clause id="sec-block">
    <h1><span class="secnum">13.2</span>Block<span class="utils"><span class="anchor"><a href="#sec-block">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="BlockStatement" params="Yield, Return" id="prod-BlockStatement">
    <emu-nt params="Yield, Return"><a href="#prod-BlockStatement">BlockStatement</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6fdf1f1f"><emu-nt params="?Yield, ?Return"><a href="#prod-Block">Block</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="Block" params="Yield, Return" id="prod-Block">
    <emu-nt params="Yield, Return"><a href="#prod-Block">Block</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a890e138"><emu-t>{</emu-t><emu-nt params="?Yield, ?Return" optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="StatementList" params="Yield, Return" id="prod-StatementList">
    <emu-nt params="Yield, Return"><a href="#prod-StatementList">StatementList</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ca6617f3"><emu-nt params="?Yield, ?Return"><a href="#prod-StatementListItem">StatementListItem</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="32cfa255"><emu-nt params="?Yield, ?Return"><a href="#prod-StatementList">StatementList</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield, ?Return"><a href="#prod-StatementListItem">StatementListItem</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="StatementListItem" params="Yield, Return" id="prod-StatementListItem">
    <emu-nt params="Yield, Return"><a href="#prod-StatementListItem">StatementListItem</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a5329c8e"><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="404bc939"><emu-nt params="?Yield"><a href="#prod-Declaration">Declaration</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="13.2.1" -->
    <emu-clause id="sec-block-static-semantics-early-errors">
      <h1><span class="secnum">13.2.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782c9a7"><emu-t>{</emu-t><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> contains any duplicate entries.
        
        </li>
        <li>
          It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="13.2.2" -->
    <emu-clause id="sec-block-static-semantics-containsduplicatelabels">
      <h1><span class="secnum">13.2.2</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-containsduplicatelabels">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.2.3" -->
    <emu-clause id="sec-block-static-semantics-containsundefinedbreaktarget">
      <h1><span class="secnum">13.2.3</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.2.4" -->
    <emu-clause id="sec-block-static-semantics-containsundefinedcontinuetarget">
      <h1><span class="secnum">13.2.4</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.2.5" -->
    <emu-clause id="sec-block-static-semantics-lexicallydeclarednames">
      <h1><span class="secnum">13.2.5</span>Static Semantics: LexicallyDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-lexicallydeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be LexicallyDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the LexicallyDeclaredNames of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> is <emu-grammar><emu-production name="Statement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="08827f68"><emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , return LexicallyDeclaredNames of <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.2.6" -->
    <emu-clause id="sec-block-static-semantics-lexicallyscopeddeclarations">
      <h1><span class="secnum">13.2.6</span>Static Semantics: LexicallyScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-lexicallyscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>declarations</var> be LexicallyScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the LexicallyScopedDeclarations of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> is <emu-grammar><emu-production name="Statement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="08827f68"><emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , return LexicallyScopedDeclarations of <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing DeclarationPart of <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.2.7" -->
    <emu-clause id="sec-block-static-semantics-toplevellexicallydeclarednames">
      <h1><span class="secnum">13.2.7</span>Static Semantics: TopLevelLexicallyDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-toplevellexicallydeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="TopLevelLexicallyDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be TopLevelLexicallyDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the TopLevelLexicallyDeclaredNames of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt> is <emu-grammar><emu-production name="Declaration" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="62452cb6"><emu-nt><a href="#prod-HoistableDeclaration">HoistableDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , then<ol><li>Return Â« Â».</li></ol></li><li>Return the BoundNames of <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>At the top level of a function, or script, function 
declarations are treated like var declarations rather than like lexical 
declarations.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="13.2.8" -->
    <emu-clause id="sec-block-static-semantics-toplevellexicallyscopeddeclarations">
      <h1><span class="secnum">13.2.8</span>Static Semantics: TopLevelLexicallyScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-toplevellexicallyscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="TopLevelLexicallyScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>declarations</var> be TopLevelLexicallyScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the TopLevelLexicallyScopedDeclarations of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt> is <emu-grammar><emu-production name="Declaration" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="62452cb6"><emu-nt><a href="#prod-HoistableDeclaration">HoistableDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , then<ol><li>Return Â« Â».</li></ol></li><li>Return a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.2.9" -->
    <emu-clause id="sec-block-static-semantics-toplevelvardeclarednames">
      <h1><span class="secnum">13.2.9</span>Static Semantics: TopLevelVarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-toplevelvardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="TopLevelVarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be TopLevelVarDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the TopLevelVarDeclaredNames of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt> is <emu-grammar><emu-production name="Declaration" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="62452cb6"><emu-nt><a href="#prod-HoistableDeclaration">HoistableDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , then<ol><li>Return the BoundNames of <emu-nt><a href="#prod-HoistableDeclaration">HoistableDeclaration</a></emu-nt>.</li></ol></li><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> is <emu-grammar><emu-production name="Statement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="08827f68"><emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , return TopLevelVarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>At the top level of a function or script, inner function declarations are treated like var declarations.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="13.2.10" -->
    <emu-clause id="sec-block-static-semantics-toplevelvarscopeddeclarations">
      <h1><span class="secnum">13.2.10</span>Static Semantics: TopLevelVarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-toplevelvarscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="TopLevelVarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>declarations</var> be TopLevelVarScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the TopLevelVarScopedDeclarations of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> is <emu-grammar><emu-production name="Statement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="08827f68"><emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , return TopLevelVarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt> is <emu-grammar><emu-production name="Declaration" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="62452cb6"><emu-nt><a href="#prod-HoistableDeclaration">HoistableDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , then<ol><li>Let <var>declaration</var> be DeclarationPart of <emu-nt><a href="#prod-HoistableDeclaration">HoistableDeclaration</a></emu-nt>.</li><li>Return Â« <var>declaration</var> Â».</li></ol></li><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.2.11" -->
    <emu-clause id="sec-block-static-semantics-vardeclarednames">
      <h1><span class="secnum">13.2.11</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-vardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be VarDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.2.12" -->
    <emu-clause id="sec-block-static-semantics-varscopeddeclarations">
      <h1><span class="secnum">13.2.12</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-block-static-semantics-varscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt>.</li><li>Return <var>declarations</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.2.13" -->
    <emu-clause id="sec-block-runtime-semantics-evaluation">
      <h1><span class="secnum">13.2.13</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-block-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782c9a7"><emu-t>{</emu-t><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>blockEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform <emu-xref aoid="BlockDeclarationInstantiation"><a href="#sec-blockdeclarationinstantiation">BlockDeclarationInstantiation</a></emu-xref>(<emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>, <var>blockEnv</var>).</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>blockEnv</var>.</li><li>Let <var>blockValue</var> be the result of evaluating <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <var>blockValue</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 1</span>
        <p>No matter how control leaves the <emu-nt><a href="#prod-Block">Block</a></emu-nt> the LexicalEnvironment is always restored to its former state.</p>
      </emu-note>
      <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>sl</var> be the result of evaluating <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>sl</var>).</li><li>Let <var>s</var> be the result of evaluating <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>s</var>, <var>sl</var>)).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 2</span>
        <p>The value of a <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is the value of the last value producing item in the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>. For example, the following calls to the <code>eval</code> function all return the value 1:</p>
        <pre><code class="javascript hljs"><span class="hljs-built_in">eval</span>(<span class="hljs-string">"1;;;;;"</span>)
<span class="hljs-built_in">eval</span>(<span class="hljs-string">"1;{}"</span>)
<span class="hljs-built_in">eval</span>(<span class="hljs-string">"1;var a;"</span>)</code></pre>
      </emu-note>
    </emu-clause>

    <!-- es6num="13.2.14" -->
    <emu-clause id="sec-blockdeclarationinstantiation" aoid="BlockDeclarationInstantiation">
      <h1><span class="secnum">13.2.14</span>Runtime Semantics: BlockDeclarationInstantiation( <var>code</var>, <var>env</var> )<span class="utils"><span class="anchor"><a href="#sec-blockdeclarationinstantiation">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>When a <emu-nt><a href="#prod-Block">Block</a></emu-nt> or <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt> production is evaluated a new declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>
 is created and bindings for each block scoped variable, constant, 
function, generator function, or class declared in the block are 
instantiated in the <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</p>
      </emu-note>
      <p>BlockDeclarationInstantiation is performed as follows using arguments <var>code</var> and <var>env</var>. <var>code</var> is the grammar production corresponding to the body of the block. <var>env</var> is the <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> in which bindings are to be created.</p>
      <!--
        WARNING: If you add, remove, rename, or repurpose any variable names
                 within this algorithm, you may need to update
                 #sec-web-compat-blockdeclarationinstantiation accordingly.
      -->
      <emu-alg><ol><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Assert: <var>envRec</var> is a declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</li><li>Let <var>declarations</var> be the LexicallyScopedDeclarations of <var>code</var>.</li><li>For each element <var>d</var> in <var>declarations</var> do<ol><li>For each element <var>dn</var> of the BoundNames of <var>d</var> do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>If <var>d</var> is a <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt> production or a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt> production, then<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>Let <var>fo</var> be the result of performing InstantiateFunctionObject for <var>d</var> with argument <var>env</var>.</li><li>Perform <var>envRec</var>.InitializeBinding(<var>fn</var>, <var>fo</var>).
      </li></ol></li></ol></li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.3" -->
  <emu-clause id="sec-declarations-and-the-variable-statement">
    <h1><span class="secnum">13.3</span>Declarations and the Variable Statement<span class="utils"><span class="anchor"><a href="#sec-declarations-and-the-variable-statement">#</a></span></span></h1>

    <!-- es6num="13.3.1" -->
    <emu-clause id="sec-let-and-const-declarations">
      <h1><span class="secnum">13.3.1</span>Let and Const Declarations<span class="utils"><span class="anchor"><a href="#sec-let-and-const-declarations">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p><code>let</code> and <code>const</code> declarations define variables that are scoped to the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment. The variables are created when their containing <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> is instantiated but may not be accessed in any way until the variable's <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt> is evaluated. A variable defined by a <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt> with an <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is assigned the value of its <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>'s <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt> when the <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt> is evaluated, not when the variable is created. If a <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt> in a <code>let</code> declaration does not have an <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> the variable is assigned the value <emu-val>undefined</emu-val> when the <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt> is evaluated.</p>
      </emu-note>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="LexicalDeclaration" params="In, Yield" id="prod-LexicalDeclaration">
    <emu-nt params="In, Yield"><a href="#prod-LexicalDeclaration">LexicalDeclaration</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c55fb836"><emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-nt params="?In, ?Yield"><a href="#prod-BindingList">BindingList</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production>
<emu-production name="LetOrConst" id="prod-LetOrConst">
    <emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="940c6b54"><emu-t>let</emu-t></emu-rhs>
    <emu-rhs a="36233f0f"><emu-t>const</emu-t></emu-rhs>
</emu-production>
<emu-production name="BindingList" params="In, Yield" id="prod-BindingList">
    <emu-nt params="In, Yield"><a href="#prod-BindingList">BindingList</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="137d39cb"><emu-nt params="?In, ?Yield"><a href="#prod-LexicalBinding">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="300461d5"><emu-nt params="?In, ?Yield"><a href="#prod-BindingList">BindingList</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-LexicalBinding">LexicalBinding</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="LexicalBinding" params="In, Yield" id="prod-LexicalBinding">
    <emu-nt params="In, Yield"><a href="#prod-LexicalBinding">LexicalBinding</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="07d82831"><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?In, ?Yield" optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[?In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="d067a280"><emu-nt params="?Yield"><a href="#prod-BindingPattern">BindingPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?In, ?Yield"><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

      <!-- es6num="13.3.1.1" -->
      <emu-clause id="sec-let-and-const-declarations-static-semantics-early-errors">
        <h1><span class="secnum">13.3.1.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-let-and-const-declarations-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="LexicalDeclaration" collapsed="">
    <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0dea8409"><emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if the BoundNames of <emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt> contains <code>"let"</code>.
          
          </li>
          <li>
            It is a Syntax Error if the BoundNames of <emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt> contains any duplicate entries.
          
          </li>
        </ul>
        <emu-grammar><emu-production name="LexicalBinding" collapsed="">
    <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b9344a8"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is not present and IsConstantDeclaration of the <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt> containing this production is <emu-val>true</emu-val>.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="13.3.1.2" -->
      <emu-clause id="sec-let-and-const-declarations-static-semantics-boundnames">
        <h1><span class="secnum">13.3.1.2</span>Static Semantics: BoundNames<span class="utils"><span class="anchor"><a href="#sec-let-and-const-declarations-static-semantics-boundnames">#</a></span></span></h1>
        <emu-see-also-para op="BoundNames"></emu-see-also-para>
        <emu-grammar><emu-production name="LexicalDeclaration" collapsed="">
    <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0dea8409"><emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingList" collapsed="">
    <emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ede34cd"><emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be the BoundNames of <emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the BoundNames of <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LexicalBinding" collapsed="">
    <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b9344a8"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LexicalBinding" collapsed="">
    <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ddd53e5"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.1.3" -->
      <emu-clause id="sec-let-and-const-declarations-static-semantics-isconstantdeclaration">
        <h1><span class="secnum">13.3.1.3</span>Static Semantics: IsConstantDeclaration<span class="utils"><span class="anchor"><a href="#sec-let-and-const-declarations-static-semantics-isconstantdeclaration">#</a></span></span></h1>
        <emu-see-also-para op="IsConstantDeclaration"></emu-see-also-para>
        <emu-grammar><emu-production name="LexicalDeclaration" collapsed="">
    <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0dea8409"><emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return IsConstantDeclaration of <emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LetOrConst" collapsed="">
    <emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="940c6b54"><emu-t>let</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LetOrConst" collapsed="">
    <emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="36233f0f"><emu-t>const</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.1.4" -->
      <emu-clause id="sec-let-and-const-declarations-runtime-semantics-evaluation">
        <h1><span class="secnum">13.3.1.4</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-let-and-const-declarations-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="LexicalDeclaration" collapsed="">
    <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0dea8409"><emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingList" collapsed="">
    <emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ede34cd"><emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href="#prod-BindingList">BindingList</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LexicalBinding" collapsed="">
    <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>lhs</var> be <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>).</li><li>Return <emu-xref aoid="InitializeReferencedBinding"><a href="#sec-initializereferencedbinding">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <emu-val>undefined</emu-val>).
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>A static semantics rule ensures that this form of <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt> never occurs in a <code>const</code> declaration.</p>
        </emu-note>
        <emu-grammar><emu-production name="LexicalBinding" collapsed="">
    <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="89becb83"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>If <emu-xref aoid="IsAnonymousFunctionDefinition"><a href="#sec-isanonymousfunctiondefinition">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>value</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>value</var>, <var>bindingId</var>).</li></ol></li><li>Return <emu-xref aoid="InitializeReferencedBinding"><a href="#sec-initializereferencedbinding">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>value</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LexicalBinding" collapsed="">
    <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ddd53e5"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Let <var>env</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Return the result of performing BindingInitialization for <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt> using <var>value</var> and <var>env</var> as the arguments.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="13.3.2" -->
    <emu-clause id="sec-variable-statement">
      <h1><span class="secnum">13.3.2</span>Variable Statement<span class="utils"><span class="anchor"><a href="#sec-variable-statement">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>A <code>var</code> statement declares variables that are scoped to the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s VariableEnvironment. Var variables are created when their containing <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> is instantiated and are initialized to <emu-val>undefined</emu-val> when created. Within the scope of any VariableEnvironment a common <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt> may appear in more than one <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> but those declarations collective define only one variable. A variable defined by a <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> with an <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is assigned the value of its <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>'s <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt> when the <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> is executed, not when the variable is created.</p>
      </emu-note>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="VariableStatement" params="Yield" id="prod-VariableStatement">
    <emu-nt params="Yield"><a href="#prod-VariableStatement">VariableStatement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="09407571"><emu-t>var</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-VariableDeclarationList">VariableDeclarationList</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production>
<emu-production name="VariableDeclarationList" params="In, Yield" id="prod-VariableDeclarationList">
    <emu-nt params="In, Yield"><a href="#prod-VariableDeclarationList">VariableDeclarationList</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0f4cd65a"><emu-nt params="?In, ?Yield"><a href="#prod-VariableDeclaration">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="2c3a0675"><emu-nt params="?In, ?Yield"><a href="#prod-VariableDeclarationList">VariableDeclarationList</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="?In, ?Yield"><a href="#prod-VariableDeclaration">VariableDeclaration</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="VariableDeclaration" params="In, Yield" id="prod-VariableDeclaration">
    <emu-nt params="In, Yield"><a href="#prod-VariableDeclaration">VariableDeclaration</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="07d82831"><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?In, ?Yield" optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[?In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="d067a280"><emu-nt params="?Yield"><a href="#prod-BindingPattern">BindingPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?In, ?Yield"><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[?In, ?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

      <!-- es6num="13.3.2.1" -->
      <emu-clause id="sec-variable-statement-static-semantics-boundnames">
        <h1><span class="secnum">13.3.2.1</span>Static Semantics: BoundNames<span class="utils"><span class="anchor"><a href="#sec-variable-statement-static-semantics-boundnames">#</a></span></span></h1>
        <emu-see-also-para op="BoundNames"></emu-see-also-para>
        <emu-grammar><emu-production name="VariableDeclarationList" collapsed="">
    <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a0057011"><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of BoundNames of <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="VariableDeclaration" collapsed="">
    <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b9344a8"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="VariableDeclaration" collapsed="">
    <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ddd53e5"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.2.2" -->
      <emu-clause id="sec-variable-statement-static-semantics-vardeclarednames">
        <h1><span class="secnum">13.3.2.2</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-variable-statement-static-semantics-vardeclarednames">#</a></span></span></h1>
        <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
        <emu-grammar><emu-production name="VariableStatement" collapsed="">
    <emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3347a1bd"><emu-t>var</emu-t><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return BoundNames of <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.2.3" -->
      <emu-clause id="sec-variable-statement-static-semantics-varscopeddeclarations">
        <h1><span class="secnum">13.3.2.3</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-variable-statement-static-semantics-varscopeddeclarations">#</a></span></span></h1>
        <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
        <emu-grammar><emu-production name="VariableDeclarationList" collapsed="">
    <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="377a6210"><emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="VariableDeclarationList" collapsed="">
    <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a0057011"><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt>.</li><li>Append <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> to <var>declarations</var>.</li><li>Return <var>declarations</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.2.4" -->
      <emu-clause id="sec-variable-statement-runtime-semantics-evaluation">
        <h1><span class="secnum">13.3.2.4</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-variable-statement-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="VariableStatement" collapsed="">
    <emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3347a1bd"><emu-t>var</emu-t><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="VariableDeclarationList" collapsed="">
    <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a0057011"><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>next</var> be the result of evaluating <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>Return the result of evaluating <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="VariableDeclaration" collapsed="">
    <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="VariableDeclaration" collapsed="">
    <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="89becb83"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ? <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(<var>bindingId</var>).</li><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>value</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>If <emu-xref aoid="IsAnonymousFunctionDefinition"><a href="#sec-isanonymousfunctiondefinition">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>value</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>value</var>, <var>bindingId</var>).</li></ol></li><li>Return ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lhs</var>, <var>value</var>).
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>If a <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> is nested within a with statement and the <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt> in the <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> is the same as a property name of the binding object of the with statement's object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>, then step 6 will assign <var>value</var> to the property instead of assigning to the VariableEnvironment binding of the <emu-nt><a href="#prod-Identifier">Identifier</a></emu-nt>.</p>
        </emu-note>
        <emu-grammar><emu-production name="VariableDeclaration" collapsed="">
    <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ddd53e5"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>rhs</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>rval</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>rhs</var>).</li><li>Return the result of performing BindingInitialization for <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt> passing <var>rval</var> and <emu-val>undefined</emu-val> as arguments.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="13.3.3" -->
    <emu-clause id="sec-destructuring-binding-patterns">
      <h1><span class="secnum">13.3.3</span>Destructuring Binding Patterns<span class="utils"><span class="anchor"><a href="#sec-destructuring-binding-patterns">#</a></span></span></h1>
      <h2>Syntax</h2>
      <emu-grammar><emu-production name="BindingPattern" params="Yield" id="prod-BindingPattern">
    <emu-nt params="Yield"><a href="#prod-BindingPattern">BindingPattern</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="22a4b38f"><emu-nt params="?Yield"><a href="#prod-ObjectBindingPattern">ObjectBindingPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="4f2a669c"><emu-nt params="?Yield"><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ObjectBindingPattern" params="Yield" id="prod-ObjectBindingPattern">
    <emu-nt params="Yield"><a href="#prod-ObjectBindingPattern">ObjectBindingPattern</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="290caaf8"><emu-t>{</emu-t><emu-nt params="?Yield"><a href="#prod-BindingPropertyList">BindingPropertyList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="eadb5f10"><emu-t>{</emu-t><emu-nt params="?Yield"><a href="#prod-BindingPropertyList">BindingPropertyList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="ArrayBindingPattern" params="Yield" id="prod-ArrayBindingPattern">
    <emu-nt params="Yield"><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f99d733a"><emu-t>[</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="?Yield" optional=""><a href="#prod-BindingRestElement">BindingRestElement</a><emu-mods><emu-params>[?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="b7b304c9"><emu-t>[</emu-t><emu-nt params="?Yield"><a href="#prod-BindingElementList">BindingElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="1fcadd15"><emu-t>[</emu-t><emu-nt params="?Yield"><a href="#prod-BindingElementList">BindingElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="?Yield" optional=""><a href="#prod-BindingRestElement">BindingRestElement</a><emu-mods><emu-params>[?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production>
<emu-production name="BindingPropertyList" params="Yield" id="prod-BindingPropertyList">
    <emu-nt params="Yield"><a href="#prod-BindingPropertyList">BindingPropertyList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="33e60c4b"><emu-nt params="?Yield"><a href="#prod-BindingProperty">BindingProperty</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="17a90c9e"><emu-nt params="?Yield"><a href="#prod-BindingPropertyList">BindingPropertyList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="?Yield"><a href="#prod-BindingProperty">BindingProperty</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BindingElementList" params="Yield" id="prod-BindingElementList">
    <emu-nt params="Yield"><a href="#prod-BindingElementList">BindingElementList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2d312774"><emu-nt params="?Yield"><a href="#prod-BindingElisionElement">BindingElisionElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="c6c3a6f6"><emu-nt params="?Yield"><a href="#prod-BindingElementList">BindingElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="?Yield"><a href="#prod-BindingElisionElement">BindingElisionElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BindingElisionElement" params="Yield" id="prod-BindingElisionElement">
    <emu-nt params="Yield"><a href="#prod-BindingElisionElement">BindingElisionElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6cfe4dc7"><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-BindingElement">BindingElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BindingProperty" params="Yield" id="prod-BindingProperty">
    <emu-nt params="Yield"><a href="#prod-BindingProperty">BindingProperty</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="88cf21e8"><emu-nt params="?Yield"><a href="#prod-SingleNameBinding">SingleNameBinding</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="b1bb3b8f"><emu-nt params="?Yield"><a href="#prod-PropertyName">PropertyName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params="?Yield"><a href="#prod-BindingElement">BindingElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BindingElement" params="Yield" id="prod-BindingElement">
    <emu-nt params="Yield"><a href="#prod-BindingElement">BindingElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="88cf21e8"><emu-nt params="?Yield"><a href="#prod-SingleNameBinding">SingleNameBinding</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="59bf0ad7"><emu-nt params="?Yield"><a href="#prod-BindingPattern">BindingPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="+In, ?Yield" optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[+In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="SingleNameBinding" params="Yield" id="prod-SingleNameBinding">
    <emu-nt params="Yield"><a href="#prod-SingleNameBinding">SingleNameBinding</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f28fbff5"><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="+In, ?Yield" optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-params>[+In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BindingRestElement" params="Yield" id="prod-BindingRestElement">
    <emu-nt params="Yield"><a href="#prod-BindingRestElement">BindingRestElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d895576d"><emu-t>...</emu-t><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="504305e1"><emu-t>...</emu-t><emu-nt params="?Yield"><a href="#prod-BindingPattern">BindingPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

      <!-- es6num="13.3.3.1" -->
      <emu-clause id="sec-destructuring-binding-patterns-static-semantics-boundnames">
        <h1><span class="secnum">13.3.3.1</span>Static Semantics: BoundNames<span class="utils"><span class="anchor"><a href="#sec-destructuring-binding-patterns-static-semantics-boundnames">#</a></span></span></h1>
        <emu-see-also-para op="BoundNames"></emu-see-also-para>
        <emu-grammar><emu-production name="ObjectBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ObjectBindingPattern">ObjectBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="906e476b"><emu-t>[</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0c457c16"><emu-t>[</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8f1a867e"><emu-t>[</emu-t><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ee591d49"><emu-t>[</emu-t><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of BoundNames of <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingPropertyList" collapsed="">
    <emu-nt><a href="#prod-BindingPropertyList">BindingPropertyList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0730de3b"><emu-nt><a href="#prod-BindingPropertyList">BindingPropertyList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-BindingProperty">BindingProperty</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href="#prod-BindingPropertyList">BindingPropertyList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of BoundNames of <emu-nt><a href="#prod-BindingProperty">BindingProperty</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElementList" collapsed="">
    <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1e2c0030"><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of BoundNames of <emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElisionElement" collapsed="">
    <emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5a8f4d01"><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return BoundNames of <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingProperty" collapsed="">
    <emu-nt><a href="#prod-BindingProperty">BindingProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="987bd1c2"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SingleNameBinding" collapsed="">
    <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b9344a8"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElement" collapsed="">
    <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6875fa94"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.3.2" -->
      <emu-clause id="sec-destructuring-binding-patterns-static-semantics-containsexpression">
        <h1><span class="secnum">13.3.3.2</span>Static Semantics: ContainsExpression<span class="utils"><span class="anchor"><a href="#sec-destructuring-binding-patterns-static-semantics-containsexpression">#</a></span></span></h1>
        <emu-see-also-para op="ContainsExpression"></emu-see-also-para>
        <emu-grammar><emu-production name="ObjectBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ObjectBindingPattern">ObjectBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="906e476b"><emu-t>[</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0c457c16"><emu-t>[</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsExpression of <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8f1a867e"><emu-t>[</emu-t><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsExpression of <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ee591d49"><emu-t>[</emu-t><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>has</var> be ContainsExpression of <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsExpression of <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingPropertyList" collapsed="">
    <emu-nt><a href="#prod-BindingPropertyList">BindingPropertyList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0730de3b"><emu-nt><a href="#prod-BindingPropertyList">BindingPropertyList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-BindingProperty">BindingProperty</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>has</var> be ContainsExpression of <emu-nt><a href="#prod-BindingPropertyList">BindingPropertyList</a></emu-nt>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsExpression of <emu-nt><a href="#prod-BindingProperty">BindingProperty</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElementList" collapsed="">
    <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1e2c0030"><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>has</var> be ContainsExpression of <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsExpression of <emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElisionElement" collapsed="">
    <emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5a8f4d01"><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsExpression of <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingProperty" collapsed="">
    <emu-nt><a href="#prod-BindingProperty">BindingProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="987bd1c2"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>has</var> be IsComputedPropertyKey of <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsExpression of <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElement" collapsed="">
    <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ddd53e5"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SingleNameBinding" collapsed="">
    <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SingleNameBinding" collapsed="">
    <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="89becb83"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingRestElement" collapsed="">
    <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="145844de"><emu-t>...</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingRestElement" collapsed="">
    <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1e627394"><emu-t>...</emu-t><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsExpression of <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.3.3" -->
      <emu-clause id="sec-destructuring-binding-patterns-static-semantics-hasinitializer">
        <h1><span class="secnum">13.3.3.3</span>Static Semantics: HasInitializer<span class="utils"><span class="anchor"><a href="#sec-destructuring-binding-patterns-static-semantics-hasinitializer">#</a></span></span></h1>
        <emu-see-also-para op="HasInitializer"></emu-see-also-para>
        <emu-grammar><emu-production name="BindingElement" collapsed="">
    <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="983adfc8"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElement" collapsed="">
    <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ddd53e5"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SingleNameBinding" collapsed="">
    <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SingleNameBinding" collapsed="">
    <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="89becb83"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.3.4" -->
      <emu-clause id="sec-destructuring-binding-patterns-static-semantics-issimpleparameterlist">
        <h1><span class="secnum">13.3.3.4</span>Static Semantics: IsSimpleParameterList<span class="utils"><span class="anchor"><a href="#sec-destructuring-binding-patterns-static-semantics-issimpleparameterlist">#</a></span></span></h1>
        <emu-see-also-para op="IsSimpleParameterList"></emu-see-also-para>
        <emu-grammar><emu-production name="BindingElement" collapsed="">
    <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="983adfc8"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElement" collapsed="">
    <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0ddd53e5"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SingleNameBinding" collapsed="">
    <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SingleNameBinding" collapsed="">
    <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="89becb83"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.3.5" -->
      <emu-clause id="sec-destructuring-binding-patterns-runtime-semantics-bindinginitialization">
        <h1><span class="secnum">13.3.3.5</span>Runtime Semantics: BindingInitialization<span class="utils"><span class="anchor"><a href="#sec-destructuring-binding-patterns-runtime-semantics-bindinginitialization">#</a></span></span></h1>
        <p>With parameters <var>value</var> and <var>environment</var>.</p>
        <emu-see-also-para op="BindingInitialization"></emu-see-also-para>
        <emu-note><span class="note">Note</span>
          <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>
 operation should be used to assign the initialization value. This is 
the case for formal parameter lists of non-strict functions. In that 
case the formal parameter bindings are preinitialized in order to deal 
with the possibility of multiple parameters with the same name.</p>
        </emu-note>
        <emu-grammar><emu-production name="BindingPattern" collapsed="">
    <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="987dce43"><emu-nt><a href="#prod-ObjectBindingPattern">ObjectBindingPattern</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Perform ? <emu-xref aoid="RequireObjectCoercible"><a href="#sec-requireobjectcoercible">RequireObjectCoercible</a></emu-xref>(<var>value</var>).</li><li>Return the result of performing BindingInitialization for <emu-nt><a href="#prod-ObjectBindingPattern">ObjectBindingPattern</a></emu-nt> using <var>value</var> and <var>environment</var> as arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingPattern" collapsed="">
    <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c638d53b"><emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>iterator</var> be ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(<var>value</var>).</li><li>Let <var>iteratorRecord</var> be <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> {[[Iterator]]: <var>iterator</var>, [[Done]]: <emu-val>false</emu-val>}.</li><li>Let <var>result</var> be IteratorBindingInitialization for <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, return ? <emu-xref aoid="IteratorClose"><a href="#sec-iteratorclose">IteratorClose</a></emu-xref>(<var>iterator</var>, <var>result</var>).</li><li>Return <var>result</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ObjectBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ObjectBindingPattern">ObjectBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingPropertyList" collapsed="">
    <emu-nt><a href="#prod-BindingPropertyList">BindingPropertyList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0730de3b"><emu-nt><a href="#prod-BindingPropertyList">BindingPropertyList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-BindingProperty">BindingProperty</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>status</var> be the result of performing BindingInitialization for <emu-nt><a href="#prod-BindingPropertyList">BindingPropertyList</a></emu-nt> using <var>value</var> and <var>environment</var> as arguments.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return the result of performing BindingInitialization for <emu-nt><a href="#prod-BindingProperty">BindingProperty</a></emu-nt> using <var>value</var> and <var>environment</var> as arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingProperty" collapsed="">
    <emu-nt><a href="#prod-BindingProperty">BindingProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="94e17c00"><emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>name</var> be the string that is the only element of BoundNames of <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt>.</li><li>Return the result of performing KeyedBindingInitialization for <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt> using <var>value</var>, <var>environment</var>, and <var>name</var> as the arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingProperty" collapsed="">
    <emu-nt><a href="#prod-BindingProperty">BindingProperty</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="987bd1c2"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>P</var> be the result of evaluating <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>P</var>).</li><li>Return the result of performing KeyedBindingInitialization for <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt> using <var>value</var>, <var>environment</var>, and <var>P</var> as arguments.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.3.6" -->
      <emu-clause id="sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization">
        <h1><span class="secnum">13.3.3.6</span>Runtime Semantics: IteratorBindingInitialization<span class="utils"><span class="anchor"><a href="#sec-destructuring-binding-patterns-runtime-semantics-iteratorbindinginitialization">#</a></span></span></h1>
        <p>With parameters <var>iteratorRecord</var>, and <var>environment</var>.</p>
        <emu-see-also-para op="IteratorBindingInitialization"></emu-see-also-para>
        <emu-note><span class="note">Note</span>
          <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>
 operation should be used to assign the initialization value. This is 
the case for formal parameter lists of non-strict functions. In that 
case the formal parameter bindings are preinitialized in order to deal 
with the possibility of multiple parameters with the same name.</p>
        </emu-note>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="99d85234"><emu-t>[</emu-t><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="31ffe6b2"><emu-t>[</emu-t><emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0c457c16"><emu-t>[</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> is present, then<ol><li>Let <var>status</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1d096493"><emu-t>[</emu-t><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a1cc102e"><emu-t>[</emu-t><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>,</emu-t><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="95b63a14"><emu-t>[</emu-t><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>status</var> be the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ArrayBindingPattern" collapsed="">
    <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ee591d49"><emu-t>[</emu-t><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>,</emu-t><emu-nt optional=""><a href="#prod-Elision">Elision</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt><emu-t>]</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>status</var> be the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>If <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> is present, then<ol><li>Let <var>status</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li></ol></li><li>Return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElementList" collapsed="">
    <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6ab1e547"><emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElementList" collapsed="">
    <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1e2c0030"><emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>status</var> be the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingElementList">BindingElementList</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as arguments.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElisionElement" collapsed="">
    <emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="03366b31"><emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of performing IteratorBindingInitialization of <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as the arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElisionElement" collapsed="">
    <emu-nt><a href="#prod-BindingElisionElement">BindingElisionElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b07fbefe"><emu-nt><a href="#prod-Elision">Elision</a></emu-nt><emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>status</var> be the result of performing IteratorDestructuringAssignmentEvaluation of <emu-nt><a href="#prod-Elision">Elision</a></emu-nt> with <var>iteratorRecord</var> as the argument.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return the result of performing IteratorBindingInitialization of <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as the arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElement" collapsed="">
    <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="94e17c00"><emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt> with <var>iteratorRecord</var> and <var>environment</var> as the arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SingleNameBinding" collapsed="">
    <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b9344a8"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ? <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(<var>bindingId</var>, <var>environment</var>).</li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>next</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>defaultValue</var>).</li><li>If <emu-xref aoid="IsAnonymousFunctionDefinition"><a href="#sec-isanonymousfunctiondefinition">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>v</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>v</var>, <var>bindingId</var>).</li></ol></li></ol></li><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li><li>Return <emu-xref aoid="InitializeReferencedBinding"><a href="#sec-initializereferencedbinding">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>v</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingElement" collapsed="">
    <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6875fa94"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>next</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>If <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li><li>Return the result of performing BindingInitialization of <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt> with <var>v</var> and <var>environment</var> as the arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingRestElement" collapsed="">
    <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="145844de"><emu-t>...</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>lhs</var> be ? <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>, <var>environment</var>).</li><li>Let <var>A</var> be <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>next</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lhs</var>, <var>A</var>).</li><li>Return <emu-xref aoid="InitializeReferencedBinding"><a href="#sec-initializereferencedbinding">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>A</var>).</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Let <var>status</var> be <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>A</var>, ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>n</var>), <var>nextValue</var>).</li><li>Assert: <var>status</var> is <emu-val>true</emu-val>.</li><li>Increment <var>n</var> by 1.
        </li></ol></li></ol></emu-alg>
        <emu-grammar><emu-production name="BindingRestElement" collapsed="">
    <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1e627394"><emu-t>...</emu-t><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>A</var> be <emu-xref aoid="ArrayCreate"><a href="#sec-arraycreate">ArrayCreate</a></emu-xref>(0).</li><li>Let <var>n</var> be 0.</li><li>Repeat,<ol><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>, then<ol><li>Let <var>next</var> be <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>next</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, then<ol><li>Return the result of performing BindingInitialization of <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt> with <var>A</var> and <var>environment</var> as the arguments.</li></ol></li><li>Let <var>nextValue</var> be <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>nextValue</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>nextValue</var>).</li><li>Let <var>status</var> be <emu-xref aoid="CreateDataProperty"><a href="#sec-createdataproperty">CreateDataProperty</a></emu-xref>(<var>A</var>, ! <emu-xref aoid="ToString"><a href="#sec-tostring">ToString</a></emu-xref>(<var>n</var>), <var>nextValue</var>).</li><li>Assert: <var>status</var> is <emu-val>true</emu-val>.</li><li>Increment <var>n</var> by 1.
        </li></ol></li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.3.3.7" -->
      <emu-clause id="sec-runtime-semantics-keyedbindinginitialization">
        <h1><span class="secnum">13.3.3.7</span>Runtime Semantics: KeyedBindingInitialization<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-keyedbindinginitialization">#</a></span></span></h1>
        <p>With parameters <var>value</var>, <var>environment</var>, and <var>propertyName</var>.</p>
        <emu-note><span class="note">Note</span>
          <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>
 operation should be used to assign the initialization value. This is 
the case for formal parameter lists of non-strict functions. In that 
case the formal parameter bindings are preinitialized in order to deal 
with the possibility of multiple parameters with the same name.</p>
        </emu-note>
        <emu-grammar><emu-production name="BindingElement" collapsed="">
    <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6875fa94"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>v</var> be ? <emu-xref aoid="GetV"><a href="#sec-getv">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>defaultValue</var>).</li></ol></li><li>Return the result of performing BindingInitialization for <emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt> passing <var>v</var> and <var>environment</var> as arguments.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SingleNameBinding" collapsed="">
    <emu-nt><a href="#prod-SingleNameBinding">SingleNameBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b9344a8"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt optional=""><a href="#prod-Initializer">Initializer</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Let <var>lhs</var> be ? <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(<var>bindingId</var>, <var>environment</var>).</li><li>Let <var>v</var> be ? <emu-xref aoid="GetV"><a href="#sec-getv">GetV</a></emu-xref>(<var>value</var>, <var>propertyName</var>).</li><li>If <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt> is present and <var>v</var> is <emu-val>undefined</emu-val>, then<ol><li>Let <var>defaultValue</var> be the result of evaluating <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>.</li><li>Let <var>v</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>defaultValue</var>).</li><li>If <emu-xref aoid="IsAnonymousFunctionDefinition"><a href="#sec-isanonymousfunctiondefinition">IsAnonymousFunctionDefinition</a></emu-xref>(<emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>) is <emu-val>true</emu-val>, then<ol><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>v</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>v</var>, <var>bindingId</var>).</li></ol></li></ol></li><li>If <var>environment</var> is <emu-val>undefined</emu-val>, return ? <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lhs</var>, <var>v</var>).</li><li>Return <emu-xref aoid="InitializeReferencedBinding"><a href="#sec-initializereferencedbinding">InitializeReferencedBinding</a></emu-xref>(<var>lhs</var>, <var>v</var>).
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.4" -->
  <emu-clause id="sec-empty-statement">
    <h1><span class="secnum">13.4</span>Empty Statement<span class="utils"><span class="anchor"><a href="#sec-empty-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="EmptyStatement" id="prod-EmptyStatement">
    <emu-nt><a href="#prod-EmptyStatement">EmptyStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4a0dac03"><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="13.4.1" -->
    <emu-clause id="sec-empty-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.4.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-empty-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="EmptyStatement" collapsed="">
    <emu-nt><a href="#prod-EmptyStatement">EmptyStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4a0dac03"><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.5" -->
  <emu-clause id="sec-expression-statement">
    <h1><span class="secnum">13.5</span>Expression Statement<span class="utils"><span class="anchor"><a href="#sec-expression-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="ExpressionStatement" params="Yield" id="prod-ExpressionStatement">
    <emu-nt params="Yield"><a href="#prod-ExpressionStatement">ExpressionStatement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="640f7c24"><emu-gann>[lookahead â { <emu-t>{</emu-t>, <emu-t>function</emu-t>, <emu-t>class</emu-t>, <emu-t>let [</emu-t> }]</emu-gann><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note</span>
      <p>An <emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt> cannot start with a U+007B (LEFT CURLY BRACKET) because that might make it ambiguous with a <emu-nt><a href="#prod-Block">Block</a></emu-nt>. Also, an <emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt> cannot start with the <code>function</code> or <code>class</code> keywords because that would make it ambiguous with a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, a <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, or a <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt>. An <emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt> cannot start with the two token sequence <code>let [</code> because that would make it ambiguous with a <code>let</code> <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt> whose first <emu-nt><a href="#prod-LexicalBinding">LexicalBinding</a></emu-nt> was an <emu-nt><a href="#prod-ArrayBindingPattern">ArrayBindingPattern</a></emu-nt>.</p>
    </emu-note>

    <!-- es6num="13.5.1" -->
    <emu-clause id="sec-expression-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.5.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-expression-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="ExpressionStatement" collapsed="">
    <emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e2db439e"><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Return ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.6" -->
  <emu-clause id="sec-if-statement">
    <h1><span class="secnum">13.6</span>The <code>if</code> Statement<span class="utils"><span class="anchor"><a href="#sec-if-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="IfStatement" params="Yield, Return" id="prod-IfStatement">
    <emu-nt params="Yield, Return"><a href="#prod-IfStatement">IfStatement</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8a6af25e"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt><emu-t>else</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="98264764"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <p>Each <code>else</code> for which the choice of associated <code>if</code> is ambiguous shall be associated with the nearest possible <code>if</code> that would otherwise have no corresponding <code>else</code>.</p>

    <!-- es6num="13.6.1" -->
    <emu-clause id="sec-if-statement-static-semantics-early-errors">
      <h1><span class="secnum">13.6.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-if-statement-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="IfStatement">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="16e86a13"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>else</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="f6819570"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if <emu-xref aoid="IsLabelledFunction"><a href="#sec-islabelledfunction">IsLabelledFunction</a></emu-xref>(<emu-nt><a href="#prod-Statement">Statement</a></emu-nt>) is <emu-val>true</emu-val>.
        
        </li>
      </ul>
      <emu-note><span class="note">Note</span>
        <p>It is only necessary to apply this rule if the extension specified in  <emu-xref href="#sec-labelled-function-declarations"><a href="#sec-labelled-function-declarations">B.3.2</a></emu-xref> is implemented.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="13.6.2" -->
    <emu-clause id="sec-if-statement-static-semantics-containsduplicatelabels">
      <h1><span class="secnum">13.6.2</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-if-statement-static-semantics-containsduplicatelabels">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="16e86a13"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>else</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasDuplicate</var> be ContainsDuplicateLabels of the first <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicate</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of the second <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f6819570"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.6.3" -->
    <emu-clause id="sec-if-statement-static-semantics-containsundefinedbreaktarget">
      <h1><span class="secnum">13.6.3</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-if-statement-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="16e86a13"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>else</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of the first <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of the second <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f6819570"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.6.4" -->
    <emu-clause id="sec-if-statement-static-semantics-containsundefinedcontinuetarget">
      <h1><span class="secnum">13.6.4</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-if-statement-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="16e86a13"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>else</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of the first <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of the second <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f6819570"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.6.5" -->
    <emu-clause id="sec-if-statement-static-semantics-vardeclarednames">
      <h1><span class="secnum">13.6.5</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-if-statement-static-semantics-vardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="16e86a13"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>else</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be VarDeclaredNames of the first <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of the second <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f6819570"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.6.6" -->
    <emu-clause id="sec-if-statement-static-semantics-varscopeddeclarations">
      <h1><span class="secnum">13.6.6</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-if-statement-static-semantics-varscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="16e86a13"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>else</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of the first <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of the second <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f6819570"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.6.7" -->
    <emu-clause id="sec-if-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.6.7</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-if-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="16e86a13"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>else</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>exprValue</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>)).</li><li>If <var>exprValue</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>stmtCompletion</var> be the result of evaluating the first <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>stmtCompletion</var> be the result of evaluating the second <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li></ol></li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>stmtCompletion</var>, <emu-val>undefined</emu-val>)).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f6819570"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>exprValue</var> be <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>)).</li><li>If <var>exprValue</var> is <emu-val>false</emu-val>, then<ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Else,<ol><li>Let <var>stmtCompletion</var> be the result of evaluating <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>stmtCompletion</var>, <emu-val>undefined</emu-val>)).
      </li></ol></li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.7" -->
  <emu-clause id="sec-iteration-statements">
    <h1><span class="secnum">13.7</span>Iteration Statements<span class="utils"><span class="anchor"><a href="#sec-iteration-statements">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="IterationStatement" params="Yield, Return" id="prod-IterationStatement">
    <emu-nt params="Yield, Return"><a href="#prod-IterationStatement">IterationStatement</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b221497c"><emu-t>do</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>;</emu-t></emu-rhs>
    <emu-rhs a="403a629f"><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="87904706"><emu-t>for</emu-t><emu-t>(</emu-t><emu-gann>[lookahead â { <emu-t>let [</emu-t> }]</emu-gann><emu-nt params="~In, ?Yield" optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[~In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt params="+In, ?Yield" optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt params="+In, ?Yield" optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="15714640"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt params="~In, ?Yield"><a href="#prod-VariableDeclarationList">VariableDeclarationList</a><emu-mods><emu-params>[~In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt params="+In, ?Yield" optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt params="+In, ?Yield" optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="45831f00"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt params="~In, ?Yield"><a href="#prod-LexicalDeclaration">LexicalDeclaration</a><emu-mods><emu-params>[~In, ?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="+In, ?Yield" optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt params="+In, ?Yield" optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="31bfcc47"><emu-t>for</emu-t><emu-t>(</emu-t><emu-gann>[lookahead â { <emu-t>let [</emu-t> }]</emu-gann><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>in</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="e7d0a8a1"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt params="?Yield"><a href="#prod-ForBinding">ForBinding</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>in</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="afcb4554"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt params="?Yield"><a href="#prod-ForDeclaration">ForDeclaration</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>in</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="07ff00ea"><emu-t>for</emu-t><emu-t>(</emu-t><emu-gann>[lookahead â  <emu-t>let</emu-t>]</emu-gann><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>of</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="2a988183"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt params="?Yield"><a href="#prod-ForBinding">ForBinding</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>of</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="2786c0e9"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt params="?Yield"><a href="#prod-ForDeclaration">ForDeclaration</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>of</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ForDeclaration" params="Yield" id="prod-ForDeclaration">
    <emu-nt params="Yield"><a href="#prod-ForDeclaration">ForDeclaration</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0a5be63b"><emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-nt params="?Yield"><a href="#prod-ForBinding">ForBinding</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ForBinding" params="Yield" id="prod-ForBinding">
    <emu-nt params="Yield"><a href="#prod-ForBinding">ForBinding</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="46cd8f8d"><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="7a565a71"><emu-nt params="?Yield"><a href="#prod-BindingPattern">BindingPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note</span>
      <p>This section is extended by Annex  <emu-xref href="#sec-initializers-in-forin-statement-heads"><a href="#sec-initializers-in-forin-statement-heads">B.3.6</a></emu-xref>.</p>
    </emu-note>

    <!-- es6num="13.7.1" -->
    <emu-clause id="sec-iteration-statements-semantics">
      <h1><span class="secnum">13.7.1</span>Semantics<span class="utils"><span class="anchor"><a href="#sec-iteration-statements-semantics">#</a></span></span></h1>

      <!-- es6num="13.7.1.1" -->
      <emu-clause id="sec-semantics-static-semantics-early-errors">
        <h1><span class="secnum">13.7.1.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-semantics-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="24e70caa"><emu-t>do</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-t>;</emu-t></emu-rhs>
    <emu-rhs a="f7627bf3"><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="fc33bcf0"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="48e766b4"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="93c07e45"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="bf521b70"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="ecf18944"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="2590ad81"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="8ea6608b"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="ee6f9a77"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="6f7c3304"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if <emu-xref aoid="IsLabelledFunction"><a href="#sec-islabelledfunction">IsLabelledFunction</a></emu-xref>(<emu-nt><a href="#prod-Statement">Statement</a></emu-nt>) is <emu-val>true</emu-val>.
          
          </li>
        </ul>
        <emu-note><span class="note">Note</span>
          <p>It is only necessary to apply this rule if the extension specified in  <emu-xref href="#sec-labelled-function-declarations"><a href="#sec-labelled-function-declarations">B.3.2</a></emu-xref> is implemented.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="13.7.1.2" -->
      <emu-clause id="sec-loopcontinues" aoid="LoopContinues">
        <h1><span class="secnum">13.7.1.2</span>Runtime Semantics: LoopContinues(<var>completion</var>, <var>labelSet</var>)<span class="utils"><span class="anchor"><a href="#sec-loopcontinues">#</a></span></span></h1>
        <p>The abstract operation LoopContinues with arguments <var>completion</var> and <var>labelSet</var> is defined by the following steps:</p>
        <emu-alg><ol><li>If <var>completion</var>.[[Type]] is <emu-const>normal</emu-const>, return <emu-val>true</emu-val>.</li><li>If <var>completion</var>.[[Type]] is not <emu-const>continue</emu-const>, return <emu-val>false</emu-val>.</li><li>If <var>completion</var>.[[Target]] is <emu-const>empty</emu-const>, return <emu-val>true</emu-val>.</li><li>If <var>completion</var>.[[Target]] is an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>Within the <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> part of an <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt> a <emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt> may be used to begin a new iteration.</p>
        </emu-note>
      </emu-clause>
    </emu-clause>

    <!-- es6num="13.7.2" -->
    <emu-clause id="sec-do-while-statement">
      <h1><span class="secnum">13.7.2</span>The <code>do</code>-<code>while</code> Statement<span class="utils"><span class="anchor"><a href="#sec-do-while-statement">#</a></span></span></h1>

      <!-- es6num="13.7.2.1" -->
      <emu-clause id="sec-do-while-statement-static-semantics-containsduplicatelabels">
        <h1><span class="secnum">13.7.2.1</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-do-while-statement-static-semantics-containsduplicatelabels">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="24e70caa"><emu-t>do</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.2.2" -->
      <emu-clause id="sec-do-while-statement-static-semantics-containsundefinedbreaktarget">
        <h1><span class="secnum">13.7.2.2</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-do-while-statement-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="24e70caa"><emu-t>do</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.2.3" -->
      <emu-clause id="sec-do-while-statement-static-semantics-containsundefinedcontinuetarget">
        <h1><span class="secnum">13.7.2.3</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-do-while-statement-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="24e70caa"><emu-t>do</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.2.4" -->
      <emu-clause id="sec-do-while-statement-static-semantics-vardeclarednames">
        <h1><span class="secnum">13.7.2.4</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-do-while-statement-static-semantics-vardeclarednames">#</a></span></span></h1>
        <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="24e70caa"><emu-t>do</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.2.5" -->
      <emu-clause id="sec-do-while-statement-static-semantics-varscopeddeclarations">
        <h1><span class="secnum">13.7.2.5</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-do-while-statement-static-semantics-varscopeddeclarations">#</a></span></span></h1>
        <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="24e70caa"><emu-t>do</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.2.6" -->
      <emu-clause id="sec-do-while-statement-runtime-semantics-labelledevaluation">
        <h1><span class="secnum">13.7.2.6</span>Runtime Semantics: LabelledEvaluation<span class="utils"><span class="anchor"><a href="#sec-do-while-statement-runtime-semantics-labelledevaluation">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="LabelledEvaluation"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="24e70caa"><emu-t>do</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Repeat<ol><li>Let <var>stmt</var> be the result of evaluating <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>If <emu-xref aoid="LoopContinues"><a href="#sec-loopcontinues">LoopContinues</a></emu-xref>(<var>stmt</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>stmt</var>, <var>V</var>)).</li><li>If <var>stmt</var>.[[Value]] is not <emu-const>empty</emu-const>, let <var>V</var> be <var>stmt</var>.[[Value]].</li><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>exprValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(<var>exprValue</var>) is <emu-val>false</emu-val>, return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>V</var>).
        </li></ol></li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="13.7.3" -->
    <emu-clause id="sec-while-statement">
      <h1><span class="secnum">13.7.3</span>The <code>while</code> Statement<span class="utils"><span class="anchor"><a href="#sec-while-statement">#</a></span></span></h1>

      <!-- es6num="13.7.3.1" -->
      <emu-clause id="sec-while-statement-static-semantics-containsduplicatelabels">
        <h1><span class="secnum">13.7.3.1</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-while-statement-static-semantics-containsduplicatelabels">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f7627bf3"><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.3.2" -->
      <emu-clause id="sec-while-statement-static-semantics-containsundefinedbreaktarget">
        <h1><span class="secnum">13.7.3.2</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-while-statement-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f7627bf3"><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.3.3" -->
      <emu-clause id="sec-while-statement-static-semantics-containsundefinedcontinuetarget">
        <h1><span class="secnum">13.7.3.3</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-while-statement-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f7627bf3"><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.3.4" -->
      <emu-clause id="sec-while-statement-static-semantics-vardeclarednames">
        <h1><span class="secnum">13.7.3.4</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-while-statement-static-semantics-vardeclarednames">#</a></span></span></h1>
        <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f7627bf3"><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.3.5" -->
      <emu-clause id="sec-while-statement-static-semantics-varscopeddeclarations">
        <h1><span class="secnum">13.7.3.5</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-while-statement-static-semantics-varscopeddeclarations">#</a></span></span></h1>
        <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f7627bf3"><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.3.6" -->
      <emu-clause id="sec-while-statement-runtime-semantics-labelledevaluation">
        <h1><span class="secnum">13.7.3.6</span>Runtime Semantics: LabelledEvaluation<span class="utils"><span class="anchor"><a href="#sec-while-statement-runtime-semantics-labelledevaluation">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="LabelledEvaluation"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f7627bf3"><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Repeat<ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>exprValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(<var>exprValue</var>) is <emu-val>false</emu-val>, return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>stmt</var> be the result of evaluating <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>If <emu-xref aoid="LoopContinues"><a href="#sec-loopcontinues">LoopContinues</a></emu-xref>(<var>stmt</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>stmt</var>, <var>V</var>)).</li><li>If <var>stmt</var>.[[Value]] is not <emu-const>empty</emu-const>, let <var>V</var> be <var>stmt</var>.[[Value]].
        </li></ol></li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="13.7.4" -->
    <emu-clause id="sec-for-statement">
      <h1><span class="secnum">13.7.4</span>The <code>for</code> Statement<span class="utils"><span class="anchor"><a href="#sec-for-statement">#</a></span></span></h1>

      <!-- es6num="13.7.4.1" -->
      <emu-clause id="sec-for-statement-static-semantics-early-errors">
        <h1><span class="secnum">13.7.4.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-for-statement-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="93c07e45"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if any element of the BoundNames of <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="13.7.4.2" -->
      <emu-clause id="sec-for-statement-static-semantics-containsduplicatelabels">
        <h1><span class="secnum">13.7.4.2</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-for-statement-static-semantics-containsduplicatelabels">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fc33bcf0"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="48e766b4"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="93c07e45"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.4.3" -->
      <emu-clause id="sec-for-statement-static-semantics-containsundefinedbreaktarget">
        <h1><span class="secnum">13.7.4.3</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-for-statement-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fc33bcf0"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="48e766b4"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="93c07e45"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.4.4" -->
      <emu-clause id="sec-for-statement-static-semantics-containsundefinedcontinuetarget">
        <h1><span class="secnum">13.7.4.4</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-for-statement-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fc33bcf0"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="48e766b4"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="93c07e45"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.4.5" -->
      <emu-clause id="sec-for-statement-static-semantics-vardeclarednames">
        <h1><span class="secnum">13.7.4.5</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-for-statement-static-semantics-vardeclarednames">#</a></span></span></h1>
        <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fc33bcf0"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="48e766b4"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="93c07e45"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.4.6" -->
      <emu-clause id="sec-for-statement-static-semantics-varscopeddeclarations">
        <h1><span class="secnum">13.7.4.6</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-for-statement-static-semantics-varscopeddeclarations">#</a></span></span></h1>
        <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fc33bcf0"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="48e766b4"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="93c07e45"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.4.7" -->
      <emu-clause id="sec-for-statement-runtime-semantics-labelledevaluation">
        <h1><span class="secnum">13.7.4.7</span>Runtime Semantics: LabelledEvaluation<span class="utils"><span class="anchor"><a href="#sec-for-statement-runtime-semantics-labelledevaluation">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="LabelledEvaluation"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fc33bcf0"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If the first <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> is present, then<ol><li>Let <var>exprRef</var> be the result of evaluating the first <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Perform ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).</li></ol></li><li>Return ? <emu-xref aoid="ForBodyEvaluation"><a href="#sec-forbodyevaluation">ForBodyEvaluation</a></emu-xref>(the second <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>, the third <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>, <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>, Â« Â», <var>labelSet</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="48e766b4"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>varDcl</var> be the result of evaluating <emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>varDcl</var>).</li><li>Return ? <emu-xref aoid="ForBodyEvaluation"><a href="#sec-forbodyevaluation">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>, the second <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>, <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>, Â« Â», <var>labelSet</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="93c07e45"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>loopEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>loopEnvRec</var> be <var>loopEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>isConst</var> be the result of performing IsConstantDeclaration of <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt>.</li><li>Let <var>boundNames</var> be the BoundNames of <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt>.</li><li>For each element <var>dn</var> of <var>boundNames</var> do<ol><li>If <var>isConst</var> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>loopEnvRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>loopEnvRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>loopEnv</var>.</li><li>Let <var>forDcl</var> be the result of evaluating <emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt>.</li><li>If <var>forDcl</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>forDcl</var>).</li></ol></li><li>If <var>isConst</var> is <emu-val>false</emu-val>, let <var>perIterationLets</var> be <var>boundNames</var>; otherwise let <var>perIterationLets</var> be Â« Â».</li><li>Let <var>bodyResult</var> be <emu-xref aoid="ForBodyEvaluation"><a href="#sec-forbodyevaluation">ForBodyEvaluation</a></emu-xref>(the first <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>, the second <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>, <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>, <var>perIterationLets</var>, <var>labelSet</var>).</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>bodyResult</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.4.8" -->
      <emu-clause id="sec-forbodyevaluation" aoid="ForBodyEvaluation">
        <h1><span class="secnum">13.7.4.8</span>Runtime Semantics: ForBodyEvaluation( <var>test</var>, <var>increment</var>, <var>stmt</var>, <var>perIterationBindings</var>, <var>labelSet</var> )<span class="utils"><span class="anchor"><a href="#sec-forbodyevaluation">#</a></span></span></h1>
        <p>The abstract operation ForBodyEvaluation with arguments <var>test</var>, <var>increment</var>, <var>stmt</var>, <var>perIterationBindings</var>, and <var>labelSet</var> is performed as follows:</p>
        <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Perform ? <emu-xref aoid="CreatePerIterationEnvironment"><a href="#sec-createperiterationenvironment">CreatePerIterationEnvironment</a></emu-xref>(<var>perIterationBindings</var>).</li><li>Repeat<ol><li>If <var>test</var> is not <emu-const>[empty]</emu-const>, then<ol><li>Let <var>testRef</var> be the result of evaluating <var>test</var>.</li><li>Let <var>testValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>testRef</var>).</li><li>If <emu-xref aoid="ToBoolean"><a href="#sec-toboolean">ToBoolean</a></emu-xref>(<var>testValue</var>) is <emu-val>false</emu-val>, return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>V</var>).</li></ol></li><li>Let <var>result</var> be the result of evaluating <var>stmt</var>.</li><li>If <emu-xref aoid="LoopContinues"><a href="#sec-loopcontinues">LoopContinues</a></emu-xref>(<var>result</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>)).</li><li>If <var>result</var>.[[Value]] is not <emu-const>empty</emu-const>, let <var>V</var> be <var>result</var>.[[Value]].</li><li>Perform ? <emu-xref aoid="CreatePerIterationEnvironment"><a href="#sec-createperiterationenvironment">CreatePerIterationEnvironment</a></emu-xref>(<var>perIterationBindings</var>).</li><li>If <var>increment</var> is not <emu-const>[empty]</emu-const>, then<ol><li>Let <var>incRef</var> be the result of evaluating <var>increment</var>.</li><li>Perform ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>incRef</var>).
        </li></ol></li></ol></li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.4.9" -->
      <emu-clause id="sec-createperiterationenvironment" aoid="CreatePerIterationEnvironment">
        <h1><span class="secnum">13.7.4.9</span>Runtime Semantics: CreatePerIterationEnvironment( <var>perIterationBindings</var> )<span class="utils"><span class="anchor"><a href="#sec-createperiterationenvironment">#</a></span></span></h1>
        <p>The abstract operation CreatePerIterationEnvironment with argument <var>perIterationBindings</var> is performed as follows:</p>
        <emu-alg><ol><li>If <var>perIterationBindings</var> has any elements, then<ol><li>Let <var>lastIterationEnv</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>lastIterationEnvRec</var> be <var>lastIterationEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>outer</var> be <var>lastIterationEnv</var>'s outer environment reference.</li><li>Assert: <var>outer</var> is not <emu-val>null</emu-val>.</li><li>Let <var>thisIterationEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>outer</var>).</li><li>Let <var>thisIterationEnvRec</var> be <var>thisIterationEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>For each element <var>bn</var> of <var>perIterationBindings</var> do,<ol><li>Perform ! <var>thisIterationEnvRec</var>.CreateMutableBinding(<var>bn</var>, <emu-val>false</emu-val>).</li><li>Let <var>lastValue</var> be ? <var>lastIterationEnvRec</var>.GetBindingValue(<var>bn</var>, <emu-val>true</emu-val>).</li><li>Perform <var>thisIterationEnvRec</var>.InitializeBinding(<var>bn</var>, <var>lastValue</var>).</li></ol></li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>thisIterationEnv</var>.</li></ol></li><li>Return <emu-val>undefined</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="13.7.5" -->
    <emu-clause id="sec-for-in-and-for-of-statements">
      <h1><span class="secnum">13.7.5</span>The <code>for</code>-<code>in</code> and <code>for</code>-<code>of</code> Statements<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements">#</a></span></span></h1>

      <!-- es6num="13.7.5.1" -->
      <emu-clause id="sec-for-in-and-for-of-statements-static-semantics-early-errors">
        <h1><span class="secnum">13.7.5.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bf521b70"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="8ea6608b"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is either an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> or an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt> and if the lexical token sequence matched by <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> cannot be parsed with no tokens left over using <emu-nt><a href="#prod-AssignmentPattern">AssignmentPattern</a></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.
          
          </li>
        </ul>
        <p>If <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is either an <emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt> or an <emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt> and if the lexical token sequence matched by <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> can be parsed with no tokens left over using <emu-nt><a href="#prod-AssignmentPattern">AssignmentPattern</a></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> then the following rules are not applied. Instead, the Early Error rules for <emu-nt><a href="#prod-AssignmentPattern">AssignmentPattern</a></emu-nt> are used.</p>
        <ul>
          <li>
            It is a Syntax Error if IsValidSimpleAssignmentTarget of <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is <emu-val>false</emu-val>.
          
          </li>
          <li>
            It is a Syntax Error if the <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt> is  <emu-grammar><emu-production name="CoverParenthesizedExpressionAndArrowParameterList" collapsed="" class=" inline">
    <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ba6ef9d"><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar> and <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> derives a production that would produce a Syntax Error according to these rules if that production is substituted for <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt>. This rule is recursively applied.
          
          </li>
        </ul>
        <emu-note><span class="note">Note</span>
          <p>The last rule means that the other rules are applied even if parentheses surround <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</p>
        </emu-note>
        <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2590ad81"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="6f7c3304"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if the BoundNames of <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt> contains <code>"let"</code>.
          
          </li>
          <li>
            It is a Syntax Error if any element of the BoundNames of <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
          
          </li>
          <li>
            It is a Syntax Error if the BoundNames of <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt> contains any duplicate entries.
          
          </li>
        </ul>
      </emu-clause>

      <!-- es6num="13.7.5.2" -->
      <emu-clause id="sec-for-in-and-for-of-statements-static-semantics-boundnames">
        <h1><span class="secnum">13.7.5.2</span>Static Semantics: BoundNames<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-static-semantics-boundnames">#</a></span></span></h1>
        <emu-see-also-para op="BoundNames"></emu-see-also-para>
        <emu-grammar><emu-production name="ForDeclaration" collapsed="">
    <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d32d6fbc"><emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.5.3" -->
      <emu-clause id="sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels">
        <h1><span class="secnum">13.7.5.3</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bf521b70"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="ecf18944"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="2590ad81"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="8ea6608b"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="ee6f9a77"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="6f7c3304"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>This section is extended by Annex  <emu-xref href="#sec-initializers-in-forin-statement-heads"><a href="#sec-initializers-in-forin-statement-heads">B.3.6</a></emu-xref>.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="13.7.5.4" -->
      <emu-clause id="sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget">
        <h1><span class="secnum">13.7.5.4</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bf521b70"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="ecf18944"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="2590ad81"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="8ea6608b"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="ee6f9a77"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="6f7c3304"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>This section is extended by Annex  <emu-xref href="#sec-initializers-in-forin-statement-heads"><a href="#sec-initializers-in-forin-statement-heads">B.3.6</a></emu-xref>.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="13.7.5.5" -->
      <emu-clause id="sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget">
        <h1><span class="secnum">13.7.5.5</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bf521b70"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="ecf18944"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="2590ad81"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="8ea6608b"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="ee6f9a77"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="6f7c3304"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>This section is extended by Annex  <emu-xref href="#sec-initializers-in-forin-statement-heads"><a href="#sec-initializers-in-forin-statement-heads">B.3.6</a></emu-xref>.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="13.7.5.6" -->
      <emu-clause id="sec-for-in-and-for-of-statements-static-semantics-isdestructuring">
        <h1><span class="secnum">13.7.5.6</span>Static Semantics: IsDestructuring<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-static-semantics-isdestructuring">#</a></span></span></h1>
        <emu-see-also-para op="IsDestructuring"></emu-see-also-para>
        <emu-grammar><emu-production name="ForDeclaration" collapsed="">
    <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d32d6fbc"><emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return IsDestructuring of <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ForBinding" collapsed="">
    <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ForBinding" collapsed="">
    <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="983adfc8"><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>true</emu-val>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>This section is extended by Annex  <emu-xref href="#sec-initializers-in-forin-statement-heads"><a href="#sec-initializers-in-forin-statement-heads">B.3.6</a></emu-xref>.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="13.7.5.7" -->
      <emu-clause id="sec-for-in-and-for-of-statements-static-semantics-vardeclarednames">
        <h1><span class="secnum">13.7.5.7</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames">#</a></span></span></h1>
        <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bf521b70"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ecf18944"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be the BoundNames of <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2590ad81"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8ea6608b"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ee6f9a77"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be the BoundNames of <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6f7c3304"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>This section is extended by Annex  <emu-xref href="#sec-initializers-in-forin-statement-heads"><a href="#sec-initializers-in-forin-statement-heads">B.3.6</a></emu-xref>.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="13.7.5.8" -->
      <emu-clause id="sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations">
        <h1><span class="secnum">13.7.5.8</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations">#</a></span></span></h1>
        <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bf521b70"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ecf18944"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2590ad81"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8ea6608b"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ee6f9a77"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>declarations</var> be a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return <var>declarations</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6f7c3304"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>This section is extended by Annex  <emu-xref href="#sec-initializers-in-forin-statement-heads"><a href="#sec-initializers-in-forin-statement-heads">B.3.6</a></emu-xref>.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="13.7.5.9" -->
      <emu-clause id="sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization">
        <h1><span class="secnum">13.7.5.9</span>Runtime Semantics: BindingInitialization<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-runtime-semantics-bindinginitialization">#</a></span></span></h1>
        <p>With arguments <var>value</var> and <var>environment</var>.</p>
        <emu-see-also-para op="BindingInitialization"></emu-see-also-para>
        <emu-note><span class="note">Note</span>
          <p><emu-val>undefined</emu-val> is passed for <var>environment</var> to indicate that a <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref> operation should be used to assign the initialization value. This is the case for <code>var</code> statements and the formal parameter lists of some non-strict functions (see  <emu-xref href="#sec-functiondeclarationinstantiation"><a href="#sec-functiondeclarationinstantiation">9.2.12</a></emu-xref>). In those cases a lexical binding is hoisted and preinitialized prior to evaluation of its initializer.</p>
        </emu-note>
        <emu-grammar><emu-production name="ForDeclaration" collapsed="">
    <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d32d6fbc"><emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the result of performing BindingInitialization for <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt> passing <var>value</var> and <var>environment</var> as the arguments.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.5.10" -->
      <emu-clause id="sec-runtime-semantics-bindinginstantiation">
        <h1><span class="secnum">13.7.5.10</span>Runtime Semantics: BindingInstantiation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-bindinginstantiation">#</a></span></span></h1>
        <p>With argument <var>environment</var>.</p>
        <emu-grammar><emu-production name="ForDeclaration" collapsed="">
    <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d32d6fbc"><emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>envRec</var> be <var>environment</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Assert: <var>envRec</var> is a declarative <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</li><li>For each element <var>name</var> of the BoundNames of <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt> do<ol><li>If IsConstantDeclaration of <emu-nt><a href="#prod-LetOrConst">LetOrConst</a></emu-nt> is <emu-val>true</emu-val>, then<ol><li>Perform ! <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ! <var>envRec</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).
        </li></ol></li></ol></li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.5.11" -->
      <emu-clause id="sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation">
        <h1><span class="secnum">13.7.5.11</span>Runtime Semantics: LabelledEvaluation<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="LabelledEvaluation"></emu-see-also-para>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bf521b70"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid="ForIn/OfHeadEvaluation"><a href="#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind">ForIn/OfHeadEvaluation</a></emu-xref>(Â« Â», <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid="ForIn/OfBodyEvaluation"><a href="#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt>, <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>assignment</emu-const>, <var>labelSet</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ecf18944"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>keyResult</var> be ? <emu-xref aoid="ForIn/OfHeadEvaluation"><a href="#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind">ForIn/OfHeadEvaluation</a></emu-xref>(Â« Â», <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid="ForIn/OfBodyEvaluation"><a href="#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>, <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="2590ad81"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>keyResult</var> be the result of performing ? <emu-xref aoid="ForIn/OfHeadEvaluation"><a href="#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind">ForIn/OfHeadEvaluation</a></emu-xref>(BoundNames of <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt>, <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>, <emu-const>enumerate</emu-const>).</li><li>Return ? <emu-xref aoid="ForIn/OfBodyEvaluation"><a href="#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt>, <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>lexicalBinding</emu-const>, <var>labelSet</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8ea6608b"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>keyResult</var> be the result of performing ? <emu-xref aoid="ForIn/OfHeadEvaluation"><a href="#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind">ForIn/OfHeadEvaluation</a></emu-xref>(Â« Â», <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>, <emu-const>iterate</emu-const>).</li><li>Return ? <emu-xref aoid="ForIn/OfBodyEvaluation"><a href="#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt>, <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>assignment</emu-const>, <var>labelSet</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ee6f9a77"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>keyResult</var> be the result of performing ? <emu-xref aoid="ForIn/OfHeadEvaluation"><a href="#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind">ForIn/OfHeadEvaluation</a></emu-xref>(Â« Â», <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>, <emu-const>iterate</emu-const>).</li><li>Return ? <emu-xref aoid="ForIn/OfBodyEvaluation"><a href="#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>, <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>varBinding</emu-const>, <var>labelSet</var>).
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IterationStatement" collapsed="">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6f7c3304"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>keyResult</var> be the result of performing ? <emu-xref aoid="ForIn/OfHeadEvaluation"><a href="#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind">ForIn/OfHeadEvaluation</a></emu-xref>(BoundNames of <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt>, <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>, <emu-const>iterate</emu-const>).</li><li>Return ? <emu-xref aoid="ForIn/OfBodyEvaluation"><a href="#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset">ForIn/OfBodyEvaluation</a></emu-xref>(<emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt>, <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>, <var>keyResult</var>, <emu-const>lexicalBinding</emu-const>, <var>labelSet</var>).
        </li></ol></emu-alg>
        <emu-note><span class="note">Note</span>
          <p>This section is extended by Annex  <emu-xref href="#sec-initializers-in-forin-statement-heads"><a href="#sec-initializers-in-forin-statement-heads">B.3.6</a></emu-xref>.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="13.7.5.12" -->
      <emu-clause id="sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind" aoid="ForIn/OfHeadEvaluation">
        <h1><span class="secnum">13.7.5.12</span>Runtime Semantics: ForIn/OfHeadEvaluation ( <var>TDZnames</var>, <var>expr</var>, <var>iterationKind</var>)<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind">#</a></span></span></h1>
        <p>The abstract operation ForIn/OfHeadEvaluation is called with arguments <var>TDZnames</var>, <var>expr</var>, and <var>iterationKind</var>. The value of <var>iterationKind</var> is either <emu-const>enumerate</emu-const> or <emu-const>iterate</emu-const>.</p>
        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>TDZnames</var> is not an empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>, then<ol><li>Assert: <var>TDZnames</var> has no duplicate entries.</li><li>Let <var>TDZ</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>TDZEnvRec</var> be <var>TDZ</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>For each string <var>name</var> in <var>TDZnames</var>, do<ol><li>Perform ! <var>TDZEnvRec</var>.CreateMutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>TDZ</var>.</li></ol></li><li>Let <var>exprRef</var> be the result of evaluating <var>expr</var>.</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Let <var>exprValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>If <var>iterationKind</var> is <emu-const>enumerate</emu-const>, then<ol><li>If <var>exprValue</var>.[[Value]] is <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then<ol><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const>}.</li></ol></li><li>Let <var>obj</var> be <emu-xref aoid="ToObject"><a href="#sec-toobject">ToObject</a></emu-xref>(<var>exprValue</var>).</li><li>Return ? <emu-xref aoid="EnumerateObjectProperties"><a href="#sec-enumerate-object-properties">EnumerateObjectProperties</a></emu-xref>(<var>obj</var>).</li></ol></li><li>Else,<ol><li>Assert: <var>iterationKind</var> is <emu-const>iterate</emu-const>.</li><li>Return ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(<var>exprValue</var>).
        </li></ol></li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.5.13" -->
      <emu-clause id="sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset" aoid="ForIn/OfBodyEvaluation">
        <h1><span class="secnum">13.7.5.13</span>Runtime Semantics: ForIn/OfBodyEvaluation ( <var>lhs</var>, <var>stmt</var>, <var>iterator</var>, <var>lhsKind</var>, <var>labelSet</var> )<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset">#</a></span></span></h1>
        <p>The abstract operation ForIn/OfBodyEvaluation is called with arguments <var>lhs</var>, <var>stmt</var>, <var>iterator</var>, <var>lhsKind</var>, and <var>labelSet</var>. The value of <var>lhsKind</var> is either <emu-const>assignment</emu-const>, <emu-const>varBinding</emu-const> or <emu-const>lexicalBinding</emu-const>.</p>
        <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>destructuring</var> be IsDestructuring of <var>lhs</var>.</li><li>If <var>destructuring</var> is <emu-val>true</emu-val> and if <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li>Assert: <var>lhs</var> is a <emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt>.</li><li>Let <var>assignmentPattern</var> be the parse of the source text corresponding to <var>lhs</var> using <emu-nt><a href="#prod-AssignmentPattern">AssignmentPattern</a></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.</li></ol></li><li>Repeat<ol><li>Let <var>nextResult</var> be ? <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iterator</var>).</li><li>If <var>nextResult</var> is <emu-val>false</emu-val>, return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>nextValue</var> be ? <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>nextResult</var>).</li><li>If <var>lhsKind</var> is either <emu-const>assignment</emu-const> or <emu-const>varBinding</emu-const>, then<ol><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>lhsRef</var> be the result of evaluating <var>lhs</var>. (It may be evaluated repeatedly.)</li></ol></li></ol></li><li>Else,<ol><li>Assert: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li>Assert: <var>lhs</var> is a <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt>.</li><li>Let <var>iterationEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform BindingInstantiation for <var>lhs</var> passing <var>iterationEnv</var> as the argument.</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>iterationEnv</var>.</li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>Assert: <var>lhs</var> binds a single name.</li><li>Let <var>lhsName</var> be the sole element of BoundNames of <var>lhs</var>.</li><li>Let <var>lhsRef</var> be ! <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(<var>lhsName</var>).</li></ol></li></ol></li><li>If <var>destructuring</var> is <emu-val>false</emu-val>, then<ol><li>If <var>lhsRef</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then<ol><li>Let <var>status</var> be <var>lhsRef</var>.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>, then<ol><li>Let <var>status</var> be <emu-xref aoid="InitializeReferencedBinding"><a href="#sec-initializereferencedbinding">InitializeReferencedBinding</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li><li>Else,<ol><li>Let <var>status</var> be <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>(<var>lhsRef</var>, <var>nextValue</var>).</li></ol></li></ol></li><li>Else,<ol><li>If <var>lhsKind</var> is <emu-const>assignment</emu-const>, then<ol><li>Let <var>status</var> be the result of performing DestructuringAssignmentEvaluation of <var>assignmentPattern</var> using <var>nextValue</var> as the argument.</li></ol></li><li>Else if <var>lhsKind</var> is <emu-const>varBinding</emu-const>, then<ol><li>Assert: <var>lhs</var> is a <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>.</li><li>Let <var>status</var> be the result of performing BindingInitialization for <var>lhs</var> passing <var>nextValue</var> and <emu-val>undefined</emu-val> as the arguments.</li></ol></li><li>Else,<ol><li>Assert: <var>lhsKind</var> is <emu-const>lexicalBinding</emu-const>.</li><li>Assert: <var>lhs</var> is a <emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt>.</li><li>Let <var>status</var> be the result of performing BindingInitialization for <var>lhs</var> passing <var>nextValue</var> and <var>iterationEnv</var> as arguments.</li></ol></li></ol></li><li>If <var>status</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return ? <emu-xref aoid="IteratorClose"><a href="#sec-iteratorclose">IteratorClose</a></emu-xref>(<var>iterator</var>, <var>status</var>).</li></ol></li><li>Let <var>result</var> be the result of evaluating <var>stmt</var>.</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>If <emu-xref aoid="LoopContinues"><a href="#sec-loopcontinues">LoopContinues</a></emu-xref>(<var>result</var>, <var>labelSet</var>) is <emu-val>false</emu-val>, return ? <emu-xref aoid="IteratorClose"><a href="#sec-iteratorclose">IteratorClose</a></emu-xref>(<var>iterator</var>, <emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>result</var>, <var>V</var>)).</li><li>If <var>result</var>.[[Value]] is not <emu-const>empty</emu-const>, let <var>V</var> be <var>result</var>.[[Value]].
        </li></ol></li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="13.7.5.14" -->
      <emu-clause id="sec-for-in-and-for-of-statements-runtime-semantics-evaluation">
        <h1><span class="secnum">13.7.5.14</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-for-in-and-for-of-statements-runtime-semantics-evaluation">#</a></span></span></h1>
        <emu-grammar><emu-production name="ForBinding" collapsed="">
    <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>bindingId</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Return ? <emu-xref aoid="ResolveBinding"><a href="#sec-resolvebinding">ResolveBinding</a></emu-xref>(<var>bindingId</var>).
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="9.1.11" -->
      <emu-clause id="sec-enumerate-object-properties" aoid="EnumerateObjectProperties">
        <h1><span class="secnum">13.7.5.15</span>EnumerateObjectProperties (<var>O</var>)<span class="utils"><span class="anchor"><a href="#sec-enumerate-object-properties">#</a></span></span></h1>
        <p>When the abstract operation EnumerateObjectProperties is called with argument <var>O</var>, the following steps are taken:</p>
        <emu-alg><ol><li>Assert: <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>O</var>) is Object.</li><li>Return an Iterator object (<emu-xref href="#sec-iterator-interface"><a href="#sec-iterator-interface">25.1.1.2</a></emu-xref>) whose <code>next</code> method iterates over all the String-valued keys of enumerable properties of <var>O</var>.
 The iterator object is never directly accessible to ECMAScript code. 
The mechanics and order of enumerating the properties is not specified 
but must conform to the rules specified below.
        </li></ol></emu-alg>
        <p>The iterator's <code>throw</code> and <code>return</code> methods are <emu-val>null</emu-val> and are never invoked. The iterator's <code>next</code>
 method processes object properties to determine whether the property 
key should be returned as an iterator value. Returned property keys do 
not include keys that are Symbols. Properties of the target object may 
be deleted during enumeration. A property that is deleted before it is 
processed by the iterator's <code>next</code> method is ignored. If new 
properties are added to the target object during enumeration, the newly 
added properties are not guaranteed to be processed in the active 
enumeration. A property name will be returned by the iterator's <code>next</code> method at most once in any enumeration.</p>
        <p>Enumerating the properties of the target object includes 
enumerating properties of its prototype, and the prototype of the 
prototype, and so on, recursively; but a property of a prototype is not 
processed if it has the same name as a property that has already been 
processed by the iterator's <code>next</code> method. The values of 
[[Enumerable]] attributes are not considered when determining if a 
property of a prototype object has already been processed. The 
enumerable property names of prototype objects must be obtained by 
invoking EnumerateObjectProperties passing the prototype object as the 
argument. EnumerateObjectProperties must obtain the own property keys of
 the target object by calling its [[OwnPropertyKeys]] internal method. 
Property attributes of the target object must be obtained by calling its
 [[GetOwnProperty]] internal method.</p>
        <emu-note><span class="note">Note</span>
          <p>The following is an informative definition of an ECMAScript generator function that conforms to these rules:</p>
          <pre><code class="javascript hljs"><span class="hljs-function"><span class="hljs-keyword">function</span>* <span class="hljs-title">EnumerateObjectProperties</span>(<span class="hljs-params">obj</span>) </span>{
  <span class="hljs-keyword">const</span> visited = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Set</span>();
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> key <span class="hljs-keyword">of</span> <span class="hljs-built_in">Reflect</span>.ownKeys(obj)) {
    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> key === <span class="hljs-string">"symbol"</span>) <span class="hljs-keyword">continue</span>;
    <span class="hljs-keyword">const</span> desc = <span class="hljs-built_in">Reflect</span>.getOwnPropertyDescriptor(obj, key);
    <span class="hljs-keyword">if</span> (desc &amp;&amp; !visited.has(key)) {
      visited.add(key);
      <span class="hljs-keyword">if</span> (desc.enumerable) <span class="hljs-keyword">yield</span> key;
    }
  }
  <span class="hljs-keyword">const</span> proto = <span class="hljs-built_in">Reflect</span>.getPrototypeOf(obj);
  <span class="hljs-keyword">if</span> (proto === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span>;
  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> protoKey <span class="hljs-keyword">of</span> EnumerateObjectProperties(proto)) {
    <span class="hljs-keyword">if</span> (!visited.has(protoKey)) <span class="hljs-keyword">yield</span> protoKey;
  }
}</code></pre>
        </emu-note>
      </emu-clause>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.8" -->
  <emu-clause id="sec-continue-statement">
    <h1><span class="secnum">13.8</span>The <code>continue</code> Statement<span class="utils"><span class="anchor"><a href="#sec-continue-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="ContinueStatement" params="Yield" id="prod-ContinueStatement">
    <emu-nt params="Yield"><a href="#prod-ContinueStatement">ContinueStatement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e903cf81"><emu-t>continue</emu-t><emu-t>;</emu-t></emu-rhs>
    <emu-rhs a="aa0a32b6"><emu-t>continue</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params="?Yield"><a href="#prod-LabelIdentifier">LabelIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="13.8.1" -->
    <emu-clause id="sec-continue-statement-static-semantics-early-errors">
      <h1><span class="secnum">13.8.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-continue-statement-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="ContinueStatement" collapsed="">
    <emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e903cf81"><emu-t>continue</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production>
<emu-production name="ContinueStatement" collapsed="">
    <emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5a1eea0d"><emu-t>continue</emu-t><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if this production is not nested, 
directly or indirectly (but not crossing function boundaries), within an
 <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="13.8.2" -->
    <emu-clause id="sec-continue-statement-static-semantics-containsundefinedcontinuetarget">
      <h1><span class="secnum">13.8.2</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-continue-statement-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="ContinueStatement" collapsed="">
    <emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e903cf81"><emu-t>continue</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ContinueStatement" collapsed="">
    <emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5a1eea0d"><emu-t>continue</emu-t><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the StringValue of <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt> is not an element of <var>iterationSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.8.3" -->
    <emu-clause id="sec-continue-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.8.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-continue-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="ContinueStatement" collapsed="">
    <emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e903cf81"><emu-t>continue</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>continue</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const>}.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ContinueStatement" collapsed="">
    <emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5a1eea0d"><emu-t>continue</emu-t><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>label</var> be the StringValue of <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>continue</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <var>label</var> }.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.9" -->
  <emu-clause id="sec-break-statement">
    <h1><span class="secnum">13.9</span>The <code>break</code> Statement<span class="utils"><span class="anchor"><a href="#sec-break-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="BreakStatement" params="Yield" id="prod-BreakStatement">
    <emu-nt params="Yield"><a href="#prod-BreakStatement">BreakStatement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b65229e7"><emu-t>break</emu-t><emu-t>;</emu-t></emu-rhs>
    <emu-rhs a="8393d74c"><emu-t>break</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params="?Yield"><a href="#prod-LabelIdentifier">LabelIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="13.9.1" -->
    <emu-clause id="sec-break-statement-static-semantics-early-errors">
      <h1><span class="secnum">13.9.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-break-statement-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="BreakStatement" collapsed="">
    <emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b65229e7"><emu-t>break</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if this production is not nested, 
directly or indirectly (but not crossing function boundaries), within an
 <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt> or a <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="13.9.2" -->
    <emu-clause id="sec-break-statement-static-semantics-containsundefinedbreaktarget">
      <h1><span class="secnum">13.9.2</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-break-statement-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="BreakStatement" collapsed="">
    <emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b65229e7"><emu-t>break</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="BreakStatement" collapsed="">
    <emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="91c83ecb"><emu-t>break</emu-t><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the StringValue of <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt> is not an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.9.3" -->
    <emu-clause id="sec-break-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.9.3</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-break-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="BreakStatement" collapsed="">
    <emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b65229e7"><emu-t>break</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const>}.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="BreakStatement" collapsed="">
    <emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="91c83ecb"><emu-t>break</emu-t><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>label</var> be the StringValue of <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>break</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <var>label</var> }.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.10" -->
  <emu-clause id="sec-return-statement">
    <h1><span class="secnum">13.10</span>The <code>return</code> Statement<span class="utils"><span class="anchor"><a href="#sec-return-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="ReturnStatement" params="Yield" id="prod-ReturnStatement">
    <emu-nt params="Yield"><a href="#prod-ReturnStatement">ReturnStatement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b293381"><emu-t>return</emu-t><emu-t>;</emu-t></emu-rhs>
    <emu-rhs a="55b8d19e"><emu-t>return</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note</span>
      <p>A <code>return</code> statement causes a function to cease execution and return a value to the caller. If <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> is omitted, the return value is <emu-val>undefined</emu-val>. Otherwise, the return value is the value of <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</p>
    </emu-note>

    <!-- es6num="13.10.1" -->
    <emu-clause id="sec-return-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.10.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-return-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="ReturnStatement" collapsed="">
    <emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b293381"><emu-t>return</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>return</emu-const>, [[Value]]: <emu-val>undefined</emu-val>, [[Target]]: <emu-const>empty</emu-const>}.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ReturnStatement" collapsed="">
    <emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b4f7595f"><emu-t>return</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>exprValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>exprValue</var>, [[Target]]: <emu-const>empty</emu-const>}.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.11" -->
  <emu-clause id="sec-with-statement">
    <h1><span class="secnum">13.11</span>The <code>with</code> Statement<span class="utils"><span class="anchor"><a href="#sec-with-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="WithStatement" params="Yield, Return" id="prod-WithStatement">
    <emu-nt params="Yield, Return"><a href="#prod-WithStatement">WithStatement</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="426af9b1"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note</span>
      <p>The <code>with</code> statement adds an object <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for a computed object to the lexical environment of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>. It then executes a statement using this augmented lexical environment. Finally, it restores the original lexical environment.</p>
    </emu-note>

    <!-- es6num="13.11.1" -->
    <emu-clause id="sec-with-statement-static-semantics-early-errors">
      <h1><span class="secnum">13.11.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-with-statement-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="WithStatement" collapsed="">
    <emu-nt><a href="#prod-WithStatement">WithStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="23bd2456"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if the code that matches this production is contained in <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-xref aoid="IsLabelledFunction"><a href="#sec-islabelledfunction">IsLabelledFunction</a></emu-xref>(<emu-nt><a href="#prod-Statement">Statement</a></emu-nt>) is <emu-val>true</emu-val>.
        
        </li>
      </ul>
      <emu-note><span class="note">Note</span>
        <p>It is only necessary to apply the second rule if the extension specified in  <emu-xref href="#sec-labelled-function-declarations"><a href="#sec-labelled-function-declarations">B.3.2</a></emu-xref> is implemented.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="13.11.2" -->
    <emu-clause id="sec-with-statement-static-semantics-containsduplicatelabels">
      <h1><span class="secnum">13.11.2</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-with-statement-static-semantics-containsduplicatelabels">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
      <emu-grammar><emu-production name="WithStatement" collapsed="">
    <emu-nt><a href="#prod-WithStatement">WithStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="23bd2456"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.11.3" -->
    <emu-clause id="sec-with-statement-static-semantics-containsundefinedbreaktarget">
      <h1><span class="secnum">13.11.3</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-with-statement-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="WithStatement" collapsed="">
    <emu-nt><a href="#prod-WithStatement">WithStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="23bd2456"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.11.4" -->
    <emu-clause id="sec-with-statement-static-semantics-containsundefinedcontinuetarget">
      <h1><span class="secnum">13.11.4</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-with-statement-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="WithStatement" collapsed="">
    <emu-nt><a href="#prod-WithStatement">WithStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="23bd2456"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.11.5" -->
    <emu-clause id="sec-with-statement-static-semantics-vardeclarednames">
      <h1><span class="secnum">13.11.5</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-with-statement-static-semantics-vardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="WithStatement" collapsed="">
    <emu-nt><a href="#prod-WithStatement">WithStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="23bd2456"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.11.6" -->
    <emu-clause id="sec-with-statement-static-semantics-varscopeddeclarations">
      <h1><span class="secnum">13.11.6</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-with-statement-static-semantics-varscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="WithStatement" collapsed="">
    <emu-nt><a href="#prod-WithStatement">WithStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="23bd2456"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.11.7" -->
    <emu-clause id="sec-with-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.11.7</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-with-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="WithStatement" collapsed="">
    <emu-nt><a href="#prod-WithStatement">WithStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="23bd2456"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>val</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>obj</var> be ? <emu-xref aoid="ToObject"><a href="#sec-toobject">ToObject</a></emu-xref>(? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>val</var>)).</li><li>Let <var>oldEnv</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>newEnv</var> be <emu-xref aoid="NewObjectEnvironment"><a href="#sec-newobjectenvironment">NewObjectEnvironment</a></emu-xref>(<var>obj</var>, <var>oldEnv</var>).</li><li>Set the <var>withEnvironment</var> flag of <var>newEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref> to <emu-val>true</emu-val>.</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>newEnv</var>.</li><li>Let <var>C</var> be the result of evaluating <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>C</var>, <emu-val>undefined</emu-val>)).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>No matter how control leaves the embedded <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>, whether normally or by some form of <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref> or exception, the LexicalEnvironment is always restored to its former state.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.12" -->
  <emu-clause id="sec-switch-statement">
    <h1><span class="secnum">13.12</span>The <code>switch</code> Statement<span class="utils"><span class="anchor"><a href="#sec-switch-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="SwitchStatement" params="Yield, Return" id="prod-SwitchStatement">
    <emu-nt params="Yield, Return"><a href="#prod-SwitchStatement">SwitchStatement</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="98dc861c"><emu-t>switch</emu-t><emu-t>(</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-CaseBlock">CaseBlock</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="CaseBlock" params="Yield, Return" id="prod-CaseBlock">
    <emu-nt params="Yield, Return"><a href="#prod-CaseBlock">CaseBlock</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6c183f57"><emu-t>{</emu-t><emu-nt params="?Yield, ?Return" optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="f4a86919"><emu-t>{</emu-t><emu-nt params="?Yield, ?Return" optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="?Yield, ?Return"><a href="#prod-DefaultClause">DefaultClause</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield, ?Return" optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="CaseClauses" params="Yield, Return" id="prod-CaseClauses">
    <emu-nt params="Yield, Return"><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="99a26ad4"><emu-nt params="?Yield, ?Return"><a href="#prod-CaseClause">CaseClause</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="3f591ceb"><emu-nt params="?Yield, ?Return"><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield, ?Return"><a href="#prod-CaseClause">CaseClause</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="CaseClause" params="Yield, Return" id="prod-CaseClause">
    <emu-nt params="Yield, Return"><a href="#prod-CaseClause">CaseClause</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d394f627"><emu-t>case</emu-t><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params="?Yield, ?Return" optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="DefaultClause" params="Yield, Return" id="prod-DefaultClause">
    <emu-nt params="Yield, Return"><a href="#prod-DefaultClause">DefaultClause</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="59037441"><emu-t>default</emu-t><emu-t>:</emu-t><emu-nt params="?Yield, ?Return" optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="13.12.1" -->
    <emu-clause id="sec-switch-statement-static-semantics-early-errors">
      <h1><span class="secnum">13.12.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-switch-statement-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="SwitchStatement" collapsed="">
    <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="515acffe"><emu-t>switch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt> contains any duplicate entries.
        
        </li>
        <li>
          It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="13.12.2" -->
    <emu-clause id="sec-switch-statement-static-semantics-containsduplicatelabels">
      <h1><span class="secnum">13.12.2</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-switch-statement-static-semantics-containsduplicatelabels">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
      <emu-grammar><emu-production name="SwitchStatement" collapsed="">
    <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="515acffe"><emu-t>switch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="503b8396"><emu-t>{</emu-t><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return ContainsDuplicateLabels of the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClauses" collapsed="">
    <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="68374923"><emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c76d0d30"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return ContainsDuplicateLabels of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Else, return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="DefaultClause" collapsed="">
    <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782073e"><emu-t>default</emu-t><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return ContainsDuplicateLabels of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Else, return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.12.3" -->
    <emu-clause id="sec-switch-statement-static-semantics-containsundefinedbreaktarget">
      <h1><span class="secnum">13.12.3</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-switch-statement-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="SwitchStatement" collapsed="">
    <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="515acffe"><emu-t>switch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="503b8396"><emu-t>{</emu-t><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClauses" collapsed="">
    <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="68374923"><emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c76d0d30"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Else, return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="DefaultClause" collapsed="">
    <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782073e"><emu-t>default</emu-t><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with argument <var>labelSet</var>.</li><li>Else, return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.12.4" -->
    <emu-clause id="sec-switch-statement-static-semantics-containsundefinedcontinuetarget">
      <h1><span class="secnum">13.12.4</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-switch-statement-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="SwitchStatement" collapsed="">
    <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="515acffe"><emu-t>switch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="503b8396"><emu-t>{</emu-t><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is present, then<ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li></ol></li><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is not present, return <emu-val>false</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClauses" collapsed="">
    <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="68374923"><emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c76d0d30"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>Else, return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="DefaultClause" collapsed="">
    <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782073e"><emu-t>default</emu-t><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>Else, return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.12.5" -->
    <emu-clause id="sec-switch-statement-static-semantics-lexicallydeclarednames">
      <h1><span class="secnum">13.12.5</span>Static Semantics: LexicallyDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-switch-statement-static-semantics-lexicallydeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="503b8396"><emu-t>{</emu-t><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is present, let <var>names</var> be the LexicallyDeclaredNames of the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Append to <var>names</var> the elements of the LexicallyDeclaredNames of the <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is not present, return <var>names</var>.</li><li>Else, return the result of appending to <var>names</var> the elements of the LexicallyDeclaredNames of the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClauses" collapsed="">
    <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="68374923"><emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be LexicallyDeclaredNames of <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the LexicallyDeclaredNames of <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c76d0d30"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return the LexicallyDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Else, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="DefaultClause" collapsed="">
    <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782073e"><emu-t>default</emu-t><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return the LexicallyDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Else, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.12.6" -->
    <emu-clause id="sec-switch-statement-static-semantics-lexicallyscopeddeclarations">
      <h1><span class="secnum">13.12.6</span>Static Semantics: LexicallyScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-switch-statement-static-semantics-lexicallyscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="503b8396"><emu-t>{</emu-t><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is present, let <var>declarations</var> be the LexicallyScopedDeclarations of the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Append to <var>declarations</var> the elements of the LexicallyScopedDeclarations of the <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is not present, return <var>declarations</var>.</li><li>Else, return the result of appending to <var>declarations</var> the elements of the LexicallyScopedDeclarations of the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClauses" collapsed="">
    <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="68374923"><emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>declarations</var> be LexicallyScopedDeclarations of <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the LexicallyScopedDeclarations of <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt>.</li><li>Return <var>declarations</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c76d0d30"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return the LexicallyScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Else, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="DefaultClause" collapsed="">
    <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782073e"><emu-t>default</emu-t><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return the LexicallyScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Else, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.12.7" -->
    <emu-clause id="sec-switch-statement-static-semantics-vardeclarednames">
      <h1><span class="secnum">13.12.7</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-switch-statement-static-semantics-vardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="SwitchStatement" collapsed="">
    <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="515acffe"><emu-t>switch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="503b8396"><emu-t>{</emu-t><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is present, let <var>names</var> be the VarDeclaredNames of the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.</li><li>Else, let <var>names</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of the <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is not present, return <var>names</var>.</li><li>Else, return the result of appending to <var>names</var> the elements of the VarDeclaredNames of the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClauses" collapsed="">
    <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="68374923"><emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be VarDeclaredNames of <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c76d0d30"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return the VarDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Else, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="DefaultClause" collapsed="">
    <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782073e"><emu-t>default</emu-t><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return the VarDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Else, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.12.8" -->
    <emu-clause id="sec-switch-statement-static-semantics-varscopeddeclarations">
      <h1><span class="secnum">13.12.8</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-switch-statement-static-semantics-varscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="SwitchStatement" collapsed="">
    <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="515acffe"><emu-t>switch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="503b8396"><emu-t>{</emu-t><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is present, let <var>declarations</var> be the VarScopedDeclarations of the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.</li><li>Else, let <var>declarations</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of the <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt>.</li><li>If the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is not present, return <var>declarations</var>.</li><li>Else, return the result of appending to <var>declarations</var> the elements of the VarScopedDeclarations of the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClauses" collapsed="">
    <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="68374923"><emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt>.</li><li>Return <var>declarations</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c76d0d30"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return the VarScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Else, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="DefaultClause" collapsed="">
    <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782073e"><emu-t>default</emu-t><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return the VarScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.</li><li>Else, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.12.9" -->
    <emu-clause id="sec-runtime-semantics-caseblockevaluation">
      <h1><span class="secnum">13.12.9</span>Runtime Semantics: CaseBlockEvaluation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-caseblockevaluation">#</a></span></span></h1>
      <p>With argument <var>input</var>.</p>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="11eac196"><emu-t>{</emu-t><emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>A</var> be the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> items in <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>, in source text order.</li><li>Let <var>found</var> be <emu-val>false</emu-val>.</li><li>Repeat for each <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> <var>C</var> in <var>A</var>,<ol><li>If <var>found</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>clauseSelector</var> be the result of CaseSelectorEvaluation of <var>C</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>clauseSelector</var>).</li><li>Let <var>found</var> be the result of performing <emu-xref aoid="Strict Equality Comparison"><a href="#sec-strict-equality-comparison">Strict Equality Comparison</a></emu-xref> <var>input</var> === <var>clauseSelector</var>.[[Value]].</li></ol></li><li>If <var>found</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>R</var> be the result of evaluating <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, let <var>V</var> be <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>V</var>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="503b8396"><emu-t>{</emu-t><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>V</var> be <emu-val>undefined</emu-val>.</li><li>Let <var>A</var> be the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> items in the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>, in source text order. If the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is not present, <var>A</var> is Â« Â».</li><li>Let <var>found</var> be <emu-val>false</emu-val>.</li><li>Repeat for each <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> <var>C</var> in <var>A</var><ol><li>If <var>found</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>clauseSelector</var> be the result of CaseSelectorEvaluation of <var>C</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>clauseSelector</var>).</li><li>Let <var>found</var> be the result of performing <emu-xref aoid="Strict Equality Comparison"><a href="#sec-strict-equality-comparison">Strict Equality Comparison</a></emu-xref> <var>input</var> === <var>clauseSelector</var>.[[Value]].</li></ol></li><li>If <var>found</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>R</var> be the result of evaluating <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, let <var>V</var> be <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li></ol></li><li>Let <var>foundInB</var> be <emu-val>false</emu-val>.</li><li>Let <var>B</var> be the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing the <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> items in the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>, in source text order. If the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is not present, <var>B</var> is Â« Â».</li><li>If <var>found</var> is <emu-val>false</emu-val>, then<ol><li>Repeat for each <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> <var>C</var> in <var>B</var><ol><li>If <var>foundInB</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>clauseSelector</var> be the result of CaseSelectorEvaluation of <var>C</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>clauseSelector</var>).</li><li>Let <var>foundInB</var> be the result of performing <emu-xref aoid="Strict Equality Comparison"><a href="#sec-strict-equality-comparison">Strict Equality Comparison</a></emu-xref> <var>input</var> === <var>clauseSelector</var>.[[Value]].</li></ol></li><li>If <var>foundInB</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>R</var> be the result of evaluating <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, let <var>V</var> be <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li></ol></li></ol></li><li>If <var>foundInB</var> is <emu-val>true</emu-val>, return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>V</var>).</li><li>Let <var>R</var> be the result of evaluating <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, let <var>V</var> be <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li><li>Repeat for each <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> <var>C</var> in <var>B</var> (NOTE this is another complete iteration of the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt>)<ol><li>Let <var>R</var> be the result of evaluating <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> <var>C</var>.</li><li>If <var>R</var>.[[Value]] is not <emu-const>empty</emu-const>, let <var>V</var> be <var>R</var>.[[Value]].</li><li>If <var>R</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>R</var>, <var>V</var>)).</li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>V</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.12.10" -->
    <emu-clause id="sec-runtime-semantics-caseselectorevaluation">
      <h1><span class="secnum">13.12.10</span>Runtime Semantics: CaseSelectorEvaluation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-caseselectorevaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c76d0d30"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Return ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>CaseSelectorEvaluation does not execute the associated <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>. It simply evaluates the <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> and returns the value, which the <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt> algorithm uses to determine which <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> to start executing.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="13.12.11" -->
    <emu-clause id="sec-switch-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.12.11</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-switch-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="SwitchStatement" collapsed="">
    <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="515acffe"><emu-t>switch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>switchValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>oldEnv</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>blockEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Perform <emu-xref aoid="BlockDeclarationInstantiation"><a href="#sec-blockdeclarationinstantiation">BlockDeclarationInstantiation</a></emu-xref>(<emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt>, <var>blockEnv</var>).</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>blockEnv</var>.</li><li>Let <var>R</var> be the result of performing CaseBlockEvaluation of <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt> with argument <var>switchValue</var>.</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <var>R</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>No matter how control leaves the <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt> the LexicalEnvironment is always restored to its former state.</p>
      </emu-note>
      <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0261b19a"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7849dc0f"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="DefaultClause" collapsed="">
    <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b79ae3b1"><emu-t>default</emu-t><emu-t>:</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="DefaultClause" collapsed="">
    <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a1d00856"><emu-t>default</emu-t><emu-t>:</emu-t><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.13" -->
  <emu-clause id="sec-labelled-statements">
    <h1><span class="secnum">13.13</span>Labelled Statements<span class="utils"><span class="anchor"><a href="#sec-labelled-statements">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="LabelledStatement" params="Yield, Return" id="prod-LabelledStatement">
    <emu-nt params="Yield, Return"><a href="#prod-LabelledStatement">LabelledStatement</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="30100c33"><emu-nt params="?Yield"><a href="#prod-LabelIdentifier">LabelIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>:</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-LabelledItem">LabelledItem</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="LabelledItem" params="Yield, Return" id="prod-LabelledItem">
    <emu-nt params="Yield, Return"><a href="#prod-LabelledItem">LabelledItem</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a5329c8e"><emu-nt params="?Yield, ?Return"><a href="#prod-Statement">Statement</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="b0487dd7"><emu-nt params="?Yield, ~Default"><a href="#prod-FunctionDeclaration">FunctionDeclaration</a><emu-mods><emu-params>[?Yield, ~Default]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note</span>
      <p>A <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> may be prefixed by a label. Labelled statements are only used in conjunction with labelled <code>break</code> and <code>continue</code> statements. ECMAScript has no <code>goto</code> statement. A <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> can be part of a <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt>, which itself can be part of a <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt>,
 and so on. The labels introduced this way are collectively referred to 
as the âcurrent label setâ when describing the semantics of individual 
statements.</p>
    </emu-note>

    <!-- es6num="13.13.1" -->
    <emu-clause id="sec-labelled-statements-static-semantics-early-errors">
      <h1><span class="secnum">13.13.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if any source text matches this rule.
        
        </li>
      </ul>
      <emu-note><span class="note">Note</span>
        <p>An alternative definition for this rule is provided in  <emu-xref href="#sec-labelled-function-declarations"><a href="#sec-labelled-function-declarations">B.3.2</a></emu-xref>.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="13.13.2" -->
    <emu-clause id="sec-labelled-statements-static-semantics-containsduplicatelabels">
      <h1><span class="secnum">13.13.2</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-containsduplicatelabels">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>label</var> be the StringValue of <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt>.</li><li>If <var>label</var> is an element of <var>labelSet</var>, return <emu-val>true</emu-val>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.3" -->
    <emu-clause id="sec-labelled-statements-static-semantics-containsundefinedbreaktarget">
      <h1><span class="secnum">13.13.3</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>label</var> be the StringValue of <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt> with argument <var>newLabelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.4" -->
    <emu-clause id="sec-labelled-statements-static-semantics-containsundefinedcontinuetarget">
      <h1><span class="secnum">13.13.4</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>label</var> be the StringValue of <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt>.</li><li>Let <var>newLabelSet</var> be a copy of <var>labelSet</var> with <var>label</var> appended.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt> with arguments <var>iterationSet</var> and <var>newLabelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.5" -->
    <emu-clause id="sec-islabelledfunction" aoid="IsLabelledFunction">
      <h1><span class="secnum">13.13.5</span>Static Semantics: IsLabelledFunction ( <var>stmt</var> )<span class="utils"><span class="anchor"><a href="#sec-islabelledfunction">#</a></span></span></h1>
      <p>The abstract operation IsLabelledFunction with argument <var>stmt</var> performs the following steps:</p>
      <emu-alg><ol><li>If <var>stmt</var> is not a <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Let <var>item</var> be the <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt> component of <var>stmt</var>.</li><li>If <var>item</var> is <emu-grammar><emu-production name="LabelledItem" collapsed="" class=" inline">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , return <emu-val>true</emu-val>.</li><li>Let <var>subStmt</var> be the <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> component of <var>item</var>.</li><li>Return <emu-xref aoid="IsLabelledFunction"><a href="#sec-islabelledfunction">IsLabelledFunction</a></emu-xref>(<var>subStmt</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.6" -->
    <emu-clause id="sec-labelled-statements-static-semantics-lexicallydeclarednames">
      <h1><span class="secnum">13.13.6</span>Static Semantics: LexicallyDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-lexicallydeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the LexicallyDeclaredNames of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return BoundNames of <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.7" -->
    <emu-clause id="sec-labelled-statements-static-semantics-lexicallyscopeddeclarations">
      <h1><span class="secnum">13.13.7</span>Static Semantics: LexicallyScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-lexicallyscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the LexicallyScopedDeclarations of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.8" -->
    <emu-clause id="sec-labelled-statements-static-semantics-toplevellexicallydeclarednames">
      <h1><span class="secnum">13.13.8</span>Static Semantics: TopLevelLexicallyDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-toplevellexicallydeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="TopLevelLexicallyDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.9" -->
    <emu-clause id="sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations">
      <h1><span class="secnum">13.13.9</span>Static Semantics: TopLevelLexicallyScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-toplevellexicallyscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="TopLevelLexicallyScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.10" -->
    <emu-clause id="sec-labelled-statements-static-semantics-toplevelvardeclarednames">
      <h1><span class="secnum">13.13.10</span>Static Semantics: TopLevelVarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-toplevelvardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="TopLevelVarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the TopLevelVarDeclaredNames of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> is <emu-grammar><emu-production name="Statement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="08827f68"><emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , return TopLevelVarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return VarDeclaredNames of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return BoundNames of <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.11" -->
    <emu-clause id="sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations">
      <h1><span class="secnum">13.13.11</span>Static Semantics: TopLevelVarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-toplevelvarscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="TopLevelVarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the TopLevelVarScopedDeclarations of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> is <emu-grammar><emu-production name="Statement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="08827f68"><emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> , return TopLevelVarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.</li><li>Return VarScopedDeclarations of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.12" -->
    <emu-clause id="sec-labelled-statements-static-semantics-vardeclarednames">
      <h1><span class="secnum">13.13.12</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-vardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.13" -->
    <emu-clause id="sec-labelled-statements-static-semantics-varscopeddeclarations">
      <h1><span class="secnum">13.13.13</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-static-semantics-varscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.14" -->
    <emu-clause id="sec-labelled-statements-runtime-semantics-labelledevaluation">
      <h1><span class="secnum">13.13.14</span>Runtime Semantics: LabelledEvaluation<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-runtime-semantics-labelledevaluation">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="LabelledEvaluation"></emu-see-also-para>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>label</var> be the StringValue of <emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt>.</li><li>Append <var>label</var> as an element of <var>labelSet</var>.</li><li>Let <var>stmtResult</var> be LabelledEvaluation of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>stmtResult</var>.[[Type]] is <emu-const>break</emu-const> and <emu-xref aoid="SameValue"><a href="#sec-samevalue">SameValue</a></emu-xref>(<var>stmtResult</var>.[[Target]], <var>label</var>) is <emu-val>true</emu-val>, then<ol><li>Let <var>stmtResult</var> be <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>stmtResult</var>.[[Value]]).</li></ol></li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>stmtResult</var>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a72ca256"><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> is either a <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt> or a <emu-nt><a href="#prod-BreakableStatement">BreakableStatement</a></emu-nt>, then<ol><li>Return LabelledEvaluation of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>labelSet</var>.</li></ol></li><li>Else,<ol><li>Return the result of evaluating <emu-nt><a href="#prod-Statement">Statement</a></emu-nt>.
      </li></ol></li></ol></emu-alg>
      <emu-grammar><emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.13.15" -->
    <emu-clause id="sec-labelled-statements-runtime-semantics-evaluation">
      <h1><span class="secnum">13.13.15</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-labelled-statements-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="LabelledStatement" collapsed="">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>newLabelSet</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Return LabelledEvaluation of this <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt> with argument <var>newLabelSet</var>.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.14" -->
  <emu-clause id="sec-throw-statement">
    <h1><span class="secnum">13.14</span>The <code>throw</code> Statement<span class="utils"><span class="anchor"><a href="#sec-throw-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="ThrowStatement" params="Yield" id="prod-ThrowStatement">
    <emu-nt params="Yield"><a href="#prod-ThrowStatement">ThrowStatement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8d5d0423"><emu-t>throw</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params="+In, ?Yield"><a href="#prod-Expression">Expression</a><emu-mods><emu-params>[+In, ?Yield]</emu-params></emu-mods></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="13.14.1" -->
    <emu-clause id="sec-throw-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.14.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-throw-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="ThrowStatement" collapsed="">
    <emu-nt><a href="#prod-ThrowStatement">ThrowStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="940518e2"><emu-t>throw</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-Expression">Expression</a></emu-nt>.</li><li>Let <var>exprValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>throw</emu-const>, [[Value]]: <var>exprValue</var>, [[Target]]: <emu-const>empty</emu-const>}.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.15" -->
  <emu-clause id="sec-try-statement">
    <h1><span class="secnum">13.15</span>The <code>try</code> Statement<span class="utils"><span class="anchor"><a href="#sec-try-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="TryStatement" params="Yield, Return" id="prod-TryStatement">
    <emu-nt params="Yield, Return"><a href="#prod-TryStatement">TryStatement</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="624913c6"><emu-t>try</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Block">Block</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield, ?Return"><a href="#prod-Catch">Catch</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="4d12a36d"><emu-t>try</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Block">Block</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield, ?Return"><a href="#prod-Finally">Finally</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="0e4cced4"><emu-t>try</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Block">Block</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield, ?Return"><a href="#prod-Catch">Catch</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield, ?Return"><a href="#prod-Finally">Finally</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="Catch" params="Yield, Return" id="prod-Catch">
    <emu-nt params="Yield, Return"><a href="#prod-Catch">Catch</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="626e3734"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt params="?Yield"><a href="#prod-CatchParameter">CatchParameter</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Block">Block</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="Finally" params="Yield, Return" id="prod-Finally">
    <emu-nt params="Yield, Return"><a href="#prod-Finally">Finally</a><emu-mods><emu-params>[Yield, Return]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a8da6c41"><emu-t>finally</emu-t><emu-nt params="?Yield, ?Return"><a href="#prod-Block">Block</a><emu-mods><emu-params>[?Yield, ?Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="CatchParameter" params="Yield" id="prod-CatchParameter">
    <emu-nt params="Yield"><a href="#prod-CatchParameter">CatchParameter</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="46cd8f8d"><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="7a565a71"><emu-nt params="?Yield"><a href="#prod-BindingPattern">BindingPattern</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note</span>
      <p>The <code>try</code> statement encloses a block of code in which an exceptional condition can occur, such as a runtime error or a <code>throw</code> statement. The <code>catch</code> clause provides the exception-handling code. When a catch clause catches an exception, its <emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt> is bound to that exception.</p>
    </emu-note>

    <!-- es6num="13.15.1" -->
    <emu-clause id="sec-try-statement-static-semantics-early-errors">
      <h1><span class="secnum">13.15.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-try-statement-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="Catch" collapsed="">
    <emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ddc13c36"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if BoundNames of <emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt> contains any duplicate elements.
        
        </li>
        <li>
          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href="#prod-Block">Block</a></emu-nt>.
        
        </li>
        <li>
          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href="#prod-Block">Block</a></emu-nt>.
        
        </li>
      </ul>
      <emu-note><span class="note">Note</span>
        <p>An alternative static semantics for this production is given in  <emu-xref href="#sec-variablestatements-in-catch-blocks"><a href="#sec-variablestatements-in-catch-blocks">B.3.5</a></emu-xref>.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="13.15.2" -->
    <emu-clause id="sec-try-statement-static-semantics-containsduplicatelabels">
      <h1><span class="secnum">13.15.2</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-try-statement-static-semantics-containsduplicatelabels">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a8714e57"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5ec68ab9"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1b19737c"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="Catch" collapsed="">
    <emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ddc13c36"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.15.3" -->
    <emu-clause id="sec-try-statement-static-semantics-containsundefinedbreaktarget">
      <h1><span class="secnum">13.15.3</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-try-statement-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
      <p>With argument <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a8714e57"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5ec68ab9"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1b19737c"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="Catch" collapsed="">
    <emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ddc13c36"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with argument <var>labelSet</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.15.4" -->
    <emu-clause id="sec-try-statement-static-semantics-containsundefinedcontinuetarget">
      <h1><span class="secnum">13.15.4</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-try-statement-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
      <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
      <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a8714e57"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5ec68ab9"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1b19737c"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="Catch" collapsed="">
    <emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ddc13c36"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.15.5" -->
    <emu-clause id="sec-try-statement-static-semantics-vardeclarednames">
      <h1><span class="secnum">13.15.5</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-try-statement-static-semantics-vardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a8714e57"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be VarDeclaredNames of <emu-nt><a href="#prod-Block">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5ec68ab9"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be VarDeclaredNames of <emu-nt><a href="#prod-Block">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1b19737c"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be VarDeclaredNames of <emu-nt><a href="#prod-Block">Block</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="Catch" collapsed="">
    <emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ddc13c36"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the VarDeclaredNames of <emu-nt><a href="#prod-Block">Block</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.15.6" -->
    <emu-clause id="sec-try-statement-static-semantics-varscopeddeclarations">
      <h1><span class="secnum">13.15.6</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-try-statement-static-semantics-varscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a8714e57"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of <emu-nt><a href="#prod-Block">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt>.</li><li>Return <var>declarations</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5ec68ab9"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of <emu-nt><a href="#prod-Block">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt>.</li><li>Return <var>declarations</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1b19737c"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of <emu-nt><a href="#prod-Block">Block</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt>.</li><li>Return <var>declarations</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="Catch" collapsed="">
    <emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ddc13c36"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the VarScopedDeclarations of <emu-nt><a href="#prod-Block">Block</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="13.15.7" -->
    <emu-clause id="sec-runtime-semantics-catchclauseevaluation">
      <h1><span class="secnum">13.15.7</span>Runtime Semantics: CatchClauseEvaluation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-catchclauseevaluation">#</a></span></span></h1>
      <p>with parameter <var>thrownValue</var></p>
      <emu-grammar><emu-production name="Catch" collapsed="">
    <emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ddc13c36"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>oldEnv</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>catchEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>oldEnv</var>).</li><li>Let <var>catchEnvRec</var> be <var>catchEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>For each element <var>argName</var> of the BoundNames of <emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt>, do<ol><li>Perform ! <var>catchEnvRec</var>.CreateMutableBinding(<var>argName</var>, <emu-val>false</emu-val>).</li></ol></li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>catchEnv</var>.</li><li>Let <var>status</var> be the result of performing BindingInitialization for <emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt> passing <var>thrownValue</var> and <var>catchEnv</var> as arguments.</li><li>If <var>status</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>status</var>).</li></ol></li><li>Let <var>B</var> be the result of evaluating <emu-nt><a href="#prod-Block">Block</a></emu-nt>.</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>oldEnv</var>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>B</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>No matter how control leaves the <emu-nt><a href="#prod-Block">Block</a></emu-nt> the LexicalEnvironment is always restored to its former state.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="13.15.8" -->
    <emu-clause id="sec-try-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.15.8</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-try-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a8714e57"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>B</var> be the result of evaluating <emu-nt><a href="#prod-Block">Block</a></emu-nt>.</li><li>If <var>B</var>.[[Type]] is <emu-const>throw</emu-const>, let <var>C</var> be CatchClauseEvaluation of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt> with parameter <var>B</var>.[[Value]].</li><li>Else, let <var>C</var> be <var>B</var>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>C</var>, <emu-val>undefined</emu-val>)).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5ec68ab9"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>B</var> be the result of evaluating <emu-nt><a href="#prod-Block">Block</a></emu-nt>.</li><li>Let <var>F</var> be the result of evaluating <emu-nt><a href="#prod-Finally">Finally</a></emu-nt>.</li><li>If <var>F</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>F</var> be <var>B</var>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>F</var>, <emu-val>undefined</emu-val>)).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1b19737c"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>B</var> be the result of evaluating <emu-nt><a href="#prod-Block">Block</a></emu-nt>.</li><li>If <var>B</var>.[[Type]] is <emu-const>throw</emu-const>, let <var>C</var> be CatchClauseEvaluation of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt> with parameter <var>B</var>.[[Value]].</li><li>Else, let <var>C</var> be <var>B</var>.</li><li>Let <var>F</var> be the result of evaluating <emu-nt><a href="#prod-Finally">Finally</a></emu-nt>.</li><li>If <var>F</var>.[[Type]] is <emu-const>normal</emu-const>, let <var>F</var> be <var>C</var>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<emu-xref aoid="UpdateEmpty"><a href="#sec-updateempty">UpdateEmpty</a></emu-xref>(<var>F</var>, <emu-val>undefined</emu-val>)).
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="13.16" -->
  <emu-clause id="sec-debugger-statement">
    <h1><span class="secnum">13.16</span>The <code>debugger</code> Statement<span class="utils"><span class="anchor"><a href="#sec-debugger-statement">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="DebuggerStatement" id="prod-DebuggerStatement">
    <emu-nt><a href="#prod-DebuggerStatement">DebuggerStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="352e6172"><emu-t>debugger</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="13.16.1" -->
    <emu-clause id="sec-debugger-statement-runtime-semantics-evaluation">
      <h1><span class="secnum">13.16.1</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-debugger-statement-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-note><span class="note">Note</span>
        <p>Evaluating the <emu-nt><a href="#prod-DebuggerStatement">DebuggerStatement</a></emu-nt>
 production may allow an implementation to cause a breakpoint when run 
under a debugger. If a debugger is not present or active this statement 
has no observable effect.</p>
      </emu-note>
      <emu-grammar><emu-production name="DebuggerStatement" collapsed="">
    <emu-nt><a href="#prod-DebuggerStatement">DebuggerStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="352e6172"><emu-t>debugger</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If an implementation defined debugging facility is available and enabled, then<ol><li>Perform an implementation defined debugging action.</li><li>Let <var>result</var> be an implementation defined <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref> value.</li></ol></li><li>Else,<ol><li>Let <var>result</var> be <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).</li></ol></li><li>Return <var>result</var>.
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>
</emu-clause>

<!-- es6num="14" -->
<emu-clause id="sec-ecmascript-language-functions-and-classes">
  <h1><span class="secnum">14</span>ECMAScript Language: Functions and Classes<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-functions-and-classes">#</a></span></span></h1>
  <emu-note><span class="note">Note</span>
    <p>Various ECMAScript language elements cause the creation of ECMAScript function objects (<emu-xref href="#sec-ecmascript-function-objects"><a href="#sec-ecmascript-function-objects">9.2</a></emu-xref>). Evaluation of such functions starts with the execution of their [[Call]] internal method (<emu-xref href="#sec-ecmascript-function-objects-call-thisargument-argumentslist"><a href="#sec-ecmascript-function-objects-call-thisargument-argumentslist">9.2.1</a></emu-xref>).</p>
  </emu-note>

  <!-- es6num="14.1" -->
  <emu-clause id="sec-function-definitions">
    <h1><span class="secnum">14.1</span>Function Definitions<span class="utils"><span class="anchor"><a href="#sec-function-definitions">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="FunctionDeclaration" params="Yield, Default" id="prod-FunctionDeclaration">
    <emu-nt params="Yield, Default"><a href="#prod-FunctionDeclaration">FunctionDeclaration</a><emu-mods><emu-params>[Yield, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6906b92c"><emu-t>function</emu-t><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params="~Yield"><a href="#prod-FormalParameters">FormalParameters</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params="~Yield"><a href="#prod-FunctionBody">FunctionBody</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="0d2676bb" constraints="+Default"><emu-constraints>[+Default]</emu-constraints><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt params="~Yield"><a href="#prod-FormalParameters">FormalParameters</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params="~Yield"><a href="#prod-FunctionBody">FunctionBody</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="FunctionExpression" id="prod-FunctionExpression">
    <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf497a4e"><emu-t>function</emu-t><emu-nt params="~Yield" optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[~Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params="~Yield"><a href="#prod-FormalParameters">FormalParameters</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params="~Yield"><a href="#prod-FunctionBody">FunctionBody</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="UniqueFormalParameters" params="Yield" id="prod-UniqueFormalParameters">
    <emu-nt params="Yield"><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f2b7baf7"><emu-nt params="?Yield"><a href="#prod-FormalParameters">FormalParameters</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="FormalParameters" params="Yield" id="prod-FormalParameters">
    <emu-nt params="Yield"><a href="#prod-FormalParameters">FormalParameters</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
    <emu-rhs a="d2a3a034"><emu-nt params="?Yield"><a href="#prod-FormalParameterList">FormalParameterList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="FormalParameterList" params="Yield" id="prod-FormalParameterList">
    <emu-nt params="Yield"><a href="#prod-FormalParameterList">FormalParameterList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e68a5f58"><emu-nt params="?Yield"><a href="#prod-FunctionRestParameter">FunctionRestParameter</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="b8cc29a6"><emu-nt params="?Yield"><a href="#prod-FormalsList">FormalsList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="b5146716"><emu-nt params="?Yield"><a href="#prod-FormalsList">FormalsList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="?Yield"><a href="#prod-FunctionRestParameter">FunctionRestParameter</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="FormalsList" params="Yield" id="prod-FormalsList">
    <emu-nt params="Yield"><a href="#prod-FormalsList">FormalsList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="09746c9e"><emu-nt params="?Yield"><a href="#prod-FormalParameter">FormalParameter</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="0666e9c8"><emu-nt params="?Yield"><a href="#prod-FormalsList">FormalsList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>,</emu-t><emu-nt params="?Yield"><a href="#prod-FormalParameter">FormalParameter</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="FunctionRestParameter" params="Yield" id="prod-FunctionRestParameter">
    <emu-nt params="Yield"><a href="#prod-FunctionRestParameter">FunctionRestParameter</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="32c9732e"><emu-nt params="?Yield"><a href="#prod-BindingRestElement">BindingRestElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="FormalParameter" params="Yield" id="prod-FormalParameter">
    <emu-nt params="Yield"><a href="#prod-FormalParameter">FormalParameter</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9ace2d44"><emu-nt params="?Yield"><a href="#prod-BindingElement">BindingElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="FunctionBody" params="Yield" id="prod-FunctionBody">
    <emu-nt params="Yield"><a href="#prod-FunctionBody">FunctionBody</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="aba865c5"><emu-nt params="?Yield"><a href="#prod-FunctionStatementList">FunctionStatementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="FunctionStatementList" params="Yield" id="prod-FunctionStatementList">
    <emu-nt params="Yield"><a href="#prod-FunctionStatementList">FunctionStatementList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6fda64b9"><emu-nt params="?Yield, +Return" optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-params>[?Yield, +Return]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="14.1.1" -->
    <emu-clause id="sec-directive-prologues-and-the-use-strict-directive">
      <h1><span class="secnum">14.1.1</span>Directive Prologues and the Use Strict Directive<span class="utils"><span class="anchor"><a href="#sec-directive-prologues-and-the-use-strict-directive">#</a></span></span></h1>
      <p>A  <dfn id="directive-prologue">Directive Prologue</dfn> is the longest sequence of <emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt> productions occurring as the initial <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt> or <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt> productions of a <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>, a <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt>, or a <emu-nt><a href="#prod-ModuleBody">ModuleBody</a></emu-nt> and where each <emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt> in the sequence consists entirely of a <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt> token followed by a semicolon. The semicolon may appear explicitly or may be inserted by automatic semicolon insertion. A <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref> may be an empty sequence.</p>
      <p>A  <dfn id="use-strict-directive">Use Strict Directive</dfn> is an <emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt> in a <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref> whose <emu-nt><a href="#prod-StringLiteral">StringLiteral</a></emu-nt> is either the exact code unit sequences <code>"use strict"</code> or <code>'use strict'</code>. A <emu-xref href="#use-strict-directive"><a href="#use-strict-directive">Use Strict Directive</a></emu-xref> may not contain an <emu-nt><a href="#prod-EscapeSequence">EscapeSequence</a></emu-nt> or <emu-nt><a href="#prod-LineContinuation">LineContinuation</a></emu-nt>.</p>
      <p>A <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref> may contain more than one <emu-xref href="#use-strict-directive"><a href="#use-strict-directive">Use Strict Directive</a></emu-xref>. However, an implementation may issue a warning if this occurs.</p>
      <emu-note><span class="note">Note</span>
        <p>The <emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt> productions of a <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref>
 are evaluated normally during evaluation of the containing production. 
Implementations may define implementation specific meanings for <emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt> productions which are not a <emu-xref href="#use-strict-directive"><a href="#use-strict-directive">Use Strict Directive</a></emu-xref> and which occur in a <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref>. If an appropriate notification mechanism exists, an implementation should issue a warning if it encounters in a <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref> an <emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt> that is not a <emu-xref href="#use-strict-directive"><a href="#use-strict-directive">Use Strict Directive</a></emu-xref> and which does not have a meaning defined by the implementation.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.1.2" -->
    <emu-clause id="sec-function-definitions-static-semantics-early-errors">
      <h1><span class="secnum">14.1.2</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81739a57"><emu-t>function</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b26bacea"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="FunctionExpression" collapsed="">
    <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8379937e"><emu-t>function</emu-t><emu-nt optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          If the source code matching this production is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, the Early Error rules for  <emu-grammar><emu-production name="UniqueFormalParameters" collapsed="" class=" inline">
    <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0218c6f5"><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> are applied.
        
        </li>
        <li>
          If the source code matching this production is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, it is a Syntax Error if <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt> is the <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> <code>eval</code> or the <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> <code>arguments</code>.
        
        </li>
        <li>
          It is a Syntax Error if ContainsUseStrict of <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> is <emu-val>true</emu-val> and IsSimpleParameterList of <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> Contains <emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> Contains <emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
      </ul>
      <emu-note><span class="note">Note 1</span>
        <p>The LexicallyDeclaredNames of a <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> does not include identifiers bound using var or function declarations.</p>
      </emu-note>
      <emu-grammar><emu-production name="UniqueFormalParameters" collapsed="">
    <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0218c6f5"><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if BoundNames of <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> contains any duplicate elements.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="FormalParameters" collapsed="">
    <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="32e3c3aa"><emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if IsSimpleParameterList of <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt> is <emu-val>false</emu-val> and BoundNames of <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt> contains any duplicate elements.
        
        </li>
      </ul>
      <emu-note><span class="note">Note 2</span>
        <p>Multiple occurrences of the same <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt> in a <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt> is only allowed for functions and generator functions which have simple parameter lists and which are not defined in <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>.</p>
      </emu-note>
      <emu-grammar><emu-production name="FunctionBody" collapsed="">
    <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5cdf1a9f"><emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt> contains any duplicate entries.
        
        </li>
        <li>
          It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt>.
        
        </li>
        <li>
          It is a Syntax Error if ContainsDuplicateLabels of <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt> with argument Â« Â» is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt> with argument Â« Â» is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt> with arguments Â« Â» and Â« Â» is <emu-val>true</emu-val>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="14.1.3" -->
    <emu-clause id="sec-function-definitions-static-semantics-boundnames">
      <h1><span class="secnum">14.1.3</span>Static Semantics: BoundNames<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-boundnames">#</a></span></span></h1>
      <emu-see-also-para op="BoundNames"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81739a57"><emu-t>function</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b26bacea"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return Â« <code>"*default*"</code> Â».
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p><code>"*default*"</code> is used within this specification as
 a synthetic name for hoistable anonymous functions that are defined 
using export declarations.</p>
      </emu-note>
      <emu-grammar><emu-production name="FormalParameters" collapsed="">
    <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalParameterList" collapsed="">
    <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="feda2930"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt>.</li><li>Append to <var>names</var> the BoundNames of <emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalsList" collapsed="">
    <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="903f2a03"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>names</var> be BoundNames of <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of BoundNames of <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt>.</li><li>Return <var>names</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.4" -->
    <emu-clause id="sec-function-definitions-static-semantics-contains">
      <h1><span class="secnum">14.1.4</span>Static Semantics: Contains<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-contains">#</a></span></span></h1>
      <p>With parameter <var>symbol</var>.</p>
      <emu-see-also-para op="Contains"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81739a57"><emu-t>function</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b26bacea"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="FunctionExpression" collapsed="">
    <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8379937e"><emu-t>function</emu-t><emu-nt optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Static semantic rules that depend upon substructure generally do not look into function definitions.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.1.5" -->
    <emu-clause id="sec-function-definitions-static-semantics-containsexpression">
      <h1><span class="secnum">14.1.5</span>Static Semantics: ContainsExpression<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-containsexpression">#</a></span></span></h1>
      <emu-see-also-para op="ContainsExpression"></emu-see-also-para>
      <emu-grammar><emu-production name="FormalParameters" collapsed="">
    <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalParameterList" collapsed="">
    <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="74d26704"><emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ContainsExpression of <emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalParameterList" collapsed="">
    <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="feda2930"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If ContainsExpression of <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsExpression of <emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalsList" collapsed="">
    <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="903f2a03"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If ContainsExpression of <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsExpression of <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <emu-clause id="sec-function-definitions-static-semantics-containsusestrict">
      <h1><span class="secnum">14.1.6</span>Static Semantics: ContainsUseStrict<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-containsusestrict">#</a></span></span></h1>
      <emu-see-also-para op="ContainsUseStrict"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionBody" collapsed="">
    <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5cdf1a9f"><emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref> of <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt> contains a <emu-xref href="#use-strict-directive"><a href="#use-strict-directive">Use Strict Directive</a></emu-xref>, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.6" -->
    <emu-clause id="sec-function-definitions-static-semantics-expectedargumentcount">
      <h1><span class="secnum">14.1.7</span>Static Semantics: ExpectedArgumentCount<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-expectedargumentcount">#</a></span></span></h1>
      <emu-see-also-para op="ExpectedArgumentCount"></emu-see-also-para>
      <emu-grammar><emu-production name="FormalParameters" collapsed="">
    <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return 0.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalParameterList" collapsed="">
    <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="74d26704"><emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return 0.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalParameterList" collapsed="">
    <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="feda2930"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the ExpectedArgumentCount of <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>The ExpectedArgumentCount of a <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt> is the number of <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> to the left of either the rest parameter or the first <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt> with an Initializer. A <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt>
 without an initializer is allowed after the first parameter with an 
initializer but such parameters are considered to be optional with <emu-val>undefined</emu-val> as their default value.</p>
      </emu-note>
      <emu-grammar><emu-production name="FormalsList" collapsed="">
    <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="497954f5"><emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If HasInitializer of <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt> is <emu-val>true</emu-val>, return 0.</li><li>Return 1.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalsList" collapsed="">
    <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="903f2a03"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>count</var> be the ExpectedArgumentCount of <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt>.</li><li>If HasInitializer of <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt> is <emu-val>true</emu-val> or HasInitializer of <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt> is <emu-val>true</emu-val>, return <var>count</var>.</li><li>Return <var>count</var>+1.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.7" -->
    <emu-clause id="sec-function-definitions-static-semantics-hasinitializer">
      <h1><span class="secnum">14.1.8</span>Static Semantics: HasInitializer<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-hasinitializer">#</a></span></span></h1>
      <emu-see-also-para op="HasInitializer"></emu-see-also-para>
      <emu-grammar><emu-production name="FormalsList" collapsed="">
    <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="903f2a03"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If HasInitializer of <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return HasInitializer of <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.8" -->
    <emu-clause id="sec-function-definitions-static-semantics-hasname">
      <h1><span class="secnum">14.1.9</span>Static Semantics: HasName<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-hasname">#</a></span></span></h1>
      <emu-see-also-para op="HasName"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionExpression" collapsed="">
    <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b26bacea"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FunctionExpression" collapsed="">
    <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81739a57"><emu-t>function</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.9" -->
    <emu-clause id="sec-isanonymousfunctiondefinition" aoid="IsAnonymousFunctionDefinition">
      <h1><span class="secnum">14.1.10</span>Static Semantics: IsAnonymousFunctionDefinition ( <var>production</var> )<span class="utils"><span class="anchor"><a href="#sec-isanonymousfunctiondefinition">#</a></span></span></h1>
      <p>The abstract operation IsAnonymousFunctionDefinition determines
 if its argument is a function definition that does not bind a name. The
 argument <var>production</var> is the result of parsing an <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt> or <emu-nt><a href="#prod-Initializer">Initializer</a></emu-nt>. The following steps are taken:</p>
      <emu-alg><ol><li>If IsFunctionDefinition of <var>production</var> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Let <var>hasName</var> be the result of HasName of <var>production</var>.</li><li>If <var>hasName</var> is <emu-val>true</emu-val>, return <emu-val>false</emu-val>.</li><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.10" -->
    <emu-clause id="sec-function-definitions-static-semantics-isconstantdeclaration">
      <h1><span class="secnum">14.1.11</span>Static Semantics: IsConstantDeclaration<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-isconstantdeclaration">#</a></span></span></h1>
      <emu-see-also-para op="IsConstantDeclaration"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81739a57"><emu-t>function</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b26bacea"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.11" -->
    <emu-clause id="sec-function-definitions-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">14.1.12</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionExpression" collapsed="">
    <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8379937e"><emu-t>function</emu-t><emu-nt optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.12" -->
    <emu-clause id="sec-function-definitions-static-semantics-issimpleparameterlist">
      <h1><span class="secnum">14.1.13</span>Static Semantics: IsSimpleParameterList<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-issimpleparameterlist">#</a></span></span></h1>
      <emu-see-also-para op="IsSimpleParameterList"></emu-see-also-para>
      <emu-grammar><emu-production name="FormalParameters" collapsed="">
    <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalParameterList" collapsed="">
    <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="74d26704"><emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalParameterList" collapsed="">
    <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="feda2930"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalsList" collapsed="">
    <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="903f2a03"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If IsSimpleParameterList of <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt> is <emu-val>false</emu-val>, return <emu-val>false</emu-val>.</li><li>Return IsSimpleParameterList of <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalParameter" collapsed="">
    <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="03366b31"><emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return IsSimpleParameterList of <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.13" -->
    <emu-clause id="sec-function-definitions-static-semantics-lexicallydeclarednames">
      <h1><span class="secnum">14.1.14</span>Static Semantics: LexicallyDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-lexicallydeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionStatementList" collapsed="">
    <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FunctionStatementList" collapsed="">
    <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf403a0c"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return TopLevelLexicallyDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.14" -->
    <emu-clause id="sec-function-definitions-static-semantics-lexicallyscopeddeclarations">
      <h1><span class="secnum">14.1.15</span>Static Semantics: LexicallyScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-lexicallyscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionStatementList" collapsed="">
    <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FunctionStatementList" collapsed="">
    <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf403a0c"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the TopLevelLexicallyScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.15" -->
    <emu-clause id="sec-function-definitions-static-semantics-vardeclarednames">
      <h1><span class="secnum">14.1.16</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-vardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionStatementList" collapsed="">
    <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FunctionStatementList" collapsed="">
    <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf403a0c"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return TopLevelVarDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.16" -->
    <emu-clause id="sec-function-definitions-static-semantics-varscopeddeclarations">
      <h1><span class="secnum">14.1.17</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-function-definitions-static-semantics-varscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionStatementList" collapsed="">
    <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FunctionStatementList" collapsed="">
    <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf403a0c"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the TopLevelVarScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.17" -->
    <emu-clause id="sec-function-definitions-runtime-semantics-evaluatebody">
      <h1><span class="secnum">14.1.18</span>Runtime Semantics: EvaluateBody<span class="utils"><span class="anchor"><a href="#sec-function-definitions-runtime-semantics-evaluatebody">#</a></span></span></h1>
      <p>With parameter <var>functionObject</var>.</p>
      <emu-see-also-para op="EvaluateBody"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionBody" collapsed="">
    <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5cdf1a9f"><emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the result of evaluating <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.1.18" -->
    <emu-clause id="sec-function-definitions-runtime-semantics-iteratorbindinginitialization">
      <h1><span class="secnum">14.1.19</span>Runtime Semantics: IteratorBindingInitialization<span class="utils"><span class="anchor"><a href="#sec-function-definitions-runtime-semantics-iteratorbindinginitialization">#</a></span></span></h1>
      <p>With parameters <var>iteratorRecord</var> and <var>environment</var>.</p>
      <emu-note><span class="note">Note 1</span>
        <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>
 operation should be used to assign the initialization value. This is 
the case for formal parameter lists of non-strict functions. In that 
case the formal parameter bindings are preinitialized in order to deal 
with the possibility of multiple parameters with the same name.</p>
      </emu-note>
      <emu-see-also-para op="IteratorBindingInitialization"></emu-see-also-para>
      <emu-grammar><emu-production name="FormalParameters" collapsed="">
    <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalParameterList" collapsed="">
    <emu-nt><a href="#prod-FormalParameterList">FormalParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="feda2930"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>restIndex</var> be the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>restIndex</var>).</li><li>Return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalsList" collapsed="">
    <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="903f2a03"><emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>status</var> be the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-FormalsList">FormalsList</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FormalParameter" collapsed="">
    <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="03366b31"><emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If ContainsExpression of <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt> is <emu-val>false</emu-val>, return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Let <var>currentContext</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>originalEnv</var> be the VariableEnvironment of <var>currentContext</var>.</li><li>Assert: The VariableEnvironment and LexicalEnvironment of <var>currentContext</var> are the same.</li><li>Assert: <var>environment</var> and <var>originalEnv</var> are the same.</li><li>Let <var>paramVarEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>originalEnv</var>).</li><li>Set the VariableEnvironment of <var>currentContext</var> to <var>paramVarEnv</var>.</li><li>Set the LexicalEnvironment of <var>currentContext</var> to <var>paramVarEnv</var>.</li><li>Let <var>result</var> be the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Set the VariableEnvironment of <var>currentContext</var> to <var>originalEnv</var>.</li><li>Set the LexicalEnvironment of <var>currentContext</var> to <var>originalEnv</var>.</li><li>Return <var>result</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 2</span>
        <p>The new <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> created in step 6 is only used if the <emu-nt><a href="#prod-BindingElement">BindingElement</a></emu-nt> contains a <emu-xref href="#sec-function-calls-runtime-semantics-evaluation"><a href="#sec-function-calls-runtime-semantics-evaluation">direct eval</a></emu-xref>.</p>
      </emu-note>
      <emu-grammar><emu-production name="FunctionRestParameter" collapsed="">
    <emu-nt><a href="#prod-FunctionRestParameter">FunctionRestParameter</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c70de561"><emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If ContainsExpression of <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt> is <emu-val>false</emu-val>, return the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Let <var>currentContext</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>originalEnv</var> be the VariableEnvironment of <var>currentContext</var>.</li><li>Assert: The VariableEnvironment and LexicalEnvironment of <var>currentContext</var> are the same.</li><li>Assert: <var>environment</var> and <var>originalEnv</var> are the same.</li><li>Let <var>paramVarEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>originalEnv</var>).</li><li>Set the VariableEnvironment of <var>currentContext</var> to <var>paramVarEnv</var>.</li><li>Set the LexicalEnvironment of <var>currentContext</var> to <var>paramVarEnv</var>.</li><li>Let <var>result</var> be the result of performing IteratorBindingInitialization for <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt> using <var>iteratorRecord</var> and <var>environment</var> as the arguments.</li><li>Set the VariableEnvironment of <var>currentContext</var> to <var>originalEnv</var>.</li><li>Set the LexicalEnvironment of <var>currentContext</var> to <var>originalEnv</var>.</li><li>Return <var>result</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 3</span>
        <p>The new <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> created in step 6 is only used if the <emu-nt><a href="#prod-BindingRestElement">BindingRestElement</a></emu-nt> contains a <emu-xref href="#sec-function-calls-runtime-semantics-evaluation"><a href="#sec-function-calls-runtime-semantics-evaluation">direct eval</a></emu-xref>.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.1.19" -->
    <emu-clause id="sec-function-definitions-runtime-semantics-instantiatefunctionobject">
      <h1><span class="secnum">14.1.20</span>Runtime Semantics: InstantiateFunctionObject<span class="utils"><span class="anchor"><a href="#sec-function-definitions-runtime-semantics-instantiatefunctionobject">#</a></span></span></h1>
      <p>With parameter <var>scope</var>.</p>
      <emu-see-also-para op="InstantiateFunctionObject"></emu-see-also-para>
      <emu-grammar><emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81739a57"><emu-t>function</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the function code for <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid="FunctionCreate"><a href="#sec-functioncreate">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt>, <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>, <var>scope</var>, <var>strict</var>).</li><li>Perform <emu-xref aoid="MakeConstructor"><a href="#sec-makeconstructor">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Return <var>F</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b26bacea"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid="FunctionCreate"><a href="#sec-functioncreate">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt>, <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>, <var>scope</var>, <emu-val>true</emu-val>).</li><li>Perform <emu-xref aoid="MakeConstructor"><a href="#sec-makeconstructor">MakeConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>F</var>, <code>"default"</code>).</li><li>Return <var>F</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>An anonymous <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.1.20" -->
    <emu-clause id="sec-function-definitions-runtime-semantics-evaluation">
      <h1><span class="secnum">14.1.21</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-function-definitions-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81739a57"><emu-t>function</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 1</span>
        <p>An alternative semantics is provided in  <emu-xref href="#sec-block-level-function-declarations-web-legacy-compatibility-semantics"><a href="#sec-block-level-function-declarations-web-legacy-compatibility-semantics">B.3.3</a></emu-xref>.</p>
      </emu-note>
      <emu-grammar><emu-production name="FunctionDeclaration" collapsed="">
    <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b26bacea"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FunctionExpression" collapsed="">
    <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b26bacea"><emu-t>function</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the function code for <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid="FunctionCreate"><a href="#sec-functioncreate">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt>, <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>, <var>scope</var>, <var>strict</var>).</li><li>Perform <emu-xref aoid="MakeConstructor"><a href="#sec-makeconstructor">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Return <var>closure</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="FunctionExpression" collapsed="">
    <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81739a57"><emu-t>function</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the function code for <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>scope</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid="FunctionCreate"><a href="#sec-functioncreate">FunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt>, <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>, <var>funcEnv</var>, <var>strict</var>).</li><li>Perform <emu-xref aoid="MakeConstructor"><a href="#sec-makeconstructor">MakeConstructor</a></emu-xref>(<var>closure</var>).</li><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 2</span>
        <p>The <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt> in a <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt>'s <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> to allow the function to call itself recursively. However, unlike in a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>, the <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt> in a <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt>.</p>
      </emu-note>
      <emu-note><span class="note">Note 3</span>
        <p>A <code>prototype</code> property is automatically created for every function defined using a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt> or <emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt>, to allow for the possibility that the function will be used as a constructor.</p>
      </emu-note>
      <emu-grammar><emu-production name="FunctionStatementList" collapsed="">
    <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="14.2" -->
  <emu-clause id="sec-arrow-function-definitions">
    <h1><span class="secnum">14.2</span>Arrow Function Definitions<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="ArrowFunction" params="In, Yield" id="prod-ArrowFunction">
    <emu-nt params="In, Yield"><a href="#prod-ArrowFunction">ArrowFunction</a><emu-mods><emu-params>[In, Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5a88b959"><emu-nt params="?Yield"><a href="#prod-ArrowParameters">ArrowParameters</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>=&gt;</emu-t><emu-nt params="?In"><a href="#prod-ConciseBody">ConciseBody</a><emu-mods><emu-params>[?In]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ArrowParameters" params="Yield" id="prod-ArrowParameters">
    <emu-nt params="Yield"><a href="#prod-ArrowParameters">ArrowParameters</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="46cd8f8d"><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="parencover"><emu-nt params="?Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ConciseBody" params="In" id="prod-ConciseBody">
    <emu-nt params="In"><a href="#prod-ConciseBody">ConciseBody</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3c656b6f"><emu-gann>[lookahead â  <emu-t>{</emu-t>]</emu-gann><emu-nt params="?In, ~Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, ~Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="4435ae3f"><emu-t>{</emu-t><emu-nt params="~Yield"><a href="#prod-FunctionBody">FunctionBody</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
    <h2>Supplemental Syntax</h2>
    <p>When the production
      
      <br>
      <emu-grammar><emu-production name="ArrowParameters" params="Yield" collapsed="" class=" inline">
    <emu-nt params="Yield"><a href="#prod-ArrowParameters">ArrowParameters</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b3fd8fa6"><emu-nt params="?Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <br>
      is recognized the following grammar is used to refine the interpretation of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>:</p>
    <emu-grammar><emu-production name="ArrowFormalParameters" params="Yield" id="prod-ArrowFormalParameters">
    <emu-nt params="Yield"><a href="#prod-ArrowFormalParameters">ArrowFormalParameters</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e740683a"><emu-t>(</emu-t><emu-nt params="?Yield"><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="14.2.1" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-early-errors">
      <h1><span class="secnum">14.2.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="ArrowFunction" collapsed="">
    <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="88410e0f"><emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt> Contains <emu-nt><a href="#prod-YieldExpression">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if ContainsUseStrict of <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt> is <emu-val>true</emu-val> and IsSimpleParameterList of <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt> is <emu-val>false</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt>.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="ArrowParameters" params="Yield" collapsed="">
    <emu-nt params="Yield"><a href="#prod-ArrowParameters">ArrowParameters</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b3fd8fa6"><emu-nt params="?Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          If the  <sub>[Yield]</sub> grammar parameter is present on <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt>, it is a Syntax Error if the lexical token sequence matched by <emu-nt params="?Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt> cannot be parsed with no tokens left over using <emu-nt params="+Yield"><a href="#prod-ArrowFormalParameters">ArrowFormalParameters</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.
        
        </li>
        <li>
          If the  <sub>[Yield]</sub> grammar parameter is not present on <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt>, it is a Syntax Error if the lexical token sequence matched by <emu-nt params="?Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt> cannot be parsed with no tokens left over using <emu-nt params="~Yield"><a href="#prod-ArrowFormalParameters">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.
        
        </li>
        <li>
          All early errors rules for <emu-nt><a href="#prod-ArrowFormalParameters">ArrowFormalParameters</a></emu-nt> and its derived productions also apply to CoveredFormalsList of <emu-nt params="?Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="14.2.2" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-boundnames">
      <h1><span class="secnum">14.2.2</span>Static Semantics: BoundNames<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-boundnames">#</a></span></span></h1>
      <emu-see-also-para op="BoundNames"></emu-see-also-para>
      <emu-grammar><emu-production name="ArrowParameters" collapsed="">
    <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>formals</var> be CoveredFormalsList of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return the BoundNames of <var>formals</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.3" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-contains">
      <h1><span class="secnum">14.2.3</span>Static Semantics: Contains<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-contains">#</a></span></span></h1>
      <p>With parameter <var>symbol</var>.</p>
      <emu-see-also-para op="Contains"></emu-see-also-para>
      <emu-grammar><emu-production name="ArrowFunction" collapsed="">
    <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="88410e0f"><emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <var>symbol</var> is not one of <emu-nt><a href="#prod-NewTarget">NewTarget</a></emu-nt>, <emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt>, <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt>, <code>super</code> or <code>this</code>, return <emu-val>false</emu-val>.</li><li>If <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt> Contains <var>symbol</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt> Contains <var>symbol</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Normally, Contains does not look inside most function forms. However, Contains is used to detect <code>new.target</code>, <code>this</code>, and <code>super</code> usage within an <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt>.</p>
      </emu-note>
      <emu-grammar><emu-production name="ArrowParameters" collapsed="">
    <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>formals</var> be CoveredFormalsList of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return <var>formals</var> Contains <var>symbol</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.4" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-containsexpression">
      <h1><span class="secnum">14.2.4</span>Static Semantics: ContainsExpression<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-containsexpression">#</a></span></span></h1>
      <emu-see-also-para op="ContainsExpression"></emu-see-also-para>
      <emu-grammar><emu-production name="ArrowParameters" collapsed="">
    <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <emu-clause id="sec-arrow-function-definitions-static-semantics-containsusestrict">
      <h1><span class="secnum">14.2.5</span>Static Semantics: ContainsUseStrict<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-containsusestrict">#</a></span></span></h1>
      <emu-see-also-para op="ContainsUseStrict"></emu-see-also-para>
      <emu-grammar><emu-production name="ConciseBody" collapsed="">
    <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d4fc7da4"><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.5" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-expectedargumentcount">
      <h1><span class="secnum">14.2.6</span>Static Semantics: ExpectedArgumentCount<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-expectedargumentcount">#</a></span></span></h1>
      <emu-see-also-para op="ExpectedArgumentCount"></emu-see-also-para>
      <emu-grammar><emu-production name="ArrowParameters" collapsed="">
    <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return 1.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.7" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-hasname">
      <h1><span class="secnum">14.2.7</span>Static Semantics: HasName<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-hasname">#</a></span></span></h1>
      <emu-see-also-para op="HasName"></emu-see-also-para>
      <emu-grammar><emu-production name="ArrowFunction" collapsed="">
    <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="88410e0f"><emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.8" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-issimpleparameterlist">
      <h1><span class="secnum">14.2.8</span>Static Semantics: IsSimpleParameterList<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-issimpleparameterlist">#</a></span></span></h1>
      <emu-see-also-para op="IsSimpleParameterList"></emu-see-also-para>
      <emu-grammar><emu-production name="ArrowParameters" collapsed="">
    <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ArrowParameters" collapsed="">
    <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>formals</var> be CoveredFormalsList of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return IsSimpleParameterList of <var>formals</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.9" -->
    <emu-clause id="sec-static-semantics-coveredformalslist">
      <h1><span class="secnum">14.2.9</span>Static Semantics: CoveredFormalsList<span class="utils"><span class="anchor"><a href="#sec-static-semantics-coveredformalslist">#</a></span></span></h1>
      <emu-grammar><emu-production name="ArrowParameters" collapsed="">
    <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return this <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="CoverParenthesizedExpressionAndArrowParameterList" params="Yield">
    <emu-nt params="Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ba6ef9d"><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="78e44c33"><emu-t>(</emu-t><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="96bd933c"><emu-t>(</emu-t><emu-t>...</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="c28a99dd"><emu-t>(</emu-t><emu-t>...</emu-t><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="f2051a8f"><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>)</emu-t></emu-rhs>
    <emu-rhs a="b652fc19"><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>,</emu-t><emu-t>...</emu-t><emu-nt><a href="#prod-BindingPattern">BindingPattern</a></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <sub>[Yield]</sub> grammar parameter is present for <emu-nt params="Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt>, return the result of parsing the lexical token stream matched by <emu-nt params="Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> using <emu-nt params="+Yield"><a href="#prod-ArrowFormalParameters">ArrowFormalParameters</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.</li><li>If the <sub>[Yield]</sub> grammar parameter is not present for <emu-nt params="Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt>, return the result of parsing the lexical token stream matched by <emu-nt params="Yield"><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt> using <emu-nt params="~Yield"><a href="#prod-ArrowFormalParameters">ArrowFormalParameters</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.10" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-lexicallydeclarednames">
      <h1><span class="secnum">14.2.10</span>Static Semantics: LexicallyDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-lexicallydeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="ConciseBody" collapsed="">
    <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d4fc7da4"><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.11" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations">
      <h1><span class="secnum">14.2.11</span>Static Semantics: LexicallyScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-lexicallyscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="ConciseBody" collapsed="">
    <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d4fc7da4"><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.12" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-vardeclarednames">
      <h1><span class="secnum">14.2.12</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-vardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="ConciseBody" collapsed="">
    <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d4fc7da4"><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.13" -->
    <emu-clause id="sec-arrow-function-definitions-static-semantics-varscopeddeclarations">
      <h1><span class="secnum">14.2.13</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-static-semantics-varscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="ConciseBody" collapsed="">
    <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d4fc7da4"><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.14" -->
    <emu-clause id="sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization">
      <h1><span class="secnum">14.2.14</span>Runtime Semantics: IteratorBindingInitialization<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-runtime-semantics-iteratorbindinginitialization">#</a></span></span></h1>
      <p>With parameters <var>iteratorRecord</var> and <var>environment</var>.</p>
      <emu-see-also-para op="IteratorBindingInitialization"></emu-see-also-para>
      <emu-note><span class="note">Note</span>
        <p>When <emu-val>undefined</emu-val> is passed for <var>environment</var> it indicates that a <emu-xref aoid="PutValue"><a href="#sec-putvalue">PutValue</a></emu-xref>
 operation should be used to assign the initialization value. This is 
the case for formal parameter lists of non-strict functions. In that 
case the formal parameter bindings are preinitialized in order to deal 
with the possibility of multiple parameters with the same name.</p>
      </emu-note>
      <emu-grammar><emu-production name="ArrowParameters" collapsed="">
    <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="50e97238"><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Assert: <var>iteratorRecord</var>.[[Done]] is <emu-val>false</emu-val>.</li><li>Let <var>next</var> be <emu-xref aoid="IteratorStep"><a href="#sec-iteratorstep">IteratorStep</a></emu-xref>(<var>iteratorRecord</var>.[[Iterator]]).</li><li>If <var>next</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>next</var>).</li><li>If <var>next</var> is <emu-val>false</emu-val>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li>Else,<ol><li>Let <var>v</var> be <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>next</var>).</li><li>If <var>v</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, set <var>iteratorRecord</var>.[[Done]] to <emu-val>true</emu-val>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>v</var>).</li></ol></li><li>If <var>iteratorRecord</var>.[[Done]] is <emu-val>true</emu-val>, let <var>v</var> be <emu-val>undefined</emu-val>.</li><li>Return the result of performing BindingInitialization for <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt> using <var>v</var> and <var>environment</var> as the arguments.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.15" -->
    <emu-clause id="sec-arrow-function-definitions-runtime-semantics-evaluatebody">
      <h1><span class="secnum">14.2.15</span>Runtime Semantics: EvaluateBody<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-runtime-semantics-evaluatebody">#</a></span></span></h1>
      <p>With parameter <var>functionObject</var>.</p>
      <emu-see-also-para op="EvaluateBody"></emu-see-also-para>
      <emu-grammar><emu-production name="ConciseBody" collapsed="">
    <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d4fc7da4"><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>exprValue</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>exprValue</var>, [[Target]]: <emu-const>empty</emu-const>}.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.2.16" -->
    <emu-clause id="sec-arrow-function-definitions-runtime-semantics-evaluation">
      <h1><span class="secnum">14.2.16</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-arrow-function-definitions-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="ArrowFunction" collapsed="">
    <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="88410e0f"><emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt><emu-t>=&gt;</emu-t><emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the function code for this <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>parameters</var> be CoveredFormalsList of <emu-nt><a href="#prod-ArrowParameters">ArrowParameters</a></emu-nt>.</li><li>Let <var>closure</var> be <emu-xref aoid="FunctionCreate"><a href="#sec-functioncreate">FunctionCreate</a></emu-xref>(<emu-const>Arrow</emu-const>, <var>parameters</var>, <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt>, <var>scope</var>, <var>strict</var>).</li><li>Return <var>closure</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>An <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt> does not define local bindings for <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code>. Any reference to <code>arguments</code>, <code>super</code>, <code>this</code>, or <code>new.target</code> within an <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt>
 must resolve to a binding in a lexically enclosing environment. 
Typically this will be the Function Environment of an immediately 
enclosing function. Even though an <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt> may contain references to <code>super</code>, the function object created in step 4 is not made into a method by performing <emu-xref aoid="MakeMethod"><a href="#sec-makemethod">MakeMethod</a></emu-xref>. An <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt> that references <code>super</code> is always contained within a non-<emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt> and the necessary state to implement <code>super</code> is accessible via the <var>scope</var> that is captured by the function object of the <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt>.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="14.3" -->
  <emu-clause id="sec-method-definitions">
    <h1><span class="secnum">14.3</span>Method Definitions<span class="utils"><span class="anchor"><a href="#sec-method-definitions">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="MethodDefinition" params="Yield" id="prod-MethodDefinition">
    <emu-nt params="Yield"><a href="#prod-MethodDefinition">MethodDefinition</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1dcd1c9"><emu-nt params="?Yield"><a href="#prod-PropertyName">PropertyName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params="~Yield"><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params="~Yield"><a href="#prod-FunctionBody">FunctionBody</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="7dafbe5a"><emu-nt params="?Yield"><a href="#prod-GeneratorMethod">GeneratorMethod</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="6fc6af69"><emu-t>get</emu-t><emu-nt params="?Yield"><a href="#prod-PropertyName">PropertyName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params="~Yield"><a href="#prod-FunctionBody">FunctionBody</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="5ba817b1"><emu-t>set</emu-t><emu-nt params="?Yield"><a href="#prod-PropertyName">PropertyName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt params="~Yield"><a href="#prod-FunctionBody">FunctionBody</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="PropertySetParameterList" id="prod-PropertySetParameterList">
    <emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6e1c02b4"><emu-nt params="~Yield"><a href="#prod-FormalParameter">FormalParameter</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="14.3.1" -->
    <emu-clause id="sec-method-definitions-static-semantics-early-errors">
      <h1><span class="secnum">14.3.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-method-definitions-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cb8e53e9"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if ContainsUseStrict of <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> is <emu-val>true</emu-val> and IsSimpleParameterList of <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4402354c"><emu-t>set</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if BoundNames of <emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt> contains any duplicate elements.
        
        </li>
        <li>
          It is a Syntax Error if ContainsUseStrict of <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> is <emu-val>true</emu-val> and IsSimpleParameterList of <emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt> is <emu-val>false</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="14.3.2" -->
    <emu-clause id="sec-method-definitions-static-semantics-computedpropertycontains">
      <h1><span class="secnum">14.3.2</span>Static Semantics: ComputedPropertyContains<span class="utils"><span class="anchor"><a href="#sec-method-definitions-static-semantics-computedpropertycontains">#</a></span></span></h1>
      <p>With parameter <var>symbol</var>.</p>
      <emu-see-also-para op="ComputedPropertyContains"></emu-see-also-para>
      <emu-grammar><emu-production name="MethodDefinition">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cb8e53e9"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="f1487956"><emu-t>get</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="4402354c"><emu-t>set</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the result of ComputedPropertyContains for <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt> with argument <var>symbol</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.3.3" -->
    <emu-clause id="sec-method-definitions-static-semantics-expectedargumentcount">
      <h1><span class="secnum">14.3.3</span>Static Semantics: ExpectedArgumentCount<span class="utils"><span class="anchor"><a href="#sec-method-definitions-static-semantics-expectedargumentcount">#</a></span></span></h1>
      <emu-see-also-para op="ExpectedArgumentCount"></emu-see-also-para>
      <emu-grammar><emu-production name="PropertySetParameterList" collapsed="">
    <emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="497954f5"><emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If HasInitializer of <emu-nt><a href="#prod-FormalParameter">FormalParameter</a></emu-nt> is <emu-val>true</emu-val>, return 0.</li><li>Return 1.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.3.5" -->
    <emu-clause id="sec-method-definitions-static-semantics-hasdirectsuper">
      <h1><span class="secnum">14.3.4</span>Static Semantics: HasDirectSuper<span class="utils"><span class="anchor"><a href="#sec-method-definitions-static-semantics-hasdirectsuper">#</a></span></span></h1>
      <emu-see-also-para op="HasDirectSuper"></emu-see-also-para>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cb8e53e9"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f1487956"><emu-t>get</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4402354c"><emu-t>set</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.3.6" -->
    <emu-clause id="sec-method-definitions-static-semantics-propname">
      <h1><span class="secnum">14.3.5</span>Static Semantics: PropName<span class="utils"><span class="anchor"><a href="#sec-method-definitions-static-semantics-propname">#</a></span></span></h1>
      <emu-see-also-para op="PropName"></emu-see-also-para>
      <emu-grammar><emu-production name="MethodDefinition">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cb8e53e9"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="f1487956"><emu-t>get</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="4402354c"><emu-t>set</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return PropName of <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.3.7" -->
    <emu-clause id="sec-static-semantics-specialmethod">
      <h1><span class="secnum">14.3.6</span>Static Semantics: SpecialMethod<span class="utils"><span class="anchor"><a href="#sec-static-semantics-specialmethod">#</a></span></span></h1>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cb8e53e9"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="MethodDefinition">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="52fe7349"><emu-nt><a href="#prod-GeneratorMethod">GeneratorMethod</a></emu-nt></emu-rhs>
    <emu-rhs a="f1487956"><emu-t>get</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="4402354c"><emu-t>set</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.3.8" -->
    <emu-clause id="sec-runtime-semantics-definemethod">
      <h1><span class="secnum">14.3.7</span>Runtime Semantics: DefineMethod<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-definemethod">#</a></span></span></h1>
      <p>With parameters <var>object</var> and optional parameter <var>functionPrototype</var>.</p>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cb8e53e9"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If the function code for this <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>scope</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>If <var>functionPrototype</var> was passed as a parameter, let <var>kind</var> be <emu-const>Normal</emu-const>; otherwise let <var>kind</var> be <emu-const>Method</emu-const>.</li><li>Let <var>closure</var> be <emu-xref aoid="FunctionCreate"><a href="#sec-functioncreate">FunctionCreate</a></emu-xref>(<var>kind</var>, <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>, <var>scope</var>, <var>strict</var>). If <var>functionPrototype</var> was passed as a parameter, then pass its value as the <var>prototype</var> optional argument of <emu-xref aoid="FunctionCreate"><a href="#sec-functioncreate">FunctionCreate</a></emu-xref>.</li><li>Perform <emu-xref aoid="MakeMethod"><a href="#sec-makemethod">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Return the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref>{[[Key]]: <var>propKey</var>, [[Closure]]: <var>closure</var>}.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.3.9" -->
    <emu-clause id="sec-method-definitions-runtime-semantics-propertydefinitionevaluation">
      <h1><span class="secnum">14.3.8</span>Runtime Semantics: PropertyDefinitionEvaluation<span class="utils"><span class="anchor"><a href="#sec-method-definitions-runtime-semantics-propertydefinitionevaluation">#</a></span></span></h1>
      <p>With parameters <var>object</var> and <var>enumerable</var>.</p>
      <emu-see-also-para op="PropertyDefinitionEvaluation"></emu-see-also-para>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cb8e53e9"><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>methodDef</var> be DefineMethod of <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> with argument <var>object</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>methodDef</var>).</li><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>methodDef</var>.[[Closure]], <var>methodDef</var>.[[Key]]).</li><li>Let <var>desc</var> be the PropertyDescriptor{[[Value]]: <var>methodDef</var>.[[Closure]], [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val>}.</li><li>Return ? <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>methodDef</var>.[[Key]], <var>desc</var>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="52fe7349"><emu-nt><a href="#prod-GeneratorMethod">GeneratorMethod</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <p>See  <emu-xref href="#sec-generator-function-definitions"><a href="#sec-generator-function-definitions">14.4</a></emu-xref>.</p>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f1487956"><emu-t>get</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If the function code for this <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>scope</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>formalParameterList</var> be the production <emu-grammar><emu-production name="FormalParameters" collapsed="" class=" inline">
    <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>.</li><li>Let <var>closure</var> be <emu-xref aoid="FunctionCreate"><a href="#sec-functioncreate">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <var>formalParameterList</var>, <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>, <var>scope</var>, <var>strict</var>).</li><li>Perform <emu-xref aoid="MakeMethod"><a href="#sec-makemethod">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <code>"get"</code>).</li><li>Let <var>desc</var> be the PropertyDescriptor{[[Get]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val>}.</li><li>Return ? <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="MethodDefinition" collapsed="">
    <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4402354c"><emu-t>set</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If the function code for this <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>scope</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid="FunctionCreate"><a href="#sec-functioncreate">FunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href="#prod-PropertySetParameterList">PropertySetParameterList</a></emu-nt>, <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>, <var>scope</var>, <var>strict</var>).</li><li>Perform <emu-xref aoid="MakeMethod"><a href="#sec-makemethod">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>, <code>"set"</code>).</li><li>Let <var>desc</var> be the PropertyDescriptor{[[Set]]: <var>closure</var>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val>}.</li><li>Return ? <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="14.4" -->
  <emu-clause id="sec-generator-function-definitions">
    <h1><span class="secnum">14.4</span>Generator Function Definitions<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="GeneratorMethod" params="Yield" id="prod-GeneratorMethod">
    <emu-nt params="Yield"><a href="#prod-GeneratorMethod">GeneratorMethod</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="673888d6"><emu-t>*</emu-t><emu-nt params="?Yield"><a href="#prod-PropertyName">PropertyName</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params="+Yield"><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="GeneratorDeclaration" params="Yield, Default" id="prod-GeneratorDeclaration">
    <emu-nt params="Yield, Default"><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a><emu-mods><emu-params>[Yield, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5cafc5f1"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params="+Yield"><a href="#prod-FormalParameters">FormalParameters</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
    <emu-rhs a="0b5bcf05" constraints="+Default"><emu-constraints>[+Default]</emu-constraints><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt params="+Yield"><a href="#prod-FormalParameters">FormalParameters</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="GeneratorExpression" id="prod-GeneratorExpression">
    <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="78806956"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt params="+Yield" optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[+Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt params="+Yield"><a href="#prod-FormalParameters">FormalParameters</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="GeneratorBody" id="prod-GeneratorBody">
    <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0eb01d9d"><emu-nt params="+Yield"><a href="#prod-FunctionBody">FunctionBody</a><emu-mods><emu-params>[+Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="YieldExpression" params="In" id="prod-YieldExpression">
    <emu-nt params="In"><a href="#prod-YieldExpression">YieldExpression</a><emu-mods><emu-params>[In]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
    <emu-rhs a="ca260fec"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-nt params="?In, +Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="121b36eb"><emu-t>yield</emu-t><emu-gann>[no <emu-nt><a href="#prod-LineTerminator">LineTerminator</a></emu-nt> here]</emu-gann><emu-t>*</emu-t><emu-nt params="?In, +Yield"><a href="#prod-AssignmentExpression">AssignmentExpression</a><emu-mods><emu-params>[?In, +Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note 1</span>
      <p>The syntactic context immediately following <code>yield</code> requires use of the <emu-nt><a href="#prod-InputElementRegExpOrTemplateTail">InputElementRegExpOrTemplateTail</a></emu-nt> lexical goal.</p>
    </emu-note>
    <emu-note><span class="note">Note 2</span>
      <p><emu-nt><a href="#prod-YieldExpression">YieldExpression</a></emu-nt> cannot be used within the <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> of a generator function because any expressions that are part of <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> are evaluated before the resulting generator object is in a resumable state.</p>
    </emu-note>
    <emu-note><span class="note">Note 3</span>
      <p>Abstract operations relating to generator objects are defined in  <emu-xref href="#sec-generator-abstract-operations"><a href="#sec-generator-abstract-operations">25.3.3</a></emu-xref>.</p>
    </emu-note>

    <!-- es6num="14.4.1" -->
    <emu-clause id="sec-generator-function-definitions-static-semantics-early-errors">
      <h1><span class="secnum">14.4.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="GeneratorMethod" collapsed="">
    <emu-nt><a href="#prod-GeneratorMethod">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c5c757ac"><emu-t>*</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if HasDirectSuper of <emu-nt><a href="#prod-GeneratorMethod">GeneratorMethod</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt> Contains <emu-nt><a href="#prod-YieldExpression">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if ContainsUseStrict of <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and IsSimpleParameterList of <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt> is <emu-val>false</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt>.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="GeneratorDeclaration" collapsed="">
    <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7dbc99b6"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="GeneratorDeclaration" collapsed="">
    <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0d271960"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="GeneratorExpression" collapsed="">
    <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="df68213a"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          If the source code matching this production is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, the Early Error rules for  <emu-grammar><emu-production name="UniqueFormalParameters" collapsed="" class=" inline">
    <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0218c6f5"><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> are applied.
        
        </li>
        <li>
          If the source code matching this production is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, it is a Syntax Error if <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt> is the <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> <code>eval</code> or the <emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt> <code>arguments</code>.
        
        </li>
        <li>
          It is a Syntax Error if ContainsUseStrict of <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt> is <emu-val>true</emu-val> and IsSimpleParameterList of <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> is <emu-val>false</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if any element of the BoundNames of <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> also occurs in the LexicallyDeclaredNames of <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> Contains <emu-nt><a href="#prod-YieldExpression">YieldExpression</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> Contains <emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt> Contains <emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="14.4.2" -->
    <emu-clause id="sec-generator-function-definitions-static-semantics-boundnames">
      <h1><span class="secnum">14.4.2</span>Static Semantics: BoundNames<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-static-semantics-boundnames">#</a></span></span></h1>
      <emu-see-also-para op="BoundNames"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorDeclaration" collapsed="">
    <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7dbc99b6"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="GeneratorDeclaration" collapsed="">
    <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0d271960"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return Â« <code>"*default*"</code> Â».
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p><code>"*default*"</code> is used within this specification as
 a synthetic name for hoistable anonymous functions that are defined 
using export declarations.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.4.3" -->
    <emu-clause id="sec-generator-function-definitions-static-semantics-computedpropertycontains">
      <h1><span class="secnum">14.4.3</span>Static Semantics: ComputedPropertyContains<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-static-semantics-computedpropertycontains">#</a></span></span></h1>
      <p>With parameter <var>symbol</var>.</p>
      <emu-see-also-para op="ComputedPropertyContains"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorMethod" collapsed="">
    <emu-nt><a href="#prod-GeneratorMethod">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c5c757ac"><emu-t>*</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the result of ComputedPropertyContains for <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt> with argument <var>symbol</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.4.4" -->
    <emu-clause id="sec-generator-function-definitions-static-semantics-contains">
      <h1><span class="secnum">14.4.4</span>Static Semantics: Contains<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-static-semantics-contains">#</a></span></span></h1>
      <p>With parameter <var>symbol</var>.</p>
      <emu-see-also-para op="Contains"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorDeclaration" collapsed="">
    <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7dbc99b6"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="GeneratorDeclaration" collapsed="">
    <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0d271960"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="GeneratorExpression" collapsed="">
    <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="df68213a"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Static semantic rules that depend upon substructure generally do not look into function definitions.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.4.6" -->
    <emu-clause id="sec-generator-function-definitions-static-semantics-hasdirectsuper">
      <h1><span class="secnum">14.4.5</span>Static Semantics: HasDirectSuper<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-static-semantics-hasdirectsuper">#</a></span></span></h1>
      <emu-see-also-para op="HasDirectSuper"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorMethod" collapsed="">
    <emu-nt><a href="#prod-GeneratorMethod">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c5c757ac"><emu-t>*</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt> Contains <emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.4.7" -->
    <emu-clause id="sec-generator-function-definitions-static-semantics-hasname">
      <h1><span class="secnum">14.4.6</span>Static Semantics: HasName<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-static-semantics-hasname">#</a></span></span></h1>
      <emu-see-also-para op="HasName"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorExpression" collapsed="">
    <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0d271960"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="GeneratorExpression" collapsed="">
    <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7dbc99b6"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.4.8" -->
    <emu-clause id="sec-generator-function-definitions-static-semantics-isconstantdeclaration">
      <h1><span class="secnum">14.4.7</span>Static Semantics: IsConstantDeclaration<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-static-semantics-isconstantdeclaration">#</a></span></span></h1>
      <emu-see-also-para op="IsConstantDeclaration"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorDeclaration" collapsed="">
    <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7dbc99b6"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="GeneratorDeclaration" collapsed="">
    <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0d271960"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.4.9" -->
    <emu-clause id="sec-generator-function-definitions-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">14.4.8</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorExpression" collapsed="">
    <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="df68213a"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.4.10" -->
    <emu-clause id="sec-generator-function-definitions-static-semantics-propname">
      <h1><span class="secnum">14.4.9</span>Static Semantics: PropName<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-static-semantics-propname">#</a></span></span></h1>
      <emu-see-also-para op="PropName"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorMethod" collapsed="">
    <emu-nt><a href="#prod-GeneratorMethod">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c5c757ac"><emu-t>*</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return PropName of <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.4.11" -->
    <emu-clause id="sec-generator-function-definitions-runtime-semantics-evaluatebody">
      <h1><span class="secnum">14.4.10</span>Runtime Semantics: EvaluateBody<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-runtime-semantics-evaluatebody">#</a></span></span></h1>
      <p>With parameter <var>functionObject</var>.</p>
      <emu-see-also-para op="EvaluateBody"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorBody" collapsed="">
    <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8aa65b90"><emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>G</var> be ? <emu-xref aoid="OrdinaryCreateFromConstructor"><a href="#sec-ordinarycreatefromconstructor">OrdinaryCreateFromConstructor</a></emu-xref>(<var>functionObject</var>, <code>"%GeneratorPrototype%"</code>, Â« [[GeneratorState]], [[GeneratorContext]] Â»).</li><li>Perform <emu-xref aoid="GeneratorStart"><a href="#sec-generatorstart">GeneratorStart</a></emu-xref>(<var>G</var>, <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt>).</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>G</var>, [[Target]]: <emu-const>empty</emu-const>}.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.4.12" -->
    <emu-clause id="sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject">
      <h1><span class="secnum">14.4.11</span>Runtime Semantics: InstantiateFunctionObject<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-runtime-semantics-instantiatefunctionobject">#</a></span></span></h1>
      <p>With parameter <var>scope</var>.</p>
      <emu-see-also-para op="InstantiateFunctionObject"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorDeclaration" collapsed="">
    <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7dbc99b6"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the function code for <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Let <var>F</var> be <emu-xref aoid="GeneratorFunctionCreate"><a href="#sec-generatorfunctioncreate">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt>, <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt>, <var>scope</var>, <var>strict</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-generator-prototype"><a href="#sec-properties-of-generator-prototype">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>"prototype"</code>, PropertyDescriptor{[[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>F</var>, <var>name</var>).</li><li>Return <var>F</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="GeneratorDeclaration" collapsed="">
    <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0d271960"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>F</var> be <emu-xref aoid="GeneratorFunctionCreate"><a href="#sec-generatorfunctioncreate">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt>, <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt>, <var>scope</var>, <emu-val>true</emu-val>).</li><li>Let <var>prototype</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-generator-prototype"><a href="#sec-properties-of-generator-prototype">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>F</var>, <code>"prototype"</code>, PropertyDescriptor{[[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>F</var>, <code>"default"</code>).</li><li>Return <var>F</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>An anonymous <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt> can only occur as part of an <code>export default</code> declaration, and its function code is therefore always <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.4.13" -->
    <emu-clause id="sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation">
      <h1><span class="secnum">14.4.12</span>Runtime Semantics: PropertyDefinitionEvaluation<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-runtime-semantics-propertydefinitionevaluation">#</a></span></span></h1>
      <p>With parameter <var>object</var> and <var>enumerable</var>.</p>
      <emu-see-also-para op="PropertyDefinitionEvaluation"></emu-see-also-para>
      <emu-grammar><emu-production name="GeneratorMethod" collapsed="">
    <emu-nt><a href="#prod-GeneratorMethod">GeneratorMethod</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c5c757ac"><emu-t>*</emu-t><emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>propKey</var> be the result of evaluating <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>propKey</var>).</li><li>If the function code for this <emu-nt><a href="#prod-GeneratorMethod">GeneratorMethod</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>scope</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>closure</var> be <emu-xref aoid="GeneratorFunctionCreate"><a href="#sec-generatorfunctioncreate">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Method</emu-const>, <emu-nt><a href="#prod-UniqueFormalParameters">UniqueFormalParameters</a></emu-nt>, <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt>, <var>scope</var>, <var>strict</var>).</li><li>Perform <emu-xref aoid="MakeMethod"><a href="#sec-makemethod">MakeMethod</a></emu-xref>(<var>closure</var>, <var>object</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-generator-prototype"><a href="#sec-properties-of-generator-prototype">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>"prototype"</code>, PropertyDescriptor{[[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>propKey</var>).</li><li>Let <var>desc</var> be the PropertyDescriptor{[[Value]]: <var>closure</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <var>enumerable</var>, [[Configurable]]: <emu-val>true</emu-val>}.</li><li>Return ? <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>object</var>, <var>propKey</var>, <var>desc</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.4.14" -->
    <emu-clause id="sec-generator-function-definitions-runtime-semantics-evaluation">
      <h1><span class="secnum">14.4.13</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-generator-function-definitions-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="GeneratorExpression" collapsed="">
    <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0d271960"><emu-t>function</emu-t><emu-t>*</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the function code for this <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>scope</var> be the LexicalEnvironment of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>closure</var> be <emu-xref aoid="GeneratorFunctionCreate"><a href="#sec-generatorfunctioncreate">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt>, <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt>, <var>scope</var>, <var>strict</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-generator-prototype"><a href="#sec-properties-of-generator-prototype">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>"prototype"</code>, PropertyDescriptor{[[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Return <var>closure</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="GeneratorExpression" collapsed="">
    <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="7dbc99b6"><emu-t>function</emu-t><emu-t>*</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-t>(</emu-t><emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt><emu-t>)</emu-t><emu-t>{</emu-t><emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the function code for this <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt> is <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>, let <var>strict</var> be <emu-val>true</emu-val>. Otherwise let <var>strict</var> be <emu-val>false</emu-val>.</li><li>Let <var>scope</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Let <var>funcEnv</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>scope</var>).</li><li>Let <var>envRec</var> be <var>funcEnv</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Let <var>name</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Perform <var>envRec</var>.CreateImmutableBinding(<var>name</var>, <emu-val>false</emu-val>).</li><li>Let <var>closure</var> be <emu-xref aoid="GeneratorFunctionCreate"><a href="#sec-generatorfunctioncreate">GeneratorFunctionCreate</a></emu-xref>(<emu-const>Normal</emu-const>, <emu-nt><a href="#prod-FormalParameters">FormalParameters</a></emu-nt>, <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt>, <var>funcEnv</var>, <var>strict</var>).</li><li>Let <var>prototype</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<emu-xref href="#sec-properties-of-generator-prototype"><a href="#sec-properties-of-generator-prototype">%GeneratorPrototype%</a></emu-xref>).</li><li>Perform <emu-xref aoid="DefinePropertyOrThrow"><a href="#sec-definepropertyorthrow">DefinePropertyOrThrow</a></emu-xref>(<var>closure</var>, <code>"prototype"</code>, PropertyDescriptor{[[Value]]: <var>prototype</var>, [[Writable]]: <emu-val>true</emu-val>, [[Enumerable]]: <emu-val>false</emu-val>, [[Configurable]]: <emu-val>false</emu-val>}).</li><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>closure</var>, <var>name</var>).</li><li>Perform <var>envRec</var>.InitializeBinding(<var>name</var>, <var>closure</var>).</li><li>Return <var>closure</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>The <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt> in a <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt> can be referenced from inside the <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt>'s <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> to allow the generator code to call itself recursively. However, unlike in a <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>, the <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt> in a <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt> cannot be referenced from and does not affect the scope enclosing the <emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt>.</p>
      </emu-note>
      <emu-grammar><emu-production name="YieldExpression" collapsed="">
    <emu-nt><a href="#prod-YieldExpression">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1df3360"><emu-t>yield</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return ? <emu-xref aoid="GeneratorYield"><a href="#sec-generatoryield">GeneratorYield</a></emu-xref>(<emu-xref aoid="CreateIterResultObject"><a href="#sec-createiterresultobject">CreateIterResultObject</a></emu-xref>(<emu-val>undefined</emu-val>, <emu-val>false</emu-val>)).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="YieldExpression" collapsed="">
    <emu-nt><a href="#prod-YieldExpression">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e741ede8"><emu-t>yield</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Return ? <emu-xref aoid="GeneratorYield"><a href="#sec-generatoryield">GeneratorYield</a></emu-xref>(<emu-xref aoid="CreateIterResultObject"><a href="#sec-createiterresultobject">CreateIterResultObject</a></emu-xref>(<var>value</var>, <emu-val>false</emu-val>)).
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="YieldExpression" collapsed="">
    <emu-nt><a href="#prod-YieldExpression">YieldExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="47a33813"><emu-t>yield</emu-t><emu-t>*</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>exprRef</var> be the result of evaluating <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt>.</li><li>Let <var>value</var> be ? <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref>(<var>exprRef</var>).</li><li>Let <var>iterator</var> be ? <emu-xref aoid="GetIterator"><a href="#sec-getiterator">GetIterator</a></emu-xref>(<var>value</var>).</li><li>Let <var>received</var> be <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li><li>Repeat<ol><li>If <var>received</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>innerResult</var> be ? <emu-xref aoid="IteratorNext"><a href="#sec-iteratornext">IteratorNext</a></emu-xref>(<var>iterator</var>, <var>received</var>.[[Value]]).</li><li>Let <var>done</var> be ? <emu-xref aoid="IteratorComplete"><a href="#sec-iteratorcomplete">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ? <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Let <var>received</var> be <emu-xref aoid="GeneratorYield"><a href="#sec-generatoryield">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else if <var>received</var>.[[Type]] is <emu-const>throw</emu-const>, then<ol><li>Let <var>throw</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>iterator</var>, <code>"throw"</code>).</li><li>If <var>throw</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>innerResult</var> be ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>throw</var>, <var>iterator</var>, Â« <var>received</var>.[[Value]] Â»).</li><li>NOTE: Exceptions from the inner iterator <code>throw</code> method are propagated. Normal completions from an inner <code>throw</code> method are processed similarly to an inner <code>next</code>.</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>innerResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ? <emu-xref aoid="IteratorComplete"><a href="#sec-iteratorcomplete">IteratorComplete</a></emu-xref>(<var>innerResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Return ? <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Let <var>received</var> be <emu-xref aoid="GeneratorYield"><a href="#sec-generatoryield">GeneratorYield</a></emu-xref>(<var>innerResult</var>).</li></ol></li><li>Else,<ol><li>NOTE: If <var>iterator</var> does not have a <code>throw</code> method, this throw is going to terminate the <code>yield*</code> loop. But first we need to give <var>iterator</var> a chance to clean up.</li><li>Perform ? <emu-xref aoid="IteratorClose"><a href="#sec-iteratorclose">IteratorClose</a></emu-xref>(<var>iterator</var>, <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>normal</emu-const>, [[Value]]: <emu-const>empty</emu-const>, [[Target]]: <emu-const>empty</emu-const>}).</li><li>NOTE: The next step throws a <emu-val>TypeError</emu-val> to indicate that there was a <code>yield*</code> protocol violation: <var>iterator</var> does not have a <code>throw</code> method.</li><li>Throw a <emu-val>TypeError</emu-val> exception.</li></ol></li></ol></li><li>Else,<ol><li>Assert: <var>received</var>.[[Type]] is <emu-const>return</emu-const>.</li><li>Let <var>return</var> be ? <emu-xref aoid="GetMethod"><a href="#sec-getmethod">GetMethod</a></emu-xref>(<var>iterator</var>, <code>"return"</code>).</li><li>If <var>return</var> is <emu-val>undefined</emu-val>, return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>received</var>).</li><li>Let <var>innerReturnResult</var> be ? <emu-xref aoid="Call"><a href="#sec-call">Call</a></emu-xref>(<var>return</var>, <var>iterator</var>, Â« <var>received</var>.[[Value]] Â»).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>innerReturnResult</var>) is not Object, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>done</var> be ? <emu-xref aoid="IteratorComplete"><a href="#sec-iteratorcomplete">IteratorComplete</a></emu-xref>(<var>innerReturnResult</var>).</li><li>If <var>done</var> is <emu-val>true</emu-val>, then<ol><li>Let <var>value</var> be ? <emu-xref aoid="IteratorValue"><a href="#sec-iteratorvalue">IteratorValue</a></emu-xref>(<var>innerReturnResult</var>).</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>{[[Type]]: <emu-const>return</emu-const>, [[Value]]: <var>value</var>, [[Target]]: <emu-const>empty</emu-const>}.</li></ol></li><li>Let <var>received</var> be <emu-xref aoid="GeneratorYield"><a href="#sec-generatoryield">GeneratorYield</a></emu-xref>(<var>innerReturnResult</var>).
      </li></ol></li></ol></li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="14.5" -->
  <emu-clause id="sec-class-definitions">
    <h1><span class="secnum">14.5</span>Class Definitions<span class="utils"><span class="anchor"><a href="#sec-class-definitions">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="ClassDeclaration" params="Yield, Default" id="prod-ClassDeclaration">
    <emu-nt params="Yield, Default"><a href="#prod-ClassDeclaration">ClassDeclaration</a><emu-mods><emu-params>[Yield, Default]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3a47f50b"><emu-t>class</emu-t><emu-nt params="?Yield"><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-ClassTail">ClassTail</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="f1909d63" constraints="+Default"><emu-constraints>[+Default]</emu-constraints><emu-t>class</emu-t><emu-nt params="?Yield"><a href="#prod-ClassTail">ClassTail</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ClassExpression" params="Yield" id="prod-ClassExpression">
    <emu-nt params="Yield"><a href="#prod-ClassExpression">ClassExpression</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="89a169d4"><emu-t>class</emu-t><emu-nt params="?Yield" optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-params>[?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-ClassTail">ClassTail</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ClassTail" params="Yield" id="prod-ClassTail">
    <emu-nt params="Yield"><a href="#prod-ClassTail">ClassTail</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c3a1600d"><emu-nt params="?Yield" optional=""><a href="#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-params>[?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt params="?Yield" optional=""><a href="#prod-ClassBody">ClassBody</a><emu-mods><emu-params>[?Yield]</emu-params><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="ClassHeritage" params="Yield" id="prod-ClassHeritage">
    <emu-nt params="Yield"><a href="#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ccce93bb"><emu-t>extends</emu-t><emu-nt params="?Yield"><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ClassBody" params="Yield" id="prod-ClassBody">
    <emu-nt params="Yield"><a href="#prod-ClassBody">ClassBody</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e993dd69"><emu-nt params="?Yield"><a href="#prod-ClassElementList">ClassElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ClassElementList" params="Yield" id="prod-ClassElementList">
    <emu-nt params="Yield"><a href="#prod-ClassElementList">ClassElementList</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="541da32c"><emu-nt params="?Yield"><a href="#prod-ClassElement">ClassElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="27053723"><emu-nt params="?Yield"><a href="#prod-ClassElementList">ClassElementList</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt><emu-nt params="?Yield"><a href="#prod-ClassElement">ClassElement</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ClassElement" params="Yield" id="prod-ClassElement">
    <emu-nt params="Yield"><a href="#prod-ClassElement">ClassElement</a><emu-mods><emu-params>[Yield]</emu-params></emu-mods></emu-nt><emu-geq>:</emu-geq><emu-rhs a="da6bdd4c"><emu-nt params="?Yield"><a href="#prod-MethodDefinition">MethodDefinition</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="80402d39"><emu-t>static</emu-t><emu-nt params="?Yield"><a href="#prod-MethodDefinition">MethodDefinition</a><emu-mods><emu-params>[?Yield]</emu-params></emu-mods></emu-nt></emu-rhs>
    <emu-rhs a="4a0dac03"><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
    <emu-note><span class="note">Note</span>
      <p>A class definition is always <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref>.</p>
    </emu-note>

    <!-- es6num="14.5.1" -->
    <emu-clause id="sec-class-definitions-static-semantics-early-errors">
      <h1><span class="secnum">14.5.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-class-definitions-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="ClassTail" collapsed="">
    <emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d2e8467f"><emu-nt optional=""><a href="#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt><a href="#prod-ClassBody">ClassBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          <p>It is a Syntax Error if <emu-nt><a href="#prod-ClassHeritage">ClassHeritage</a></emu-nt> is not present and the following algorithm evaluates to <emu-val>true</emu-val>:</p>
          <emu-alg><ol><li>Let <var>constructor</var> be ConstructorMethod of <emu-nt><a href="#prod-ClassBody">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, return <emu-val>false</emu-val>.</li><li>Return HasDirectSuper of <var>constructor</var>.
          </li></ol></emu-alg>
        </li>
      </ul>
      <emu-grammar><emu-production name="ClassBody" collapsed="">
    <emu-nt><a href="#prod-ClassBody">ClassBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d72d43ba"><emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if PrototypePropertyNameList of <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt> contains more than one occurrence of <code>"constructor"</code>.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4bc22514"><emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if PropName of <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is not <code>"constructor"</code> and HasDirectSuper of <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if PropName of <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is <code>"constructor"</code> and SpecialMethod of <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa58c6b5"><emu-t>static</emu-t><emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if HasDirectSuper of <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if PropName of <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> is <code>"prototype"</code>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="14.5.2" -->
    <emu-clause id="sec-class-definitions-static-semantics-boundnames">
      <h1><span class="secnum">14.5.2</span>Static Semantics: BoundNames<span class="utils"><span class="anchor"><a href="#sec-class-definitions-static-semantics-boundnames">#</a></span></span></h1>
      <emu-see-also-para op="BoundNames"></emu-see-also-para>
      <emu-grammar><emu-production name="ClassDeclaration" collapsed="">
    <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ee4ae5a"><emu-t>class</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassDeclaration" collapsed="">
    <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d461f28b"><emu-t>class</emu-t><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return Â« <code>"*default*"</code> Â».
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.5.3" -->
    <emu-clause id="sec-static-semantics-constructormethod">
      <h1><span class="secnum">14.5.3</span>Static Semantics: ConstructorMethod<span class="utils"><span class="anchor"><a href="#sec-static-semantics-constructormethod">#</a></span></span></h1>
      <emu-grammar><emu-production name="ClassElementList" collapsed="">
    <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="711bcbba"><emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is the production <emu-grammar><emu-production name="ClassElement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4a0dac03"><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar> , return <emu-const>empty</emu-const>.</li><li>If IsStatic of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return <emu-const>empty</emu-const>.</li><li>If PropName of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is not <code>"constructor"</code>, return <emu-const>empty</emu-const>.</li><li>Return <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassElementList" collapsed="">
    <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9ac50b6a"><emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>head</var> be ConstructorMethod of <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt>.</li><li>If <var>head</var> is not <emu-const>empty</emu-const>, return <var>head</var>.</li><li>If <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is the production <emu-grammar><emu-production name="ClassElement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4a0dac03"><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar> , return <emu-const>empty</emu-const>.</li><li>If IsStatic of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return <emu-const>empty</emu-const>.</li><li>If PropName of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is not <code>"constructor"</code>, return <emu-const>empty</emu-const>.</li><li>Return <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Early Error rules ensure that there is only one method definition named <code>"constructor"</code> and that it is not an accessor property or generator definition.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.5.4" -->
    <emu-clause id="sec-class-definitions-static-semantics-contains">
      <h1><span class="secnum">14.5.4</span>Static Semantics: Contains<span class="utils"><span class="anchor"><a href="#sec-class-definitions-static-semantics-contains">#</a></span></span></h1>
      <p>With parameter <var>symbol</var>.</p>
      <emu-see-also-para op="Contains"></emu-see-also-para>
      <emu-grammar><emu-production name="ClassTail" collapsed="">
    <emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d2e8467f"><emu-nt optional=""><a href="#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt><a href="#prod-ClassBody">ClassBody</a></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <var>symbol</var> is <emu-nt><a href="#prod-ClassBody">ClassBody</a></emu-nt>, return <emu-val>true</emu-val>.</li><li>If <var>symbol</var> is <emu-nt><a href="#prod-ClassHeritage">ClassHeritage</a></emu-nt>, then<ol><li>If <emu-nt><a href="#prod-ClassHeritage">ClassHeritage</a></emu-nt> is present, return <emu-val>true</emu-val>; otherwise return <emu-val>false</emu-val>.</li></ol></li><li>Let <var>inHeritage</var> be <emu-nt><a href="#prod-ClassHeritage">ClassHeritage</a></emu-nt> Contains <var>symbol</var>.</li><li>If <var>inHeritage</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return the result of ComputedPropertyContains for <emu-nt><a href="#prod-ClassBody">ClassBody</a></emu-nt> with argument <var>symbol</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Static semantic rules that depend upon substructure generally do not look into class bodies except for <emu-nt><a href="#prod-PropertyName">PropertyName</a></emu-nt> productions.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.5.5" -->
    <emu-clause id="sec-class-definitions-static-semantics-computedpropertycontains">
      <h1><span class="secnum">14.5.5</span>Static Semantics: ComputedPropertyContains<span class="utils"><span class="anchor"><a href="#sec-class-definitions-static-semantics-computedpropertycontains">#</a></span></span></h1>
      <p>With parameter <var>symbol</var>.</p>
      <emu-see-also-para op="ComputedPropertyContains"></emu-see-also-para>
      <emu-grammar><emu-production name="ClassElementList" collapsed="">
    <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9ac50b6a"><emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>inList</var> be the result of ComputedPropertyContains for <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt> with argument <var>symbol</var>.</li><li>If <var>inList</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return the result of ComputedPropertyContains for <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> with argument <var>symbol</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4bc22514"><emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the result of ComputedPropertyContains for <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> with argument <var>symbol</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa58c6b5"><emu-t>static</emu-t><emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the result of ComputedPropertyContains for <emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt> with argument <var>symbol</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4a0dac03"><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.5.6" -->
    <emu-clause id="sec-class-definitions-static-semantics-hasname">
      <h1><span class="secnum">14.5.6</span>Static Semantics: HasName<span class="utils"><span class="anchor"><a href="#sec-class-definitions-static-semantics-hasname">#</a></span></span></h1>
      <emu-see-also-para op="HasName"></emu-see-also-para>
      <emu-grammar><emu-production name="ClassExpression" collapsed="">
    <emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d461f28b"><emu-t>class</emu-t><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassExpression" collapsed="">
    <emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ee4ae5a"><emu-t>class</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.5.7" -->
    <emu-clause id="sec-class-definitions-static-semantics-isconstantdeclaration">
      <h1><span class="secnum">14.5.7</span>Static Semantics: IsConstantDeclaration<span class="utils"><span class="anchor"><a href="#sec-class-definitions-static-semantics-isconstantdeclaration">#</a></span></span></h1>
      <emu-see-also-para op="IsConstantDeclaration"></emu-see-also-para>
      <emu-grammar><emu-production name="ClassDeclaration" collapsed="">
    <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ee4ae5a"><emu-t>class</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ClassDeclaration" collapsed="">
    <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d461f28b"><emu-t>class</emu-t><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.5.8" -->
    <emu-clause id="sec-class-definitions-static-semantics-isfunctiondefinition">
      <h1><span class="secnum">14.5.8</span>Static Semantics: IsFunctionDefinition<span class="utils"><span class="anchor"><a href="#sec-class-definitions-static-semantics-isfunctiondefinition">#</a></span></span></h1>
      <emu-see-also-para op="IsFunctionDefinition"></emu-see-also-para>
      <emu-grammar><emu-production name="ClassExpression" collapsed="">
    <emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d022e28b"><emu-t>class</emu-t><emu-nt optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.5.9" -->
    <emu-clause id="sec-static-semantics-isstatic">
      <h1><span class="secnum">14.5.9</span>Static Semantics: IsStatic<span class="utils"><span class="anchor"><a href="#sec-static-semantics-isstatic">#</a></span></span></h1>
      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4bc22514"><emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa58c6b5"><emu-t>static</emu-t><emu-nt><a href="#prod-MethodDefinition">MethodDefinition</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>true</emu-val>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4a0dac03"><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.5.10" -->
    <emu-clause id="sec-static-semantics-nonconstructormethoddefinitions">
      <h1><span class="secnum">14.5.10</span>Static Semantics: NonConstructorMethodDefinitions<span class="utils"><span class="anchor"><a href="#sec-static-semantics-nonconstructormethoddefinitions">#</a></span></span></h1>
      <emu-grammar><emu-production name="ClassElementList" collapsed="">
    <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="711bcbba"><emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is the production <emu-grammar><emu-production name="ClassElement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4a0dac03"><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar> , return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>If IsStatic of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is <emu-val>false</emu-val> and PropName of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is <code>"constructor"</code>, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassElementList" collapsed="">
    <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9ac50b6a"><emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>list</var> be NonConstructorMethodDefinitions of <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt>.</li><li>If <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is the production <emu-grammar><emu-production name="ClassElement" collapsed="" class=" inline">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4a0dac03"><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar> , return <var>list</var>.</li><li>If IsStatic of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is <emu-val>false</emu-val> and PropName of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is <code>"constructor"</code>, return <var>list</var>.</li><li>Append <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> to the end of <var>list</var>.</li><li>Return <var>list</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.5.11" -->
    <emu-clause id="sec-static-semantics-prototypepropertynamelist">
      <h1><span class="secnum">14.5.11</span>Static Semantics: PrototypePropertyNameList<span class="utils"><span class="anchor"><a href="#sec-static-semantics-prototypepropertynamelist">#</a></span></span></h1>
      <emu-grammar><emu-production name="ClassElementList" collapsed="">
    <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="711bcbba"><emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If PropName of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is <emu-const>empty</emu-const>, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>If IsStatic of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Return a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> containing PropName of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassElementList" collapsed="">
    <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="9ac50b6a"><emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt><emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>list</var> be PrototypePropertyNameList of <emu-nt><a href="#prod-ClassElementList">ClassElementList</a></emu-nt>.</li><li>If PropName of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is <emu-const>empty</emu-const>, return <var>list</var>.</li><li>If IsStatic of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> is <emu-val>true</emu-val>, return <var>list</var>.</li><li>Append PropName of <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> to the end of <var>list</var>.</li><li>Return <var>list</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.5.12" -->
    <emu-clause id="sec-class-definitions-static-semantics-propname">
      <h1><span class="secnum">14.5.12</span>Static Semantics: PropName<span class="utils"><span class="anchor"><a href="#sec-class-definitions-static-semantics-propname">#</a></span></span></h1>
      <emu-see-also-para op="PropName"></emu-see-also-para>
      <emu-grammar><emu-production name="ClassElement" collapsed="">
    <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4a0dac03"><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-const>empty</emu-const>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.5.14" -->
    <emu-clause id="sec-runtime-semantics-classdefinitionevaluation">
      <h1><span class="secnum">14.5.13</span>Runtime Semantics: ClassDefinitionEvaluation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-classdefinitionevaluation">#</a></span></span></h1>
      <p>With parameter <var>className</var>.</p>
      <emu-grammar><emu-production name="ClassTail" collapsed="">
    <emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b8ea6aa5"><emu-nt optional=""><a href="#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>{</emu-t><emu-nt optional=""><a href="#prod-ClassBody">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>lex</var> be the LexicalEnvironment of the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>classScope</var> be <emu-xref aoid="NewDeclarativeEnvironment"><a href="#sec-newdeclarativeenvironment">NewDeclarativeEnvironment</a></emu-xref>(<var>lex</var>).</li><li>Let <var>classScopeEnvRec</var> be <var>classScope</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.CreateImmutableBinding(<var>className</var>, <emu-val>true</emu-val>).</li></ol></li><li>If <emu-nt optional=""><a href="#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, then<ol><li>Let <var>protoParent</var> be the intrinsic object <emu-xref href="#sec-properties-of-the-object-prototype-object"><a href="#sec-properties-of-the-object-prototype-object">%ObjectPrototype%</a></emu-xref>.</li><li>Let <var>constructorParent</var> be the intrinsic object <emu-xref href="#sec-properties-of-the-function-prototype-object"><a href="#sec-properties-of-the-function-prototype-object">%FunctionPrototype%</a></emu-xref>.</li></ol></li><li>Else,<ol><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>superclass</var> be the result of evaluating <emu-nt><a href="#prod-ClassHeritage">ClassHeritage</a></emu-nt>.</li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>superclass</var>).</li><li>If <var>superclass</var> is <emu-val>null</emu-val>, then<ol><li>Let <var>protoParent</var> be <emu-val>null</emu-val>.</li><li>Let <var>constructorParent</var> be the intrinsic object <emu-xref href="#sec-properties-of-the-function-prototype-object"><a href="#sec-properties-of-the-function-prototype-object">%FunctionPrototype%</a></emu-xref>.</li></ol></li><li>Else if <emu-xref aoid="IsConstructor"><a href="#sec-isconstructor">IsConstructor</a></emu-xref>(<var>superclass</var>) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Else,<ol><li>Let <var>protoParent</var> be ? <emu-xref aoid="Get"><a href="#sec-get-o-p">Get</a></emu-xref>(<var>superclass</var>, <code>"prototype"</code>).</li><li>If <emu-xref aoid="Type"><a href="#sec-ecmascript-data-types-and-values">Type</a></emu-xref>(<var>protoParent</var>) is neither Object nor Null, throw a <emu-val>TypeError</emu-val> exception.</li><li>Let <var>constructorParent</var> be <var>superclass</var>.</li></ol></li></ol></li><li>Let <var>proto</var> be <emu-xref aoid="ObjectCreate"><a href="#sec-objectcreate">ObjectCreate</a></emu-xref>(<var>protoParent</var>).</li><li>If <emu-nt optional=""><a href="#prod-ClassBody">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>constructor</var> be <emu-const>empty</emu-const>.</li><li>Else, let <var>constructor</var> be ConstructorMethod of <emu-nt><a href="#prod-ClassBody">ClassBody</a></emu-nt>.</li><li>If <var>constructor</var> is <emu-const>empty</emu-const>, then<ol><li>If <emu-nt optional=""><a href="#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>protoParent</var> is not <emu-val>null</emu-val>, then<ol><li>Let <var>constructor</var> be the result of parsing the source text
              <pre><code class="javascript hljs"><span class="hljs-keyword">constructor</span>(... args){ <span class="hljs-keyword">super</span> (...args);}</code></pre>
              using the syntactic grammar with the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> <emu-nt params="~Yield"><a href="#prod-MethodDefinition">MethodDefinition</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt>.</li></ol></li><li>Else,<ol><li>Let <var>constructor</var> be the result of parsing the source text
              <pre><code class="javascript hljs"><span class="hljs-keyword">constructor</span>( ){ }</code></pre>
              using the syntactic grammar with the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> <emu-nt params="~Yield"><a href="#prod-MethodDefinition">MethodDefinition</a><emu-mods><emu-params>[~Yield]</emu-params></emu-mods></emu-nt>.</li></ol></li></ol></li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>classScope</var>.</li><li>Let <var>constructorInfo</var> be the result of performing DefineMethod for <var>constructor</var> with arguments <var>proto</var> and <var>constructorParent</var> as the optional <var>functionPrototype</var> argument.</li><li>Assert: <var>constructorInfo</var> is not an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>.</li><li>Let <var>F</var> be <var>constructorInfo</var>.[[Closure]].</li><li>If <emu-nt optional=""><a href="#prod-ClassHeritage">ClassHeritage</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is present and <var>protoParent</var> is not <emu-val>null</emu-val>, then set <var>F</var>.[[ConstructorKind]] to <code>"derived"</code>.</li><li>Perform <emu-xref aoid="MakeConstructor"><a href="#sec-makeconstructor">MakeConstructor</a></emu-xref>(<var>F</var>, <emu-val>false</emu-val>, <var>proto</var>).</li><li>Perform <emu-xref aoid="MakeClassConstructor"><a href="#sec-makeclassconstructor">MakeClassConstructor</a></emu-xref>(<var>F</var>).</li><li>Perform <emu-xref aoid="CreateMethodProperty"><a href="#sec-createmethodproperty">CreateMethodProperty</a></emu-xref>(<var>proto</var>, <code>"constructor"</code>, <var>F</var>).</li><li>If <emu-nt optional=""><a href="#prod-ClassBody">ClassBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>methods</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Else, let <var>methods</var> be NonConstructorMethodDefinitions of <emu-nt><a href="#prod-ClassBody">ClassBody</a></emu-nt>.</li><li>For each <emu-nt><a href="#prod-ClassElement">ClassElement</a></emu-nt> <var>m</var> in order from <var>methods</var><ol><li>If IsStatic of <var>m</var> is <emu-val>false</emu-val>, then<ol><li>Let <var>status</var> be the result of performing PropertyDefinitionEvaluation for <var>m</var> with arguments <var>proto</var> and <emu-val>false</emu-val>.</li></ol></li><li>Else,<ol><li>Let <var>status</var> be the result of performing PropertyDefinitionEvaluation for <var>m</var> with arguments <var>F</var> and <emu-val>false</emu-val>.</li></ol></li><li>If <var>status</var> is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>, then<ol><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>status</var>).</li></ol></li></ol></li><li>Set the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment to <var>lex</var>.</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Perform <var>classScopeEnvRec</var>.InitializeBinding(<var>className</var>, <var>F</var>).</li></ol></li><li>Return <var>F</var>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="14.5.15" -->
    <emu-clause id="sec-runtime-semantics-bindingclassdeclarationevaluation">
      <h1><span class="secnum">14.5.14</span>Runtime Semantics: BindingClassDeclarationEvaluation<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-bindingclassdeclarationevaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="ClassDeclaration" collapsed="">
    <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ee4ae5a"><emu-t>class</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>className</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be the result of ClassDefinitionEvaluation of <emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt> with argument <var>className</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>value</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>value</var>, <var>className</var>).</li><li>Let <var>env</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>'s LexicalEnvironment.</li><li>Perform ? <emu-xref aoid="InitializeBoundName"><a href="#sec-initializeboundname">InitializeBoundName</a></emu-xref>(<var>className</var>, <var>value</var>, <var>env</var>).</li><li>Return <var>value</var>.
      </li></ol></emu-alg>
      <emu-grammar><emu-production name="ClassDeclaration" collapsed="">
    <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d461f28b"><emu-t>class</emu-t><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return the result of ClassDefinitionEvaluation of <emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt> with argument <emu-val>undefined</emu-val>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p><emu-grammar><emu-production name="ClassDeclaration" collapsed="" class=" inline">
    <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d461f28b"><emu-t>class</emu-t><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt>
 and the setting of a name property and establishing its binding are 
handled as part of the evaluation action for that production. See  <emu-xref href="#sec-exports-runtime-semantics-evaluation"><a href="#sec-exports-runtime-semantics-evaluation">15.2.3.11</a></emu-xref>.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.5.16" -->
    <emu-clause id="sec-class-definitions-runtime-semantics-evaluation">
      <h1><span class="secnum">14.5.15</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-class-definitions-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="ClassDeclaration" collapsed="">
    <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ee4ae5a"><emu-t>class</emu-t><emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Let <var>status</var> be the result of BindingClassDeclarationEvaluation of this <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>status</var>).</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 1</span>
        <p><emu-grammar><emu-production name="ClassDeclaration" collapsed="" class=" inline">
    <emu-nt><a href="#prod-ClassDeclaration">ClassDeclaration</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d461f28b"><emu-t>class</emu-t><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar> only occurs as part of an <emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt> and is never directly evaluated.</p>
      </emu-note>
      <emu-grammar><emu-production name="ClassExpression" collapsed="">
    <emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d022e28b"><emu-t>class</emu-t><emu-nt optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If <emu-nt optional=""><a href="#prod-BindingIdentifier">BindingIdentifier</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt> is not present, let <var>className</var> be <emu-val>undefined</emu-val>.</li><li>Else, let <var>className</var> be StringValue of <emu-nt><a href="#prod-BindingIdentifier">BindingIdentifier</a></emu-nt>.</li><li>Let <var>value</var> be the result of ClassDefinitionEvaluation of <emu-nt><a href="#prod-ClassTail">ClassTail</a></emu-nt> with argument <var>className</var>.</li><li><emu-xref aoid="ReturnIfAbrupt"><a href="#sec-returnifabrupt">ReturnIfAbrupt</a></emu-xref>(<var>value</var>).</li><li>If <var>className</var> is not <emu-val>undefined</emu-val>, then<ol><li>Let <var>hasNameProperty</var> be ? <emu-xref aoid="HasOwnProperty"><a href="#sec-hasownproperty">HasOwnProperty</a></emu-xref>(<var>value</var>, <code>"name"</code>).</li><li>If <var>hasNameProperty</var> is <emu-val>false</emu-val>, then<ol><li>Perform <emu-xref aoid="SetFunctionName"><a href="#sec-setfunctionname">SetFunctionName</a></emu-xref>(<var>value</var>, <var>className</var>).</li></ol></li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<var>value</var>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 2</span>
        <p>If the class definition included a <code>name</code> static method then that method is not over-written with a <code>name</code> data property for the class name.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>

  <!-- es6num="14.6" -->
  <emu-clause id="sec-tail-position-calls">
    <h1><span class="secnum">14.6</span>Tail Position Calls<span class="utils"><span class="anchor"><a href="#sec-tail-position-calls">#</a></span></span></h1>

    <!-- es6num="14.6.1" -->
    <emu-clause id="sec-isintailposition" aoid="IsInTailPosition">
      <h1><span class="secnum">14.6.1</span>Static Semantics: IsInTailPosition(<var>nonterminal</var>)<span class="utils"><span class="anchor"><a href="#sec-isintailposition">#</a></span></span></h1>
      <p>The abstract operation IsInTailPosition with argument <var>nonterminal</var> performs the following steps:</p>
      <emu-alg><ol><li>Assert: <var>nonterminal</var> is a parsed grammar production.</li><li>If the source code matching <var>nonterminal</var> is <emu-xref href="#non-strict-code"><a href="#non-strict-code">non-strict code</a></emu-xref>, return <emu-val>false</emu-val>.</li><li>If <var>nonterminal</var> is not contained within a <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> or <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Let <var>body</var> be the <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> or <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt> that most closely contains <var>nonterminal</var>.</li><li>If <var>body</var> is the <emu-nt><a href="#prod-FunctionBody">FunctionBody</a></emu-nt> of a <emu-nt><a href="#prod-GeneratorBody">GeneratorBody</a></emu-nt>, return <emu-val>false</emu-val>.</li><li>Return the result of HasProductionInTailPosition of <var>body</var> with argument <var>nonterminal</var>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>Tail Position calls are only defined in <emu-xref href="#sec-strict-mode-code"><a href="#sec-strict-mode-code">strict mode code</a></emu-xref> because of a common non-standard language extension (see  <emu-xref href="#sec-addrestrictedfunctionproperties"><a href="#sec-addrestrictedfunctionproperties">9.2.7</a></emu-xref>) that enables observation of the chain of caller contexts.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="14.6.2" -->
    <emu-clause id="sec-static-semantics-hasproductionintailposition">
      <h1><span class="secnum">14.6.2</span>Static Semantics: HasProductionInTailPosition<span class="utils"><span class="anchor"><a href="#sec-static-semantics-hasproductionintailposition">#</a></span></span></h1>
      <p>With parameter <var>nonterminal</var>.</p>
      <emu-note><span class="note">Note</span>
        <p><var>nonterminal</var> is a parsed grammar production that represents a specific range of source text. When the following algorithms compare <var>nonterminal</var> to other grammar symbols they are testing whether the same source text was matched by both symbols.</p>
      </emu-note>

      <!-- es6num="14.6.2.1" -->
      <emu-clause id="sec-statement-rules">
        <h1><span class="secnum">14.6.2.1</span>Statement Rules<span class="utils"><span class="anchor"><a href="#sec-statement-rules">#</a></span></span></h1>
        <emu-grammar><emu-production name="ConciseBody" collapsed="">
    <emu-nt><a href="#prod-ConciseBody">ConciseBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d4fc7da4"><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="StatementList" collapsed="">
    <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0db4597a"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>has</var> be HasProductionInTailPosition of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with argument <var>nonterminal</var>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="FunctionStatementList" collapsed="">
    <emu-nt><a href="#prod-FunctionStatementList">FunctionStatementList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production>
<emu-production name="StatementListItem" collapsed="">
    <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d6f37721"><emu-nt><a href="#prod-Declaration">Declaration</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="Statement">
    <emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8b0c0df0"><emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="7338aabb"><emu-nt><a href="#prod-EmptyStatement">EmptyStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="82c424b7"><emu-nt><a href="#prod-ExpressionStatement">ExpressionStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="1d7d329e"><emu-nt><a href="#prod-ContinueStatement">ContinueStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="ab8baff9"><emu-nt><a href="#prod-BreakStatement">BreakStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="867b4090"><emu-nt><a href="#prod-ThrowStatement">ThrowStatement</a></emu-nt></emu-rhs>
    <emu-rhs a="21212edb"><emu-nt><a href="#prod-DebuggerStatement">DebuggerStatement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="Block" collapsed="">
    <emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production>
<emu-production name="ReturnStatement" collapsed="">
    <emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0b293381"><emu-t>return</emu-t><emu-t>;</emu-t></emu-rhs>
</emu-production>
<emu-production name="LabelledItem" collapsed="">
    <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fa7a943c"><emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bf521b70"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="ecf18944"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="2590ad81"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="8ea6608b"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="ee6f9a77"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="6f7c3304"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-ForDeclaration">ForDeclaration</a></emu-nt><emu-t>of</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="81ba5a4a"><emu-t>{</emu-t><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="16e86a13"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>else</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>has</var> be HasProductionInTailPosition of the first <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>nonterminal</var>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return HasProductionInTailPosition of the second <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="IfStatement" collapsed="">
    <emu-nt><a href="#prod-IfStatement">IfStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f6819570"><emu-t>if</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="IterationStatement">
    <emu-nt><a href="#prod-IterationStatement">IterationStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="24e70caa"><emu-t>do</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-t>;</emu-t></emu-rhs>
    <emu-rhs a="f7627bf3"><emu-t>while</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="fc33bcf0"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="48e766b4"><emu-t>for</emu-t><emu-t>(</emu-t><emu-t>var</emu-t><emu-nt><a href="#prod-VariableDeclarationList">VariableDeclarationList</a></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
    <emu-rhs a="93c07e45"><emu-t>for</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-LexicalDeclaration">LexicalDeclaration</a></emu-nt><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>;</emu-t><emu-nt optional=""><a href="#prod-Expression">Expression</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="WithStatement" collapsed="">
    <emu-nt><a href="#prod-WithStatement">WithStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="23bd2456"><emu-t>with</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Statement">Statement</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-Statement">Statement</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LabelledStatement">
    <emu-nt><a href="#prod-LabelledStatement">LabelledStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="51b6efb5"><emu-nt><a href="#prod-LabelIdentifier">LabelIdentifier</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-LabelledItem">LabelledItem</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ReturnStatement" collapsed="">
    <emu-nt><a href="#prod-ReturnStatement">ReturnStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b4f7595f"><emu-t>return</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>;</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="SwitchStatement" collapsed="">
    <emu-nt><a href="#prod-SwitchStatement">SwitchStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="515acffe"><emu-t>switch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="CaseBlock" collapsed="">
    <emu-nt><a href="#prod-CaseBlock">CaseBlock</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="503b8396"><emu-t>{</emu-t><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-nt optional=""><a href="#prod-CaseClauses">CaseClauses</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt><emu-t>}</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>has</var> be <emu-val>false</emu-val>.</li><li>If the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is present, let <var>has</var> be HasProductionInTailPosition of the first <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with argument <var>nonterminal</var>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Let <var>has</var> be HasProductionInTailPosition of the <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt> with argument <var>nonterminal</var>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>If the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> is present, let <var>has</var> be HasProductionInTailPosition of the second <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with argument <var>nonterminal</var>.</li><li>Return <var>has</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="CaseClauses" collapsed="">
    <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="68374923"><emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt><emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>has</var> be HasProductionInTailPosition of <emu-nt><a href="#prod-CaseClauses">CaseClauses</a></emu-nt> with argument <var>nonterminal</var>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="CaseClause" collapsed="">
    <emu-nt><a href="#prod-CaseClause">CaseClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="c76d0d30"><emu-t>case</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="DefaultClause" collapsed="">
    <emu-nt><a href="#prod-DefaultClause">DefaultClause</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6782073e"><emu-t>default</emu-t><emu-t>:</emu-t><emu-nt optional=""><a href="#prod-StatementList">StatementList</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> is present, return HasProductionInTailPosition of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with argument <var>nonterminal</var>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="a8714e57"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-Catch">Catch</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5ec68ab9"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="TryStatement" collapsed="">
    <emu-nt><a href="#prod-TryStatement">TryStatement</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="1b19737c"><emu-t>try</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt><emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-nt><a href="#prod-Finally">Finally</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-Finally">Finally</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="Catch" collapsed="">
    <emu-nt><a href="#prod-Catch">Catch</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="ddc13c36"><emu-t>catch</emu-t><emu-t>(</emu-t><emu-nt><a href="#prod-CatchParameter">CatchParameter</a></emu-nt><emu-t>)</emu-t><emu-nt><a href="#prod-Block">Block</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-Block">Block</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="14.6.2.2" -->
      <emu-clause id="sec-expression-rules">
        <h1><span class="secnum">14.6.2.2</span>Expression Rules<span class="utils"><span class="anchor"><a href="#sec-expression-rules">#</a></span></span></h1>
        <emu-note><span class="note">Note</span>
          <p>A potential tail position call that is immediately followed by return <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref> of the call result is also a possible tail position call. Function calls cannot return reference values, so such a <emu-xref aoid="GetValue"><a href="#sec-getvalue">GetValue</a></emu-xref> operation will always return the same value as the actual function call result.</p>
        </emu-note>
        <emu-grammar><emu-production name="AssignmentExpression">
    <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="5202c84b"><emu-nt><a href="#prod-YieldExpression">YieldExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="2bdf3b10"><emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt></emu-rhs>
    <emu-rhs a="8a33cee0"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>=</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="5f3a8747"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-nt><a href="#prod-AssignmentOperator">AssignmentOperator</a></emu-nt><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BitwiseANDExpression" collapsed="">
    <emu-nt><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e6a36509"><emu-nt><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a></emu-nt><emu-t>&amp;</emu-t><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BitwiseXORExpression" collapsed="">
    <emu-nt><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b463172c"><emu-nt><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a></emu-nt><emu-t>^</emu-t><emu-nt><a href="#prod-BitwiseANDExpression">BitwiseANDExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="BitwiseORExpression" collapsed="">
    <emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="016dfa90"><emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt><emu-t>|</emu-t><emu-nt><a href="#prod-BitwiseXORExpression">BitwiseXORExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="EqualityExpression">
    <emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="757a342c"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>==</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="70ddad59"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>!=</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="e0753bf6"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>===</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="2113edaf"><emu-nt><a href="#prod-EqualityExpression">EqualityExpression</a></emu-nt><emu-t>!==</emu-t><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="RelationalExpression">
    <emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="f87a0200"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&lt;</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="a16358ee"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&gt;</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="ff231f22"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&lt;=</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="498fdf34"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>&gt;=</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="d440bdac"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>instanceof</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="f66b493e"><emu-nt><a href="#prod-RelationalExpression">RelationalExpression</a></emu-nt><emu-t>in</emu-t><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ShiftExpression">
    <emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4b572e10"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&lt;&lt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="19a05cdb"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="6df3c84c"><emu-nt><a href="#prod-ShiftExpression">ShiftExpression</a></emu-nt><emu-t>&gt;&gt;&gt;</emu-t><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="AdditiveExpression">
    <emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="0e497b17"><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-t>+</emu-t><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="ee054414"><emu-nt><a href="#prod-AdditiveExpression">AdditiveExpression</a></emu-nt><emu-t>-</emu-t><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="MultiplicativeExpression">
    <emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="fb9fe2a0"><emu-nt><a href="#prod-MultiplicativeExpression">MultiplicativeExpression</a></emu-nt><emu-nt><a href="#prod-MultiplicativeOperator">MultiplicativeOperator</a></emu-nt><emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ExponentiationExpression">
    <emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d1905fcc"><emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-t>**</emu-t><emu-nt><a href="#prod-ExponentiationExpression">ExponentiationExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="UpdateExpression">
    <emu-nt><a href="#prod-UpdateExpression">UpdateExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8bf8e31b"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>++</emu-t></emu-rhs>
    <emu-rhs a="8d1d2d72"><emu-nt><a href="#prod-LeftHandSideExpression">LeftHandSideExpression</a></emu-nt><emu-t>--</emu-t></emu-rhs>
    <emu-rhs a="5701b162"><emu-t>++</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="3a745559"><emu-t>--</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="UnaryExpression">
    <emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="bfdc08c3"><emu-t>delete</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="e5d8038f"><emu-t>void</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="ab1a2cb9"><emu-t>typeof</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="3b49039a"><emu-t>+</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="a03cca5c"><emu-t>-</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="07d36a79"><emu-t>~</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="b8b0af72"><emu-t>!</emu-t><emu-nt><a href="#prod-UnaryExpression">UnaryExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="CallExpression">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="949290c3"><emu-nt><a href="#prod-SuperCall">SuperCall</a></emu-nt></emu-rhs>
    <emu-rhs a="d94d9445"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="bba9526d"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="NewExpression" collapsed="">
    <emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e753fad7"><emu-t>new</emu-t><emu-nt><a href="#prod-NewExpression">NewExpression</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="MemberExpression">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="6bbe1777"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>[</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>]</emu-t></emu-rhs>
    <emu-rhs a="7eb6e3f7"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-t>.</emu-t><emu-nt><a href="#prod-IdentifierName">IdentifierName</a></emu-nt></emu-rhs>
    <emu-rhs a="5f8b7394"><emu-nt><a href="#prod-SuperProperty">SuperProperty</a></emu-nt></emu-rhs>
    <emu-rhs a="c81ee20f"><emu-nt><a href="#prod-MetaProperty">MetaProperty</a></emu-nt></emu-rhs>
    <emu-rhs a="705abe84"><emu-t>new</emu-t><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="PrimaryExpression">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="8cee0c59"><emu-t>this</emu-t></emu-rhs>
    <emu-rhs a="2361f19d"><emu-nt><a href="#prod-IdentifierReference">IdentifierReference</a></emu-nt></emu-rhs>
    <emu-rhs a="92e97e03"><emu-nt><a href="#prod-Literal">Literal</a></emu-nt></emu-rhs>
    <emu-rhs a="1bf32393"><emu-nt><a href="#prod-ArrayLiteral">ArrayLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="cd178913"><emu-nt><a href="#prod-ObjectLiteral">ObjectLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="242eeccd"><emu-nt><a href="#prod-FunctionExpression">FunctionExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="d8ce6db1"><emu-nt><a href="#prod-ClassExpression">ClassExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="abb7f7f4"><emu-nt><a href="#prod-GeneratorExpression">GeneratorExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="31b672e8"><emu-nt><a href="#prod-RegularExpressionLiteral">RegularExpressionLiteral</a></emu-nt></emu-rhs>
    <emu-rhs a="d9922ce8"><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="Expression">
    <emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d4fc7da4"><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
    <emu-rhs a="0b039a65"><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>,</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ConditionalExpression" collapsed="">
    <emu-nt><a href="#prod-ConditionalExpression">ConditionalExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="42ec48bb"><emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-t>?</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt><emu-t>:</emu-t><emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>has</var> be HasProductionInTailPosition of the first <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt> with argument <var>nonterminal</var>.</li><li>If <var>has</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return HasProductionInTailPosition of the second <emu-nt><a href="#prod-AssignmentExpression">AssignmentExpression</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LogicalANDExpression" collapsed="">
    <emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="3df1d74a"><emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt><emu-t>&amp;&amp;</emu-t><emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-BitwiseORExpression">BitwiseORExpression</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="LogicalORExpression" collapsed="">
    <emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b6453dd9"><emu-nt><a href="#prod-LogicalORExpression">LogicalORExpression</a></emu-nt><emu-t>||</emu-t><emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-LogicalANDExpression">LogicalANDExpression</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="CallExpression">
    <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="be44becf"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
    <emu-rhs a="42e81a1c"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-nt><a href="#prod-Arguments">Arguments</a></emu-nt></emu-rhs>
    <emu-rhs a="adcef8e1"><emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If this <emu-nt><a href="#prod-CallExpression">CallExpression</a></emu-nt> is <var>nonterminal</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="MemberExpression">
    <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="149e7618"><emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt><emu-nt><a href="#prod-TemplateLiteral">TemplateLiteral</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If this <emu-nt><a href="#prod-MemberExpression">MemberExpression</a></emu-nt> is <var>nonterminal</var>, return <emu-val>true</emu-val>.</li><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="PrimaryExpression" collapsed="">
    <emu-nt><a href="#prod-PrimaryExpression">PrimaryExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cab6f5d7"><emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>expr</var> be CoveredParenthesizedExpression of <emu-nt><a href="#prod-CoverParenthesizedExpressionAndArrowParameterList">CoverParenthesizedExpressionAndArrowParameterList</a></emu-nt>.</li><li>Return HasProductionInTailPosition of <var>expr</var> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ParenthesizedExpression">
    <emu-nt><a href="#prod-ParenthesizedExpression">ParenthesizedExpression</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="4ba6ef9d"><emu-t>(</emu-t><emu-nt><a href="#prod-Expression">Expression</a></emu-nt><emu-t>)</emu-t></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return HasProductionInTailPosition of <emu-nt><a href="#prod-Expression">Expression</a></emu-nt> with argument <var>nonterminal</var>.
        </li></ol></emu-alg>
      </emu-clause>
    </emu-clause>

    <!-- es6num="14.6.3" -->
    <emu-clause id="sec-preparefortailcall" aoid="PrepareForTailCall">
      <h1><span class="secnum">14.6.3</span>Runtime Semantics: PrepareForTailCall ( )<span class="utils"><span class="anchor"><a href="#sec-preparefortailcall">#</a></span></span></h1>
      <p>The abstract operation PrepareForTailCall performs the following steps:</p>
      <emu-alg><ol><li>Let <var>leafContext</var> be the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Suspend <var>leafContext</var>.</li><li>Pop <var>leafContext</var> from the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref>. The <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> now on the top of the stack becomes the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Assert: <var>leafContext</var> has no further use. It will never be activated as the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.
      </li></ol></emu-alg>
      <p>A tail position call must either release any transient internal resources associated with the currently executing function <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> before invoking the target function or reuse those resources in support of the target function.</p>
      <emu-note><span class="note">Note</span>
        <p>For example, a tail position call should only grow an 
implementation's activation record stack by the amount that the size of 
the target function's activation record exceeds the size of the calling 
function's activation record. If the target function's activation record
 is smaller, then the total size of the stack should decrease.</p>
      </emu-note>
    </emu-clause>
  </emu-clause>
</emu-clause>

<!-- es6num="15" -->
<emu-clause id="sec-ecmascript-language-scripts-and-modules">
  <h1><span class="secnum">15</span>ECMAScript Language: Scripts and Modules<span class="utils"><span class="anchor"><a href="#sec-ecmascript-language-scripts-and-modules">#</a></span></span></h1>

  <!-- es6num="15.1" -->
  <emu-clause id="sec-scripts">
    <h1><span class="secnum">15.1</span>Scripts<span class="utils"><span class="anchor"><a href="#sec-scripts">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="Script" id="prod-Script">
    <emu-nt><a href="#prod-Script">Script</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="08c8df8e"><emu-nt optional=""><a href="#prod-ScriptBody">ScriptBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ScriptBody" id="prod-ScriptBody">
    <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b02829b9"><emu-nt params="~Yield, ~Return"><a href="#prod-StatementList">StatementList</a><emu-mods><emu-params>[~Yield, ~Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="15.1.1" -->
    <emu-clause id="sec-scripts-static-semantics-early-errors">
      <h1><span class="secnum">15.1.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-scripts-static-semantics-early-errors">#</a></span></span></h1>
      <emu-grammar><emu-production name="Script" collapsed="">
    <emu-nt><a href="#prod-Script">Script</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="b78f99cc"><emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt> contains any duplicate entries.
        
        </li>
        <li>
          It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt>.
        
        </li>
      </ul>
      <emu-grammar><emu-production name="ScriptBody" collapsed="">
    <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf403a0c"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <ul>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> Contains <code>super</code> unless the source code containing <code>super</code> is eval code that is being processed by a <emu-xref href="#sec-function-calls-runtime-semantics-evaluation"><a href="#sec-function-calls-runtime-semantics-evaluation">direct eval</a></emu-xref>. Additional <emu-xref href="#early-error"><a href="#early-error">early error</a></emu-xref> rules for <code>super</code> within <emu-xref href="#sec-function-calls-runtime-semantics-evaluation"><a href="#sec-function-calls-runtime-semantics-evaluation">direct eval</a></emu-xref> are defined in  <emu-xref href="#sec-performeval"><a href="#sec-performeval">18.2.1.1</a></emu-xref>.
        
        </li>
        <li>
          It is a Syntax Error if <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> Contains <emu-nt><a href="#prod-NewTarget">NewTarget</a></emu-nt> unless the source code containing <emu-nt><a href="#prod-NewTarget">NewTarget</a></emu-nt> is eval code that is being processed by a <emu-xref href="#sec-function-calls-runtime-semantics-evaluation"><a href="#sec-function-calls-runtime-semantics-evaluation">direct eval</a></emu-xref> that is contained in function code that is not the function code of an <emu-nt><a href="#prod-ArrowFunction">ArrowFunction</a></emu-nt>.
        
        </li>
        <li>
          It is a Syntax Error if ContainsDuplicateLabels of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with argument Â« Â» is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with argument Â« Â» is <emu-val>true</emu-val>.
        
        </li>
        <li>
          It is a Syntax Error if ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> with arguments Â« Â» and Â« Â» is <emu-val>true</emu-val>.
        
        </li>
      </ul>
    </emu-clause>

    <!-- es6num="15.1.2" -->
    <emu-clause id="sec-static-semantics-isstrict">
      <h1><span class="secnum">15.1.2</span>Static Semantics: IsStrict<span class="utils"><span class="anchor"><a href="#sec-static-semantics-isstrict">#</a></span></span></h1>
      <emu-grammar><emu-production name="ScriptBody" collapsed="">
    <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf403a0c"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>If the <emu-xref href="#directive-prologue"><a href="#directive-prologue">Directive Prologue</a></emu-xref> of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt> contains a <emu-xref href="#use-strict-directive"><a href="#use-strict-directive">Use Strict Directive</a></emu-xref>, return <emu-val>true</emu-val>; otherwise, return <emu-val>false</emu-val>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="15.1.3" -->
    <emu-clause id="sec-scripts-static-semantics-lexicallydeclarednames">
      <h1><span class="secnum">15.1.3</span>Static Semantics: LexicallyDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-scripts-static-semantics-lexicallydeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="ScriptBody" collapsed="">
    <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf403a0c"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return TopLevelLexicallyDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>At the top level of a <emu-nt><a href="#prod-Script">Script</a></emu-nt>, function declarations are treated like var declarations rather than like lexical declarations.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="15.1.4" -->
    <emu-clause id="sec-scripts-static-semantics-lexicallyscopeddeclarations">
      <h1><span class="secnum">15.1.4</span>Static Semantics: LexicallyScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-scripts-static-semantics-lexicallyscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="LexicallyScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="ScriptBody" collapsed="">
    <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf403a0c"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return TopLevelLexicallyScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="15.1.5" -->
    <emu-clause id="sec-scripts-static-semantics-vardeclarednames">
      <h1><span class="secnum">15.1.5</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-scripts-static-semantics-vardeclarednames">#</a></span></span></h1>
      <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
      <emu-grammar><emu-production name="ScriptBody" collapsed="">
    <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf403a0c"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return TopLevelVarDeclaredNames of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="15.1.6" -->
    <emu-clause id="sec-scripts-static-semantics-varscopeddeclarations">
      <h1><span class="secnum">15.1.6</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-scripts-static-semantics-varscopeddeclarations">#</a></span></span></h1>
      <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
      <emu-grammar><emu-production name="ScriptBody" collapsed="">
    <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="cf403a0c"><emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return TopLevelVarScopedDeclarations of <emu-nt><a href="#prod-StatementList">StatementList</a></emu-nt>.
      </li></ol></emu-alg>
    </emu-clause>

    <emu-clause id="sec-script-semantics-runtime-semantics-evaluation">
      <h1><span class="secnum">15.1.7</span>Runtime Semantics: Evaluation<span class="utils"><span class="anchor"><a href="#sec-script-semantics-runtime-semantics-evaluation">#</a></span></span></h1>
      <emu-grammar><emu-production name="Script" collapsed="">
    <emu-nt><a href="#prod-Script">Script</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
      <emu-alg><ol><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).
      </li></ol></emu-alg>
    </emu-clause>

    <emu-clause id="sec-script-records">
      <h1><span class="secnum">15.1.8</span>Script Records<span class="utils"><span class="anchor"><a href="#sec-script-records">#</a></span></span></h1>

      <p>A  <dfn id="script-record">Script Record</dfn> encapsulates information about a script being evaluated. Each script record contains the fields listed in  <emu-xref href="#table-script-records"><a href="#table-script-records">Table 36</a></emu-xref>.</p>

      <emu-table id="table-script-records" caption="Script Record Fields"><figure><figcaption>Table 36: <emu-xref href="#script-record"><a href="#script-record">Script Record</a></emu-xref> Fields</figcaption>
        <table>
          <thead>
          <tr>
            <th>
              Field Name
            
            </th>
            <th>
              Value Type
            
            </th>
            <th>
              Meaning
            
            </th>
          </tr>
          </thead>
          <tbody>
          <tr>
            <td>
              [[Realm]]
            
            </td>
            <td>
              <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>
            
            </td>
            <td>
              The <emu-xref href="#realm"><a href="#realm">realm</a></emu-xref> within which this script was created. <emu-val>undefined</emu-val> if not yet assigned.
            
            </td>
          </tr>
          <tr>
            <td>
              [[Environment]]
            
            </td>
            <td>
              <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> | <emu-val>undefined</emu-val>
            
            </td>
            <td>
              The <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> containing the top level bindings for this script. This field is set when the script is instantiated.
            
            </td>
          </tr>
          <tr>
            <td>
              [[ECMAScriptCode]]
            
            </td>
            <td>
              a parse result
            
            </td>
            <td>
              The result of parsing the source text of this module using <emu-nt><a href="#prod-Script">Script</a></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.
            
            </td>
          </tr>
          <tr>
            <td>
              [[HostDefined]]
            
            </td>
            <td>
              Any, default value is <emu-val>undefined</emu-val>.
            
            </td>
            <td>
              Field reserved for use by host environments that need to associate additional information with a script.
            
            </td>
          </tr>
          </tbody>
        </table>
      </figure></emu-table>
    </emu-clause>

    <emu-clause id="sec-parse-script" aoid="ParseScript">
      <h1><span class="secnum">15.1.9</span>ParseScript ( <var>sourceText</var>, <var>realm</var>, <var>hostDefined</var> )<span class="utils"><span class="anchor"><a href="#sec-parse-script">#</a></span></span></h1>

      <p>The abstract operation ParseScript with arguments <var>sourceText</var>, <var>realm</var>, and <var>hostDefined</var> creates a <emu-xref href="#script-record"><a href="#script-record">Script Record</a></emu-xref> based upon the result of parsing <var>sourceText</var> as a <emu-nt><a href="#prod-Script">Script</a></emu-nt>. ParseScript performs the following steps:</p>

      <emu-alg><ol><li>Assert: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href="#sec-ecmascript-language-source-code"><a href="#sec-ecmascript-language-source-code">10</a></emu-xref>).</li><li>Parse <var>sourceText</var> using <emu-nt><a href="#prod-Script">Script</a></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> and analyze the parse result for any Early Error conditions. If the parse was successful and no early errors were found, let <var>body</var> be the resulting parse tree. Otherwise, let <var>body</var> be a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of one or more <emu-val>SyntaxError</emu-val> or <emu-val>ReferenceError</emu-val> objects representing the parsing errors and/or early errors. Parsing and <emu-xref href="#early-error"><a href="#early-error">early error</a></emu-xref> detection may be interweaved in an implementation dependent manner. If more than one parsing error or <emu-xref href="#early-error"><a href="#early-error">early error</a></emu-xref> is present, the number and ordering of error objects in the list is implementation dependent, but at least one must be present.</li><li>If <var>body</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of errors, then return <var>body</var>.</li><li>Return <emu-xref href="#script-record"><a href="#script-record">Script Record</a></emu-xref> {[[Realm]]: <var>realm</var>, [[Environment]]: <emu-val>undefined</emu-val>, [[ECMAScriptCode]]: <var>body</var>, [[HostDefined]]: <var>hostDefined</var>}.
      </li></ol></emu-alg>
      <emu-note><span class="note">Note</span>
        <p>An implementation may parse script source text and analyze it
 for Early Error conditions prior to evaluation of ParseScript for that 
script source text. However, the reporting of any errors must be 
deferred until the point where this specification actually performs 
ParseScript upon that source text.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="15.1.7" -->
    <emu-clause id="sec-runtime-semantics-scriptevaluation" aoid="ScriptEvaluation">
      <h1><span class="secnum">15.1.10</span>ScriptEvaluation ( <var>scriptRecord</var> )<span class="utils"><span class="anchor"><a href="#sec-runtime-semantics-scriptevaluation">#</a></span></span></h1>

      <emu-alg><ol><li>Let <var>globalEnv</var> be <var>scriptRecord</var>.[[Realm]].[[GlobalEnv]].</li><li>Let <var>scriptCxt</var> be a new ECMAScript code <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref>.</li><li>Set the Function of <var>scriptCxt</var> to <emu-val>null</emu-val>.</li><li>Set the <emu-xref href="#realm"><a href="#realm">Realm</a></emu-xref> of <var>scriptCxt</var> to <var>scriptRecord</var>.[[Realm]].</li><li>Set the ScriptOrModule of <var>scriptCxt</var> to <var>scriptRecord</var>.</li><li>Set the VariableEnvironment of <var>scriptCxt</var> to <var>globalEnv</var>.</li><li>Set the LexicalEnvironment of <var>scriptCxt</var> to <var>globalEnv</var>.</li><li>Suspend the currently <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Push <var>scriptCxt</var> on to the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref>; <var>scriptCxt</var> is now the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Let <var>scriptBody</var> be <var>scriptRecord</var>.[[ECMAScriptCode]].</li><li>Let <var>result</var> be <emu-xref aoid="GlobalDeclarationInstantiation"><a href="#sec-globaldeclarationinstantiation">GlobalDeclarationInstantiation</a></emu-xref>(<var>scriptBody</var>, <var>globalEnv</var>).</li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const>, then<ol><li>Let <var>result</var> be the result of evaluating <var>scriptBody</var>.</li></ol></li><li>If <var>result</var>.[[Type]] is <emu-const>normal</emu-const> and <var>result</var>.[[Value]] is <emu-const>empty</emu-const>, then<ol><li>Let <var>result</var> be <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Suspend <var>scriptCxt</var> and remove it from the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref>.</li><li>Assert: The <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> is not empty.</li><li>Resume the context that is now on the top of the <emu-xref href="#execution-context-stack"><a href="#execution-context-stack">execution context stack</a></emu-xref> as the <emu-xref href="#running-execution-context"><a href="#running-execution-context">running execution context</a></emu-xref>.</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>result</var>).
      </li></ol></emu-alg>
    </emu-clause>

    <!-- es6num="15.1.8" -->
    <emu-clause id="sec-globaldeclarationinstantiation" aoid="GlobalDeclarationInstantiation">
      <h1><span class="secnum">15.1.11</span>Runtime Semantics: GlobalDeclarationInstantiation (<var>script</var>, <var>env</var>)<span class="utils"><span class="anchor"><a href="#sec-globaldeclarationinstantiation">#</a></span></span></h1>
      <emu-note><span class="note">Note 1</span>
        <p>When an <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> is established for evaluating scripts, declarations are instantiated in the current <emu-xref href="#global-environment"><a href="#global-environment">global environment</a></emu-xref>. Each global binding declared in the code is instantiated.</p>
      </emu-note>
      <p>GlobalDeclarationInstantiation is performed as follows using arguments <var>script</var> and <var>env</var>. <var>script</var> is the <emu-nt><a href="#prod-ScriptBody">ScriptBody</a></emu-nt> for which the <emu-xref href="#sec-execution-contexts"><a href="#sec-execution-contexts">execution context</a></emu-xref> is being established. <var>env</var> is the global lexical environment in which bindings are to be created.</p>
      <!--
        WARNING: If you add, remove, rename, or repurpose any variable names
                 within this algorithm, you may need to update
                 #sec-web-compat-globaldeclarationinstantiation accordingly.
      -->
      <emu-alg><ol><li>Let <var>envRec</var> be <var>env</var>'s <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">EnvironmentRecord</a></emu-xref>.</li><li>Assert: <var>envRec</var> is a global <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref>.</li><li>Let <var>lexNames</var> be the LexicallyDeclaredNames of <var>script</var>.</li><li>Let <var>varNames</var> be the VarDeclaredNames of <var>script</var>.</li><li>For each <var>name</var> in <var>lexNames</var>, do<ol><li>If <var>envRec</var>.HasVarDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>If <var>envRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li><li>Let <var>hasRestrictedGlobal</var> be ? <var>envRec</var>.HasRestrictedGlobalProperty(<var>name</var>).</li><li>If <var>hasRestrictedGlobal</var> is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>For each <var>name</var> in <var>varNames</var>, do<ol><li>If <var>envRec</var>.HasLexicalDeclaration(<var>name</var>) is <emu-val>true</emu-val>, throw a <emu-val>SyntaxError</emu-val> exception.</li></ol></li><li>Let <var>varDeclarations</var> be the VarScopedDeclarations of <var>script</var>.</li><li>Let <var>functionsToInitialize</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Let <var>declaredFunctionNames</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, in reverse list order do<ol><li>If <var>d</var> is neither a <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> or a <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>, then<ol><li>Assert: <var>d</var> is either a <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt> or a <emu-nt><a href="#prod-GeneratorDeclaration">GeneratorDeclaration</a></emu-nt>.</li><li>NOTE If there are multiple <emu-nt><a href="#prod-FunctionDeclaration">FunctionDeclaration</a></emu-nt>s for the same name, the last declaration is used.</li><li>Let <var>fn</var> be the sole element of the BoundNames of <var>d</var>.</li><li>If <var>fn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>fnDefinable</var> be ? <var>envRec</var>.CanDeclareGlobalFunction(<var>fn</var>).</li><li>If <var>fnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>Append <var>fn</var> to <var>declaredFunctionNames</var>.</li><li>Insert <var>d</var> as the first element of <var>functionsToInitialize</var>.</li></ol></li></ol></li></ol></li><li>Let <var>declaredVarNames</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>For each <var>d</var> in <var>varDeclarations</var>, do<ol><li>If <var>d</var> is a <emu-nt><a href="#prod-VariableDeclaration">VariableDeclaration</a></emu-nt> or a <emu-nt><a href="#prod-ForBinding">ForBinding</a></emu-nt>, then<ol><li>For each String <var>vn</var> in the BoundNames of <var>d</var>, do<ol><li>If <var>vn</var> is not an element of <var>declaredFunctionNames</var>, then<ol><li>Let <var>vnDefinable</var> be ? <var>envRec</var>.CanDeclareGlobalVar(<var>vn</var>).</li><li>If <var>vnDefinable</var> is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.</li><li>If <var>vn</var> is not an element of <var>declaredVarNames</var>, then<ol><li>Append <var>vn</var> to <var>declaredVarNames</var>.</li></ol></li></ol></li></ol></li></ol></li></ol></li><li>NOTE: No abnormal terminations occur after this algorithm step if the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> is an ordinary object. However, if the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> is a Proxy exotic object it may exhibit behaviours that cause abnormal terminations in some of the following steps.</li><li>NOTE: Annex <emu-xref href="#sec-web-compat-globaldeclarationinstantiation"><a href="#sec-web-compat-globaldeclarationinstantiation">B.3.3.2</a></emu-xref> adds additional steps at this point.</li><li>Let <var>lexDeclarations</var> be the LexicallyScopedDeclarations of <var>script</var>.</li><li>For each element <var>d</var> in <var>lexDeclarations</var> do<ol><li>NOTE Lexically declared names are only instantiated here but not initialized.</li><li>For each element <var>dn</var> of the BoundNames of <var>d</var> do<ol><li>If IsConstantDeclaration of <var>d</var> is <emu-val>true</emu-val>, then<ol><li>Perform ? <var>envRec</var>.CreateImmutableBinding(<var>dn</var>, <emu-val>true</emu-val>).</li></ol></li><li>Else,<ol><li>Perform ? <var>envRec</var>.CreateMutableBinding(<var>dn</var>, <emu-val>false</emu-val>).</li></ol></li></ol></li></ol></li><li>For each production <var>f</var> in <var>functionsToInitialize</var>, do<ol><li>Let <var>fn</var> be the sole element of the BoundNames of <var>f</var>.</li><li>Let <var>fo</var> be the result of performing InstantiateFunctionObject for <var>f</var> with argument <var>env</var>.</li><li>Perform ? <var>envRec</var>.CreateGlobalFunctionBinding(<var>fn</var>, <var>fo</var>, <emu-val>false</emu-val>).</li></ol></li><li>For each String <var>vn</var> in <var>declaredVarNames</var>, in list order do<ol><li>Perform ? <var>envRec</var>.CreateGlobalVarBinding(<var>vn</var>, <emu-val>false</emu-val>).</li></ol></li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-const>empty</emu-const>).
      </li></ol></emu-alg>
      <emu-note><span class="note">Note 2</span>
        <p>Early errors specified in  <emu-xref href="#sec-scripts-static-semantics-early-errors"><a href="#sec-scripts-static-semantics-early-errors">15.1.1</a></emu-xref>
 prevent name conflicts between function/var declarations and 
let/const/class declarations as well as redeclaration of let/const/class
 bindings for declaration contained within a single <emu-nt><a href="#prod-Script">Script</a></emu-nt>. However, such conflicts and redeclarations that span more than one <emu-nt><a href="#prod-Script">Script</a></emu-nt>
 are detected as runtime errors during GlobalDeclarationInstantiation. 
If any such errors are detected, no bindings are instantiated for the 
script. However, if the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> is defined using Proxy exotic objects then the runtime tests for conflicting declarations may be unreliable resulting in an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref> and some global declarations not being instantiated. If this occurs, the code for the <emu-nt><a href="#prod-Script">Script</a></emu-nt> is not evaluated.</p>
        <p>Unlike explicit var or function declarations, properties that are directly created on the <emu-xref href="#global-object"><a href="#global-object">global object</a></emu-xref> result in global bindings that may be shadowed by let/const/class declarations.</p>
      </emu-note>
    </emu-clause>

    <!-- es6num="15.1.9" -->
    <emu-clause id="sec-scriptevaluationjob" aoid="ScriptEvaluationJob">
      <h1><span class="secnum">15.1.12</span>Runtime Semantics: ScriptEvaluationJob ( <var>sourceText</var>, <var>hostDefined</var> )<span class="utils"><span class="anchor"><a href="#sec-scriptevaluationjob">#</a></span></span></h1>
      <p>The job ScriptEvaluationJob with parameters <var>sourceText</var> and <var>hostDefined</var> parses, validates, and evaluates <var>sourceText</var> as a <emu-nt><a href="#prod-Script">Script</a></emu-nt>.</p>
      <emu-alg><ol><li>Assert: <var>sourceText</var> is an ECMAScript source text (see clause <emu-xref href="#sec-ecmascript-language-source-code"><a href="#sec-ecmascript-language-source-code">10</a></emu-xref>).</li><li>Let <var>realm</var> be <emu-xref href="#current-realm"><a href="#current-realm">the current Realm Record</a></emu-xref>.</li><li>Let <var>s</var> be <emu-xref aoid="ParseScript"><a href="#sec-parse-script">ParseScript</a></emu-xref>(<var>sourceText</var>, <var>realm</var>, <var>hostDefined</var>).</li><li>If <var>s</var> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of errors, then<ol><li>Perform <emu-xref aoid="HostReportErrors"><a href="#sec-host-report-errors">HostReportErrors</a></emu-xref>(<var>s</var>).</li><li>Return <emu-xref aoid="NormalCompletion"><a href="#sec-normalcompletion">NormalCompletion</a></emu-xref>(<emu-val>undefined</emu-val>).</li></ol></li><li>Let <var>status</var> be <emu-xref aoid="ScriptEvaluation"><a href="#sec-runtime-semantics-scriptevaluation">ScriptEvaluation</a></emu-xref>(<var>s</var>).</li><li>Return <emu-xref aoid="Completion"><a href="#sec-completion-record-specification-type">Completion</a></emu-xref>(<var>status</var>).
      </li></ol></emu-alg>
    </emu-clause>
  </emu-clause>

  <!-- es6num="15.2" -->
  <emu-clause id="sec-modules">
    <h1><span class="secnum">15.2</span>Modules<span class="utils"><span class="anchor"><a href="#sec-modules">#</a></span></span></h1>
    <h2>Syntax</h2>
    <emu-grammar><emu-production name="Module" id="prod-Module">
    <emu-nt><a href="#prod-Module">Module</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="52f49b96"><emu-nt optional=""><a href="#prod-ModuleBody">ModuleBody</a><emu-mods><emu-opt>opt</emu-opt></emu-mods></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ModuleBody" id="prod-ModuleBody">
    <emu-nt><a href="#prod-ModuleBody">ModuleBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="89010d7d"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ModuleItemList" id="prod-ModuleItemList">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="029ec31e"><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
    <emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production>
<emu-production name="ModuleItem" id="prod-ModuleItem">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
    <emu-rhs a="298e81b0"><emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt></emu-rhs>
    <emu-rhs a="9e141e58"><emu-nt params="~Yield, ~Return"><a href="#prod-StatementListItem">StatementListItem</a><emu-mods><emu-params>[~Yield, ~Return]</emu-params></emu-mods></emu-nt></emu-rhs>
</emu-production></emu-grammar>

    <!-- es6num="15.2.1" -->
    <emu-clause id="sec-module-semantics">
      <h1><span class="secnum">15.2.1</span>Module Semantics<span class="utils"><span class="anchor"><a href="#sec-module-semantics">#</a></span></span></h1>

      <!-- es6num="15.2.1.1" -->
      <emu-clause id="sec-module-semantics-static-semantics-early-errors">
        <h1><span class="secnum">15.2.1.1</span>Static Semantics: Early Errors<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-early-errors">#</a></span></span></h1>
        <emu-grammar><emu-production name="ModuleBody" collapsed="">
    <emu-nt><a href="#prod-ModuleBody">ModuleBody</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="89010d7d"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <ul>
          <li>
            It is a Syntax Error if the LexicallyDeclaredNames of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> contains any duplicate entries.
          
          </li>
          <li>
            It is a Syntax Error if any element of the LexicallyDeclaredNames of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> also occurs in the VarDeclaredNames of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.
          
          </li>
          <li>
            It is a Syntax Error if the ExportedNames of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> contains any duplicate entries.
          
          </li>
          <li>
            It is a Syntax Error if any element of the ExportedBindings of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> does not also occur in either the VarDeclaredNames of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>, or the LexicallyDeclaredNames of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.
          
          </li>
          <li>
            It is a Syntax Error if <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> Contains <code>super</code>.
          
          </li>
          <li>
            It is a Syntax Error if <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> Contains <emu-nt><a href="#prod-NewTarget">NewTarget</a></emu-nt>.
          
          </li>
          <li>
            It is a Syntax Error if ContainsDuplicateLabels of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> with argument Â« Â» is <emu-val>true</emu-val>.
          
          </li>
          <li>
            It is a Syntax Error if ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> with argument Â« Â» is <emu-val>true</emu-val>.
          
          </li>
          <li>
            It is a Syntax Error if ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> with arguments Â« Â» and Â« Â» is <emu-val>true</emu-val>.
          
          </li>
        </ul>
        <emu-note><span class="note">Note</span>
          <p>The duplicate ExportedNames rule implies that multiple <code>export default</code> <emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt> items within a <emu-nt><a href="#prod-ModuleBody">ModuleBody</a></emu-nt>
 is a Syntax Error. Additional error conditions relating to conflicting 
or duplicate declarations are checked during module linking prior to 
evaluation of a <emu-nt><a href="#prod-Module">Module</a></emu-nt>. If any such errors are detected the <emu-nt><a href="#prod-Module">Module</a></emu-nt> is not evaluated.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="15.2.1.2" -->
      <emu-clause id="sec-module-semantics-static-semantics-containsduplicatelabels">
        <h1><span class="secnum">15.2.1.2</span>Static Semantics: ContainsDuplicateLabels<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-containsduplicatelabels">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsDuplicateLabels"></emu-see-also-para>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>hasDuplicates</var> be ContainsDuplicateLabels of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasDuplicates</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsDuplicateLabels of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
    <emu-rhs a="298e81b0"><emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.3" -->
      <emu-clause id="sec-module-semantics-static-semantics-containsundefinedbreaktarget">
        <h1><span class="secnum">15.2.1.3</span>Static Semantics: ContainsUndefinedBreakTarget<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-containsundefinedbreaktarget">#</a></span></span></h1>
        <p>With argument <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsUndefinedBreakTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> with argument <var>labelSet</var>.</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedBreakTarget of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt> with argument <var>labelSet</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
    <emu-rhs a="298e81b0"><emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.4" -->
      <emu-clause id="sec-module-semantics-static-semantics-containsundefinedcontinuetarget">
        <h1><span class="secnum">15.2.1.4</span>Static Semantics: ContainsUndefinedContinueTarget<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-containsundefinedcontinuetarget">#</a></span></span></h1>
        <p>With arguments <var>iterationSet</var> and <var>labelSet</var>.</p>
        <emu-see-also-para op="ContainsUndefinedContinueTarget"></emu-see-also-para>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>hasUndefinedLabels</var> be ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».</li><li>If <var>hasUndefinedLabels</var> is <emu-val>true</emu-val>, return <emu-val>true</emu-val>.</li><li>Return ContainsUndefinedContinueTarget of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt> with arguments <var>iterationSet</var> and Â« Â».
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
    <emu-rhs a="298e81b0"><emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return <emu-val>false</emu-val>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.5" -->
      <emu-clause id="sec-module-semantics-static-semantics-exportedbindings">
        <h1><span class="secnum">15.2.1.5</span>Static Semantics: ExportedBindings<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-exportedbindings">#</a></span></span></h1>
        <emu-see-also-para op="ExportedBindings"></emu-see-also-para>
        <emu-note><span class="note">Note</span>
          <p>ExportedBindings are the locally bound names that are explicitly associated with a <emu-nt><a href="#prod-Module">Module</a></emu-nt>'s ExportedNames.</p>
        </emu-note>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be ExportedBindings of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the ExportedBindings of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
    <emu-rhs a="d791d1c9"><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.6" -->
      <emu-clause id="sec-module-semantics-static-semantics-exportednames">
        <h1><span class="secnum">15.2.1.6</span>Static Semantics: ExportedNames<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-exportednames">#</a></span></span></h1>
        <emu-see-also-para op="ExportedNames"></emu-see-also-para>
        <emu-note><span class="note">Note</span>
          <p>ExportedNames are the externally visible names that a <emu-nt><a href="#prod-Module">Module</a></emu-nt> explicitly maps to one of its local name bindings.</p>
        </emu-note>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be ExportedNames of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the ExportedNames of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem" collapsed="">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="298e81b0"><emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the ExportedNames of <emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
    <emu-rhs a="d791d1c9"><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.7" -->
      <emu-clause id="sec-module-semantics-static-semantics-exportentries">
        <h1><span class="secnum">15.2.1.7</span>Static Semantics: ExportEntries<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-exportentries">#</a></span></span></h1>
        <emu-see-also-para op="ExportEntries"></emu-see-also-para>
        <emu-grammar><emu-production name="Module" collapsed="">
    <emu-nt><a href="#prod-Module">Module</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>entries</var> be ExportEntries of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.</li><li>Append to <var>entries</var> the elements of the ExportEntries of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt>.</li><li>Return <var>entries</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
    <emu-rhs a="d791d1c9"><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.8" -->
      <emu-clause id="sec-module-semantics-static-semantics-importentries">
        <h1><span class="secnum">15.2.1.8</span>Static Semantics: ImportEntries<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-importentries">#</a></span></span></h1>
        <emu-see-also-para op="ImportEntries"></emu-see-also-para>
        <emu-grammar><emu-production name="Module" collapsed="">
    <emu-nt><a href="#prod-Module">Module</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>entries</var> be ImportEntries of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.</li><li>Append to <var>entries</var> the elements of the ImportEntries of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt>.</li><li>Return <var>entries</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="298e81b0"><emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt></emu-rhs>
    <emu-rhs a="d791d1c9"><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.9" -->
      <emu-clause id="sec-importedlocalnames" aoid="ImportedLocalNames">
        <h1><span class="secnum">15.2.1.9</span>Static Semantics: ImportedLocalNames ( <var>importEntries</var> )<span class="utils"><span class="anchor"><a href="#sec-importedlocalnames">#</a></span></span></h1>
        <p>The abstract operation ImportedLocalNames with argument <var>importEntries</var> creates a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of all of the local name bindings defined by a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ImportEntry Records (see  <emu-xref href="#table-39"><a href="#table-39">Table 40</a></emu-xref>). ImportedLocalNames performs the following steps:</p>
        <emu-alg><ol><li>Let <var>localNames</var> be a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>For each ImportEntry <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> <var>i</var> in <var>importEntries</var>, do<ol><li>Append <var>i</var>.[[LocalName]] to <var>localNames</var>.</li></ol></li><li>Return <var>localNames</var>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.10" -->
      <emu-clause id="sec-module-semantics-static-semantics-modulerequests">
        <h1><span class="secnum">15.2.1.10</span>Static Semantics: ModuleRequests<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-modulerequests">#</a></span></span></h1>
        <emu-see-also-para op="ModuleRequests"></emu-see-also-para>
        <emu-grammar><emu-production name="Module" collapsed="">
    <emu-nt><a href="#prod-Module">Module</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="029ec31e"><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return ModuleRequests of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>moduleNames</var> be ModuleRequests of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.</li><li>Let <var>additionalNames</var> be ModuleRequests of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt>.</li><li>Append to <var>moduleNames</var> each element of <var>additionalNames</var> that is not already an element of <var>moduleNames</var>.</li><li>Return <var>moduleNames</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem" collapsed="">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d791d1c9"><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.11" -->
      <emu-clause id="sec-module-semantics-static-semantics-lexicallydeclarednames">
        <h1><span class="secnum">15.2.1.11</span>Static Semantics: LexicallyDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-lexicallydeclarednames">#</a></span></span></h1>
        <emu-see-also-para op="LexicallyDeclaredNames"></emu-see-also-para>
        <emu-note><span class="note">Note 1</span>
          <p>The LexicallyDeclaredNames of a <emu-nt><a href="#prod-Module">Module</a></emu-nt> includes the names of all of its imported bindings.</p>
        </emu-note>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be LexicallyDeclaredNames of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the LexicallyDeclaredNames of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem" collapsed="">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return the BoundNames of <emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem" collapsed="">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="298e81b0"><emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt>, return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.</li><li>Return the BoundNames of <emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem" collapsed="">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="d791d1c9"><emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return LexicallyDeclaredNames of <emu-nt><a href="#prod-StatementListItem">StatementListItem</a></emu-nt>.
        </li></ol></emu-alg>
        <emu-note><span class="note">Note 2</span>
          <p>At the top level of a <emu-nt><a href="#prod-Module">Module</a></emu-nt>, function declarations are treated like lexical declarations rather than like var declarations.</p>
        </emu-note>
      </emu-clause>

      <!-- es6num="15.2.1.12" -->
      <emu-clause id="sec-module-semantics-static-semantics-lexicallyscopeddeclarations">
        <h1><span class="secnum">15.2.1.12</span>Static Semantics: LexicallyScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-lexicallyscopeddeclarations">#</a></span></span></h1>
        <emu-see-also-para op="LexicallyScopedDeclarations"></emu-see-also-para>
        <emu-grammar><emu-production name="Module" collapsed="">
    <emu-nt><a href="#prod-Module">Module</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>declarations</var> be LexicallyScopedDeclarations of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the LexicallyScopedDeclarations of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt>.</li><li>Return <var>declarations</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem" collapsed="">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.13" -->
      <emu-clause id="sec-module-semantics-static-semantics-vardeclarednames">
        <h1><span class="secnum">15.2.1.13</span>Static Semantics: VarDeclaredNames<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-vardeclarednames">#</a></span></span></h1>
        <emu-see-also-para op="VarDeclaredNames"></emu-see-also-para>
        <emu-grammar><emu-production name="Module" collapsed="">
    <emu-nt><a href="#prod-Module">Module</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>names</var> be VarDeclaredNames of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.</li><li>Append to <var>names</var> the elements of the VarDeclaredNames of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt>.</li><li>Return <var>names</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem" collapsed="">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem" collapsed="">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="298e81b0"><emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt>, return BoundNames of <emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt>.</li><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.14" -->
      <emu-clause id="sec-module-semantics-static-semantics-varscopeddeclarations">
        <h1><span class="secnum">15.2.1.14</span>Static Semantics: VarScopedDeclarations<span class="utils"><span class="anchor"><a href="#sec-module-semantics-static-semantics-varscopeddeclarations">#</a></span></span></h1>
        <emu-see-also-para op="VarScopedDeclarations"></emu-see-also-para>
        <emu-grammar><emu-production name="Module" collapsed="">
    <emu-nt><a href="#prod-Module">Module</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="37b9c04c"><emu-gann>[empty]</emu-gann></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItemList" collapsed="">
    <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="75ddb725"><emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt><emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Let <var>declarations</var> be VarScopedDeclarations of <emu-nt><a href="#prod-ModuleItemList">ModuleItemList</a></emu-nt>.</li><li>Append to <var>declarations</var> the elements of the VarScopedDeclarations of <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt>.</li><li>Return <var>declarations</var>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem" collapsed="">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="e0559377"><emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
        <emu-grammar><emu-production name="ModuleItem" collapsed="">
    <emu-nt><a href="#prod-ModuleItem">ModuleItem</a></emu-nt><emu-geq>:</emu-geq><emu-rhs a="298e81b0"><emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt></emu-rhs>
</emu-production></emu-grammar>
        <emu-alg><ol><li>If <emu-nt><a href="#prod-ExportDeclaration">ExportDeclaration</a></emu-nt> is <code>export</code> <emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt>, return VarScopedDeclarations of <emu-nt><a href="#prod-VariableStatement">VariableStatement</a></emu-nt>.</li><li>Return a new empty <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>.
        </li></ol></emu-alg>
      </emu-clause>

      <!-- es6num="15.2.1.15" -->
      <emu-clause id="sec-abstract-module-records">
        <h1><span class="secnum">15.2.1.15</span>Abstract Module Records<span class="utils"><span class="anchor"><a href="#sec-abstract-module-records">#</a></span></span></h1>
        <p>A  <dfn>Module Record</dfn> encapsulates structural 
information about the imports and exports of a single module. This 
information is used to link the imports and exports of sets of connected
 modules. A Module Record includes four fields that are only used when 
evaluating a module.</p>
        <p>For specification purposes Module Record values are values of the <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref>
 specification type and can be thought of as existing in a simple 
object-oriented hierarchy where Module Record is an abstract class with 
concrete subclasses. This specification only defines a single Module 
Record concrete subclass named <emu-xref href="#sec-source-text-module-records"><a href="#sec-source-text-module-records">Source Text Module Record</a></emu-xref>.
 Other specifications and implementations may define additional Module 
Record subclasses corresponding to alternative module definition 
facilities that they defined.</p>
        <p>Module Record defines the fields listed in  <emu-xref href="#table-36"><a href="#table-36">Table 37</a></emu-xref>. All Module Definition subclasses include at least those fields. Module Record also defines the abstract method list in  <emu-xref href="#table-37"><a href="#table-37">Table 38</a></emu-xref>. All Module definition subclasses must provide concrete implementations of these abstract methods.</p>
        <emu-table id="table-36" caption="Module Record Fields"><figure><figcaption>Table 37: Module Record Fields</figcaption>
          <table>
            <thead>
            <tr>
              <th>
                Field Name
              
              </th>
              <th>
                Value Type
              
              </th>
              <th>
                Meaning
              
              </th>
            </tr>
            </thead>
            <tbody>
            <tr>
              <td>
                [[Realm]]
              
              </td>
              <td>
                <emu-xref href="#realm-record"><a href="#realm-record">Realm Record</a></emu-xref> | <emu-val>undefined</emu-val>
              
              </td>
              <td>
                The <emu-xref href="#realm"><a href="#realm">Realm</a></emu-xref> within which this module was created. <emu-val>undefined</emu-val> if not yet assigned.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Environment]]
              
              </td>
              <td>
                <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> | <emu-val>undefined</emu-val>
              
              </td>
              <td>
                The <emu-xref href="#sec-lexical-environments"><a href="#sec-lexical-environments">Lexical Environment</a></emu-xref> containing the top level bindings for this module. This field is set when the module is instantiated.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Namespace]]
              
              </td>
              <td>
                Object | <emu-val>undefined</emu-val>
              
              </td>
              <td>
                The Module Namespace Object (<emu-xref href="#sec-module-namespace-objects"><a href="#sec-module-namespace-objects">26.3</a></emu-xref>) if one has been created for this module. Otherwise <emu-val>undefined</emu-val>.
              
              </td>
            </tr>
            <tr>
              <td>
                [[Evaluated]]
              
              </td>
              <td>
                Boolean
              
              </td>
              <td>
                Initially <emu-val>false</emu-val>, <emu-val>true</emu-val> if evaluation of this module has started. Remains <emu-val>true</emu-val> when evaluation completes, even if it is an <emu-xref href="#sec-completion-record-specification-type"><a href="#sec-completion-record-specification-type">abrupt completion</a></emu-xref>.
              
              </td>
            </tr>
            <tr>
              <td>
                [[HostDefined]]
              
              </td>
              <td>
                Any, default value is <emu-val>undefined</emu-val>.
              
              </td>
              <td>
                Field reserved for use by host environments that need to associate additional information with a module.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <emu-table id="table-37" caption="Abstract Methods of Module Records"><figure><figcaption>Table 38: Abstract Methods of Module Records</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Method
              
              </th>
              <th>
                Purpose
              
              </th>
            </tr>
            <tr>
              <td>
                GetExportedNames(exportStarSet)
              
              </td>
              <td>
                Return a list of all names that are either directly or indirectly exported from this module.
              
              </td>
            </tr>
            <tr>
              <td>
                ResolveExport(exportName, resolveSet, exportStarSet)
              
              </td>
              <td>
                Return the binding of a name exported by this module. Bindings are represented by a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> of the form {[[Module]]: Module Record, [[BindingName]]: String}
              
              </td>
            </tr>
            <tr>
              <td>
                ModuleDeclarationInstantiation()
              
              </td>
              <td>
                Transitively resolve all module dependencies and create a module <emu-xref href="#sec-environment-records"><a href="#sec-environment-records">Environment Record</a></emu-xref> for the module.
              
              </td>
            </tr>
            <tr>
              <td>
                ModuleEvaluation()
              
              </td>
              <td>
                <p>Do nothing if this module has already been evaluated.
 Otherwise, transitively evaluate all module dependences of this module 
and then evaluate this module.</p>
                <p>ModuleDeclarationInstantiation must be completed prior to invoking this method.</p>
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
      </emu-clause>

      <!-- es6num="15.2.1.16" -->
      <emu-clause id="sec-source-text-module-records">
        <h1><span class="secnum">15.2.1.16</span>Source Text Module Records<span class="utils"><span class="anchor"><a href="#sec-source-text-module-records">#</a></span></span></h1>
        <p>A  <dfn>Source Text Module Record</dfn> is used to represent information about a module that was defined from ECMAScript source text (10) that was parsed using the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref> <emu-nt><a href="#prod-Module">Module</a></emu-nt>.
 Its fields contain digested information about the names that are 
imported by the module and its concrete methods use this digest to link,
 instantiate, and evaluate the module.</p>
        <p>In addition to the fields, defined in  <emu-xref href="#table-36"><a href="#table-36">Table 37</a></emu-xref>, Source Text Module Records have the additional fields listed in  <emu-xref href="#table-38"><a href="#table-38">Table 39</a></emu-xref>. Each of these fields initially has the value <emu-val>undefined</emu-val>.</p>
        <emu-table id="table-38" caption="Additional Fields of Source Text Module Records"><figure><figcaption>Table 39: Additional Fields of Source Text Module Records</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Field Name
              
              </th>
              <th>
                Value Type
              
              </th>
              <th>
                Meaning
              
              </th>
            </tr>
            <tr>
              <td>
                [[ECMAScriptCode]]
              
              </td>
              <td>
                a parse result
              
              </td>
              <td>
                The result of parsing the source text of this module using <emu-nt><a href="#prod-Module">Module</a></emu-nt> as the <emu-xref href="#sec-context-free-grammars"><a href="#sec-context-free-grammars">goal symbol</a></emu-xref>.
              
              </td>
            </tr>
            <tr>
              <td>
                [[RequestedModules]]
              
              </td>
              <td>
                <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of String
              
              </td>
              <td>
                A <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of all the <emu-nt><a href="#prod-ModuleSpecifier">ModuleSpecifier</a></emu-nt> strings used by the module represented by this record to request the importation of a module. The <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> is source code occurrence ordered.
              
              </td>
            </tr>
            <tr>
              <td>
                [[ImportEntries]]
              
              </td>
              <td>
                <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ImportEntry Records
              
              </td>
              <td>
                A <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ImportEntry records derived from the code of this module.
              
              </td>
            </tr>
            <tr>
              <td>
                [[LocalExportEntries]]
              
              </td>
              <td>
                <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ExportEntry Records
              
              </td>
              <td>
                A <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.
              
              </td>
            </tr>
            <tr>
              <td>
                [[IndirectExportEntries]]
              
              </td>
              <td>
                <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ExportEntry Records
              
              </td>
              <td>
                A <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ExportEntry records derived from the code of this module that correspond to reexported imports that occur within the module.
              
              </td>
            </tr>
            <tr>
              <td>
                [[StarExportEntries]]
              
              </td>
              <td>
                <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref> of ExportEntry Records
              
              </td>
              <td>
                A <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">List</a></emu-xref>
 of ExportEntry records derived from the code of this module that 
correspond to export * declarations that occur within the module.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <p>An ImportEntry <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> is a <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> that digests information about a single declarative import. Each ImportEntry <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> has the fields defined in  <emu-xref href="#table-39"><a href="#table-39">Table 40</a></emu-xref>:</p>
        <emu-table id="table-39" caption="ImportEntry Record Fields"><figure><figcaption>Table 40: ImportEntry <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> Fields</figcaption>
          <table>
            <tbody>
            <tr>
              <th>
                Field Name
              
              </th>
              <th>
                Value Type
              
              </th>
              <th>
                Meaning
              
              </th>
            </tr>
            <tr>
              <td>
                [[ModuleRequest]]
              
              </td>
              <td>
                String
              
              </td>
              <td>
                String value of the <emu-nt><a href="#prod-ModuleSpecifier">ModuleSpecifier</a></emu-nt> of the <emu-nt><a href="#prod-ImportDeclaration">ImportDeclaration</a></emu-nt>.
              
              </td>
            </tr>
            <tr>
              <td>
                [[ImportName]]
              
              </td>
              <td>
                String
              
              </td>
              <td>
                The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value <code>"*"</code> indicates that the import request is for the target module's namespace object.
              
              </td>
            </tr>
            <tr>
              <td>
                [[LocalName]]
              
              </td>
              <td>
                String
              
              </td>
              <td>
                The name that is used to locally access the imported value from within the importing module.
              
              </td>
            </tr>
            </tbody>
          </table>
        </figure></emu-table>
        <emu-note><span class="note">Note 1</span>
          <p><emu-xref href="#table-40"><a href="#table-40">Table 41</a></emu-xref> gives examples of ImportEntry records fields used to represent the syntactic import forms:</p>
          <emu-table id="table-40" caption="Import Forms Mappings to ImportEntry Records" informative=""><figure><figcaption>Table 41 (Informative): Import Forms Mappings to ImportEntry Records</figcaption>
            <table>
              <tbody>
              <tr>
                <th>
                  Import Statement Form
                
                </th>
                <th>
                  [[ModuleRequest]]
                
                </th>
                <th>
                  [[ImportName]]
                
                </th>
                <th>
                  [[LocalName]]
                
                </th>
              </tr>
              <tr>
                <td>
                  <code>import v from "mod";</code>
                
                </td>
                <td>
                  <code>"mod"</code>
                
                </td>
                <td>
                  <code>"default"</code>
                
                </td>
                <td>
                  <code>"v"</code>
                
                </td>
              </tr>
              <tr>
                <td>
                  <code>import * as ns from "mod";</code>
                
                </td>
                <td>
                  <code>"mod"</code>
                
                </td>
                <td>
                  <code>"*"</code>
                
                </td>
                <td>
                  <code>"ns"</code>
                
                </td>
              </tr>
              <tr>
                <td>
                  <code>import {x} from "mod";</code>
                
                </td>
                <td>
                  <code>"mod"</code>
                
                </td>
                <td>
                  <code>"x"</code>
                
                </td>
                <td>
                  <code>"x"</code>
                
                </td>
              </tr>
              <tr>
                <td>
                  <code>import {x as v} from "mod";</code>
                
                </td>
                <td>
                  <code>"mod"</code>
                
                </td>
                <td>
                  <code>"x"</code>
                
                </td>
                <td>
                  <code>"v"</code>
                
                </td>
              </tr>
              <tr>
                <td>
                  <code>import "mod";</code>
                
                </td>
                <td colspan="3">
                  An ImportEntry <emu-xref href="#sec-list-and-record-specification-type"><a href="#sec-list-and-record-specification-type">Record</a></emu-xref> is not created.
                
                </td>
              </tr>
              </tbody>
            </table>
          </figure></emu-table>
        </emu-note>
        <p>An ExportEntry <emu-xref href="#sec-list-and-record-specification-type"></emu-xref></p></emu-clause></emu-clause></emu-clause></emu-clause></body></html>